{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"themes/black-blue/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/css/gitment.min.css","path":"css/gitment.min.css","modified":1,"renderable":1},{"_id":"themes/black-blue/source/css/loading-style.css","path":"css/loading-style.css","modified":1,"renderable":1},{"_id":"themes/black-blue/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/black-blue/source/css/showshare.css","path":"css/showshare.css","modified":1,"renderable":1},{"_id":"themes/black-blue/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/black-blue/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/black-blue/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/black-blue/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/black-blue/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/black-blue/source/js/TweenMax.js","path":"js/TweenMax.js","modified":1,"renderable":1},{"_id":"themes/black-blue/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/black-blue/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/black-blue/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/black-blue/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/black-blue/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/black-blue/source/js/embed.js","path":"js/embed.js","modified":1,"renderable":1},{"_id":"themes/black-blue/source/js/pace.js","path":"js/pace.js","modified":1,"renderable":1},{"_id":"themes/black-blue/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/black-blue/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/coderwall.png","path":"img/coderwall.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/delicious.png","path":"img/delicious.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/douban.png","path":"img/douban.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/facebook.png","path":"img/facebook.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/github.png","path":"img/github.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/google.png","path":"img/google.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/linkedin.png","path":"img/linkedin.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/mail.png","path":"img/mail.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/pinboard.png","path":"img/pinboard.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/pinterest.png","path":"img/pinterest.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/qq.png","path":"img/qq.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/rss.png","path":"img/rss.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/wechat.png","path":"img/wechat.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/twitter.png","path":"img/twitter.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/weibo.png","path":"img/weibo.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/zhihu.png","path":"img/zhihu.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/js/TweenMax.min.js","path":"js/TweenMax.min.js","modified":1,"renderable":1},{"_id":"themes/black-blue/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/black-blue/source/background/bg.jpg","path":"background/bg.jpg","modified":1,"renderable":1},{"_id":"themes/black-blue/source/css/pace/pace-theme-flash.css","path":"css/pace/pace-theme-flash.css","modified":1,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/css/font-awesome.css","path":"font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/black-blue/source/js/404/jquery.parallaxify-0.0.2.min.js","path":"js/404/jquery.parallaxify-0.0.2.min.js","modified":1,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/black-blue/source/js/404/jquery-2.0.3.min.js","path":"js/404/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/black-blue/source/img/bg.jpg","path":"img/bg.jpg","modified":1,"renderable":1},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"5bf02de266d56960527e1bdce73ae9f4a59d7177","modified":1478522401000},{"_id":"source/robots.txt","hash":"e8c28e7367cca9b66ac06fc8fbb07adacdb2b2ca","modified":1495771643000},{"_id":"themes/black-blue/.DS_Store","hash":"a546d9a3bd15bf98bc131551d6748ca9b5b5073a","modified":1523098515439},{"_id":"themes/black-blue/.gitignore","hash":"0b09eddca98f48b62fe045db35c0166571d71dcb","modified":1495769530000},{"_id":"themes/black-blue/README.md","hash":"2b668039dccff104d8e3cc46588540c1d109b577","modified":1523085049000},{"_id":"themes/black-blue/_config.yml","hash":"8d6cea025d9edabfb42db5476f41a989ffcbb970","modified":1523108535651},{"_id":"themes/black-blue/package.json","hash":"ec3f79ea003611c88754ac1c016f825e94655ffe","modified":1523084314293},{"_id":"source/404/index.md","hash":"34edc9819d33d4d62ba6a8c228e01ee554de7887","modified":1495064532000},{"_id":"source/about/index.md","hash":"5c558513efc80be01d7c2d7a314facb25110543d","modified":1501253537000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1521850265542},{"_id":"source/_posts/ajax-study.md","hash":"a0aec2ea2349e2a244a361139d61be81d3d06b2b","modified":1495779147000},{"_id":"source/_posts/ajax-jsonp.md","hash":"17f5d1f3f16e0885d664ae2b4d1cff40cf32c4dc","modified":1495779147000},{"_id":"source/_posts/best-js-snippet.md","hash":"a0b27e2245977a518b278c62b1be7fb3c8e08eed","modified":1495064532000},{"_id":"source/_posts/bestblog.md","hash":"81f16a417e48f065cc32443c43a0059dfc8e5fa6","modified":1494862068000},{"_id":"source/_posts/buy-computer.md","hash":"097c677a75fc6d391190ef33119a5e9bafc90a61","modified":1496634536000},{"_id":"source/_posts/coder-study.md","hash":"8bb048fa0539e3e83687deccddd7745e7cae8ead","modified":1501458893000},{"_id":"source/_posts/descNode.md","hash":"1d48f3d5bf27e242a65c93676ad8edbecc7be49c","modified":1522075566679},{"_id":"source/_posts/digital-info.md","hash":"e6f0d066722b5059f520e4794315ad4fad02df95","modified":1495779147000},{"_id":"source/_posts/dream.md","hash":"2c3e0933d09809bddab7dd85fbde59aa2c89b046","modified":1495779147000},{"_id":"source/_posts/dsbasic.md","hash":"70e76b96430ab3cf6c7e3d67ddafd3b3ecc805fd","modified":1522283451561},{"_id":"source/_posts/dslock.md","hash":"6923cc3746b4169e50ed150ae99b9b51e1d3289c","modified":1522075515631},{"_id":"source/_posts/eggjs-action.md","hash":"1f3ae5a6b0e7fe35fd0df9f5a00601dd4e714a79","modified":1495779147000},{"_id":"source/_posts/fullprj-desc.md","hash":"3be096ad68dc688747405e79ed4e84dfe1db6ad0","modified":1495779147000},{"_id":"source/_posts/free-books.md","hash":"dfc47360aa92c060afdb9ffa29f7b41bf5f47b80","modified":1495779147000},{"_id":"source/_posts/ghost-blog.md","hash":"6afa9a8e48e0a81769f0e9297fcee1cac6c0d3f5","modified":1495779147000},{"_id":"source/_posts/git-svn.md","hash":"cfde861384f6513a24812cb9dc7fe6cd8613dcec","modified":1495779147000},{"_id":"source/_posts/git-config-study.md","hash":"35c5dc0440c0c86531afb1e378278c2edb2622c8","modified":1495779147000},{"_id":"source/_posts/hexo-config.md","hash":"9de16bef3fb00eb31c1176abfe62e0ff6f6be965","modified":1495779147000},{"_id":"source/_posts/hexo-githup-blog.md","hash":"b13a2bb24a841c8955c1e18474b7d63be90bd3b9","modified":1495779147000},{"_id":"source/_posts/hexo-theme.md","hash":"9fe3a0cc3d6b087e1aabbf86e150c69df0c4029e","modified":1509716909709},{"_id":"source/_posts/java-interview.md","hash":"f82e5e3dd90e42d269460fb4b2d3ab3b7ba01503","modified":1500902457000},{"_id":"source/_posts/java-date.md","hash":"9f445048dadf505b5b7735afcb8ae2d28fe54300","modified":1495779147000},{"_id":"source/_posts/kobo-config.md","hash":"2eb1a9553eccbaac5cc4d984806efe938fd98a1d","modified":1498189007000},{"_id":"source/_posts/mac-mysql-unicode.md","hash":"4f1fe8e6f50f7181494b1a6d4a98bcbdc36fc584","modified":1495779147000},{"_id":"source/_posts/mac-shortcut.md","hash":"06496514a5d96adde0fa6b73bee7a0a26c60e711","modified":1495779147000},{"_id":"source/_posts/mac-dev.md","hash":"0e17c05e6bf4a37caca67121ccb960dc5fdbd680","modified":1495779147000},{"_id":"source/_posts/mongodb-study.md","hash":"d1dcb34e106ef621d38271c4d088b223e5e795f5","modified":1496309604000},{"_id":"source/_posts/mybatis-generator.md","hash":"7977a07ca5277994216b1546b4ce7805dbbf1c07","modified":1517132439000},{"_id":"source/_posts/mybooks.md","hash":"d369ddc653f8f484dce7e2ee6bfaaa75d7294faf","modified":1497408972000},{"_id":"source/_posts/mysql-collation.md","hash":"ea6cf4fa1cacf015ab7dbfa93b45d02086d8f423","modified":1497238442000},{"_id":"source/_posts/mysql-study.md","hash":"8275c7f97851cf9df2f48524ea9e8735650916c7","modified":1495779147000},{"_id":"source/_posts/mysql-optimize.md","hash":"a8699235c4a8ed2c12d968d2441e825d757f0f80","modified":1501459142000},{"_id":"source/_posts/node-develop.md","hash":"c5b84a3da4db2a5094adf07756b25abfbd6cab98","modified":1495779147000},{"_id":"source/_posts/node-notes.md","hash":"07984fad30c5a4d325697847dcde584f46ec1084","modified":1495779147000},{"_id":"source/_posts/node-study.md","hash":"ad9320c6be8f859eff1984f4411681b4c7765934","modified":1495779147000},{"_id":"source/_posts/num2Chinese.md","hash":"a137dee89eeb4f259d22e30b693ca7435d182a6c","modified":1501339848000},{"_id":"source/_posts/npm-detail.md","hash":"776870d6768474d7de22b31237c93dfff8884c09","modified":1480231131000},{"_id":"source/_posts/redis-config.md","hash":"4b62a0cdfb90d5df02194146bb983786365bfdc4","modified":1495779147000},{"_id":"source/_posts/redis-study.md","hash":"2a355270d69d69ae426e44d753e2ca0c2f2969f4","modified":1495779147000},{"_id":"source/_posts/server-config.md","hash":"f31960ec46d2899c8b5cdc05599773eb66391b8f","modified":1497408077000},{"_id":"source/_posts/sort-study.md","hash":"9f8ad83bcc0005f12b915de40c2677e5abd4a315","modified":1501425711000},{"_id":"source/_posts/spider-koa2.md","hash":"12a08b3cbfcc459b0a5dd0a370706407cf1d0182","modified":1495779147000},{"_id":"source/_posts/sprigmvc2boot.md","hash":"3418adc7985681ce21df3515ad593093d1405414","modified":1517929239000},{"_id":"source/_posts/study-goals.md","hash":"bd79bcc8002de7b39c6462ff19c2c737a9b8f38b","modified":1495779147000},{"_id":"source/_posts/study-plan.md","hash":"ada2880cab2b606362031394cc6f86e71e9898e7","modified":1509371266000},{"_id":"source/_posts/suanfa-1.md","hash":"587c049849dcff4125d8a3cc2d6c19c4a9689237","modified":1508689496000},{"_id":"source/_posts/suanfa-10.md","hash":"ca77e2e6bc549ed46b37a3f5f28cb5d3b7374ac0","modified":1509374207000},{"_id":"source/_posts/suanfa-11.md","hash":"07feab742dc260143bef6b2d6a5a395ea75f4cec","modified":1517131515224},{"_id":"source/_posts/suanfa-2.md","hash":"b7a7c9fb8a37a4a8fafd4218a6fd00c14d485fb8","modified":1508689489390},{"_id":"source/_posts/suanfa-3.md","hash":"b8272546241114ca57db3fbd91a243a54bec982f","modified":1508689485847},{"_id":"source/_posts/suanfa-4.md","hash":"adf34d805d182f124d698795422df58d1507416a","modified":1508858949000},{"_id":"source/_posts/suanfa-5.md","hash":"c25dc23d6f54ffd28e978860adf25d5ce127e0a4","modified":1508860318000},{"_id":"source/_posts/suanfa-6.md","hash":"f6a7950f45d2fe6ea544c35ba842782fdb7d7fc3","modified":1509064715615},{"_id":"source/_posts/suanfa-7.md","hash":"263e5d08960957f455219e5a615b6a034a26c2f4","modified":1509064721817},{"_id":"source/_posts/suanfa-8.md","hash":"fff3dd8c5b47b528b59f41a8307c9c93ea9c7923","modified":1509203430000},{"_id":"source/_posts/suanfa-9.md","hash":"e322a8f04227bc029f126de06fef6c2ae1ea3232","modified":1509282122596},{"_id":"source/_posts/trandsferProject.md","hash":"7e611d8f4773af4d09d45e8452651b6f1807ec34","modified":1502496119000},{"_id":"source/_posts/ubuntu-dev-config.md","hash":"b64c3ab00a25e2b053ceaddc02ef35b6a6332c37","modified":1501857586000},{"_id":"source/_posts/wechat-dev.md","hash":"dbe8fd3f547f586fb446379730b99865aa1d3c3e","modified":1495779147000},{"_id":"source/_posts/zookeeper.md","hash":"d189275b2bf9ecad52fa27f053ab32ac89e0ab7f","modified":1523085210805},{"_id":"source/tags/index.md","hash":"fef5870e5133fd9c32c9dad0fb6e61365a7c14e1","modified":1495064532000},{"_id":"themes/black-blue/.git/COMMIT_EDITMSG","hash":"6f4155773c920fc1cc82bcc9a4fa36106816c027","modified":1509792321262},{"_id":"themes/black-blue/.git/FETCH_HEAD","hash":"a293ef89f8ce4ad53e2b12343cb65e8e6ecac948","modified":1523082852191},{"_id":"themes/black-blue/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1495768418000},{"_id":"themes/black-blue/.git/ORIG_HEAD","hash":"9d5f1740388b30be57b31768c8d65f725a5b3dd5","modified":1523082852203},{"_id":"themes/black-blue/.git/config","hash":"9602e96bbbc6e8fa4a791670b1debe46bad11958","modified":1495028624000},{"_id":"themes/black-blue/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1495028495000},{"_id":"themes/black-blue/.git/index","hash":"d463bc42fedef905b27816308136cbe80c5d18c6","modified":1523096393277},{"_id":"themes/black-blue/.git/packed-refs","hash":"0ac4d03f1a7dd14ddb6a0c64dfb9daf9733258a6","modified":1495028624000},{"_id":"themes/black-blue/languages/de.yml","hash":"ecb13af8af81ccc033ae7494cb2f94f84f6466ad","modified":1523084314278},{"_id":"themes/black-blue/languages/default.yml","hash":"9e59cd11b290be84909612beb12d0f93ce737f53","modified":1523084314279},{"_id":"themes/black-blue/languages/en.yml","hash":"c2b0f914ef4036281ae50f0cdf08d2823cd56f8e","modified":1523086237714},{"_id":"themes/black-blue/languages/fr-FR.yml","hash":"12cfa96dc412ecb6f8bf4de2690575929464906e","modified":1523084314279},{"_id":"themes/black-blue/languages/ru.yml","hash":"9997425292031ee8a58a93346ac6d3f38f18e566","modified":1523084314280},{"_id":"themes/black-blue/languages/zh-Hans.yml","hash":"861bc741042e108948d4c574b20c88e2f11c3b03","modified":1523086247691},{"_id":"themes/black-blue/languages/zh-hk.yml","hash":"606dfb34d3fec1d7895a654ff7a5a1de0c6a5c55","modified":1523084314280},{"_id":"themes/black-blue/languages/zh-tw.yml","hash":"9e4034870b57d2bb3063c91f8d206a6c4d7b3789","modified":1523084314280},{"_id":"themes/black-blue/languages/zh.yml","hash":"0d7e8da60fd5e5db217e1733ac273ae00fd752ea","modified":1523084314281},{"_id":"themes/black-blue/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1523084314290},{"_id":"themes/black-blue/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1523084314291},{"_id":"themes/black-blue/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1523084314291},{"_id":"themes/black-blue/layout/layout.ejs","hash":"4a5566f704f3246f5ef77badddf18d2e16750328","modified":1523084314291},{"_id":"themes/black-blue/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1523084314292},{"_id":"themes/black-blue/layout/plugins.swig","hash":"f809b5e62e968a80921c56e5d7658325b48b7263","modified":1523086622642},{"_id":"themes/black-blue/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1523084314293},{"_id":"themes/black-blue/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1523084314293},{"_id":"themes/black-blue/source/.DS_Store","hash":"32024cfd10f5f248651f0d3e7fe5e817a3d37de5","modified":1523098515440},{"_id":"themes/black-blue/source/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1523084314294},{"_id":"themes/black-blue/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1495028495000},{"_id":"themes/black-blue/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1495028495000},{"_id":"themes/black-blue/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1495028495000},{"_id":"themes/black-blue/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1495028495000},{"_id":"themes/black-blue/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1495028495000},{"_id":"themes/black-blue/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1495028495000},{"_id":"themes/black-blue/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1495028495000},{"_id":"themes/black-blue/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1495028495000},{"_id":"themes/black-blue/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1495028495000},{"_id":"themes/black-blue/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1495028495000},{"_id":"themes/black-blue/.git/logs/HEAD","hash":"0bf1516012ed1f71dcd349b52b0b1ab91ffea779","modified":1509792358255},{"_id":"themes/black-blue/layout/_partial/after-footer.ejs","hash":"ea8ee502797a80bdcd590999c9722ca094cc8250","modified":1523084314343},{"_id":"themes/black-blue/layout/_partial/archive-post.ejs","hash":"8af583c5f60c69ffdc97bee4e8fdac1ba34ebecd","modified":1523084314281},{"_id":"themes/black-blue/layout/_partial/archive.ejs","hash":"7023e8239b1a9c57c4bf787b688c7f0fde437d8b","modified":1523084314282},{"_id":"themes/black-blue/layout/_partial/article.ejs","hash":"db43a8425b45bb1f5103285689f52f9a0c99a756","modified":1523093745347},{"_id":"themes/black-blue/layout/_partial/background.ejs","hash":"e566c3804a25e4c76f025db511dbaa0d008757e2","modified":1523084314282},{"_id":"themes/black-blue/layout/_partial/bodybackground.ejs","hash":"931700a928b84577cc33dfff68a009188885f6c0","modified":1523084314283},{"_id":"themes/black-blue/layout/_partial/case.swig","hash":"571f96fee07071d81ed65b2c8fda8f922ad784b7","modified":1523084314283},{"_id":"themes/black-blue/layout/_partial/footer.ejs","hash":"207e52eb895f027b430c6dd7d00b34f0eebf4ac9","modified":1523084314284},{"_id":"themes/black-blue/layout/_partial/head.ejs","hash":"2f98d8d94df55799860af7cef82c44654b4b4cbf","modified":1523084314284},{"_id":"themes/black-blue/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1523084314284},{"_id":"themes/black-blue/layout/_partial/hide-labels.ejs","hash":"bd98380a53cee20a567020f96bf39e702e8e9e18","modified":1523084314342},{"_id":"themes/black-blue/layout/_partial/jquery.ejs","hash":"14b6ef238bca0cb75c72496ed8ffc3c63ab6f00e","modified":1523082517000},{"_id":"themes/black-blue/layout/_partial/left-col.ejs","hash":"fc99c9226fb4ba839f7dc5afcbb57f10e311b1d5","modified":1523084418548},{"_id":"themes/black-blue/layout/_partial/mobile-nav.ejs","hash":"cd0ebfb2c3930f6df173f336999577917d92cfc0","modified":1523084314340},{"_id":"themes/black-blue/layout/_partial/mathjax.ejs","hash":"54fab4d3d64cb937d6baec7324ffabf9f202b883","modified":1523084314284},{"_id":"themes/black-blue/layout/_partial/page.ejs","hash":"2d55ad89b163d6fb2d88455e2d6220b4706afb47","modified":1523084314340},{"_id":"themes/black-blue/layout/_partial/plugin.swig","hash":"17b6c6945e4b1b41dbb10d851f85ca10100c28ea","modified":1523084314285},{"_id":"themes/black-blue/layout/_partial/post-nav-button.ejs","hash":"b1f46ad80bf444eb9d121a16e3e2c0360af3b034","modified":1523084314339},{"_id":"themes/black-blue/layout/_partial/scrolling-button.ejs","hash":"b3a28974f37375796687e6100b48c3da6f662640","modified":1523084314288},{"_id":"themes/black-blue/layout/_partial/theme.swig","hash":"5a279ad8f6c6b7c104cce495faa563d8b7a7c74a","modified":1523084314290},{"_id":"themes/black-blue/layout/_partial/toc.ejs","hash":"ae9ba515d0f52017be98ec898b7bac06ca4a0d84","modified":1523084392476},{"_id":"themes/black-blue/layout/_partial/work.swig","hash":"ff66786482448c74924ca8288d3822ec0a4412c9","modified":1523084314290},{"_id":"themes/black-blue/source/css/.DS_Store","hash":"40819374c4851bafc0305ad25a616bf45f68b923","modified":1523098515962},{"_id":"themes/black-blue/source/css/gitment.min.css","hash":"5c6e826b17fcb766b5bea5e9adcf5c5527cf74c8","modified":1523094614203},{"_id":"themes/black-blue/source/css/loading-style.css","hash":"6535ef9a22f9791c87033fd914938473952831aa","modified":1494722223000},{"_id":"themes/black-blue/source/css/gitment.css","hash":"8d314bd778ea72d027e9f03fba3c89e2e2a0f68f","modified":1523094436000},{"_id":"themes/black-blue/source/css/showshare.css","hash":"32ac128451bec3cefcf322d4b3e9a294b0c0e57d","modified":1494722230000},{"_id":"themes/black-blue/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1523084314297},{"_id":"themes/black-blue/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1523084314298},{"_id":"themes/black-blue/source/css/style.css","hash":"ccd7e536fefef90c8255b3e3b63c01305f296a92","modified":1523098460025},{"_id":"themes/black-blue/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1523084314298},{"_id":"themes/black-blue/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1523084314298},{"_id":"themes/black-blue/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1523084314299},{"_id":"themes/black-blue/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1523084314299},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.css","hash":"89aa9b06961a0c8fa0aa6e4cea9a95e7f6d4d5a1","modified":1494724054000},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.js","hash":"422bd03dda3be683717d7cf940eead7a072fe12e","modified":1494724062000},{"_id":"themes/black-blue/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1523084314302},{"_id":"themes/black-blue/source/js/TweenMax.js","hash":"4ac5bb002414aa0dbbb57c867845fa057a9c5453","modified":1523084314326},{"_id":"themes/black-blue/source/js/clipboard.min.js","hash":"7f047155fccd6f375db17d6d44e1f4637feb3b04","modified":1523084314327},{"_id":"themes/black-blue/source/js/instagram.js","hash":"35d037fed53f5d3b6ece63b1b98ba3b2f9ccbf78","modified":1523084314328},{"_id":"themes/black-blue/source/js/jquery.lazyload.js","hash":"6f4a6850315cabbab8908473fe04f8bd2011299b","modified":1523084314328},{"_id":"themes/black-blue/source/js/main.js","hash":"f6226d5a27cb556dccc8d2ed85b1b228675a119f","modified":1523084314329},{"_id":"themes/black-blue/source/js/mobile.js","hash":"ebb80e3e6da9146f05ba0528a378c583b47e37c1","modified":1523084314329},{"_id":"themes/black-blue/source/js/embed.js","hash":"78cb9cbc04c32268df2663370f1daab6a2b0a9aa","modified":1523084314328},{"_id":"themes/black-blue/source/js/pace.js","hash":"aadc3b4644ac1b1a7849991ffd53e220b55ff6e5","modified":1523084314330},{"_id":"themes/black-blue/source/js/pc.js","hash":"46db69363993695b6714a04e503624ad054da19e","modified":1523084314330},{"_id":"themes/black-blue/source/js/plugins.js","hash":"72b87cbf6170f6cbb69bc9b20a7bc494667b514c","modified":1523084314330},{"_id":"themes/black-blue/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1523084314315},{"_id":"themes/black-blue/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1523084314315},{"_id":"themes/black-blue/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1523084314316},{"_id":"themes/black-blue/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1523084314316},{"_id":"themes/black-blue/source/img/favicon.png","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1523084314317},{"_id":"themes/black-blue/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1523084314317},{"_id":"themes/black-blue/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1523084314318},{"_id":"themes/black-blue/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1523084314318},{"_id":"themes/black-blue/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1523084314319},{"_id":"themes/black-blue/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1523084314319},{"_id":"themes/black-blue/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1523084314320},{"_id":"themes/black-blue/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1523084314320},{"_id":"themes/black-blue/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1523084314321},{"_id":"themes/black-blue/source/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1523084314321},{"_id":"themes/black-blue/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1523084314322},{"_id":"themes/black-blue/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1523084314321},{"_id":"themes/black-blue/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1523084314322},{"_id":"themes/black-blue/source/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1523084314323},{"_id":"themes/black-blue/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1523084314323},{"_id":"themes/black-blue/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1523084314323},{"_id":"themes/black-blue/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1523084314324},{"_id":"themes/black-blue/source/js/TweenMax.min.js","hash":"eaa4e4a08400da3f22dedda706ba56cdce5b0b7a","modified":1523084314326},{"_id":"themes/black-blue/.git/objects/00/f641957d87946d2e60430a02f102ffb19837e1","hash":"5e51e714aea853b1196f73bf3e3851fc0226e9f1","modified":1495516008000},{"_id":"themes/black-blue/.git/objects/01/68e135357c30e648a846731a68ef85cacc94a8","hash":"7d307b3da10da47ad2c6e75d93868365597b28cf","modified":1495205746000},{"_id":"themes/black-blue/.git/objects/05/4465a235bd7338d52bb3057f63ae4e1480b857","hash":"6c35a874ab2d0bab344b06cea425b7e1f3ee7f86","modified":1495205746000},{"_id":"themes/black-blue/.git/objects/06/605de9b76f3547323c5c6faac08a5ad269bcc2","hash":"93ddb87c2b95ec552d074107dcd566157d5108f0","modified":1501428973000},{"_id":"themes/black-blue/.git/objects/08/f522562f9b595a9894bef5f3e17fe0597c033c","hash":"97f623eb603a7e5bd6b4ce59d094d05c30426c0f","modified":1496630297000},{"_id":"themes/black-blue/.git/objects/09/ebcbcc483b9fd7559eb45ff5e264e688021f03","hash":"c24d1ceaa510dd739f712d45592617ee7343c49b","modified":1495772013000},{"_id":"themes/black-blue/.git/objects/0a/50b7d4336ef9aacbb12cef40ba90f090885cda","hash":"43fd9a5df8c60e08760e8271859ffdfc90f00530","modified":1495782847000},{"_id":"themes/black-blue/.git/objects/0a/672b6190114018517abcddb55739a28a3cc394","hash":"30e0672844a4b035a403f91c74024fbbe1c5e476","modified":1495516008000},{"_id":"themes/black-blue/.git/objects/0c/d7fb47f5b949762b39999ea5f43ba48ef0893c","hash":"4f3ef35ac635bcb317eff2ae223abd529b3cf0f8","modified":1495772013000},{"_id":"themes/black-blue/.git/objects/16/bd94312e752abb7cd3ccd1d7c02c448f3dbe81","hash":"ff47a113bc15d9ddf6625ff5b8bf01732ac39e44","modified":1509792358000},{"_id":"themes/black-blue/.git/objects/0f/b93ec9fbd8b4fa130adaf0ad4b5ef4531331d1","hash":"2863c0d98fa3703096059b26e91abba6efbc0491","modified":1495769479000},{"_id":"themes/black-blue/.git/objects/12/f932e24357b07b25b761ea976783ebe99e1a44","hash":"df3b10faf50732b545abff8004b3f555586c8ee0","modified":1501428973000},{"_id":"themes/black-blue/.git/objects/1a/2f4e3b53816cca6ef37d5136d6808583736f98","hash":"bea5825aa55fc6d061d62bf553c84168dcf06491","modified":1495769479000},{"_id":"themes/black-blue/.git/objects/1c/faa193df404de9e4e72c0192d8f85bdf36ecf9","hash":"1c2f20b2c8ec89e7e375aa724bd3f2421d244e32","modified":1495205746000},{"_id":"themes/black-blue/.git/objects/20/b754ad61e98fb55acb38249f8a65d2f7c2622e","hash":"1617c6ef7944158258403bbc18d869ad1cebca86","modified":1495782847000},{"_id":"themes/black-blue/.git/objects/24/76d65b007da3dfc4f520217a46628d04b2dda3","hash":"f87bb4e96ce9d1d8618ef5314f983e0666eca902","modified":1495769479000},{"_id":"themes/black-blue/.git/objects/28/82931bed449f658f7697656c329a0b2f579858","hash":"0218765ab0c9bd936d608d4799726c791b1a16ed","modified":1495769479000},{"_id":"themes/black-blue/.git/objects/2b/7349794be4e1a24bbf940f60463d701eb30683","hash":"2510ba03f1b45e501b598c773bf1d4ad9d78337b","modified":1495769479000},{"_id":"themes/black-blue/.git/objects/2f/95d58f47cf1a7f502722cef435c9dc88797dcf","hash":"e4e7b7e34e26f011f1735cc37c02aa52e29184fe","modified":1495782847000},{"_id":"themes/black-blue/.git/objects/32/8fd08833a3f18f6d0278fc7556ca6f649252cc","hash":"7ac58acee105e333c66150a6fe4281f6d4b25706","modified":1495769479000},{"_id":"themes/black-blue/.git/objects/33/68d4256b6555dbce361554c9e962e555bcb9f8","hash":"d7e3c2aaed04a86c4d8bd52f90ad09361f1a3bc8","modified":1495205746000},{"_id":"themes/black-blue/.git/objects/33/92206d625de4ac71773b4e0b7035bd65508f0b","hash":"2ac92ba1ec509bb97dc8e607f89d0b159f381ce3","modified":1495205746000},{"_id":"themes/black-blue/.git/objects/35/cdf223628f9bd6c9eab11fa7617e6e1743402d","hash":"e6f2e5e5da78ee4e08d401450582a9b5ba3343da","modified":1495772013000},{"_id":"themes/black-blue/.git/objects/36/3f82480024d07383c17f1615869217721ecc39","hash":"3609732c7824f44e9c875370c3adb4fb1d5b41a3","modified":1495205746000},{"_id":"themes/black-blue/.git/objects/37/541585b555abe18d26c439e5b60533089c499b","hash":"7147cd284264b7ed7c296af3d35fd01b1b2466ca","modified":1509792358000},{"_id":"themes/black-blue/.git/objects/3a/0948909019ed2f203d831332645eedb6cd93cf","hash":"a1a7ad2f8094a6919afd052f5f585cdf27dd878b","modified":1496630297000},{"_id":"themes/black-blue/.git/objects/3a/e077ac0a2adde5747289ce800ad9e51d80dcfb","hash":"da7fa79bd149f38505193316ebd53a7b33909c7b","modified":1509792358000},{"_id":"themes/black-blue/.git/objects/3a/fe7c9aa48ff0cc4abe1d100e1cc8e2a803c85e","hash":"473210cca0d1ff329ff48b70b6664dd3458b667d","modified":1509792358000},{"_id":"themes/black-blue/.git/objects/3f/b4844b7f6e718a83e333cb924170f70124bc37","hash":"18f93f11aeee9d89606d249423f0c69709757ee2","modified":1495205746000},{"_id":"themes/black-blue/.git/objects/3e/e776c2e7eee7802044ae2c813dc60893126692","hash":"e73a73a6214a80adf9a1fc04291fd96abe3131ad","modified":1501428973000},{"_id":"themes/black-blue/.git/objects/41/50aada790b5e9c98fcfdb1aa4760df955cde9d","hash":"77c9c9d337e9c27fcd9f256589d07dcb61204edd","modified":1495516008000},{"_id":"themes/black-blue/.git/objects/45/2f43135ed33c2f24d494bd4f13e0610d815fe6","hash":"5f9f1c6c8852bb806e12af01487b7f7d38331a32","modified":1495772013000},{"_id":"themes/black-blue/.git/objects/45/6893785ce7da0ff547875771c492bb3fa21d7b","hash":"a1b3a844f043d124e501f5b5a48ec49c8cdba31c","modified":1495782847000},{"_id":"themes/black-blue/.git/objects/45/97d37fd0669760305445c6f0793b0bffaaaf9f","hash":"a6e58cd20e225b1d5e2e1e105297c0881a7fb650","modified":1495782847000},{"_id":"themes/black-blue/.git/objects/4b/9825629ef4cc23730910dacbaceb9b00f98d43","hash":"12c90c9afd9f0eca33abdacc980faa4a28b55012","modified":1509792358000},{"_id":"themes/black-blue/.git/objects/4d/028f4d933d1faf8303f5ec50e2423ebd57daa7","hash":"a25801529e9798eee80e37985e273da82756ef6f","modified":1495782847000},{"_id":"themes/black-blue/.git/objects/4f/12d25d4161bf235e892a073d1ce0f7ebe76065","hash":"de28b1b478bc9ae32d1dfaab01d0e7042e8bc7d9","modified":1509792321262},{"_id":"themes/black-blue/.git/objects/50/8854f8372813aa695f68ca7d5c0d38b9e00ffb","hash":"0d933d1dbcaaa390b72c73dd80701de9464b1eb5","modified":1495770560000},{"_id":"themes/black-blue/.git/objects/52/a201980c225c1be425450b37ffde2e75b59636","hash":"23d5ba61b6b8281d978bf1b41c1fd626995f8422","modified":1509792358254},{"_id":"themes/black-blue/.git/objects/55/2e2d566f2045ef3bb4d2c082bdf432bc00dc62","hash":"2efa088819ce8afe4c6c03d26e74d5ef76b4e6bf","modified":1495205746000},{"_id":"themes/black-blue/.git/objects/55/552a544ce17bde40eb6fedbc53e3608dd1e116","hash":"387b41aefef4f705febd1ab9d74e110807b4b27e","modified":1495769479000},{"_id":"themes/black-blue/.git/objects/57/2520d051472b19bcb13072e9369d2d4aaf6938","hash":"a40face8b4d862d730bdcb642c48b0ade3631ed2","modified":1509792358251},{"_id":"themes/black-blue/.git/objects/5a/6c5d54934c0da2a399dea335ae0e35e4bd9b82","hash":"dd2aea99174cd060241e34fe80b1ee59c9279c04","modified":1495772013000},{"_id":"themes/black-blue/.git/objects/5c/b6bfb759298bf83b572278cda9b587851104cf","hash":"2d05a21551a70c3460f45290d3f7c2ccebbe92fd","modified":1509792358000},{"_id":"themes/black-blue/.git/objects/62/ada5ae40470971c911d77352abc93a88301230","hash":"cef88ca3dd104a2a6ee4712ddda6f860dc106cec","modified":1501340117000},{"_id":"themes/black-blue/.git/objects/66/c2ada49f60d246ec1141b063d078cbcf46a8c1","hash":"5b806e94739f8b51f7b30d6b8b29516ba3c4e427","modified":1509792358255},{"_id":"themes/black-blue/.git/objects/67/c20e4d32795c5f699d379ac488722e36b89474","hash":"988ac8c0db85e7d2dc4f20c4ce942ed83b3ff242","modified":1495770560000},{"_id":"themes/black-blue/.git/objects/6a/4f2a0fb87b6d32b390aaa127d74b4ce2e46544","hash":"0a003deddbbfa2b8ef207ffdf4407697c0126807","modified":1501428973000},{"_id":"themes/black-blue/.git/objects/6b/4fe9a6ba9e517b875b3156a0f8fbbdb445b44b","hash":"32c7978eb08f9cf7595a48cafc30c3a091b4b9ca","modified":1495205746000},{"_id":"themes/black-blue/.git/objects/6e/f22e4d501cc3f66e35d6d102845b69c6e9b2b8","hash":"04e9505c36b704e8ef1d7799d56d0d64bfb83779","modified":1495769479000},{"_id":"themes/black-blue/.git/objects/78/3c166570a3ed96f762f77a0a9bfb1c92a45a7c","hash":"776916933783d526b26857d6282c4867c7a034c4","modified":1509792321260},{"_id":"themes/black-blue/.git/objects/7b/2ac38da5e07d7f6a4357149083cf5bd3ef1df1","hash":"be228bf097283a25a280ee1583ab8849630f177d","modified":1495782847000},{"_id":"themes/black-blue/.git/objects/7c/fd12770de89bfeb611fa8b01d984b4e81f5156","hash":"720dd0cb1dee7499b319850a7ebd1b76188e5399","modified":1495782847000},{"_id":"themes/black-blue/.git/objects/7f/adb543cfe5d2ef7f3c426a1a84513b66089c2e","hash":"537a9de72e1d283397a5e3eed329935d15bc4894","modified":1501428973000},{"_id":"themes/black-blue/.git/objects/82/31c5134ae6b04c152b62af5b2b39f2f2202ba9","hash":"54b681bceb06134de263f7ce3b98fa6dbe4d3e4a","modified":1495769479000},{"_id":"themes/black-blue/.git/objects/82/365ef2a78af725954d1d18ce9ce070692d0916","hash":"e3042cbfc08f2793c3bf2544cf6e8e8fed29832e","modified":1495769479000},{"_id":"themes/black-blue/.git/objects/89/61b9619c6e2973181fde4b877cc23e7c986ed5","hash":"3dbfe4069890557221e7bd5cfd7e8ef0d26364b2","modified":1501428973000},{"_id":"themes/black-blue/.git/objects/91/8c083b8b784fb44878921fe7be869d6cf50862","hash":"992532afe93b463ad699025a29f7156f7a042e2d","modified":1495205746000},{"_id":"themes/black-blue/.git/objects/94/61b25740d0a1835d62a5c1508576e67ddb3019","hash":"745dfe6f0482925437a023ff46217e4cf70a1caf","modified":1495516008000},{"_id":"themes/black-blue/.git/objects/94/f5d5868f2bb0220a9ddf6cda3a43e392ed7099","hash":"9de8b50f7fae089de313b9063d088503f923bb7e","modified":1495772013000},{"_id":"themes/black-blue/.git/objects/94/fb3cc8bdceaecd8f5c5b7cddcf272db21da644","hash":"c51f27fe10fbea1d9ba738aea2d2de722c9f596a","modified":1495516008000},{"_id":"themes/black-blue/.git/objects/95/7e9bbdf7c8cf0d85e1bc7ef5b0c989e98dff50","hash":"d8048c20ee0a279242901cafc2404421f0d9f082","modified":1495205746000},{"_id":"themes/black-blue/.git/objects/96/94a046113f18b8b61a3806085a41160bb1eb3b","hash":"cadacfa775faa0e410276ca7abb156eef3fc9b6f","modified":1495769479000},{"_id":"themes/black-blue/.git/objects/9b/658ade227dc8749ab7484a9acab7fa5b6be48d","hash":"9e34a4aea551e2d6fa801ea198f4565956a19ccd","modified":1495770560000},{"_id":"themes/black-blue/.git/objects/9b/a27485a575c33c99c3ee7d04342c6a8b05c58b","hash":"e1cbdb58d8ec242e171062b4059202de33e47b31","modified":1509792358000},{"_id":"themes/black-blue/.git/objects/a3/0c707fc2781a39ade2aa2f227779e76e2fd8d9","hash":"9a2daea119e836d008c6cc41b5949f5c7b4fc549","modified":1495769479000},{"_id":"themes/black-blue/.git/objects/ab/4cce63997c671d0073a2d0bcf0c386b7a16412","hash":"25edada6dff15a01f26fccd5f31bc1a89e2289ea","modified":1495782847000},{"_id":"themes/black-blue/.git/objects/ab/a399426ecf168f7d9a9feb4fde22cdd98009e0","hash":"888ad9216d2e717960e4a5e0311bfaca9804ffb5","modified":1495205746000},{"_id":"themes/black-blue/.git/objects/ab/b78ddc423339ebadcfb83d83a12892701fe124","hash":"0adae9b275d7c1e26b9efb347866eb4d0e13d2f7","modified":1495772013000},{"_id":"themes/black-blue/.git/objects/ac/9a380d0201d1dfa01f0532c38f9feb12fa6305","hash":"078c052579fefa8937b2626221d6292d160a2f56","modified":1501340117000},{"_id":"themes/black-blue/.git/objects/b1/24eba19784ae134baedbee916a0f7f25ead886","hash":"bae3a16f0d848b2c83b7e37d996c2f6afafbe3c4","modified":1495770560000},{"_id":"themes/black-blue/.git/objects/b3/64f82cdfa67ded57f70b45c7eb8955924b1f9c","hash":"c10517d4b82000e4e95f845bd3b011c284a1e7dc","modified":1495769479000},{"_id":"themes/black-blue/.git/objects/b4/861b53edeb5388d972a6400c9abae4cd535a6a","hash":"9ad05af1e45a55ab6256b2b380ab2db0b43a746d","modified":1495769479000},{"_id":"themes/black-blue/.git/objects/b6/9b868aa3a23539ca1b052824bb2ec8292b2667","hash":"543c9428017db2da37a73271d6ef8bd42a6fb4b5","modified":1501340117000},{"_id":"themes/black-blue/.git/objects/be/ce6b1ddbe26d9ff228a68dc15e96c14a77e770","hash":"d5c0dac28a009f33bd79ff12efa76f6c483eac28","modified":1495516008000},{"_id":"themes/black-blue/.git/objects/b7/a9e1c07cfd6bb4ed2496d70e57749a374367d7","hash":"1e3ca2401406af9f28450f9710a7533f42bfd3a0","modified":1509792358000},{"_id":"themes/black-blue/.git/objects/c1/6a5ca1124e61591abccd34345cf1c960806ebe","hash":"cf22038fb72b03c6d8d6b6879bd0a4c128f3b583","modified":1495772013000},{"_id":"themes/black-blue/.git/objects/c7/789a7aff3e45ec06f35d8e47b272b991ff230b","hash":"ee6b083c74a8c710edac561b0e1e90dadce8b304","modified":1495782847000},{"_id":"themes/black-blue/.git/objects/cc/4324ff2f0d8b17273dd20f72300fe43aad669d","hash":"e2ed9caa8c525d92cb9dc3c4ac0912254793ecc3","modified":1495516008000},{"_id":"themes/black-blue/.git/objects/d0/010cc86acb055d8f73624e36f0e2320a794a9b","hash":"861dddc0eea0442bd96ba98eba82992cbb86f0b2","modified":1495205746000},{"_id":"themes/black-blue/.git/objects/d1/c82cf28d8ffa92a5d7927208485d5cda57ae3c","hash":"73efa15cf758211bc88b689f7fec0437103ea904","modified":1495782847000},{"_id":"themes/black-blue/.git/objects/d1/d857d7e5e546780675baaa7bd063c8a162d2a8","hash":"30458fff5ce9a122ec18155279c3a0b35c4f6e5c","modified":1495516008000},{"_id":"themes/black-blue/.git/objects/d6/e9d9e0d0ba98adf71548940427e5cdeb877c5b","hash":"74b8d1071a75f302ff84236a631a129083701f94","modified":1495782847000},{"_id":"themes/black-blue/.git/objects/d3/545e9279f5cc22361336929439307dde0fa2dd","hash":"ed181b2f9fe8fc5c6ea6623c0d1a75bfabb4bba5","modified":1509792358000},{"_id":"themes/black-blue/.git/objects/d8/363134b52ecf0b3eb67bd997250a76a79635f0","hash":"04e2fa1be9d6b21cebff0fcdad4c2edc963217e7","modified":1495772013000},{"_id":"themes/black-blue/.git/objects/db/ad870e0ab077ec54df97be414fad379044cc00","hash":"d578ae3b81915cd2b8ae77280c0678a4568f0ce4","modified":1495770560000},{"_id":"themes/black-blue/.git/objects/de/43b55cd1d5713f13a65f46c692f3667fddc5d1","hash":"996c30e77bc8e3716cfac4772956bab814e64446","modified":1495516008000},{"_id":"themes/black-blue/.git/objects/e1/f3281b582add061b2752697dd57a641a98e2d0","hash":"610ad0fa40e382e004c8fa5ff1cf74c87cc92900","modified":1495769479000},{"_id":"themes/black-blue/.git/objects/e3/4e314e0a62620cb845c6a9c58c4033aabca36e","hash":"c25ad2e9fe108bf2fc9bed1bdcfb4cedc0ede357","modified":1495782847000},{"_id":"themes/black-blue/.git/objects/e4/0da2b78d303cf0df3bc6d5c2c2faa431de5bc3","hash":"81df0d080466f82b7b398970609536d0639de4da","modified":1496630297000},{"_id":"themes/black-blue/.git/objects/e5/9029c3d61f53c6fa81d9d66829af888517ee99","hash":"479a1ca66d8081851a2b308cf103a88dacf315d3","modified":1495772013000},{"_id":"themes/black-blue/.git/objects/e8/e39aef1552aeaaa4c8399add53491ecb95140b","hash":"8f4a941f7308793652f411f5950b99974a5b6d5f","modified":1509792321249},{"_id":"themes/black-blue/.git/objects/ea/605f11bf61878027cb171bbc39faa43df19ddf","hash":"62474995a73f2674b382ca1796889a77d856e082","modified":1495516008000},{"_id":"themes/black-blue/.git/objects/ed/17122b514622d31da369f3d9ac40ee8619eb6f","hash":"e9105ad5cbe04adbbb3129aa72536085033f36ba","modified":1495782847000},{"_id":"themes/black-blue/.git/objects/ef/0619ecaad4bc00eff51659063ef061482f6766","hash":"8c17a0238941be201e5fd9dd20aa857d04fed44e","modified":1495769479000},{"_id":"themes/black-blue/.git/objects/f0/8ce3e0957f549a2f001fe608101ac3b5c91752","hash":"30b1cbac28dab7b1cabff37da8c8025f02025553","modified":1495769479000},{"_id":"themes/black-blue/.git/objects/f0/e0087484d77c3a005327eaccee3e27492bcd0c","hash":"f6ed1a894b58f9fd503a8fa942a7e8c3def95697","modified":1495769479000},{"_id":"themes/black-blue/.git/objects/f5/46a0f12dde7398786a9f62321cfe7f2b62bdf1","hash":"125e7c777729e3c01ffcf9d7fc5205ee00e2844c","modified":1495205746000},{"_id":"themes/black-blue/.git/objects/f7/fa47c98225eec77ba42c79006a19972b6147aa","hash":"bb6ec30899c076893b41cb47d8eefb5a508a63fa","modified":1495769479000},{"_id":"themes/black-blue/.git/objects/fc/7748e34c942478d5247546aaa2289ede8546ed","hash":"b0ecfb41ce5cbd1f1f7fb3c5d0c2209e8c851de1","modified":1501428973000},{"_id":"themes/black-blue/.git/objects/pack/pack-1b0d748fc68fc2130a7229be9faeda7da8900a21.idx","hash":"ee17673832e496ca08e0eef51ebc7f887e3fe850","modified":1495028624000},{"_id":"themes/black-blue/.git/refs/heads/dev","hash":"9ec2f1d371f7c62f97f6275ca8311cd0af4773fb","modified":1495768273000},{"_id":"themes/black-blue/.git/refs/heads/master","hash":"9d5f1740388b30be57b31768c8d65f725a5b3dd5","modified":1509792358255},{"_id":"themes/black-blue/layout/_partial/analytics/baidu-analytics.ejs","hash":"b9467d24b276df225786923861f4cfecf700ca75","modified":1523084314281},{"_id":"themes/black-blue/layout/_partial/analytics/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1523084314281},{"_id":"themes/black-blue/layout/_partial/comments/changyan.ejs","hash":"85239a27de547854dcbff38feac9bb5a92a2184c","modified":1523084314342},{"_id":"themes/black-blue/layout/_partial/comments/disqus.ejs","hash":"013e4e8f07af29715ac8d6f66aad6a575be2f70a","modified":1523084314283},{"_id":"themes/black-blue/layout/_partial/comments/gitment.ejs","hash":"3d7acd8d5c4c84527e6981666300a9dadd1cc803","modified":1523097936000},{"_id":"themes/black-blue/layout/_partial/post/TipTitle.ejs","hash":"201de1bafd12c8641bc6ccdfff116002550f923c","modified":1523084314285},{"_id":"themes/black-blue/layout/_partial/post/category.ejs","hash":"265bb12f7cfa5e0bcbb74fdd409ba13a6d9d2e22","modified":1523084314285},{"_id":"themes/black-blue/layout/_partial/post/date.ejs","hash":"41162e173f3c9339cfaf0cc12ebd8d27631540d7","modified":1523084314286},{"_id":"themes/black-blue/layout/_partial/post/loading.ejs","hash":"52a576a8afee08d33c6f69a61c496e1820132e91","modified":1523084314286},{"_id":"themes/black-blue/layout/_partial/post/nav.ejs","hash":"ec5289ec24ae1f51c149b9a502d1c80baff0d411","modified":1523084314286},{"_id":"themes/black-blue/layout/_partial/post/tag.ejs","hash":"9dad471e27de9e066666f3082137eccaede2e67b","modified":1523084314287},{"_id":"themes/black-blue/layout/_partial/post/title.ejs","hash":"7d20bf6335493155f91b3e1c782ba150856d9370","modified":1523084314287},{"_id":"themes/black-blue/layout/_partial/share/baidu-share.ejs","hash":"21fbd6dbdcc631c61194ea04fc19b298133b0e2f","modified":1523084314288},{"_id":"themes/black-blue/layout/_partial/share/share.ejs","hash":"62467610ba6df9b63350d163e806be774dcf5a00","modified":1523084314289},{"_id":"themes/black-blue/layout/_partial/share/showshare.ejs","hash":"535ceca406a4bfbdf248a21c90225e18a0118059","modified":1523108506000},{"_id":"themes/black-blue/source/background/bg-1.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1523084314295},{"_id":"themes/black-blue/source/background/bg.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1523084314296},{"_id":"themes/black-blue/source/css/pace/pace-theme-flash.css","hash":"9b9c20fd0624745cc20d7028b54c8b8301d81629","modified":1494723226000},{"_id":"themes/black-blue/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1523084314299},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1523084314300},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1523084314300},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1523084314300},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1523084314301},{"_id":"themes/black-blue/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1523084314301},{"_id":"themes/black-blue/source/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1523084314302},{"_id":"themes/black-blue/source/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1523084314303},{"_id":"themes/black-blue/source/js/404/jquery.parallaxify-0.0.2.min.js","hash":"b97e2dfcb210b76f7bdd6e1800b26128bf4fad99","modified":1523084314325},{"_id":"themes/black-blue/source/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1523084314304},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1523084314305},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1523084314311},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1523084314311},{"_id":"themes/black-blue/source/js/404/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1523084314325},{"_id":"themes/black-blue/source/img/avatar.png","hash":"31f8c6a64a3ccaa454d41fc4eb074aeb94e6cbde","modified":1523084314312},{"_id":"themes/black-blue/.git/logs/refs/heads/dev","hash":"02e7ef6e6f1a53c4d8b56cc5ba97380a026e660c","modified":1495768273000},{"_id":"themes/black-blue/.git/logs/refs/heads/master","hash":"22de4568beb2cae650cc6e992e30c1d41b1d4e3a","modified":1509792358255},{"_id":"themes/black-blue/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1495028624000},{"_id":"themes/black-blue/.git/refs/remotes/origin/dev","hash":"869bcdcb880fe126eb4bcc37e15f2d8ca62feaca","modified":1496629402000},{"_id":"themes/black-blue/.git/refs/remotes/origin/master","hash":"9d5f1740388b30be57b31768c8d65f725a5b3dd5","modified":1509792364150},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1523084314310},{"_id":"themes/black-blue/.git/logs/refs/remotes/origin/HEAD","hash":"4fe92128191f148efc3385c7f25c69d4d9b11d9a","modified":1495028624000},{"_id":"themes/black-blue/.git/logs/refs/remotes/origin/dev","hash":"d2e2a1de7c510759c38935d45146c7d481879394","modified":1496629402000},{"_id":"themes/black-blue/.git/logs/refs/remotes/origin/master","hash":"ac66dbdcc39bdc7f208ec81f2d76550dd4046411","modified":1509792364151},{"_id":"themes/black-blue/source/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1523084314314},{"_id":"themes/black-blue/source/font-awesome/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1523084314308},{"_id":"themes/black-blue/.git/objects/pack/pack-1b0d748fc68fc2130a7229be9faeda7da8900a21.pack","hash":"c3398c2e7025f39a75532f8fe310c8df1e043635","modified":1509792358000},{"_id":"public/urls.txt","hash":"b7380f89b11b13f43558b231ac5a06b1e621d7f4","modified":1523108696725},{"_id":"public/baidusitemap.xml","hash":"bd2e5185be126272996cc3c6cd8ada5e5f60a7ed","modified":1523108696746},{"_id":"public/atom.xml","hash":"7d84deccaa8b99abeaf8db0b7b0b6d96fa59abef","modified":1523108697215},{"_id":"public/search.json","hash":"753396fc892e4284e6dbdadd6ad38fd753d2135f","modified":1523108697255},{"_id":"public/sitemap.xml","hash":"9b14905957a87e0331f4ab3237a711f7071ae92e","modified":1523108697255},{"_id":"public/404.html","hash":"45ca8fef79f3e645a993608b36a52abd878477cd","modified":1523108697277},{"_id":"public/about/index.html","hash":"eeb91b78dfb68bfbe9bfc58331ce9088685a70cf","modified":1523108697277},{"_id":"public/tags/index.html","hash":"796ecad12699c0d5c16dc4fc9e2d9c264c4848ca","modified":1523108697277},{"_id":"public/dslock.html","hash":"2e12e8a000cff85611e788e70277bec6ae71d8c3","modified":1523108697277},{"_id":"public/dsbasic.html","hash":"a1f34433452ebc284e00fc2a5234a6caa61c4b41","modified":1523108697277},{"_id":"public/zookeeper.html","hash":"fafbea3191f74e3d6b2a95d3400f7ecddb597891","modified":1523108697277},{"_id":"public/descNode.html","hash":"4e2746d922148a025e7c79a707a4bbfd50149c41","modified":1523108697277},{"_id":"public/sprigmvc2boot.html","hash":"d5b4335b16ab2aa9c0c351d5eb53e759a1321b41","modified":1523108697277},{"_id":"public/mybatis-generator.html","hash":"d8a0325bc0e0188bb2e3545b10419cfa13c143a6","modified":1523108697277},{"_id":"public/suanfa-11.html","hash":"2464ef71cdc528b39cf6c5429af9f48ef6ba3993","modified":1523108697277},{"_id":"public/suanfa-10.html","hash":"f79171c864d26d1c364f6c1d476fcbecda86722a","modified":1523108697277},{"_id":"public/suanfa-9.html","hash":"8f148695f362d4073f510043f307fa7f7a3d53f7","modified":1523108697277},{"_id":"public/suanfa-8.html","hash":"6148c0b9510a60c1e80360ca996cfc461272a22e","modified":1523108697277},{"_id":"public/suanfa-7.html","hash":"9a34f3729a9b7dec5fe12507ec5a6d2f8e5f035a","modified":1523108697277},{"_id":"public/suanfa-5.html","hash":"06b0fc7c255e280216cd1743646cafbba4cd736a","modified":1523108697277},{"_id":"public/suanfa-6.html","hash":"d76f4542160d00d260549d39030a626c3de54a1e","modified":1523108697278},{"_id":"public/suanfa-4.html","hash":"54cd08a244b4f20ce35f1e94223b28d7326c35ec","modified":1523108697278},{"_id":"public/suanfa-3.html","hash":"f04ddfc2ddf49712e2969e7694356fbe3ce22870","modified":1523108697278},{"_id":"public/suanfa-2.html","hash":"7082ea3aeccf082d8e98c47d8a8013ccb87d54bf","modified":1523108697278},{"_id":"public/suanfa-1.html","hash":"fca5012b8f8b4d2725b8d5cce26e713f36647476","modified":1523108697278},{"_id":"public/study-plan.html","hash":"2a63ef228e2bbfa8ea2a57390573312c9a401b90","modified":1523108697278},{"_id":"public/trandsferProject.html","hash":"7dc25be02802e725401cb7aef123ac097e459c5c","modified":1523108697278},{"_id":"public/num2Chinese.html","hash":"1e80bd292b7a87654db29e304c4dc123d3417693","modified":1523108697278},{"_id":"public/java-interview.html","hash":"d402ec5659acea60ad0cff851f5fede2649087fb","modified":1523108697278},{"_id":"public/kobo-config.html","hash":"db45eb97c9e00c8bd7a81aa4625ff10c38f77d02","modified":1523108697278},{"_id":"public/mysql-collation.html","hash":"0fc01e4e8c4b8360de8457a1d409c15497b75a91","modified":1523108697278},{"_id":"public/buy-computer.html","hash":"9678028ff700a647fe4683a943ec07e6abe28188","modified":1523108697278},{"_id":"public/mongodb-study.html","hash":"5528b29a9839b11c8e3636ea3652a7fd771e9f37","modified":1523108697278},{"_id":"public/digital-info.html","hash":"e7f6f104456e9cd44e6ad176ddedafef530a4d35","modified":1523108697278},{"_id":"public/hexo-theme.html","hash":"0931ef190e1558ea5c2be9afe85d21cd54f987b5","modified":1523108697278},{"_id":"public/eggjs-action.html","hash":"4ad404b8b3b7c0f1a4da6c20565df2648b841450","modified":1523108697278},{"_id":"public/bestblog.html","hash":"650daa7487baa2176e12ec52ed9c52ea4cf0fecf","modified":1523108697279},{"_id":"public/redis-config.html","hash":"985f6d7c9e523aa50e6036e7404ee29704923e3f","modified":1523108697279},{"_id":"public/spider-koa2.html","hash":"ea552bfc0435b79521d83ddc777d267e749c8ca1","modified":1523108697279},{"_id":"public/mac-shortcut.html","hash":"4ece44294d4c2d95727e417d0bda895fec9653c7","modified":1523108697279},{"_id":"public/wechat-dev.html","hash":"f88ea0fc905632254d3d97bf2c85c482995de3b6","modified":1523108697279},{"_id":"public/mybooks.html","hash":"5ff39d9897e5264760fbff9e08dda91b89c81613","modified":1523108697279},{"_id":"public/fullprj-desc.html","hash":"34deff2d5edfb222d64b53415aa282b86f5f1250","modified":1523108697279},{"_id":"public/free-books.html","hash":"d8fa1baeeb1851b2651702ce6b2573c01db9c756","modified":1523108697279},{"_id":"public/hexo-config.html","hash":"00402748fbcf82317ce490c1406119416d26bc23","modified":1523108697279},{"_id":"public/server-config.html","hash":"958d58824c6edeba3b063a60d1c42fe6d4a7f71d","modified":1523108697279},{"_id":"public/mac-dev.html","hash":"224da3b69dab1e7753c29491d985673a1b9d73f7","modified":1523108697279},{"_id":"public/npm-detail.html","hash":"6b0acd79d90d925666840faf15b4f9d5e9f1db71","modified":1523108697279},{"_id":"public/node-notes.html","hash":"dbd73fb02a4b3d3581eefa478958711f4bd1d188","modified":1523108697279},{"_id":"public/best-js-snippet.html","hash":"4c8dfae19e72ecd517e7082ff75a0d7d73d6d804","modified":1523108697279},{"_id":"public/sort-study.html","hash":"409866f9b6a82ca9946bd3acd4949d808e8288ee","modified":1523108697280},{"_id":"public/ajax-jsonp.html","hash":"90d1bb7e09da62ff745b942cb4198e47954368d9","modified":1523108697280},{"_id":"public/ajax-study.html","hash":"bc9171b8588dc4582e2d5c660379f7cf51126da9","modified":1523108697280},{"_id":"public/mysql-optimize.html","hash":"45e6e537cbd369407d29d7b8963cf5c70bd7fb2c","modified":1523108697280},{"_id":"public/mac-mysql-unicode.html","hash":"bf01973b2042c43c4f00b579b003fdf1a6d924ca","modified":1523108697280},{"_id":"public/mysql-study.html","hash":"3f934aa4cf3ad87586d43c60853b23c2dcb4254d","modified":1523108697280},{"_id":"public/node-develop.html","hash":"f03e7d20eefd2c8ab8d235a6ccff5b6b2a33ee6c","modified":1523108697280},{"_id":"public/redis-study.html","hash":"8a773eccc269f24ebe6053188730265582afba6d","modified":1523108697280},{"_id":"public/git-svn.html","hash":"75b0eff9550088aac63d92d0b5beed302531de22","modified":1523108697280},{"_id":"public/java-date.html","hash":"1a88ac0e7c04af741296d4aa09cfcb94370f761d","modified":1523108697280},{"_id":"public/study-goals.html","hash":"f92b9bd72b048ef68c17d60a903334b017a23cb7","modified":1523108697280},{"_id":"public/ghost-blog.html","hash":"9a18c6186032ca757fcc1da14071c38dd71b5261","modified":1523108697280},{"_id":"public/git-config-study.html","hash":"46d3edf2e3e95a9541bc78449332872edaa655a3","modified":1523108697280},{"_id":"public/ubuntu-dev-config.html","hash":"adb044081fc192c6793f55ddd4a582e30f85621c","modified":1523108697280},{"_id":"public/dream.html","hash":"089b0b0052b17dcbe9b5f3bad93d4bf87b9e2845","modified":1523108697280},{"_id":"public/coder-study.html","hash":"58e0c61142dec53965686bd110b4d89449af1603","modified":1523108697280},{"_id":"public/hexo-githup-blog.html","hash":"66b00b6482d58c3aa97d8a3cefec3c53feb881f8","modified":1523108697281},{"_id":"public/node-study.html","hash":"1fe91c969d57fdd0f37c3f9686024a5d9a42a5da","modified":1523108697281},{"_id":"public/archives/index.html","hash":"d03edfff9295c636a65b1e50d86002a60883773f","modified":1523108697281},{"_id":"public/archives/page/2/index.html","hash":"1af24fa5bee89ce75f3879f99ad0e9c7d5e9033a","modified":1523108697281},{"_id":"public/archives/page/3/index.html","hash":"6d08cbdee10dc160f63136d6092e45e69b89c98b","modified":1523108697281},{"_id":"public/archives/page/4/index.html","hash":"f27475b08a969564137a8120f657eccdcd11b12f","modified":1523108697281},{"_id":"public/archives/page/5/index.html","hash":"fb47f37eb0eb2cf7fc36cf31f38edc3bf6dc6281","modified":1523108697281},{"_id":"public/archives/page/6/index.html","hash":"c7fa79817c094863098756b9c65f9f058de1e484","modified":1523108697281},{"_id":"public/archives/page/7/index.html","hash":"8a529a6be30392419be92c4f996b23476a983630","modified":1523108697281},{"_id":"public/archives/page/8/index.html","hash":"521b3452d44e84b1d8a50c68f47efc2ed2a672e1","modified":1523108697281},{"_id":"public/archives/2015/index.html","hash":"44192f4d33d78857eb049d2e495a9f3cb175e76c","modified":1523108697281},{"_id":"public/archives/2015/12/index.html","hash":"56642c1db151f7d3a4334f6e692b459dd131d355","modified":1523108697281},{"_id":"public/archives/2016/index.html","hash":"02a9275f72c23af231e11e8e497ca9b21091aa3b","modified":1523108697281},{"_id":"public/archives/2016/page/2/index.html","hash":"4e6f72091f1a5bff64325990c1cf19d938ab8d7b","modified":1523108697281},{"_id":"public/archives/2016/page/3/index.html","hash":"dc07b39a2fa7430b56915936e85e4ccad7be5a13","modified":1523108697281},{"_id":"public/archives/2016/04/index.html","hash":"6ca82cdaac5d8a035f3fd767a716da53a6f756c9","modified":1523108697281},{"_id":"public/archives/2016/05/index.html","hash":"abe2611b0154c854ab4ba20d4bd511a2f1b05cf2","modified":1523108697281},{"_id":"public/archives/2016/05/page/2/index.html","hash":"0bb92cde8881eb04d082a0d3bab6baef5d6ec56b","modified":1523108697281},{"_id":"public/archives/2016/06/index.html","hash":"3a0548c368aab1f77df15bcacd09e26428c26b10","modified":1523108697282},{"_id":"public/archives/2016/07/index.html","hash":"51a620ac294f6df23a5c50c900163d4c4cb72ed0","modified":1523108697282},{"_id":"public/archives/2016/11/index.html","hash":"e9839d07862778dd6319aceec659bc1b757111cc","modified":1523108697282},{"_id":"public/archives/2017/index.html","hash":"5afadba511d823935c0d0809c5f33a880dac36c8","modified":1523108697282},{"_id":"public/archives/2017/page/2/index.html","hash":"fed286fc7ae471bc0043fd5b21c2817c49a0ab90","modified":1523108697282},{"_id":"public/archives/2017/page/3/index.html","hash":"0062d74cceb5f11c4bb0b9683bac2a656dee40ee","modified":1523108697282},{"_id":"public/archives/2017/page/4/index.html","hash":"92da5c4c16de796e9c426210f684fd0328b23ac2","modified":1523108697283},{"_id":"public/archives/2017/04/index.html","hash":"db0f29d33af06914539ff0dfee98d8cd49b68a1b","modified":1523108697283},{"_id":"public/archives/2017/05/index.html","hash":"5eb28eccdb86aa96089d4dcde09a9847d4068ae9","modified":1523108697283},{"_id":"public/archives/2017/06/index.html","hash":"af4fd6d2ce11fbff9b4da1c36dc52305dd40c122","modified":1523108697283},{"_id":"public/archives/2017/07/index.html","hash":"5c6ef5470a6c736a0a3a5aece172ce13beecdfd7","modified":1523108697283},{"_id":"public/archives/2017/08/index.html","hash":"4cca86f401a311bca4db2a869839976ca94ee66e","modified":1523108697283},{"_id":"public/archives/2017/10/index.html","hash":"063a41ab5ef8d678fd85d9466ee6433a9cfc11af","modified":1523108697283},{"_id":"public/archives/2017/10/page/2/index.html","hash":"ea5155229a3fbdfb6fedd7c813d2aadc6502b697","modified":1523108697283},{"_id":"public/archives/2018/index.html","hash":"b6e1f98f386227df4c6786a11e0167c666bcd608","modified":1523108697283},{"_id":"public/archives/2018/01/index.html","hash":"3235648024876d10a4f50c45ac81ada4c5ec19d1","modified":1523108697283},{"_id":"public/archives/2018/02/index.html","hash":"a4a0e7dc1a351b8e2f5f39df4e10fd9660b4f554","modified":1523108697283},{"_id":"public/archives/2018/03/index.html","hash":"392fc61c5e1e6a50c0f068616249654b94a7546b","modified":1523108697283},{"_id":"public/categories/编程语言/index.html","hash":"3cf9f8879ef1eab6bbdc9735590574b067fe0d70","modified":1523108697283},{"_id":"public/categories/编程语言/page/2/index.html","hash":"d09209e4ec838e4bc505973d570572fdad0fcf66","modified":1523108697283},{"_id":"public/categories/开发工具/index.html","hash":"444c245544aacc79f410b1476ba1c0635f224ff9","modified":1523108697283},{"_id":"public/categories/开发工具/page/2/index.html","hash":"3e1bdbde3dcbfe331957819a21fff6086afd376f","modified":1523108697283},{"_id":"public/categories/个人随笔/index.html","hash":"3977f1d9c51b829d373cd5eddbbba776e745487a","modified":1523108697283},{"_id":"public/categories/digital/index.html","hash":"e496f6b8fb5dd2fb2db39624633d1fbeeac5de87","modified":1523108697283},{"_id":"public/categories/algorithm/index.html","hash":"ac97f5a0850c15a6e5bcf0498d49d6e69af9f3a3","modified":1523108697283},{"_id":"public/categories/algorithm/page/2/index.html","hash":"ebc9b0449f1310399edf6a639bef829c17b15abf","modified":1523108697284},{"_id":"public/categories/分布式架构/index.html","hash":"27caf7bf51f8ea85f01e19c43dd8b7e84ccfba26","modified":1523108697284},{"_id":"public/categories/资源分享/index.html","hash":"c9ffe82a7572744e618913238279ebe0bbc0af11","modified":1523108697284},{"_id":"public/categories/学习笔记/index.html","hash":"4774b3dd469a533e78772c0fe6166fdf4c7529df","modified":1523108697284},{"_id":"public/categories/others/index.html","hash":"0a584c9b143f089bc3e728db24e588053108d147","modified":1523108697284},{"_id":"public/categories/数据库/index.html","hash":"8c66fe88ccaf3cee775b5b0b3c33623c7e5a546c","modified":1523108697284},{"_id":"public/categories/book/index.html","hash":"605abc4b87aa7fee2776533bfc8816abbb2dff96","modified":1523108697284},{"_id":"public/categories/项目实战/index.html","hash":"d7ee438ee9bfd0f5839b541ebb7d21c924c8a2b1","modified":1523108697284},{"_id":"public/categories/算法/index.html","hash":"cc9ed54e71ed41fa432521d7b5f5505abdd16a9e","modified":1523108697284},{"_id":"public/categories/javacript/index.html","hash":"274de33743c3c37cc4b5f9b0fa3dd518a8aa6c68","modified":1523108697284},{"_id":"public/index.html","hash":"aaa1a9a7cf69f1b5a7bf5c31ee8570aac0bf3e37","modified":1523108697284},{"_id":"public/page/2/index.html","hash":"2d0c67b9e8fd405474fa4207d2e6819051713f8d","modified":1523108697285},{"_id":"public/page/3/index.html","hash":"d363ef7217b623a9b95382bbe6efb63f11fa8c20","modified":1523108697285},{"_id":"public/page/4/index.html","hash":"a69fdbbca92488674ecf3b8475671eb7a2cdfa16","modified":1523108697285},{"_id":"public/page/5/index.html","hash":"c95b8d6fb1c5623e77628195ab705d553aa18c3b","modified":1523108697285},{"_id":"public/page/6/index.html","hash":"90ab865fce20c8489849a000552bbcbc080b01a3","modified":1523108697285},{"_id":"public/page/7/index.html","hash":"63d63cf7a7488c0438f6fac2687768091e49f2ec","modified":1523108697285},{"_id":"public/page/8/index.html","hash":"de414317984adaf66060a6c77eaa4289fd090c36","modified":1523108697285},{"_id":"public/tags/http/index.html","hash":"d8587b113da5827314ad02b4ee6f4d7fece618f8","modified":1523108697285},{"_id":"public/tags/others/index.html","hash":"eb453f8aef2b9e26897f8fd82c6a8070f7f958bb","modified":1523108697285},{"_id":"public/tags/数码产品/index.html","hash":"ca5898ba7fa5904e47e620a5f64b8200ec34a43b","modified":1523108697285},{"_id":"public/tags/算法/index.html","hash":"567a4a74e8714c8741b6dff0b5efb742bd9aa340","modified":1523108697285},{"_id":"public/tags/算法/page/2/index.html","hash":"52ffee627f1f71992dec465fa319ac69b351b22d","modified":1523108697285},{"_id":"public/tags/protocol/index.html","hash":"df6a13696e03ef7a828da898692929a513978a10","modified":1523108697285},{"_id":"public/tags/java/index.html","hash":"3ff13d397626860d4b891a9500b6fb82c588dfde","modified":1523108697285},{"_id":"public/tags/node/index.html","hash":"c092c1667615a4c92eb3609b369ac64e4ae15d69","modified":1523108697285},{"_id":"public/tags/book/index.html","hash":"32337060790af962108e0f3a33f5a1bbbf9cc825","modified":1523108697285},{"_id":"public/tags/hexo/index.html","hash":"426e7da4021f1d437a28fda0cb74e393d7185d49","modified":1523108697286},{"_id":"public/tags/开发工具/index.html","hash":"3c3fed3a9e6dd69fb642dc53f0e7b524ad9c72af","modified":1523108697286},{"_id":"public/tags/mysql/index.html","hash":"4bdb4b6353c76e5bab7e6ff1df2665e83026fbbc","modified":1523108697286},{"_id":"public/tags/mac/index.html","hash":"57c134d957ed42f8dbbd32b4c33d4d649de668e5","modified":1523108697286},{"_id":"public/tags/mongodb/index.html","hash":"331ee3c4f6b7968dca677c235d1f640755c0a838","modified":1523108697286},{"_id":"public/tags/学习笔记/index.html","hash":"3f593f57e1a15895ea26077fe63ea1ea5f0d639f","modified":1523108697286},{"_id":"public/tags/redis/index.html","hash":"f69f546d51df6f9afb4d51ff626f691e1c7f6ba9","modified":1523108697286},{"_id":"public/tags/linux/index.html","hash":"aee8c699c25e9969de43c3f877e14094d810e250","modified":1523108697286},{"_id":"public/tags/nodejs/index.html","hash":"8d4cd4897296479a6a53a0af88808e10bfe7bb4a","modified":1523108697286},{"_id":"public/tags/algorithm/index.html","hash":"0529197e70ffcb2e499c192c36fb41fa75d55bb9","modified":1523108697286},{"_id":"public/tags/编程语言/index.html","hash":"4e5f09fa50f493c1246827fbcb2caab1b964985f","modified":1523108697286},{"_id":"public/tags/zookeeper/index.html","hash":"f2eb5b1fe1f5425c269cc199abfd569f5e58c586","modified":1523108697286},{"_id":"public/robots.txt","hash":"e8c28e7367cca9b66ac06fc8fbb07adacdb2b2ca","modified":1523108697297},{"_id":"public/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1523108697297},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1523108697297},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1523108697297},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1523108697297},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1523108697297},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1523108697297},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1523108697297},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1523108697297},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1523108697298},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1523108697298},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1523108697298},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1523108697298},{"_id":"public/img/favicon.png","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1523108697298},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1523108697298},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1523108697298},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1523108697298},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1523108697298},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1523108697298},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1523108697299},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1523108697299},{"_id":"public/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1523108697299},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1523108697299},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1523108697299},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1523108697299},{"_id":"public/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1523108697299},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1523108697299},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1523108697299},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1523108697299},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1523108697299},{"_id":"public/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1523108697305},{"_id":"public/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1523108697309},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1523108697310},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1523108697310},{"_id":"public/css/gitment.min.css","hash":"5c6e826b17fcb766b5bea5e9adcf5c5527cf74c8","modified":1523108697314},{"_id":"public/css/loading-style.css","hash":"6535ef9a22f9791c87033fd914938473952831aa","modified":1523108697314},{"_id":"public/fancybox/jquery.fancybox.css","hash":"89aa9b06961a0c8fa0aa6e4cea9a95e7f6d4d5a1","modified":1523108697314},{"_id":"public/js/TweenMax.js","hash":"4ac5bb002414aa0dbbb57c867845fa057a9c5453","modified":1523108697314},{"_id":"public/js/clipboard.min.js","hash":"7f047155fccd6f375db17d6d44e1f4637feb3b04","modified":1523108697314},{"_id":"public/js/instagram.js","hash":"35d037fed53f5d3b6ece63b1b98ba3b2f9ccbf78","modified":1523108697314},{"_id":"public/js/jquery.lazyload.js","hash":"6f4a6850315cabbab8908473fe04f8bd2011299b","modified":1523108697314},{"_id":"public/js/main.js","hash":"f6226d5a27cb556dccc8d2ed85b1b228675a119f","modified":1523108697314},{"_id":"public/js/mobile.js","hash":"ebb80e3e6da9146f05ba0528a378c583b47e37c1","modified":1523108697314},{"_id":"public/js/pace.js","hash":"aadc3b4644ac1b1a7849991ffd53e220b55ff6e5","modified":1523108697314},{"_id":"public/js/pc.js","hash":"46db69363993695b6714a04e503624ad054da19e","modified":1523108697314},{"_id":"public/js/plugins.js","hash":"72b87cbf6170f6cbb69bc9b20a7bc494667b514c","modified":1523108697315},{"_id":"public/css/pace/pace-theme-flash.css","hash":"9b9c20fd0624745cc20d7028b54c8b8301d81629","modified":1523108697315},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1523108697315},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1523108697315},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1523108697315},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1523108697315},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1523108697315},{"_id":"public/js/404/jquery.parallaxify-0.0.2.min.js","hash":"b97e2dfcb210b76f7bdd6e1800b26128bf4fad99","modified":1523108697315},{"_id":"public/css/gitment.css","hash":"8d314bd778ea72d027e9f03fba3c89e2e2a0f68f","modified":1523108697315},{"_id":"public/css/showshare.css","hash":"32ac128451bec3cefcf322d4b3e9a294b0c0e57d","modified":1523108697315},{"_id":"public/css/style.css","hash":"ccd7e536fefef90c8255b3e3b63c01305f296a92","modified":1523108697315},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1523108697315},{"_id":"public/fancybox/jquery.fancybox.js","hash":"422bd03dda3be683717d7cf940eead7a072fe12e","modified":1523108697316},{"_id":"public/js/embed.js","hash":"78cb9cbc04c32268df2663370f1daab6a2b0a9aa","modified":1523108697316},{"_id":"public/js/TweenMax.min.js","hash":"eaa4e4a08400da3f22dedda706ba56cdce5b0b7a","modified":1523108697316},{"_id":"public/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1523108697316},{"_id":"public/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1523108697316},{"_id":"public/js/404/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1523108697316},{"_id":"public/background/bg.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1523108697316},{"_id":"public/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1523108697316},{"_id":"public/background/bg-1.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1523108697316},{"_id":"public/img/avatar.png","hash":"31f8c6a64a3ccaa454d41fc4eb074aeb94e6cbde","modified":1523108697326},{"_id":"public/font-awesome/fonts/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1523108697329},{"_id":"public/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1523108697330}],"Category":[{"name":"编程语言","_id":"cjfpfla5200058p9kvwc3twjk"},{"name":"开发工具","_id":"cjfpfla5n000g8p9k2znxfpee"},{"name":"个人随笔","_id":"cjfpfla5q000m8p9k8j5ntxdd"},{"name":"digital","_id":"cjfpfla5u000u8p9koayo6ed0"},{"name":"algorithm","_id":"cjfpfla5y00108p9kzylj2whb"},{"name":"分布式架构","_id":"cjfpfla6d001o8p9kr3udyn00"},{"name":"资源分享","_id":"cjfpfla6m00238p9k1zi9vbij"},{"name":"学习笔记","_id":"cjfpfla6p002a8p9kfze8928m"},{"name":"others","_id":"cjfpfla6x002p8p9kmhkq2zzw"},{"name":"数据库","_id":"cjfpfla70002x8p9k5m13f7ki"},{"name":"book","_id":"cjfpfla79003d8p9kvnor62ks"},{"name":"项目实战","_id":"cjfpfla7q00498p9ko1t44sw4"},{"name":"算法","_id":"cjfpfla7u004i8p9kks7ywwio"},{"name":"javacript","_id":"cjfpfla8i005s8p9kyoksp2ip"}],"Data":[],"Page":[{"title":"404 Not Found：该页无法显示","comments":0,"_content":"\n<style type=\"text/css\">\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.search2 {\n\t\theight: 2.2em;\n\t\tfont-size: 1em;\n\t\twidth: 50%;\n\t\tmargin: auto 24%;\n\t\tcolor: #727272;\n\t\topacity: .6;\n\t\tborder: 2px solid lightgray;\n\t}\n\t.search2:hover {\n\t\topacity: 1;\n\t\tbox-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n\t\t};\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n</style>\n\n***\n\n<div class=\"pic\">\n<img src=\"/resources/Mihawk-Wind.gif\" title=\"Mihawk-Wind\">\n</div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n","source":"404/index.md","raw":"title: 404 Not Found：该页无法显示\ncomments: false\npermalink: /404\n\n---\n\n<style type=\"text/css\">\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.search2 {\n\t\theight: 2.2em;\n\t\tfont-size: 1em;\n\t\twidth: 50%;\n\t\tmargin: auto 24%;\n\t\tcolor: #727272;\n\t\topacity: .6;\n\t\tborder: 2px solid lightgray;\n\t}\n\t.search2:hover {\n\t\topacity: 1;\n\t\tbox-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n\t\t};\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n</style>\n\n***\n\n<div class=\"pic\">\n<img src=\"/resources/Mihawk-Wind.gif\" title=\"Mihawk-Wind\">\n</div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n","date":"2017-05-17T23:42:12.000Z","updated":"2017-05-17T23:42:12.000Z","path":"/404.html","layout":"page","_id":"cjfpfla4q00008p9kheqzuk4g","content":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .share {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n      #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n          display: none;\n      }\n</style>\n\n<hr>\n<div class=\"pic\"><br><img src=\"/resources/Mihawk-Wind.gif\" title=\"Mihawk-Wind\"><br></div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n","excerpt":"","more":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .share {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n      #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n          display: none;\n      }\n</style>\n\n<hr>\n<div class=\"pic\"><br><img src=\"/resources/Mihawk-Wind.gif\" title=\"Mihawk-Wind\"><br></div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n"},{"title":"About","date":"2016-04-17T13:16:56.000Z","_content":"\n## 个人简介\n作为一个非计算机专业出身的IT男，入行也是很曲折的。在大学的机械专业，其实对机械一点兴趣都没有，我初中，高中对通信和计算机最感兴趣，但是阴差阳错的成了机械专业的学生。在这里再说教育体制的问题，已经没有必要了。在大三才发觉那不是我想要的，我还是喜欢计算机！大三开始疯狂的学习了几个月java，终于踏入了程序员的行列！\n\n## 本博客的目的\n希望通过我自己的经历能够让学习编程的新手少走些一些弯路，同时我也不会拿官网的hello world教程放在这里，都拿官网的hello world做博客没有意义。我会重点介绍一些学习编程的方法，还有学习专业技能的方法，有了方法学起来事半功倍！\n\n## 编程的理想\n我是一个热爱技术的程序猿，一直觉得编程大牛才是世界上最叼的，好的程序员绝对是造福世界，改变世界。比尔盖茨用自己的window改变了整个世界，扎克伯格用facebook连接了全世界，等等。  \n\n我想用自己的代码改变世界，让来自全世界的人使用自己的软件，框架，哪怕是看了自己的文章，想想就觉得是一件兴奋的事情！\n\n## 技术方向\n- 主修java，javascript，nodejs，go语言，react技术栈，略懂python\n- 数据库方向，mysql，oracle，mongodb\n- 缓存方面，redis，memcached\n- 消息队列，rabbitmq，kafka\n- 服务器，nginx，tomcat，apache，\n- 喜欢架构，希望能够自己搭建一个高并发，高可用，高扩展，低耦合的架构\n\n## 兴趣\n- 运动：篮球，乒乓球，羽毛球都喜欢，最爱的还是篮球\n- 动漫：火影，海贼，秦时明月等等\n- 旅行：人文，历史类偏爱\n- 分享：喜欢把自己的经验分享给大家\n- 读书：小说，历史，专业书籍，最喜欢现实主义小说，最喜欢悲剧\n## 欢迎留言\n如果有什么建议和想法，都可以和我留言，可以在博客下面留言，也可以去我的微博留言，必有回应！","source":"about/index.md","raw":"title: about\ndate: 2016-04-17 21:16:56\n---\n\n## 个人简介\n作为一个非计算机专业出身的IT男，入行也是很曲折的。在大学的机械专业，其实对机械一点兴趣都没有，我初中，高中对通信和计算机最感兴趣，但是阴差阳错的成了机械专业的学生。在这里再说教育体制的问题，已经没有必要了。在大三才发觉那不是我想要的，我还是喜欢计算机！大三开始疯狂的学习了几个月java，终于踏入了程序员的行列！\n\n## 本博客的目的\n希望通过我自己的经历能够让学习编程的新手少走些一些弯路，同时我也不会拿官网的hello world教程放在这里，都拿官网的hello world做博客没有意义。我会重点介绍一些学习编程的方法，还有学习专业技能的方法，有了方法学起来事半功倍！\n\n## 编程的理想\n我是一个热爱技术的程序猿，一直觉得编程大牛才是世界上最叼的，好的程序员绝对是造福世界，改变世界。比尔盖茨用自己的window改变了整个世界，扎克伯格用facebook连接了全世界，等等。  \n\n我想用自己的代码改变世界，让来自全世界的人使用自己的软件，框架，哪怕是看了自己的文章，想想就觉得是一件兴奋的事情！\n\n## 技术方向\n- 主修java，javascript，nodejs，go语言，react技术栈，略懂python\n- 数据库方向，mysql，oracle，mongodb\n- 缓存方面，redis，memcached\n- 消息队列，rabbitmq，kafka\n- 服务器，nginx，tomcat，apache，\n- 喜欢架构，希望能够自己搭建一个高并发，高可用，高扩展，低耦合的架构\n\n## 兴趣\n- 运动：篮球，乒乓球，羽毛球都喜欢，最爱的还是篮球\n- 动漫：火影，海贼，秦时明月等等\n- 旅行：人文，历史类偏爱\n- 分享：喜欢把自己的经验分享给大家\n- 读书：小说，历史，专业书籍，最喜欢现实主义小说，最喜欢悲剧\n## 欢迎留言\n如果有什么建议和想法，都可以和我留言，可以在博客下面留言，也可以去我的微博留言，必有回应！","updated":"2017-07-28T14:52:17.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjfpfla4w00028p9koj4qqqnv","content":"<h2 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h2><p>作为一个非计算机专业出身的IT男，入行也是很曲折的。在大学的机械专业，其实对机械一点兴趣都没有，我初中，高中对通信和计算机最感兴趣，但是阴差阳错的成了机械专业的学生。在这里再说教育体制的问题，已经没有必要了。在大三才发觉那不是我想要的，我还是喜欢计算机！大三开始疯狂的学习了几个月java，终于踏入了程序员的行列！</p>\n<h2 id=\"本博客的目的\"><a href=\"#本博客的目的\" class=\"headerlink\" title=\"本博客的目的\"></a>本博客的目的</h2><p>希望通过我自己的经历能够让学习编程的新手少走些一些弯路，同时我也不会拿官网的hello world教程放在这里，都拿官网的hello world做博客没有意义。我会重点介绍一些学习编程的方法，还有学习专业技能的方法，有了方法学起来事半功倍！</p>\n<h2 id=\"编程的理想\"><a href=\"#编程的理想\" class=\"headerlink\" title=\"编程的理想\"></a>编程的理想</h2><p>我是一个热爱技术的程序猿，一直觉得编程大牛才是世界上最叼的，好的程序员绝对是造福世界，改变世界。比尔盖茨用自己的window改变了整个世界，扎克伯格用facebook连接了全世界，等等。  </p>\n<p>我想用自己的代码改变世界，让来自全世界的人使用自己的软件，框架，哪怕是看了自己的文章，想想就觉得是一件兴奋的事情！</p>\n<h2 id=\"技术方向\"><a href=\"#技术方向\" class=\"headerlink\" title=\"技术方向\"></a>技术方向</h2><ul>\n<li>主修java，javascript，nodejs，go语言，react技术栈，略懂python</li>\n<li>数据库方向，mysql，oracle，mongodb</li>\n<li>缓存方面，redis，memcached</li>\n<li>消息队列，rabbitmq，kafka</li>\n<li>服务器，nginx，tomcat，apache，</li>\n<li>喜欢架构，希望能够自己搭建一个高并发，高可用，高扩展，低耦合的架构</li>\n</ul>\n<h2 id=\"兴趣\"><a href=\"#兴趣\" class=\"headerlink\" title=\"兴趣\"></a>兴趣</h2><ul>\n<li>运动：篮球，乒乓球，羽毛球都喜欢，最爱的还是篮球</li>\n<li>动漫：火影，海贼，秦时明月等等</li>\n<li>旅行：人文，历史类偏爱</li>\n<li>分享：喜欢把自己的经验分享给大家</li>\n<li>读书：小说，历史，专业书籍，最喜欢现实主义小说，最喜欢悲剧<h2 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h2>如果有什么建议和想法，都可以和我留言，可以在博客下面留言，也可以去我的微博留言，必有回应！</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h2><p>作为一个非计算机专业出身的IT男，入行也是很曲折的。在大学的机械专业，其实对机械一点兴趣都没有，我初中，高中对通信和计算机最感兴趣，但是阴差阳错的成了机械专业的学生。在这里再说教育体制的问题，已经没有必要了。在大三才发觉那不是我想要的，我还是喜欢计算机！大三开始疯狂的学习了几个月java，终于踏入了程序员的行列！</p>\n<h2 id=\"本博客的目的\"><a href=\"#本博客的目的\" class=\"headerlink\" title=\"本博客的目的\"></a>本博客的目的</h2><p>希望通过我自己的经历能够让学习编程的新手少走些一些弯路，同时我也不会拿官网的hello world教程放在这里，都拿官网的hello world做博客没有意义。我会重点介绍一些学习编程的方法，还有学习专业技能的方法，有了方法学起来事半功倍！</p>\n<h2 id=\"编程的理想\"><a href=\"#编程的理想\" class=\"headerlink\" title=\"编程的理想\"></a>编程的理想</h2><p>我是一个热爱技术的程序猿，一直觉得编程大牛才是世界上最叼的，好的程序员绝对是造福世界，改变世界。比尔盖茨用自己的window改变了整个世界，扎克伯格用facebook连接了全世界，等等。  </p>\n<p>我想用自己的代码改变世界，让来自全世界的人使用自己的软件，框架，哪怕是看了自己的文章，想想就觉得是一件兴奋的事情！</p>\n<h2 id=\"技术方向\"><a href=\"#技术方向\" class=\"headerlink\" title=\"技术方向\"></a>技术方向</h2><ul>\n<li>主修java，javascript，nodejs，go语言，react技术栈，略懂python</li>\n<li>数据库方向，mysql，oracle，mongodb</li>\n<li>缓存方面，redis，memcached</li>\n<li>消息队列，rabbitmq，kafka</li>\n<li>服务器，nginx，tomcat，apache，</li>\n<li>喜欢架构，希望能够自己搭建一个高并发，高可用，高扩展，低耦合的架构</li>\n</ul>\n<h2 id=\"兴趣\"><a href=\"#兴趣\" class=\"headerlink\" title=\"兴趣\"></a>兴趣</h2><ul>\n<li>运动：篮球，乒乓球，羽毛球都喜欢，最爱的还是篮球</li>\n<li>动漫：火影，海贼，秦时明月等等</li>\n<li>旅行：人文，历史类偏爱</li>\n<li>分享：喜欢把自己的经验分享给大家</li>\n<li>读书：小说，历史，专业书籍，最喜欢现实主义小说，最喜欢悲剧<h2 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h2>如果有什么建议和想法，都可以和我留言，可以在博客下面留言，也可以去我的微博留言，必有回应！</li>\n</ul>\n"},{"title":"Tags","date":"2016-04-17T13:17:06.000Z","_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2016-04-17 21:17:06\n---\n","updated":"2017-05-17T23:42:12.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjfpfla97006p8p9kd8upt9z3","content":"","excerpt":"","more":""}],"Post":[{"title":"Ajax简单教程","date":"2016-07-06T12:53:11.000Z","_content":"** ajax简单教程：** <Excerpt in index | 首页摘要>\n    ajax常用的方法，一些容易出错的地方\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## ajax原理\nAjax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。\nXMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。\n所以我们先从XMLHttpRequest讲起，来看看它的工作原理。首先，我们先来看看XMLHttpRequest这个对象的属性。\n它的属性有：\n\n  | onreadystatechange   | responseText    |\n  | :------------- | :------------- |\n  |  每次状态改变所触发事件的事件处理程序    | 从服务器进程返回数据的字符串形式    |\n\n  | responseXML   | status     |\n  | :------------- | :------------- |\n  | 从服务器进程返回的DOM兼容的文档数据对象  | 从服务器返回的数字代码，比如常见的404 |\n\n  | status Text    | readyState    |\n  | :------------- | :------------- |\n  | 伴随状态码的字符串信息                 | 对象状态值                        |\nreadyState 对象状态值\n- 0 (未初始化) 对象已建立，但是尚未初始化（尚未调用open方法）\n- 1 (初始化) 对象已建立，尚未调用send方法\n- 2 (发送数据) send方法已调用，但是当前的状态及http头未知\n- 3 (数据传送中) 已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误，\n- 4 (完成) 数据接收完毕,此时可以通过通过responseXml和responseText获取完整的回应数据\n\n## ajax的使用\n\n1. 原生的ajax\n\n```js\nfunction CreateXmlHttp() {\n    //非IE浏览器创建XmlHttpRequest对象\n    if (window.XmlHttpRequest) {\n        xmlhttp = new XmlHttpRequest();\n    }\n    //IE浏览器创建XmlHttpRequest对象\n    if (window.ActiveXObject) {\n        try {\n            xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n        }\n        catch (e) {\n            try {\n                xmlhttp = new ActiveXObject(\"msxml2.XMLHTTP\");\n            }\n            catch (ex) { }\n        }\n    }\n}\n\nfunction Ustbwuyi() {\n    var data = document.getElementById(\"username\").value;\n    CreateXmlHttp();\n    if (!xmlhttp) {\n        alert(\"创建xmlhttp对象异常！\");\n        return false;\n    }\n    xmlhttp.open(\"POST\", url, false);\n    xmlhttp.onreadystatechange = function () {\n        if (xmlhttp.readyState == 4) {\n            document.getElementById(\"user1\").innerHTML = \"数据正在加载...\";\n            if (xmlhttp.status == 200) {\n                document.write(xmlhttp.responseText);\n            }\n        }\n    }\n    xmlhttp.send();\n}\n```\n\n2. jquery调用ajax\n\n```js\n$.ajax({\n    type: \"get\",\n    url: \"http://www.cnblogs.com/rss\",\n    beforeSend: function(XMLHttpRequest){\n    //ShowLoading();\n    },\n    success: function(data, textStatus){\n        $(\".ajax.ajaxResult\").html(\"\");\n        $(\"item\",data).each(function(i, domEle){\n        $(\".ajax.ajaxResult\").append(\"<li>\"+$(domEle).children(\"title\").text()+\"</li>\");\n        });\n\n    },\n    complete: function(XMLHttpRequest, textStatus){\n    //HideLoading();\n    },\n    error: function(){\n    //请求出错处理\n    }\n});\n```\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/ajax-study.md","raw":"title: ajax简单教程\ndate: 2016-07-06 20:53:11\ntags: http\ncategories: 编程语言\n---\n** ajax简单教程：** <Excerpt in index | 首页摘要>\n    ajax常用的方法，一些容易出错的地方\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## ajax原理\nAjax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。\nXMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。\n所以我们先从XMLHttpRequest讲起，来看看它的工作原理。首先，我们先来看看XMLHttpRequest这个对象的属性。\n它的属性有：\n\n  | onreadystatechange   | responseText    |\n  | :------------- | :------------- |\n  |  每次状态改变所触发事件的事件处理程序    | 从服务器进程返回数据的字符串形式    |\n\n  | responseXML   | status     |\n  | :------------- | :------------- |\n  | 从服务器进程返回的DOM兼容的文档数据对象  | 从服务器返回的数字代码，比如常见的404 |\n\n  | status Text    | readyState    |\n  | :------------- | :------------- |\n  | 伴随状态码的字符串信息                 | 对象状态值                        |\nreadyState 对象状态值\n- 0 (未初始化) 对象已建立，但是尚未初始化（尚未调用open方法）\n- 1 (初始化) 对象已建立，尚未调用send方法\n- 2 (发送数据) send方法已调用，但是当前的状态及http头未知\n- 3 (数据传送中) 已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误，\n- 4 (完成) 数据接收完毕,此时可以通过通过responseXml和responseText获取完整的回应数据\n\n## ajax的使用\n\n1. 原生的ajax\n\n```js\nfunction CreateXmlHttp() {\n    //非IE浏览器创建XmlHttpRequest对象\n    if (window.XmlHttpRequest) {\n        xmlhttp = new XmlHttpRequest();\n    }\n    //IE浏览器创建XmlHttpRequest对象\n    if (window.ActiveXObject) {\n        try {\n            xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n        }\n        catch (e) {\n            try {\n                xmlhttp = new ActiveXObject(\"msxml2.XMLHTTP\");\n            }\n            catch (ex) { }\n        }\n    }\n}\n\nfunction Ustbwuyi() {\n    var data = document.getElementById(\"username\").value;\n    CreateXmlHttp();\n    if (!xmlhttp) {\n        alert(\"创建xmlhttp对象异常！\");\n        return false;\n    }\n    xmlhttp.open(\"POST\", url, false);\n    xmlhttp.onreadystatechange = function () {\n        if (xmlhttp.readyState == 4) {\n            document.getElementById(\"user1\").innerHTML = \"数据正在加载...\";\n            if (xmlhttp.status == 200) {\n                document.write(xmlhttp.responseText);\n            }\n        }\n    }\n    xmlhttp.send();\n}\n```\n\n2. jquery调用ajax\n\n```js\n$.ajax({\n    type: \"get\",\n    url: \"http://www.cnblogs.com/rss\",\n    beforeSend: function(XMLHttpRequest){\n    //ShowLoading();\n    },\n    success: function(data, textStatus){\n        $(\".ajax.ajaxResult\").html(\"\");\n        $(\"item\",data).each(function(i, domEle){\n        $(\".ajax.ajaxResult\").append(\"<li>\"+$(domEle).children(\"title\").text()+\"</li>\");\n        });\n\n    },\n    complete: function(XMLHttpRequest, textStatus){\n    //HideLoading();\n    },\n    error: function(){\n    //请求出错处理\n    }\n});\n```\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"ajax-study","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla4s00018p9kb4f71mkn","content":"<p><strong> ajax简单教程：</strong> <Excerpt in index | 首页摘要><br>    ajax常用的方法，一些容易出错的地方<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"ajax原理\"><a href=\"#ajax原理\" class=\"headerlink\" title=\"ajax原理\"></a>ajax原理</h2><p>Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。<br>XMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。<br>所以我们先从XMLHttpRequest讲起，来看看它的工作原理。首先，我们先来看看XMLHttpRequest这个对象的属性。<br>它的属性有：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">onreadystatechange</th>\n<th style=\"text-align:left\">responseText</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">每次状态改变所触发事件的事件处理程序</td>\n<td style=\"text-align:left\">从服务器进程返回数据的字符串形式</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">responseXML</th>\n<th style=\"text-align:left\">status</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">从服务器进程返回的DOM兼容的文档数据对象</td>\n<td style=\"text-align:left\">从服务器返回的数字代码，比如常见的404</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">status Text</th>\n<th style=\"text-align:left\">readyState</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">伴随状态码的字符串信息</td>\n<td style=\"text-align:left\">对象状态值</td>\n</tr>\n</tbody>\n</table>\n<p>readyState 对象状态值</p>\n<ul>\n<li>0 (未初始化) 对象已建立，但是尚未初始化（尚未调用open方法）</li>\n<li>1 (初始化) 对象已建立，尚未调用send方法</li>\n<li>2 (发送数据) send方法已调用，但是当前的状态及http头未知</li>\n<li>3 (数据传送中) 已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误，</li>\n<li>4 (完成) 数据接收完毕,此时可以通过通过responseXml和responseText获取完整的回应数据</li>\n</ul>\n<h2 id=\"ajax的使用\"><a href=\"#ajax的使用\" class=\"headerlink\" title=\"ajax的使用\"></a>ajax的使用</h2><ol>\n<li>原生的ajax</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreateXmlHttp</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//非IE浏览器创建XmlHttpRequest对象</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XmlHttpRequest) &#123;</div><div class=\"line\">        xmlhttp = <span class=\"keyword\">new</span> XmlHttpRequest();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//IE浏览器创建XmlHttpRequest对象</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.ActiveXObject) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            xmlhttp = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                xmlhttp = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"msxml2.XMLHTTP\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">catch</span> (ex) &#123; &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ustbwuyi</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"username\"</span>).value;</div><div class=\"line\">    CreateXmlHttp();</div><div class=\"line\">    <span class=\"keyword\">if</span> (!xmlhttp) &#123;</div><div class=\"line\">        alert(<span class=\"string\">\"创建xmlhttp对象异常！\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    xmlhttp.open(<span class=\"string\">\"POST\"</span>, url, <span class=\"literal\">false</span>);</div><div class=\"line\">    xmlhttp.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (xmlhttp.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"user1\"</span>).innerHTML = <span class=\"string\">\"数据正在加载...\"</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (xmlhttp.status == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">                <span class=\"built_in\">document</span>.write(xmlhttp.responseText);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    xmlhttp.send();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>jquery调用ajax</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">    type: <span class=\"string\">\"get\"</span>,</div><div class=\"line\">    url: <span class=\"string\">\"http://www.cnblogs.com/rss\"</span>,</div><div class=\"line\">    beforeSend: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">XMLHttpRequest</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//ShowLoading();</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, textStatus</span>)</span>&#123;</div><div class=\"line\">        $(<span class=\"string\">\".ajax.ajaxResult\"</span>).html(<span class=\"string\">\"\"</span>);</div><div class=\"line\">        $(<span class=\"string\">\"item\"</span>,data).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i, domEle</span>)</span>&#123;</div><div class=\"line\">        $(<span class=\"string\">\".ajax.ajaxResult\"</span>).append(<span class=\"string\">\"&lt;li&gt;\"</span>+$(domEle).children(<span class=\"string\">\"title\"</span>).text()+<span class=\"string\">\"&lt;/li&gt;\"</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">XMLHttpRequest, textStatus</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//HideLoading();</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//请求出错处理</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> ajax简单教程：</strong> <Excerpt in index | 首页摘要><br>    ajax常用的方法，一些容易出错的地方<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"ajax原理\"><a href=\"#ajax原理\" class=\"headerlink\" title=\"ajax原理\"></a>ajax原理</h2><p>Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。<br>XMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。<br>所以我们先从XMLHttpRequest讲起，来看看它的工作原理。首先，我们先来看看XMLHttpRequest这个对象的属性。<br>它的属性有：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">onreadystatechange</th>\n<th style=\"text-align:left\">responseText</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">每次状态改变所触发事件的事件处理程序</td>\n<td style=\"text-align:left\">从服务器进程返回数据的字符串形式</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">responseXML</th>\n<th style=\"text-align:left\">status</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">从服务器进程返回的DOM兼容的文档数据对象</td>\n<td style=\"text-align:left\">从服务器返回的数字代码，比如常见的404</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">status Text</th>\n<th style=\"text-align:left\">readyState</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">伴随状态码的字符串信息</td>\n<td style=\"text-align:left\">对象状态值</td>\n</tr>\n</tbody>\n</table>\n<p>readyState 对象状态值</p>\n<ul>\n<li>0 (未初始化) 对象已建立，但是尚未初始化（尚未调用open方法）</li>\n<li>1 (初始化) 对象已建立，尚未调用send方法</li>\n<li>2 (发送数据) send方法已调用，但是当前的状态及http头未知</li>\n<li>3 (数据传送中) 已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误，</li>\n<li>4 (完成) 数据接收完毕,此时可以通过通过responseXml和responseText获取完整的回应数据</li>\n</ul>\n<h2 id=\"ajax的使用\"><a href=\"#ajax的使用\" class=\"headerlink\" title=\"ajax的使用\"></a>ajax的使用</h2><ol>\n<li>原生的ajax</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreateXmlHttp</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//非IE浏览器创建XmlHttpRequest对象</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XmlHttpRequest) &#123;</div><div class=\"line\">        xmlhttp = <span class=\"keyword\">new</span> XmlHttpRequest();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//IE浏览器创建XmlHttpRequest对象</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.ActiveXObject) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            xmlhttp = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                xmlhttp = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"msxml2.XMLHTTP\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">catch</span> (ex) &#123; &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ustbwuyi</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"username\"</span>).value;</div><div class=\"line\">    CreateXmlHttp();</div><div class=\"line\">    <span class=\"keyword\">if</span> (!xmlhttp) &#123;</div><div class=\"line\">        alert(<span class=\"string\">\"创建xmlhttp对象异常！\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    xmlhttp.open(<span class=\"string\">\"POST\"</span>, url, <span class=\"literal\">false</span>);</div><div class=\"line\">    xmlhttp.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (xmlhttp.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"user1\"</span>).innerHTML = <span class=\"string\">\"数据正在加载...\"</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (xmlhttp.status == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">                <span class=\"built_in\">document</span>.write(xmlhttp.responseText);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    xmlhttp.send();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>jquery调用ajax</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">    type: <span class=\"string\">\"get\"</span>,</div><div class=\"line\">    url: <span class=\"string\">\"http://www.cnblogs.com/rss\"</span>,</div><div class=\"line\">    beforeSend: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">XMLHttpRequest</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//ShowLoading();</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, textStatus</span>)</span>&#123;</div><div class=\"line\">        $(<span class=\"string\">\".ajax.ajaxResult\"</span>).html(<span class=\"string\">\"\"</span>);</div><div class=\"line\">        $(<span class=\"string\">\"item\"</span>,data).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i, domEle</span>)</span>&#123;</div><div class=\"line\">        $(<span class=\"string\">\".ajax.ajaxResult\"</span>).append(<span class=\"string\">\"&lt;li&gt;\"</span>+$(domEle).children(<span class=\"string\">\"title\"</span>).text()+<span class=\"string\">\"&lt;/li&gt;\"</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">XMLHttpRequest, textStatus</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//HideLoading();</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//请求出错处理</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Ajax和jsonp区别","date":"2016-07-06T12:54:16.000Z","_content":"** ajax和jsonp区别 ：** <Excerpt in index | 首页摘要>\n    jquery的封装影响了很多人的误解，所以有必要对ajax和jsonp的本质区别讲解，\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## jsonp是什么？\n利用在页面中创建`<script>`节点的方法向不同域提交HTTP请求的方法称为JSONP，这项技术可以解决跨域提交Ajax请求的问题。JSONP的工作原理如下所述：假设在 http://example1.com/index.php 这个页面中向 http://example2.com/getinfo.php 提交GET请求，我们可以将下面的JavaScript代码放在 http://example1.com/index.php 这个页面中来实现：\n\n```js\nvar eleScript= document.createElement(\"script\");\neleScript.type = \"text/javascript\";\neleScript.src = \"http://example2.com/getinfo.php\";\ndocument.getElementsByTagName(\"HEAD\")[0].appendChild(eleScript);\n```\n\n当GET请求从 http://example2.com/getinfo.php 返回时，可以返回一段JavaScript代码，这段代码会自动执行，可以用来负责调用 http://example1.com/index.php 页面中的一个callback函数。\n\nJSONP的优点是：它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行，不需要XMLHttpRequest或ActiveX的支持；并且在请求完毕后可以通过调用callback的方式回传结果。\n\nJSONP的缺点则是：它只支持GET请求而不支持POST等其它类型的HTTP请求；它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。\n\n## ajax是什么？\n\nAjax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。\n　XMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。\n\n## 误区是怎么产生的？\n\n这个很大程度上要归功于jquery的封装，由于jquery在api上，对json和jsonp都属于ajax模块，导致很多人误以为jsonp是ajax一种。\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/ajax-jsonp.md","raw":"title: ajax和jsonp区别\ndate: 2016-07-06 20:54:16\ntags: http\ncategories: 编程语言\n---\n** ajax和jsonp区别 ：** <Excerpt in index | 首页摘要>\n    jquery的封装影响了很多人的误解，所以有必要对ajax和jsonp的本质区别讲解，\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## jsonp是什么？\n利用在页面中创建`<script>`节点的方法向不同域提交HTTP请求的方法称为JSONP，这项技术可以解决跨域提交Ajax请求的问题。JSONP的工作原理如下所述：假设在 http://example1.com/index.php 这个页面中向 http://example2.com/getinfo.php 提交GET请求，我们可以将下面的JavaScript代码放在 http://example1.com/index.php 这个页面中来实现：\n\n```js\nvar eleScript= document.createElement(\"script\");\neleScript.type = \"text/javascript\";\neleScript.src = \"http://example2.com/getinfo.php\";\ndocument.getElementsByTagName(\"HEAD\")[0].appendChild(eleScript);\n```\n\n当GET请求从 http://example2.com/getinfo.php 返回时，可以返回一段JavaScript代码，这段代码会自动执行，可以用来负责调用 http://example1.com/index.php 页面中的一个callback函数。\n\nJSONP的优点是：它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行，不需要XMLHttpRequest或ActiveX的支持；并且在请求完毕后可以通过调用callback的方式回传结果。\n\nJSONP的缺点则是：它只支持GET请求而不支持POST等其它类型的HTTP请求；它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。\n\n## ajax是什么？\n\nAjax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。\n　XMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。\n\n## 误区是怎么产生的？\n\n这个很大程度上要归功于jquery的封装，由于jquery在api上，对json和jsonp都属于ajax模块，导致很多人误以为jsonp是ajax一种。\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"ajax-jsonp","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla4x00038p9k66e0m28m","content":"<p><strong> ajax和jsonp区别 ：</strong> <Excerpt in index | 首页摘要><br>    jquery的封装影响了很多人的误解，所以有必要对ajax和jsonp的本质区别讲解，<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"jsonp是什么？\"><a href=\"#jsonp是什么？\" class=\"headerlink\" title=\"jsonp是什么？\"></a>jsonp是什么？</h2><p>利用在页面中创建<code>&lt;script&gt;</code>节点的方法向不同域提交HTTP请求的方法称为JSONP，这项技术可以解决跨域提交Ajax请求的问题。JSONP的工作原理如下所述：假设在 <a href=\"http://example1.com/index.php\">http://example1.com/index.php</a> 这个页面中向 <a href=\"http://example2.com/getinfo.php\">http://example2.com/getinfo.php</a> 提交GET请求，我们可以将下面的JavaScript代码放在 <a href=\"http://example1.com/index.php\">http://example1.com/index.php</a> 这个页面中来实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> eleScript= <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\">eleScript.type = <span class=\"string\">\"text/javascript\"</span>;</div><div class=\"line\">eleScript.src = <span class=\"string\">\"http://example2.com/getinfo.php\"</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"HEAD\"</span>)[<span class=\"number\">0</span>].appendChild(eleScript);</div></pre></td></tr></table></figure>\n<p>当GET请求从 <a href=\"http://example2.com/getinfo.php\">http://example2.com/getinfo.php</a> 返回时，可以返回一段JavaScript代码，这段代码会自动执行，可以用来负责调用 <a href=\"http://example1.com/index.php\">http://example1.com/index.php</a> 页面中的一个callback函数。</p>\n<p>JSONP的优点是：它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行，不需要XMLHttpRequest或ActiveX的支持；并且在请求完毕后可以通过调用callback的方式回传结果。</p>\n<p>JSONP的缺点则是：它只支持GET请求而不支持POST等其它类型的HTTP请求；它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。</p>\n<h2 id=\"ajax是什么？\"><a href=\"#ajax是什么？\" class=\"headerlink\" title=\"ajax是什么？\"></a>ajax是什么？</h2><p>Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。<br>　XMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。</p>\n<h2 id=\"误区是怎么产生的？\"><a href=\"#误区是怎么产生的？\" class=\"headerlink\" title=\"误区是怎么产生的？\"></a>误区是怎么产生的？</h2><p>这个很大程度上要归功于jquery的封装，由于jquery在api上，对json和jsonp都属于ajax模块，导致很多人误以为jsonp是ajax一种。</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> ajax和jsonp区别 ：</strong> <Excerpt in index | 首页摘要><br>    jquery的封装影响了很多人的误解，所以有必要对ajax和jsonp的本质区别讲解，<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"jsonp是什么？\"><a href=\"#jsonp是什么？\" class=\"headerlink\" title=\"jsonp是什么？\"></a>jsonp是什么？</h2><p>利用在页面中创建<code>&lt;script&gt;</code>节点的方法向不同域提交HTTP请求的方法称为JSONP，这项技术可以解决跨域提交Ajax请求的问题。JSONP的工作原理如下所述：假设在 <a href=\"http://example1.com/index.php\">http://example1.com/index.php</a> 这个页面中向 <a href=\"http://example2.com/getinfo.php\">http://example2.com/getinfo.php</a> 提交GET请求，我们可以将下面的JavaScript代码放在 <a href=\"http://example1.com/index.php\">http://example1.com/index.php</a> 这个页面中来实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> eleScript= <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\">eleScript.type = <span class=\"string\">\"text/javascript\"</span>;</div><div class=\"line\">eleScript.src = <span class=\"string\">\"http://example2.com/getinfo.php\"</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"HEAD\"</span>)[<span class=\"number\">0</span>].appendChild(eleScript);</div></pre></td></tr></table></figure>\n<p>当GET请求从 <a href=\"http://example2.com/getinfo.php\">http://example2.com/getinfo.php</a> 返回时，可以返回一段JavaScript代码，这段代码会自动执行，可以用来负责调用 <a href=\"http://example1.com/index.php\">http://example1.com/index.php</a> 页面中的一个callback函数。</p>\n<p>JSONP的优点是：它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行，不需要XMLHttpRequest或ActiveX的支持；并且在请求完毕后可以通过调用callback的方式回传结果。</p>\n<p>JSONP的缺点则是：它只支持GET请求而不支持POST等其它类型的HTTP请求；它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。</p>\n<h2 id=\"ajax是什么？\"><a href=\"#ajax是什么？\" class=\"headerlink\" title=\"ajax是什么？\"></a>ajax是什么？</h2><p>Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。<br>　XMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。</p>\n<h2 id=\"误区是怎么产生的？\"><a href=\"#误区是怎么产生的？\" class=\"headerlink\" title=\"误区是怎么产生的？\"></a>误区是怎么产生的？</h2><p>这个很大程度上要归功于jquery的封装，由于jquery在api上，对json和jsonp都属于ajax模块，导致很多人误以为jsonp是ajax一种。</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Atom中最好的js代码补全","date":"2016-07-21T22:11:30.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n    这或许是atom中最好的js代码补全,包含了express,nodejs,es6,目前仍在继续更新\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## best-js-snippets\n\n这个package的名字就叫 **best-js-snippets** ,用atom的可以下载使用一下,提出建议,我会尽快修改\n![best-js-snippets](http://o7kalf5h3.bkt.clouddn.com/snippets.png)\n\n## 特性\n1. express补全\n2. es6补全\n3. js补全(string,dom操作)\n4. nodejs补全(fs,event,util,module,class,assert)\n\n\n## 如何安装\n1. atom编辑器中找到设置,搜索package,安装即可.\n2. 重启atom,享受吧!\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/best-js-snippet.md","raw":"title: atom中最好的js代码补全\ndate: 2016-07-22 06:11:30\ntags: others\ncategories: 开发工具\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n    这或许是atom中最好的js代码补全,包含了express,nodejs,es6,目前仍在继续更新\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## best-js-snippets\n\n这个package的名字就叫 **best-js-snippets** ,用atom的可以下载使用一下,提出建议,我会尽快修改\n![best-js-snippets](http://o7kalf5h3.bkt.clouddn.com/snippets.png)\n\n## 特性\n1. express补全\n2. es6补全\n3. js补全(string,dom操作)\n4. nodejs补全(fs,event,util,module,class,assert)\n\n\n## 如何安装\n1. atom编辑器中找到设置,搜索package,安装即可.\n2. 重启atom,享受吧!\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"best-js-snippet","published":1,"updated":"2017-05-17T23:42:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla5200068p9k833cyutz","content":"<p><strong> Atom中最好的js代码补全：</strong> <Excerpt in index | 首页摘要><br>    这或许是atom中最好的js代码补全,包含了express,nodejs,es6,目前仍在继续更新<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"best-js-snippets\"><a href=\"#best-js-snippets\" class=\"headerlink\" title=\"best-js-snippets\"></a>best-js-snippets</h2><p>这个package的名字就叫 <strong>best-js-snippets</strong> ,用atom的可以下载使用一下,提出建议,我会尽快修改<br><img src=\"http://o7kalf5h3.bkt.clouddn.com/snippets.png\" alt=\"best-js-snippets\"></p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ol>\n<li>express补全</li>\n<li>es6补全</li>\n<li>js补全(string,dom操作)</li>\n<li>nodejs补全(fs,event,util,module,class,assert)</li>\n</ol>\n<h2 id=\"如何安装\"><a href=\"#如何安装\" class=\"headerlink\" title=\"如何安装\"></a>如何安装</h2><ol>\n<li>atom编辑器中找到设置,搜索package,安装即可.</li>\n<li>重启atom,享受吧!</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> Atom中最好的js代码补全：</strong> <Excerpt in index | 首页摘要><br>    这或许是atom中最好的js代码补全,包含了express,nodejs,es6,目前仍在继续更新<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"best-js-snippets\"><a href=\"#best-js-snippets\" class=\"headerlink\" title=\"best-js-snippets\"></a>best-js-snippets</h2><p>这个package的名字就叫 <strong>best-js-snippets</strong> ,用atom的可以下载使用一下,提出建议,我会尽快修改<br><img src=\"http://o7kalf5h3.bkt.clouddn.com/snippets.png\" alt=\"best-js-snippets\"></p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ol>\n<li>express补全</li>\n<li>es6补全</li>\n<li>js补全(string,dom操作)</li>\n<li>nodejs补全(fs,event,util,module,class,assert)</li>\n</ol>\n<h2 id=\"如何安装\"><a href=\"#如何安装\" class=\"headerlink\" title=\"如何安装\"></a>如何安装</h2><ol>\n<li>atom编辑器中找到设置,搜索package,安装即可.</li>\n<li>重启atom,享受吧!</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"如何写一篇好博客？","date":"2017-05-15T15:04:48.000Z","_content":"** 提高自己博客的质量：** <Excerpt in index | 首页摘要>\n写博客陆陆续续也有一年了，但是一直没有多少访问量，仔细看了很多大神的博客，总结了几点，分享一下。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 好博客，好文章是什么样的？\n1. 文章名称鲜明，一看名称就知道关于什么的内容\n2. 整体结构清晰，把事件或者原理的始末按照‘什么样（what？）’，‘为什么（why）’，‘怎么做（how）’说明\n3. 简明扼要。太啰嗦，没人看。\n4. 难易适中，太高深也没人看\n5. 图文搭配，有句话说的好，**一图胜千文**，好的图片胜过千言万语\n\n## 怎么写出好博客？\n1. 定主题和文章名称。如果想写一个关于redis后台启动的文章，名称要准确，就叫redis后台启动，不要起啰嗦的名字，比如redis如何后台启动\n2. 准备资料阶段，熟悉redis配置相关资料，做好功课\n3. 定文章的结构和提纲。还拿这个redis后台启动为例，你得说明什么是后台启动？为什么要后台启动？如何做到后台启动？\n4. 语言表单，简单直白，不用凑字数\n5. 深入主题，比如挖掘更多redis的配置，把参数简要说明\n6. 找一个好图片，如果找不到，自己制作一个最契合自己主题的图片\n7. 把文章发给好友阅读，提出宝贵的意见\n8. 改进博客\n9. 坚持写博客\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/bestblog.md","raw":"title: 如何写一篇好博客？\ndate: 2017-05-15 23:04:48\ntags: others\ncategories: 个人随笔\n---\n** 提高自己博客的质量：** <Excerpt in index | 首页摘要>\n写博客陆陆续续也有一年了，但是一直没有多少访问量，仔细看了很多大神的博客，总结了几点，分享一下。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 好博客，好文章是什么样的？\n1. 文章名称鲜明，一看名称就知道关于什么的内容\n2. 整体结构清晰，把事件或者原理的始末按照‘什么样（what？）’，‘为什么（why）’，‘怎么做（how）’说明\n3. 简明扼要。太啰嗦，没人看。\n4. 难易适中，太高深也没人看\n5. 图文搭配，有句话说的好，**一图胜千文**，好的图片胜过千言万语\n\n## 怎么写出好博客？\n1. 定主题和文章名称。如果想写一个关于redis后台启动的文章，名称要准确，就叫redis后台启动，不要起啰嗦的名字，比如redis如何后台启动\n2. 准备资料阶段，熟悉redis配置相关资料，做好功课\n3. 定文章的结构和提纲。还拿这个redis后台启动为例，你得说明什么是后台启动？为什么要后台启动？如何做到后台启动？\n4. 语言表单，简单直白，不用凑字数\n5. 深入主题，比如挖掘更多redis的配置，把参数简要说明\n6. 找一个好图片，如果找不到，自己制作一个最契合自己主题的图片\n7. 把文章发给好友阅读，提出宝贵的意见\n8. 改进博客\n9. 坚持写博客\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"bestblog","published":1,"updated":"2017-05-15T15:27:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla5400078p9kxvdhvzwe","content":"<p><strong> 提高自己博客的质量：</strong> <Excerpt in index | 首页摘要><br>写博客陆陆续续也有一年了，但是一直没有多少访问量，仔细看了很多大神的博客，总结了几点，分享一下。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"好博客，好文章是什么样的？\"><a href=\"#好博客，好文章是什么样的？\" class=\"headerlink\" title=\"好博客，好文章是什么样的？\"></a>好博客，好文章是什么样的？</h2><ol>\n<li>文章名称鲜明，一看名称就知道关于什么的内容</li>\n<li>整体结构清晰，把事件或者原理的始末按照‘什么样（what？）’，‘为什么（why）’，‘怎么做（how）’说明</li>\n<li>简明扼要。太啰嗦，没人看。</li>\n<li>难易适中，太高深也没人看</li>\n<li>图文搭配，有句话说的好，<strong>一图胜千文</strong>，好的图片胜过千言万语</li>\n</ol>\n<h2 id=\"怎么写出好博客？\"><a href=\"#怎么写出好博客？\" class=\"headerlink\" title=\"怎么写出好博客？\"></a>怎么写出好博客？</h2><ol>\n<li>定主题和文章名称。如果想写一个关于redis后台启动的文章，名称要准确，就叫redis后台启动，不要起啰嗦的名字，比如redis如何后台启动</li>\n<li>准备资料阶段，熟悉redis配置相关资料，做好功课</li>\n<li>定文章的结构和提纲。还拿这个redis后台启动为例，你得说明什么是后台启动？为什么要后台启动？如何做到后台启动？</li>\n<li>语言表单，简单直白，不用凑字数</li>\n<li>深入主题，比如挖掘更多redis的配置，把参数简要说明</li>\n<li>找一个好图片，如果找不到，自己制作一个最契合自己主题的图片</li>\n<li>把文章发给好友阅读，提出宝贵的意见</li>\n<li>改进博客</li>\n<li>坚持写博客</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 提高自己博客的质量：</strong> <Excerpt in index | 首页摘要><br>写博客陆陆续续也有一年了，但是一直没有多少访问量，仔细看了很多大神的博客，总结了几点，分享一下。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"好博客，好文章是什么样的？\"><a href=\"#好博客，好文章是什么样的？\" class=\"headerlink\" title=\"好博客，好文章是什么样的？\"></a>好博客，好文章是什么样的？</h2><ol>\n<li>文章名称鲜明，一看名称就知道关于什么的内容</li>\n<li>整体结构清晰，把事件或者原理的始末按照‘什么样（what？）’，‘为什么（why）’，‘怎么做（how）’说明</li>\n<li>简明扼要。太啰嗦，没人看。</li>\n<li>难易适中，太高深也没人看</li>\n<li>图文搭配，有句话说的好，<strong>一图胜千文</strong>，好的图片胜过千言万语</li>\n</ol>\n<h2 id=\"怎么写出好博客？\"><a href=\"#怎么写出好博客？\" class=\"headerlink\" title=\"怎么写出好博客？\"></a>怎么写出好博客？</h2><ol>\n<li>定主题和文章名称。如果想写一个关于redis后台启动的文章，名称要准确，就叫redis后台启动，不要起啰嗦的名字，比如redis如何后台启动</li>\n<li>准备资料阶段，熟悉redis配置相关资料，做好功课</li>\n<li>定文章的结构和提纲。还拿这个redis后台启动为例，你得说明什么是后台启动？为什么要后台启动？如何做到后台启动？</li>\n<li>语言表单，简单直白，不用凑字数</li>\n<li>深入主题，比如挖掘更多redis的配置，把参数简要说明</li>\n<li>找一个好图片，如果找不到，自己制作一个最契合自己主题的图片</li>\n<li>把文章发给好友阅读，提出宝贵的意见</li>\n<li>改进博客</li>\n<li>坚持写博客</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"如何选购合适的电脑","date":"2017-06-01T09:34:04.000Z","_content":"** 购买合适的电脑：** <Excerpt in index | 首页摘要>\n现代的生活中每个人都已经离不开电脑了，打游戏，看电影，办公，等等。购买一个合适的电脑显得尤为重要，电脑不舒服，用着影响心情。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 买电脑主要干什么\n1. 看电影，上网\n2. 打游戏\n3. 办公（移动办公）\n4. 平面设计（二维）\n5. 编程（ios和其它，深度学习）\n6. 效果图渲染（3维制图）\n\n## 电脑配置说明\n目前电脑配置的cpu，内存都很高，显卡也很好，而普通电脑的瓶颈都是在硬盘上，所以一台普通电脑换上固体硬盘体验立即上了一个档次，所以现在买电脑不带固态硬盘没法玩的。这里我之列一些主要配置，至于买笔记本还是台式机个人喜好。台式机性能肯定远超同价位笔记本，这个是毋庸置疑的。\n\n## 看电影，上网\n看电影上网，对电脑配置要求比较低的，一般普通双核cpu，amd的，酷睿i3都不在话下，内存的话4g够用，8g就浪费了。买笔记本或者台式机都可以  \n推荐配置1：i3处理器，4g内存，128固态，整体价位3000-4000左右  \n推荐配置1：i5处理器，4g内存，256固态\n\n## 打游戏\n游戏主机是最烧钱的，其实游戏主机的cpu要求一般，主要在显卡，内存上。建议买台式机\n* 一般的主流网游：i5或i7处理器，内存8g，显卡的话中端显卡就ok，硬盘128ssd+1Thdd起\n* 大型单机：i5或i7处理器，内存16g，，显卡中高端gtx960，970即可，硬盘128ssd+1Thdd起\n* 发烧友：i7处理器，内存32g，显卡高端gtx1060以上，硬盘512ssd+1Thdd起\n\n## 办公\n很多商务人士需要携带笔记本，其实对笔记本的性能要求一般，但是便携性要求很高，用超极本最合适的，  推荐配置：4g内存，256ssd，i5即可\n\n## 平面设计\n使用ps，ae之类的软件居多，对内存和cpu要求较高，显卡一般即可\n推荐配置1：16g内存，i7处理器，256ssd，2k／4k专业显示器，中端显卡即可\n推荐配置2：macbookpro15 16g，512ssd，i7处理器\n\n## 编程\n这里应该分为两类：做mac，ios开发之类的肯定得首选macbookpro，而做windows软件开发肯定windows好一些。个人推荐mac的笔记本做编程，一用就停不下来，会上瘾。  \n推荐配置1：macbookpro15 16g，512ssd，i7处理器  \n推荐配置2：i7处理器，16g内存，512ssd，中端显卡\n\n## 效果图渲染（3维制图）\n这个是专业领域的需求，对显卡和内存，cpu要求都较高，肯能需要双显卡。    \n推荐配置1：至强处理器，32g内存，512ssd+1Thdd  \n推荐配置2：i7处理器，32g内存，512ssd+1Thdd\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/buy-computer.md","raw":"title: 如何选购合适的电脑\ndate: 2017-06-01 17:34:04\ntags: 数码产品\ncategories: digital\n---\n** 购买合适的电脑：** <Excerpt in index | 首页摘要>\n现代的生活中每个人都已经离不开电脑了，打游戏，看电影，办公，等等。购买一个合适的电脑显得尤为重要，电脑不舒服，用着影响心情。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 买电脑主要干什么\n1. 看电影，上网\n2. 打游戏\n3. 办公（移动办公）\n4. 平面设计（二维）\n5. 编程（ios和其它，深度学习）\n6. 效果图渲染（3维制图）\n\n## 电脑配置说明\n目前电脑配置的cpu，内存都很高，显卡也很好，而普通电脑的瓶颈都是在硬盘上，所以一台普通电脑换上固体硬盘体验立即上了一个档次，所以现在买电脑不带固态硬盘没法玩的。这里我之列一些主要配置，至于买笔记本还是台式机个人喜好。台式机性能肯定远超同价位笔记本，这个是毋庸置疑的。\n\n## 看电影，上网\n看电影上网，对电脑配置要求比较低的，一般普通双核cpu，amd的，酷睿i3都不在话下，内存的话4g够用，8g就浪费了。买笔记本或者台式机都可以  \n推荐配置1：i3处理器，4g内存，128固态，整体价位3000-4000左右  \n推荐配置1：i5处理器，4g内存，256固态\n\n## 打游戏\n游戏主机是最烧钱的，其实游戏主机的cpu要求一般，主要在显卡，内存上。建议买台式机\n* 一般的主流网游：i5或i7处理器，内存8g，显卡的话中端显卡就ok，硬盘128ssd+1Thdd起\n* 大型单机：i5或i7处理器，内存16g，，显卡中高端gtx960，970即可，硬盘128ssd+1Thdd起\n* 发烧友：i7处理器，内存32g，显卡高端gtx1060以上，硬盘512ssd+1Thdd起\n\n## 办公\n很多商务人士需要携带笔记本，其实对笔记本的性能要求一般，但是便携性要求很高，用超极本最合适的，  推荐配置：4g内存，256ssd，i5即可\n\n## 平面设计\n使用ps，ae之类的软件居多，对内存和cpu要求较高，显卡一般即可\n推荐配置1：16g内存，i7处理器，256ssd，2k／4k专业显示器，中端显卡即可\n推荐配置2：macbookpro15 16g，512ssd，i7处理器\n\n## 编程\n这里应该分为两类：做mac，ios开发之类的肯定得首选macbookpro，而做windows软件开发肯定windows好一些。个人推荐mac的笔记本做编程，一用就停不下来，会上瘾。  \n推荐配置1：macbookpro15 16g，512ssd，i7处理器  \n推荐配置2：i7处理器，16g内存，512ssd，中端显卡\n\n## 效果图渲染（3维制图）\n这个是专业领域的需求，对显卡和内存，cpu要求都较高，肯能需要双显卡。    \n推荐配置1：至强处理器，32g内存，512ssd+1Thdd  \n推荐配置2：i7处理器，32g内存，512ssd+1Thdd\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"buy-computer","published":1,"updated":"2017-06-05T03:48:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla5500098p9kt4pgu04i","content":"<p><strong> 购买合适的电脑：</strong> <Excerpt in index | 首页摘要><br>现代的生活中每个人都已经离不开电脑了，打游戏，看电影，办公，等等。购买一个合适的电脑显得尤为重要，电脑不舒服，用着影响心情。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"买电脑主要干什么\"><a href=\"#买电脑主要干什么\" class=\"headerlink\" title=\"买电脑主要干什么\"></a>买电脑主要干什么</h2><ol>\n<li>看电影，上网</li>\n<li>打游戏</li>\n<li>办公（移动办公）</li>\n<li>平面设计（二维）</li>\n<li>编程（ios和其它，深度学习）</li>\n<li>效果图渲染（3维制图）</li>\n</ol>\n<h2 id=\"电脑配置说明\"><a href=\"#电脑配置说明\" class=\"headerlink\" title=\"电脑配置说明\"></a>电脑配置说明</h2><p>目前电脑配置的cpu，内存都很高，显卡也很好，而普通电脑的瓶颈都是在硬盘上，所以一台普通电脑换上固体硬盘体验立即上了一个档次，所以现在买电脑不带固态硬盘没法玩的。这里我之列一些主要配置，至于买笔记本还是台式机个人喜好。台式机性能肯定远超同价位笔记本，这个是毋庸置疑的。</p>\n<h2 id=\"看电影，上网\"><a href=\"#看电影，上网\" class=\"headerlink\" title=\"看电影，上网\"></a>看电影，上网</h2><p>看电影上网，对电脑配置要求比较低的，一般普通双核cpu，amd的，酷睿i3都不在话下，内存的话4g够用，8g就浪费了。买笔记本或者台式机都可以<br>推荐配置1：i3处理器，4g内存，128固态，整体价位3000-4000左右<br>推荐配置1：i5处理器，4g内存，256固态</p>\n<h2 id=\"打游戏\"><a href=\"#打游戏\" class=\"headerlink\" title=\"打游戏\"></a>打游戏</h2><p>游戏主机是最烧钱的，其实游戏主机的cpu要求一般，主要在显卡，内存上。建议买台式机</p>\n<ul>\n<li>一般的主流网游：i5或i7处理器，内存8g，显卡的话中端显卡就ok，硬盘128ssd+1Thdd起</li>\n<li>大型单机：i5或i7处理器，内存16g，，显卡中高端gtx960，970即可，硬盘128ssd+1Thdd起</li>\n<li>发烧友：i7处理器，内存32g，显卡高端gtx1060以上，硬盘512ssd+1Thdd起</li>\n</ul>\n<h2 id=\"办公\"><a href=\"#办公\" class=\"headerlink\" title=\"办公\"></a>办公</h2><p>很多商务人士需要携带笔记本，其实对笔记本的性能要求一般，但是便携性要求很高，用超极本最合适的，  推荐配置：4g内存，256ssd，i5即可</p>\n<h2 id=\"平面设计\"><a href=\"#平面设计\" class=\"headerlink\" title=\"平面设计\"></a>平面设计</h2><p>使用ps，ae之类的软件居多，对内存和cpu要求较高，显卡一般即可<br>推荐配置1：16g内存，i7处理器，256ssd，2k／4k专业显示器，中端显卡即可<br>推荐配置2：macbookpro15 16g，512ssd，i7处理器</p>\n<h2 id=\"编程\"><a href=\"#编程\" class=\"headerlink\" title=\"编程\"></a>编程</h2><p>这里应该分为两类：做mac，ios开发之类的肯定得首选macbookpro，而做windows软件开发肯定windows好一些。个人推荐mac的笔记本做编程，一用就停不下来，会上瘾。<br>推荐配置1：macbookpro15 16g，512ssd，i7处理器<br>推荐配置2：i7处理器，16g内存，512ssd，中端显卡</p>\n<h2 id=\"效果图渲染（3维制图）\"><a href=\"#效果图渲染（3维制图）\" class=\"headerlink\" title=\"效果图渲染（3维制图）\"></a>效果图渲染（3维制图）</h2><p>这个是专业领域的需求，对显卡和内存，cpu要求都较高，肯能需要双显卡。<br>推荐配置1：至强处理器，32g内存，512ssd+1Thdd<br>推荐配置2：i7处理器，32g内存，512ssd+1Thdd</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 购买合适的电脑：</strong> <Excerpt in index | 首页摘要><br>现代的生活中每个人都已经离不开电脑了，打游戏，看电影，办公，等等。购买一个合适的电脑显得尤为重要，电脑不舒服，用着影响心情。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"买电脑主要干什么\"><a href=\"#买电脑主要干什么\" class=\"headerlink\" title=\"买电脑主要干什么\"></a>买电脑主要干什么</h2><ol>\n<li>看电影，上网</li>\n<li>打游戏</li>\n<li>办公（移动办公）</li>\n<li>平面设计（二维）</li>\n<li>编程（ios和其它，深度学习）</li>\n<li>效果图渲染（3维制图）</li>\n</ol>\n<h2 id=\"电脑配置说明\"><a href=\"#电脑配置说明\" class=\"headerlink\" title=\"电脑配置说明\"></a>电脑配置说明</h2><p>目前电脑配置的cpu，内存都很高，显卡也很好，而普通电脑的瓶颈都是在硬盘上，所以一台普通电脑换上固体硬盘体验立即上了一个档次，所以现在买电脑不带固态硬盘没法玩的。这里我之列一些主要配置，至于买笔记本还是台式机个人喜好。台式机性能肯定远超同价位笔记本，这个是毋庸置疑的。</p>\n<h2 id=\"看电影，上网\"><a href=\"#看电影，上网\" class=\"headerlink\" title=\"看电影，上网\"></a>看电影，上网</h2><p>看电影上网，对电脑配置要求比较低的，一般普通双核cpu，amd的，酷睿i3都不在话下，内存的话4g够用，8g就浪费了。买笔记本或者台式机都可以<br>推荐配置1：i3处理器，4g内存，128固态，整体价位3000-4000左右<br>推荐配置1：i5处理器，4g内存，256固态</p>\n<h2 id=\"打游戏\"><a href=\"#打游戏\" class=\"headerlink\" title=\"打游戏\"></a>打游戏</h2><p>游戏主机是最烧钱的，其实游戏主机的cpu要求一般，主要在显卡，内存上。建议买台式机</p>\n<ul>\n<li>一般的主流网游：i5或i7处理器，内存8g，显卡的话中端显卡就ok，硬盘128ssd+1Thdd起</li>\n<li>大型单机：i5或i7处理器，内存16g，，显卡中高端gtx960，970即可，硬盘128ssd+1Thdd起</li>\n<li>发烧友：i7处理器，内存32g，显卡高端gtx1060以上，硬盘512ssd+1Thdd起</li>\n</ul>\n<h2 id=\"办公\"><a href=\"#办公\" class=\"headerlink\" title=\"办公\"></a>办公</h2><p>很多商务人士需要携带笔记本，其实对笔记本的性能要求一般，但是便携性要求很高，用超极本最合适的，  推荐配置：4g内存，256ssd，i5即可</p>\n<h2 id=\"平面设计\"><a href=\"#平面设计\" class=\"headerlink\" title=\"平面设计\"></a>平面设计</h2><p>使用ps，ae之类的软件居多，对内存和cpu要求较高，显卡一般即可<br>推荐配置1：16g内存，i7处理器，256ssd，2k／4k专业显示器，中端显卡即可<br>推荐配置2：macbookpro15 16g，512ssd，i7处理器</p>\n<h2 id=\"编程\"><a href=\"#编程\" class=\"headerlink\" title=\"编程\"></a>编程</h2><p>这里应该分为两类：做mac，ios开发之类的肯定得首选macbookpro，而做windows软件开发肯定windows好一些。个人推荐mac的笔记本做编程，一用就停不下来，会上瘾。<br>推荐配置1：macbookpro15 16g，512ssd，i7处理器<br>推荐配置2：i7处理器，16g内存，512ssd，中端显卡</p>\n<h2 id=\"效果图渲染（3维制图）\"><a href=\"#效果图渲染（3维制图）\" class=\"headerlink\" title=\"效果图渲染（3维制图）\"></a>效果图渲染（3维制图）</h2><p>这个是专业领域的需求，对显卡和内存，cpu要求都较高，肯能需要双显卡。<br>推荐配置1：至强处理器，32g内存，512ssd+1Thdd<br>推荐配置2：i7处理器，32g内存，512ssd+1Thdd</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"程序员入门指南","date":"2016-04-17T04:37:19.000Z","_content":"** 程序员入门指南 ：** <Excerpt in index | 首页摘要>\n        程序员入门必须了解的一些知识，个人经验，不喜勿喷！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 程序员的入门规划\n## 1.我该学习什么语言？\n\n- 这个问题困扰了几乎所有的程序员，比如java应用广好就业，比如php入门简单，ios待遇高，  python是万能语言，HTML和js前端缺人才等等\n\n- 个人见解：先学习难度小，大众化的编程语言，比如java，php，python，javascript,c/c++,这几个学哪一种其实差不多，入门以后看自己兴趣在进行其它语言的学习。\n\n## 2.我该怎么学习编程？\n\n这个问题是所有的程序员都有的，我也经常会疑问，到底该怎么学习呢？\n\n个人见解：\n\n1. 先了解语言的特性，适用的范围场景，比如是适合web开发，还是适合客户端程序，有的适合并发多线程，有的适合异步，还有的比较稳定，适合构建大型项目，有的开发效率高，等等。\n2. 了解语言的语法和常用api的使用，比如变量的声明，循环的使用，io的读取，http服务的创建，把这些基本的语法搞清楚，在进行下一步的学习。\n3. 学习web开发之前的准备，数据库的学习，http协议的学习，html，css和javacript的常用知识了解\n4. 学习常用框架，比如java学习常用的ssh三大框架，node的学习express，一定要做2个项目练习，把自己的之前学习的知识都巩固一下，\n5. 总结一下自己学习的过程，明白编程的思想在哪里，思路在哪里，学习编程，首先应该培养的是编程的思维和思想，有个正确的思维后面都简单多了。\n6. 养成写博客或者学习笔记的习惯，推荐写博客，\n7. 熟悉项目管理工具，svn，git之类的必须要会，工作中这些都是必须的\n8. 准备面试，通过面试题进一步巩固自己的知识，夯实基础。\n\n## 3.我应该去哪里学习编程？\n\n其实这个看个人，如果自学能力强，自控能力强，自学挺好的，下面我列举几个程序员常用的网站  \n\n1. [网易云课堂][1]，很多免费的视频课程，适合入门学习\n2. [慕课网][2]，很多it入门教学视频，资源也不错\n3. [极客学院][3]，和前两个网站差不多，\n4. [北风网][4]，类似的教学网站，其它的就不说了\n\n## 4.编程遇到问题怎么办？\n * 百度或者谷歌看看网上有没有类似的问题，一回生，二回熟，很快就明白了\n * 去官网查看api文档查找原因\n * 自己要学会debug代码，查找原因\n * 去各大论坛逛逛，说不定早有人提问此类问题了\n\n\n## 5.我想看编程的书籍去哪找呢？\n经典书籍还是买纸质的，买正版的，支持正版！\n\n1. [新浪微盘][5]，非常多的it书籍  \n2. [脚本之家][6]，非常多的pdf书籍，可惜大多数不是文字版pdf  \n3. [英文原版书籍][7]，都是高清文字版pdf，强烈推荐，都是英文原版的  \n4. [计算机书控][8]，都是免费的pdf文档，大多数不是文字版pdf\n\n## 6.代码资源\n1. 最好的代码仓库 [github](https://github.com/)\n2. [csdn代码仓库](https://code.csdn.net/)\n3. [gist](https://gist.github.com/)\n4. [代码片段之家](http://www.phpxs.com/code/)\n\n## 7.学习心态\n\n1. 不要老是折腾工具，ide工具和文本编辑器一样一个就够了\n2. 不要自满，编程的东西学一辈子也学不会，要谦虚好学\n3. 不要急躁，既然知识学不完，我们应该掌握学习方法，指定计划去学习\n4. 要持之以恒，学习是一辈子的事，如果你没有这个打算，还是不要做程序员的好\n5. 切忌眼高手低，必须要敲代码才能达到效果\n\n## 8.编程进阶之路\n当有了一定的编程基础之后,最大的问题是确定自己的方向,这个时候最容易迷茫和困惑,学习什么技术?怎么去学,这些真的很难\n   - 个人建议如下:  \n    1.技术型方向:提高自己的编程能力和语言造诣,最有效的是\"造轮子\",量变引起质变\n   - 写插件,写框架,写爬虫,写数据库,自制编程语言,等等.\n    2.业务型方向:提高自己的业务能力,和客户的沟通能力,分析需求,解决客户的难题\n   - 多出去见客户,去现场,了解需求,分析需求,\n\n\n\n[1]: http://study.163.com/\n[2]: http://www.imooc.com/\n[3]: http://www.jikexueyuan.com/\n[4]: http://www.ibeifeng.com/\n[5]: http://vdisk.weibo.com/\n[6]: http://www.jb51.net/\n[7]: http://www.salttiger.com/\n[8]: http://bestcbooks.com/\n","source":"_posts/coder-study.md","raw":"title: 程序员入门指南\ndate: 2016-04-17 12:37:19\ntags: others\ncategories: 编程语言\n---\n** 程序员入门指南 ：** <Excerpt in index | 首页摘要>\n        程序员入门必须了解的一些知识，个人经验，不喜勿喷！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 程序员的入门规划\n## 1.我该学习什么语言？\n\n- 这个问题困扰了几乎所有的程序员，比如java应用广好就业，比如php入门简单，ios待遇高，  python是万能语言，HTML和js前端缺人才等等\n\n- 个人见解：先学习难度小，大众化的编程语言，比如java，php，python，javascript,c/c++,这几个学哪一种其实差不多，入门以后看自己兴趣在进行其它语言的学习。\n\n## 2.我该怎么学习编程？\n\n这个问题是所有的程序员都有的，我也经常会疑问，到底该怎么学习呢？\n\n个人见解：\n\n1. 先了解语言的特性，适用的范围场景，比如是适合web开发，还是适合客户端程序，有的适合并发多线程，有的适合异步，还有的比较稳定，适合构建大型项目，有的开发效率高，等等。\n2. 了解语言的语法和常用api的使用，比如变量的声明，循环的使用，io的读取，http服务的创建，把这些基本的语法搞清楚，在进行下一步的学习。\n3. 学习web开发之前的准备，数据库的学习，http协议的学习，html，css和javacript的常用知识了解\n4. 学习常用框架，比如java学习常用的ssh三大框架，node的学习express，一定要做2个项目练习，把自己的之前学习的知识都巩固一下，\n5. 总结一下自己学习的过程，明白编程的思想在哪里，思路在哪里，学习编程，首先应该培养的是编程的思维和思想，有个正确的思维后面都简单多了。\n6. 养成写博客或者学习笔记的习惯，推荐写博客，\n7. 熟悉项目管理工具，svn，git之类的必须要会，工作中这些都是必须的\n8. 准备面试，通过面试题进一步巩固自己的知识，夯实基础。\n\n## 3.我应该去哪里学习编程？\n\n其实这个看个人，如果自学能力强，自控能力强，自学挺好的，下面我列举几个程序员常用的网站  \n\n1. [网易云课堂][1]，很多免费的视频课程，适合入门学习\n2. [慕课网][2]，很多it入门教学视频，资源也不错\n3. [极客学院][3]，和前两个网站差不多，\n4. [北风网][4]，类似的教学网站，其它的就不说了\n\n## 4.编程遇到问题怎么办？\n * 百度或者谷歌看看网上有没有类似的问题，一回生，二回熟，很快就明白了\n * 去官网查看api文档查找原因\n * 自己要学会debug代码，查找原因\n * 去各大论坛逛逛，说不定早有人提问此类问题了\n\n\n## 5.我想看编程的书籍去哪找呢？\n经典书籍还是买纸质的，买正版的，支持正版！\n\n1. [新浪微盘][5]，非常多的it书籍  \n2. [脚本之家][6]，非常多的pdf书籍，可惜大多数不是文字版pdf  \n3. [英文原版书籍][7]，都是高清文字版pdf，强烈推荐，都是英文原版的  \n4. [计算机书控][8]，都是免费的pdf文档，大多数不是文字版pdf\n\n## 6.代码资源\n1. 最好的代码仓库 [github](https://github.com/)\n2. [csdn代码仓库](https://code.csdn.net/)\n3. [gist](https://gist.github.com/)\n4. [代码片段之家](http://www.phpxs.com/code/)\n\n## 7.学习心态\n\n1. 不要老是折腾工具，ide工具和文本编辑器一样一个就够了\n2. 不要自满，编程的东西学一辈子也学不会，要谦虚好学\n3. 不要急躁，既然知识学不完，我们应该掌握学习方法，指定计划去学习\n4. 要持之以恒，学习是一辈子的事，如果你没有这个打算，还是不要做程序员的好\n5. 切忌眼高手低，必须要敲代码才能达到效果\n\n## 8.编程进阶之路\n当有了一定的编程基础之后,最大的问题是确定自己的方向,这个时候最容易迷茫和困惑,学习什么技术?怎么去学,这些真的很难\n   - 个人建议如下:  \n    1.技术型方向:提高自己的编程能力和语言造诣,最有效的是\"造轮子\",量变引起质变\n   - 写插件,写框架,写爬虫,写数据库,自制编程语言,等等.\n    2.业务型方向:提高自己的业务能力,和客户的沟通能力,分析需求,解决客户的难题\n   - 多出去见客户,去现场,了解需求,分析需求,\n\n\n\n[1]: http://study.163.com/\n[2]: http://www.imooc.com/\n[3]: http://www.jikexueyuan.com/\n[4]: http://www.ibeifeng.com/\n[5]: http://vdisk.weibo.com/\n[6]: http://www.jb51.net/\n[7]: http://www.salttiger.com/\n[8]: http://bestcbooks.com/\n","slug":"coder-study","published":1,"updated":"2017-07-30T23:54:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla5a000c8p9kp4wfciq7","content":"<p><strong> 程序员入门指南 ：</strong> <Excerpt in index | 首页摘要><br>        程序员入门必须了解的一些知识，个人经验，不喜勿喷！<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"程序员的入门规划\"><a href=\"#程序员的入门规划\" class=\"headerlink\" title=\"程序员的入门规划\"></a>程序员的入门规划</h2><h2 id=\"1-我该学习什么语言？\"><a href=\"#1-我该学习什么语言？\" class=\"headerlink\" title=\"1.我该学习什么语言？\"></a>1.我该学习什么语言？</h2><ul>\n<li><p>这个问题困扰了几乎所有的程序员，比如java应用广好就业，比如php入门简单，ios待遇高，  python是万能语言，HTML和js前端缺人才等等</p>\n</li>\n<li><p>个人见解：先学习难度小，大众化的编程语言，比如java，php，python，javascript,c/c++,这几个学哪一种其实差不多，入门以后看自己兴趣在进行其它语言的学习。</p>\n</li>\n</ul>\n<h2 id=\"2-我该怎么学习编程？\"><a href=\"#2-我该怎么学习编程？\" class=\"headerlink\" title=\"2.我该怎么学习编程？\"></a>2.我该怎么学习编程？</h2><p>这个问题是所有的程序员都有的，我也经常会疑问，到底该怎么学习呢？</p>\n<p>个人见解：</p>\n<ol>\n<li>先了解语言的特性，适用的范围场景，比如是适合web开发，还是适合客户端程序，有的适合并发多线程，有的适合异步，还有的比较稳定，适合构建大型项目，有的开发效率高，等等。</li>\n<li>了解语言的语法和常用api的使用，比如变量的声明，循环的使用，io的读取，http服务的创建，把这些基本的语法搞清楚，在进行下一步的学习。</li>\n<li>学习web开发之前的准备，数据库的学习，http协议的学习，html，css和javacript的常用知识了解</li>\n<li>学习常用框架，比如java学习常用的ssh三大框架，node的学习express，一定要做2个项目练习，把自己的之前学习的知识都巩固一下，</li>\n<li>总结一下自己学习的过程，明白编程的思想在哪里，思路在哪里，学习编程，首先应该培养的是编程的思维和思想，有个正确的思维后面都简单多了。</li>\n<li>养成写博客或者学习笔记的习惯，推荐写博客，</li>\n<li>熟悉项目管理工具，svn，git之类的必须要会，工作中这些都是必须的</li>\n<li>准备面试，通过面试题进一步巩固自己的知识，夯实基础。</li>\n</ol>\n<h2 id=\"3-我应该去哪里学习编程？\"><a href=\"#3-我应该去哪里学习编程？\" class=\"headerlink\" title=\"3.我应该去哪里学习编程？\"></a>3.我应该去哪里学习编程？</h2><p>其实这个看个人，如果自学能力强，自控能力强，自学挺好的，下面我列举几个程序员常用的网站  </p>\n<ol>\n<li><a href=\"http://study.163.com/\">网易云课堂</a>，很多免费的视频课程，适合入门学习</li>\n<li><a href=\"http://www.imooc.com/\">慕课网</a>，很多it入门教学视频，资源也不错</li>\n<li><a href=\"http://www.jikexueyuan.com/\">极客学院</a>，和前两个网站差不多，</li>\n<li><a href=\"http://www.ibeifeng.com/\">北风网</a>，类似的教学网站，其它的就不说了</li>\n</ol>\n<h2 id=\"4-编程遇到问题怎么办？\"><a href=\"#4-编程遇到问题怎么办？\" class=\"headerlink\" title=\"4.编程遇到问题怎么办？\"></a>4.编程遇到问题怎么办？</h2><ul>\n<li>百度或者谷歌看看网上有没有类似的问题，一回生，二回熟，很快就明白了</li>\n<li>去官网查看api文档查找原因</li>\n<li>自己要学会debug代码，查找原因</li>\n<li>去各大论坛逛逛，说不定早有人提问此类问题了</li>\n</ul>\n<h2 id=\"5-我想看编程的书籍去哪找呢？\"><a href=\"#5-我想看编程的书籍去哪找呢？\" class=\"headerlink\" title=\"5.我想看编程的书籍去哪找呢？\"></a>5.我想看编程的书籍去哪找呢？</h2><p>经典书籍还是买纸质的，买正版的，支持正版！</p>\n<ol>\n<li><a href=\"http://vdisk.weibo.com/\">新浪微盘</a>，非常多的it书籍  </li>\n<li><a href=\"http://www.jb51.net/\">脚本之家</a>，非常多的pdf书籍，可惜大多数不是文字版pdf  </li>\n<li><a href=\"http://www.salttiger.com/\">英文原版书籍</a>，都是高清文字版pdf，强烈推荐，都是英文原版的  </li>\n<li><a href=\"http://bestcbooks.com/\">计算机书控</a>，都是免费的pdf文档，大多数不是文字版pdf</li>\n</ol>\n<h2 id=\"6-代码资源\"><a href=\"#6-代码资源\" class=\"headerlink\" title=\"6.代码资源\"></a>6.代码资源</h2><ol>\n<li>最好的代码仓库 <a href=\"https://github.com/\">github</a></li>\n<li><a href=\"https://code.csdn.net/\">csdn代码仓库</a></li>\n<li><a href=\"https://gist.github.com/\">gist</a></li>\n<li><a href=\"http://www.phpxs.com/code/\">代码片段之家</a></li>\n</ol>\n<h2 id=\"7-学习心态\"><a href=\"#7-学习心态\" class=\"headerlink\" title=\"7.学习心态\"></a>7.学习心态</h2><ol>\n<li>不要老是折腾工具，ide工具和文本编辑器一样一个就够了</li>\n<li>不要自满，编程的东西学一辈子也学不会，要谦虚好学</li>\n<li>不要急躁，既然知识学不完，我们应该掌握学习方法，指定计划去学习</li>\n<li>要持之以恒，学习是一辈子的事，如果你没有这个打算，还是不要做程序员的好</li>\n<li>切忌眼高手低，必须要敲代码才能达到效果</li>\n</ol>\n<h2 id=\"8-编程进阶之路\"><a href=\"#8-编程进阶之路\" class=\"headerlink\" title=\"8.编程进阶之路\"></a>8.编程进阶之路</h2><p>当有了一定的编程基础之后,最大的问题是确定自己的方向,这个时候最容易迷茫和困惑,学习什么技术?怎么去学,这些真的很难</p>\n<ul>\n<li>个人建议如下:<br>1.技术型方向:提高自己的编程能力和语言造诣,最有效的是”造轮子”,量变引起质变</li>\n<li>写插件,写框架,写爬虫,写数据库,自制编程语言,等等.<br>2.业务型方向:提高自己的业务能力,和客户的沟通能力,分析需求,解决客户的难题</li>\n<li>多出去见客户,去现场,了解需求,分析需求,</li>\n</ul>\n","excerpt":"<p><strong> 程序员入门指南 ：</strong> <Excerpt in index | 首页摘要><br>        程序员入门必须了解的一些知识，个人经验，不喜勿喷！<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"程序员的入门规划\"><a href=\"#程序员的入门规划\" class=\"headerlink\" title=\"程序员的入门规划\"></a>程序员的入门规划</h2><h2 id=\"1-我该学习什么语言？\"><a href=\"#1-我该学习什么语言？\" class=\"headerlink\" title=\"1.我该学习什么语言？\"></a>1.我该学习什么语言？</h2><ul>\n<li><p>这个问题困扰了几乎所有的程序员，比如java应用广好就业，比如php入门简单，ios待遇高，  python是万能语言，HTML和js前端缺人才等等</p>\n</li>\n<li><p>个人见解：先学习难度小，大众化的编程语言，比如java，php，python，javascript,c/c++,这几个学哪一种其实差不多，入门以后看自己兴趣在进行其它语言的学习。</p>\n</li>\n</ul>\n<h2 id=\"2-我该怎么学习编程？\"><a href=\"#2-我该怎么学习编程？\" class=\"headerlink\" title=\"2.我该怎么学习编程？\"></a>2.我该怎么学习编程？</h2><p>这个问题是所有的程序员都有的，我也经常会疑问，到底该怎么学习呢？</p>\n<p>个人见解：</p>\n<ol>\n<li>先了解语言的特性，适用的范围场景，比如是适合web开发，还是适合客户端程序，有的适合并发多线程，有的适合异步，还有的比较稳定，适合构建大型项目，有的开发效率高，等等。</li>\n<li>了解语言的语法和常用api的使用，比如变量的声明，循环的使用，io的读取，http服务的创建，把这些基本的语法搞清楚，在进行下一步的学习。</li>\n<li>学习web开发之前的准备，数据库的学习，http协议的学习，html，css和javacript的常用知识了解</li>\n<li>学习常用框架，比如java学习常用的ssh三大框架，node的学习express，一定要做2个项目练习，把自己的之前学习的知识都巩固一下，</li>\n<li>总结一下自己学习的过程，明白编程的思想在哪里，思路在哪里，学习编程，首先应该培养的是编程的思维和思想，有个正确的思维后面都简单多了。</li>\n<li>养成写博客或者学习笔记的习惯，推荐写博客，</li>\n<li>熟悉项目管理工具，svn，git之类的必须要会，工作中这些都是必须的</li>\n<li>准备面试，通过面试题进一步巩固自己的知识，夯实基础。</li>\n</ol>\n<h2 id=\"3-我应该去哪里学习编程？\"><a href=\"#3-我应该去哪里学习编程？\" class=\"headerlink\" title=\"3.我应该去哪里学习编程？\"></a>3.我应该去哪里学习编程？</h2><p>其实这个看个人，如果自学能力强，自控能力强，自学挺好的，下面我列举几个程序员常用的网站  </p>\n<ol>\n<li><a href=\"http://study.163.com/\">网易云课堂</a>，很多免费的视频课程，适合入门学习</li>\n<li><a href=\"http://www.imooc.com/\">慕课网</a>，很多it入门教学视频，资源也不错</li>\n<li><a href=\"http://www.jikexueyuan.com/\">极客学院</a>，和前两个网站差不多，</li>\n<li><a href=\"http://www.ibeifeng.com/\">北风网</a>，类似的教学网站，其它的就不说了</li>\n</ol>\n<h2 id=\"4-编程遇到问题怎么办？\"><a href=\"#4-编程遇到问题怎么办？\" class=\"headerlink\" title=\"4.编程遇到问题怎么办？\"></a>4.编程遇到问题怎么办？</h2><ul>\n<li>百度或者谷歌看看网上有没有类似的问题，一回生，二回熟，很快就明白了</li>\n<li>去官网查看api文档查找原因</li>\n<li>自己要学会debug代码，查找原因</li>\n<li>去各大论坛逛逛，说不定早有人提问此类问题了</li>\n</ul>\n<h2 id=\"5-我想看编程的书籍去哪找呢？\"><a href=\"#5-我想看编程的书籍去哪找呢？\" class=\"headerlink\" title=\"5.我想看编程的书籍去哪找呢？\"></a>5.我想看编程的书籍去哪找呢？</h2><p>经典书籍还是买纸质的，买正版的，支持正版！</p>\n<ol>\n<li><a href=\"http://vdisk.weibo.com/\">新浪微盘</a>，非常多的it书籍  </li>\n<li><a href=\"http://www.jb51.net/\">脚本之家</a>，非常多的pdf书籍，可惜大多数不是文字版pdf  </li>\n<li><a href=\"http://www.salttiger.com/\">英文原版书籍</a>，都是高清文字版pdf，强烈推荐，都是英文原版的  </li>\n<li><a href=\"http://bestcbooks.com/\">计算机书控</a>，都是免费的pdf文档，大多数不是文字版pdf</li>\n</ol>\n<h2 id=\"6-代码资源\"><a href=\"#6-代码资源\" class=\"headerlink\" title=\"6.代码资源\"></a>6.代码资源</h2><ol>\n<li>最好的代码仓库 <a href=\"https://github.com/\">github</a></li>\n<li><a href=\"https://code.csdn.net/\">csdn代码仓库</a></li>\n<li><a href=\"https://gist.github.com/\">gist</a></li>\n<li><a href=\"http://www.phpxs.com/code/\">代码片段之家</a></li>\n</ol>\n<h2 id=\"7-学习心态\"><a href=\"#7-学习心态\" class=\"headerlink\" title=\"7.学习心态\"></a>7.学习心态</h2><ol>\n<li>不要老是折腾工具，ide工具和文本编辑器一样一个就够了</li>\n<li>不要自满，编程的东西学一辈子也学不会，要谦虚好学</li>\n<li>不要急躁，既然知识学不完，我们应该掌握学习方法，指定计划去学习</li>\n<li>要持之以恒，学习是一辈子的事，如果你没有这个打算，还是不要做程序员的好</li>\n<li>切忌眼高手低，必须要敲代码才能达到效果</li>\n</ol>\n<h2 id=\"8-编程进阶之路\"><a href=\"#8-编程进阶之路\" class=\"headerlink\" title=\"8.编程进阶之路\"></a>8.编程进阶之路</h2><p>当有了一定的编程基础之后,最大的问题是确定自己的方向,这个时候最容易迷茫和困惑,学习什么技术?怎么去学,这些真的很难</p>\n<ul>\n<li>个人建议如下:<br>1.技术型方向:提高自己的编程能力和语言造诣,最有效的是”造轮子”,量变引起质变</li>\n<li>写插件,写框架,写爬虫,写数据库,自制编程语言,等等.<br>2.业务型方向:提高自己的业务能力,和客户的沟通能力,分析需求,解决客户的难题</li>\n<li>多出去见客户,去现场,了解需求,分析需求,</li>\n</ul>"},{"title":"查找链表倒数第N个元素","date":"2018-02-16T13:45:45.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n链表应用很广泛，有单向链表，双向链表。单向链表如何查找倒数第n个元素呢？本文以java代码实现链表反向查找。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 单向链表的定义\n单向链表，主要有数据存储，下一个节点的引用这两个元素组成。\n```\npublic class Node {\n    int value;\n    Node next;\n\n    Node(int value) {\n        this.value = value;\n    }\n}\n```\n\n## 遍历倒数第n个元素\n在查找过程中，设置两个指针，让其中一个指针比另一个指针先前移k-1步，\n然后两个指针同时往前移动。循环直到先行的指针指为NULL时，另一个指针所指的位置就是所要找的位置\n算法复杂度为o（n）\n\n```\npublic Node findDescEle(Node head, int k) {\n    if (k < 1 || head == null) {\n        return null;\n    }\n    Node p1 = head;\n    Node p2 = head;\n    //前移k-1步\n    int step = 0;\n    for (int i = 0; i < k; i++) {\n        step++;\n        if (p1.next != null) {\n            p1 = p1.next;\n        } else {\n            return null;\n        }\n    }\n    while (p1 != null) {\n        step++;\n        p1 = p1.next;\n        p2 = p2.next;\n    }\n    System.out.println(\"o(n)==\" + step);\n    return p2;\n}\n```\n## 总结\n查找链表倒数第n个元素，复杂度为o(n),使用两个指针即可简单实现。\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/descNode.md","raw":"title: 查找链表倒数第n个元素\ndate: 2018-02-16 21:45:45\ntags: 算法\ncategories: algorithm\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n链表应用很广泛，有单向链表，双向链表。单向链表如何查找倒数第n个元素呢？本文以java代码实现链表反向查找。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 单向链表的定义\n单向链表，主要有数据存储，下一个节点的引用这两个元素组成。\n```\npublic class Node {\n    int value;\n    Node next;\n\n    Node(int value) {\n        this.value = value;\n    }\n}\n```\n\n## 遍历倒数第n个元素\n在查找过程中，设置两个指针，让其中一个指针比另一个指针先前移k-1步，\n然后两个指针同时往前移动。循环直到先行的指针指为NULL时，另一个指针所指的位置就是所要找的位置\n算法复杂度为o（n）\n\n```\npublic Node findDescEle(Node head, int k) {\n    if (k < 1 || head == null) {\n        return null;\n    }\n    Node p1 = head;\n    Node p2 = head;\n    //前移k-1步\n    int step = 0;\n    for (int i = 0; i < k; i++) {\n        step++;\n        if (p1.next != null) {\n            p1 = p1.next;\n        } else {\n            return null;\n        }\n    }\n    while (p1 != null) {\n        step++;\n        p1 = p1.next;\n        p2 = p2.next;\n    }\n    System.out.println(\"o(n)==\" + step);\n    return p2;\n}\n```\n## 总结\n查找链表倒数第n个元素，复杂度为o(n),使用两个指针即可简单实现。\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"descNode","published":1,"updated":"2018-03-26T14:46:06.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla5m000f8p9koau1982c","content":"<p><strong> 查找链表倒数第N个元素：</strong> <Excerpt in index | 首页摘要><br>链表应用很广泛，有单向链表，双向链表。单向链表如何查找倒数第n个元素呢？本文以java代码实现链表反向查找。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"单向链表的定义\"><a href=\"#单向链表的定义\" class=\"headerlink\" title=\"单向链表的定义\"></a>单向链表的定义</h2><p>单向链表，主要有数据存储，下一个节点的引用这两个元素组成。<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class <span class=\"keyword\">Node</span> <span class=\"title\">&#123;</div><div class=\"line\">    int</span> value;</div><div class=\"line\">    <span class=\"keyword\">Node</span> <span class=\"title\">next</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">Node</span><span class=\"title\">(int</span> value) &#123;</div><div class=\"line\">        this.value = value;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"遍历倒数第n个元素\"><a href=\"#遍历倒数第n个元素\" class=\"headerlink\" title=\"遍历倒数第n个元素\"></a>遍历倒数第n个元素</h2><p>在查找过程中，设置两个指针，让其中一个指针比另一个指针先前移k-1步，<br>然后两个指针同时往前移动。循环直到先行的指针指为NULL时，另一个指针所指的位置就是所要找的位置<br>算法复杂度为o（n）</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> Node findDescEle(Node head, <span class=\"keyword\">int</span> k) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (k &lt; <span class=\"number\">1</span> || head == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Node p1 = head;</div><div class=\"line\">    Node p2 = head;</div><div class=\"line\">    <span class=\"comment\">//前移k-1步</span></div><div class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">step</span> = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">step</span>++;</div><div class=\"line\">        <span class=\"keyword\">if</span> (p1.<span class=\"keyword\">next</span> != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            p1 = p1.<span class=\"keyword\">next</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">while</span> (p1 != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">step</span>++;</div><div class=\"line\">        p1 = p1.<span class=\"keyword\">next</span>;</div><div class=\"line\">        p2 = p2.<span class=\"keyword\">next</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"o(n)==\"</span> + <span class=\"keyword\">step</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> p2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>查找链表倒数第n个元素，复杂度为o(n),使用两个指针即可简单实现。</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 查找链表倒数第N个元素：</strong> <Excerpt in index | 首页摘要><br>链表应用很广泛，有单向链表，双向链表。单向链表如何查找倒数第n个元素呢？本文以java代码实现链表反向查找。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"单向链表的定义\"><a href=\"#单向链表的定义\" class=\"headerlink\" title=\"单向链表的定义\"></a>单向链表的定义</h2><p>单向链表，主要有数据存储，下一个节点的引用这两个元素组成。<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class <span class=\"keyword\">Node</span> <span class=\"title\">&#123;</div><div class=\"line\">    int</span> value;</div><div class=\"line\">    <span class=\"keyword\">Node</span> <span class=\"title\">next</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">Node</span><span class=\"title\">(int</span> value) &#123;</div><div class=\"line\">        this.value = value;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"遍历倒数第n个元素\"><a href=\"#遍历倒数第n个元素\" class=\"headerlink\" title=\"遍历倒数第n个元素\"></a>遍历倒数第n个元素</h2><p>在查找过程中，设置两个指针，让其中一个指针比另一个指针先前移k-1步，<br>然后两个指针同时往前移动。循环直到先行的指针指为NULL时，另一个指针所指的位置就是所要找的位置<br>算法复杂度为o（n）</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> Node findDescEle(Node head, <span class=\"keyword\">int</span> k) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (k &lt; <span class=\"number\">1</span> || head == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    Node p1 = head;</div><div class=\"line\">    Node p2 = head;</div><div class=\"line\">    <span class=\"comment\">//前移k-1步</span></div><div class=\"line\">    <span class=\"keyword\">int</span> <span class=\"keyword\">step</span> = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">step</span>++;</div><div class=\"line\">        <span class=\"keyword\">if</span> (p1.<span class=\"keyword\">next</span> != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            p1 = p1.<span class=\"keyword\">next</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">while</span> (p1 != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">step</span>++;</div><div class=\"line\">        p1 = p1.<span class=\"keyword\">next</span>;</div><div class=\"line\">        p2 = p2.<span class=\"keyword\">next</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"o(n)==\"</span> + <span class=\"keyword\">step</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> p2;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>查找链表倒数第n个元素，复杂度为o(n),使用两个指针即可简单实现。</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"数码产品选购","date":"2017-05-18T02:35:22.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n作为一个数码产品控，一出新的的电子产品，我都欣喜若狂。看参数，看评价，感觉合适，就会买。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 我喜欢的电子产品\n* 电脑（笔记本，台式机，游戏主机，工作站）\n* 手机（苹果，安卓，其它智能手机）\n* 平板（安卓平板，ios平板）\n* 电子书阅读器\n* 电子手表\n\n## 选购的原则\n1. 产品生态，买电子产品虽然不是随大流，但是用户群体一定程度决定了生态。用的人多，相应的资源会比较丰富，遇到问题很快找到解决方案。\n2. 产品价格，性价比在中国，乃至全世界都是很具有吸引力的。物美价廉的都不买的要么是脑残，要么是钱多没地方花。\n3. 产品硬件参数，买电子产品不看参数，肯定是买不到物美价廉的产品。\n4. 产品外观，现在是看脸的时代，新时代的数码产品对外观要求更高，更时尚。\n5. 功能，买电子产品，首要的就是功能，如果功能都不齐全，再漂亮，再便宜都没用。\n6. 买电子产品的目的，没有任何需求就是瞎买。\n\n## 电子产品的使用\n我见过很多人买电子产品，比如买电子书阅读器，买一个kobo电子书折腾来折腾去，今天刷这个系统，明天改那个设置，\n书还没读几本，系统刷了几十次，天天刷固件。这真的是得不偿失，捡了芝麻丢了西瓜。\n第一，买电子产品是为了用的，买回来之后配置好之后，就不要来回折腾系统和配置了，把时间放到核心功能上。\n第二，买电子产品不要攀比，就跟买苹果手机一样，如果只是为了装B买，真没必要，结果自己还用不习惯。\n第三，了解自己的需求，需要什么买什么，\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/digital-info.md","raw":"title: 数码产品选购\ndate: 2017-05-18 10:35:22\ntags: 数码产品\ncategories: digital\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n作为一个数码产品控，一出新的的电子产品，我都欣喜若狂。看参数，看评价，感觉合适，就会买。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 我喜欢的电子产品\n* 电脑（笔记本，台式机，游戏主机，工作站）\n* 手机（苹果，安卓，其它智能手机）\n* 平板（安卓平板，ios平板）\n* 电子书阅读器\n* 电子手表\n\n## 选购的原则\n1. 产品生态，买电子产品虽然不是随大流，但是用户群体一定程度决定了生态。用的人多，相应的资源会比较丰富，遇到问题很快找到解决方案。\n2. 产品价格，性价比在中国，乃至全世界都是很具有吸引力的。物美价廉的都不买的要么是脑残，要么是钱多没地方花。\n3. 产品硬件参数，买电子产品不看参数，肯定是买不到物美价廉的产品。\n4. 产品外观，现在是看脸的时代，新时代的数码产品对外观要求更高，更时尚。\n5. 功能，买电子产品，首要的就是功能，如果功能都不齐全，再漂亮，再便宜都没用。\n6. 买电子产品的目的，没有任何需求就是瞎买。\n\n## 电子产品的使用\n我见过很多人买电子产品，比如买电子书阅读器，买一个kobo电子书折腾来折腾去，今天刷这个系统，明天改那个设置，\n书还没读几本，系统刷了几十次，天天刷固件。这真的是得不偿失，捡了芝麻丢了西瓜。\n第一，买电子产品是为了用的，买回来之后配置好之后，就不要来回折腾系统和配置了，把时间放到核心功能上。\n第二，买电子产品不要攀比，就跟买苹果手机一样，如果只是为了装B买，真没必要，结果自己还用不习惯。\n第三，了解自己的需求，需要什么买什么，\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"digital-info","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla5o000i8p9kxsio5h5v","content":"<p><strong> 数码产品选购：</strong> <Excerpt in index | 首页摘要><br>作为一个数码产品控，一出新的的电子产品，我都欣喜若狂。看参数，看评价，感觉合适，就会买。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"我喜欢的电子产品\"><a href=\"#我喜欢的电子产品\" class=\"headerlink\" title=\"我喜欢的电子产品\"></a>我喜欢的电子产品</h2><ul>\n<li>电脑（笔记本，台式机，游戏主机，工作站）</li>\n<li>手机（苹果，安卓，其它智能手机）</li>\n<li>平板（安卓平板，ios平板）</li>\n<li>电子书阅读器</li>\n<li>电子手表</li>\n</ul>\n<h2 id=\"选购的原则\"><a href=\"#选购的原则\" class=\"headerlink\" title=\"选购的原则\"></a>选购的原则</h2><ol>\n<li>产品生态，买电子产品虽然不是随大流，但是用户群体一定程度决定了生态。用的人多，相应的资源会比较丰富，遇到问题很快找到解决方案。</li>\n<li>产品价格，性价比在中国，乃至全世界都是很具有吸引力的。物美价廉的都不买的要么是脑残，要么是钱多没地方花。</li>\n<li>产品硬件参数，买电子产品不看参数，肯定是买不到物美价廉的产品。</li>\n<li>产品外观，现在是看脸的时代，新时代的数码产品对外观要求更高，更时尚。</li>\n<li>功能，买电子产品，首要的就是功能，如果功能都不齐全，再漂亮，再便宜都没用。</li>\n<li>买电子产品的目的，没有任何需求就是瞎买。</li>\n</ol>\n<h2 id=\"电子产品的使用\"><a href=\"#电子产品的使用\" class=\"headerlink\" title=\"电子产品的使用\"></a>电子产品的使用</h2><p>我见过很多人买电子产品，比如买电子书阅读器，买一个kobo电子书折腾来折腾去，今天刷这个系统，明天改那个设置，<br>书还没读几本，系统刷了几十次，天天刷固件。这真的是得不偿失，捡了芝麻丢了西瓜。<br>第一，买电子产品是为了用的，买回来之后配置好之后，就不要来回折腾系统和配置了，把时间放到核心功能上。<br>第二，买电子产品不要攀比，就跟买苹果手机一样，如果只是为了装B买，真没必要，结果自己还用不习惯。<br>第三，了解自己的需求，需要什么买什么，</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 数码产品选购：</strong> <Excerpt in index | 首页摘要><br>作为一个数码产品控，一出新的的电子产品，我都欣喜若狂。看参数，看评价，感觉合适，就会买。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"我喜欢的电子产品\"><a href=\"#我喜欢的电子产品\" class=\"headerlink\" title=\"我喜欢的电子产品\"></a>我喜欢的电子产品</h2><ul>\n<li>电脑（笔记本，台式机，游戏主机，工作站）</li>\n<li>手机（苹果，安卓，其它智能手机）</li>\n<li>平板（安卓平板，ios平板）</li>\n<li>电子书阅读器</li>\n<li>电子手表</li>\n</ul>\n<h2 id=\"选购的原则\"><a href=\"#选购的原则\" class=\"headerlink\" title=\"选购的原则\"></a>选购的原则</h2><ol>\n<li>产品生态，买电子产品虽然不是随大流，但是用户群体一定程度决定了生态。用的人多，相应的资源会比较丰富，遇到问题很快找到解决方案。</li>\n<li>产品价格，性价比在中国，乃至全世界都是很具有吸引力的。物美价廉的都不买的要么是脑残，要么是钱多没地方花。</li>\n<li>产品硬件参数，买电子产品不看参数，肯定是买不到物美价廉的产品。</li>\n<li>产品外观，现在是看脸的时代，新时代的数码产品对外观要求更高，更时尚。</li>\n<li>功能，买电子产品，首要的就是功能，如果功能都不齐全，再漂亮，再便宜都没用。</li>\n<li>买电子产品的目的，没有任何需求就是瞎买。</li>\n</ol>\n<h2 id=\"电子产品的使用\"><a href=\"#电子产品的使用\" class=\"headerlink\" title=\"电子产品的使用\"></a>电子产品的使用</h2><p>我见过很多人买电子产品，比如买电子书阅读器，买一个kobo电子书折腾来折腾去，今天刷这个系统，明天改那个设置，<br>书还没读几本，系统刷了几十次，天天刷固件。这真的是得不偿失，捡了芝麻丢了西瓜。<br>第一，买电子产品是为了用的，买回来之后配置好之后，就不要来回折腾系统和配置了，把时间放到核心功能上。<br>第二，买电子产品不要攀比，就跟买苹果手机一样，如果只是为了装B买，真没必要，结果自己还用不习惯。<br>第三，了解自己的需求，需要什么买什么，</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"我的梦想","date":"2016-04-24T14:07:27.000Z","_content":"** 我的梦想：** <Excerpt in index | 首页摘要>\n    一个人如果活着没有梦想,那和咸鱼有什么区别?\n<!-- more -->请问你的梦想是什么?\n<The rest of contents | 余下全文>\n\n## 我的梦想是什么?\n- 刚开始接触编程的时候,感觉代码是个神器的世界,在这里你可以为所欲为,然后看到很多大神的框架,软件,在使用别人好的框架,好的软件,那一刻我感觉 <strong>\"我的梦想就是用代码改变世界!\"</strong>\n\n- 感觉自己迷失了好久,找不到方向,曾经的激情不知道去了哪里?\n\n## 开始追梦\n- 有了梦想,我开始了疯狂的奋斗,每天休息4,5个小时,全身心去学习编程,努力还是很快得到了回报,我用了3个月就入门学好了java,然后找了java程序员的工作,就这样开始了我程序员的追梦之旅!\n\n## 初级程序员\n\n- 虽然入门了,但是刚开始的工作并不是一帆风顺的.我还记得第一份任务,老大让我写一个稍微复杂的接口,客户专用的接口,使用springmvc,还要提交到git上,对我而言,这一切都是新东西,经过我几天的努力,还是搞砸了,就这样第一个任务以失败告终!\n- 虽然第一个任务失败了,但是工作还在继续,我还是继续努力的工作,我必须承认我不是编程的天才,可能别人一个小时完成的任务,我需要一个半小时,但是我必须做好,因为我有梦想!\n\n## 中级程序员\n- 在工作的时候就感觉时间飞逝,一天天很快过去.晚上睡觉的时候,我就会问自己,我今天到底做了什么功能?我收获了哪些技能?曾经有段时间每天都是该页面,我几乎烦的崩溃,感觉每天都在做无用的东西,后来发现,无论是前段后端,其实都是必不可少的技能,我的心态应该调整,让自己去喜欢前段,同时保持后端的热情.\n\n- 一个成熟的程序员和菜鸟最大的区别应该是心态!\n\n## 高级程序员\n- 不再是代码搬运工，根据业务和需求自己随便造个轮子什么的。强大的代码能力，考虑事情应该全面，深刻\n\n## 架构师\n- 未完待续\n","source":"_posts/dream.md","raw":"title: 我的梦想\ndate: 2016-04-24 22:07:27\ntags: others\ncategories: 个人随笔\n---\n** 我的梦想：** <Excerpt in index | 首页摘要>\n    一个人如果活着没有梦想,那和咸鱼有什么区别?\n<!-- more -->请问你的梦想是什么?\n<The rest of contents | 余下全文>\n\n## 我的梦想是什么?\n- 刚开始接触编程的时候,感觉代码是个神器的世界,在这里你可以为所欲为,然后看到很多大神的框架,软件,在使用别人好的框架,好的软件,那一刻我感觉 <strong>\"我的梦想就是用代码改变世界!\"</strong>\n\n- 感觉自己迷失了好久,找不到方向,曾经的激情不知道去了哪里?\n\n## 开始追梦\n- 有了梦想,我开始了疯狂的奋斗,每天休息4,5个小时,全身心去学习编程,努力还是很快得到了回报,我用了3个月就入门学好了java,然后找了java程序员的工作,就这样开始了我程序员的追梦之旅!\n\n## 初级程序员\n\n- 虽然入门了,但是刚开始的工作并不是一帆风顺的.我还记得第一份任务,老大让我写一个稍微复杂的接口,客户专用的接口,使用springmvc,还要提交到git上,对我而言,这一切都是新东西,经过我几天的努力,还是搞砸了,就这样第一个任务以失败告终!\n- 虽然第一个任务失败了,但是工作还在继续,我还是继续努力的工作,我必须承认我不是编程的天才,可能别人一个小时完成的任务,我需要一个半小时,但是我必须做好,因为我有梦想!\n\n## 中级程序员\n- 在工作的时候就感觉时间飞逝,一天天很快过去.晚上睡觉的时候,我就会问自己,我今天到底做了什么功能?我收获了哪些技能?曾经有段时间每天都是该页面,我几乎烦的崩溃,感觉每天都在做无用的东西,后来发现,无论是前段后端,其实都是必不可少的技能,我的心态应该调整,让自己去喜欢前段,同时保持后端的热情.\n\n- 一个成熟的程序员和菜鸟最大的区别应该是心态!\n\n## 高级程序员\n- 不再是代码搬运工，根据业务和需求自己随便造个轮子什么的。强大的代码能力，考虑事情应该全面，深刻\n\n## 架构师\n- 未完待续\n","slug":"dream","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla5p000k8p9k8km610xu","content":"<p><strong> 我的梦想：</strong> <Excerpt in index | 首页摘要><br>    一个人如果活着没有梦想,那和咸鱼有什么区别?<br><a id=\"more\"></a>请问你的梦想是什么?</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"我的梦想是什么\"><a href=\"#我的梦想是什么\" class=\"headerlink\" title=\"我的梦想是什么?\"></a>我的梦想是什么?</h2><ul>\n<li><p>刚开始接触编程的时候,感觉代码是个神器的世界,在这里你可以为所欲为,然后看到很多大神的框架,软件,在使用别人好的框架,好的软件,那一刻我感觉 <strong>“我的梦想就是用代码改变世界!”</strong></p>\n</li>\n<li><p>感觉自己迷失了好久,找不到方向,曾经的激情不知道去了哪里?</p>\n</li>\n</ul>\n<h2 id=\"开始追梦\"><a href=\"#开始追梦\" class=\"headerlink\" title=\"开始追梦\"></a>开始追梦</h2><ul>\n<li>有了梦想,我开始了疯狂的奋斗,每天休息4,5个小时,全身心去学习编程,努力还是很快得到了回报,我用了3个月就入门学好了java,然后找了java程序员的工作,就这样开始了我程序员的追梦之旅!</li>\n</ul>\n<h2 id=\"初级程序员\"><a href=\"#初级程序员\" class=\"headerlink\" title=\"初级程序员\"></a>初级程序员</h2><ul>\n<li>虽然入门了,但是刚开始的工作并不是一帆风顺的.我还记得第一份任务,老大让我写一个稍微复杂的接口,客户专用的接口,使用springmvc,还要提交到git上,对我而言,这一切都是新东西,经过我几天的努力,还是搞砸了,就这样第一个任务以失败告终!</li>\n<li>虽然第一个任务失败了,但是工作还在继续,我还是继续努力的工作,我必须承认我不是编程的天才,可能别人一个小时完成的任务,我需要一个半小时,但是我必须做好,因为我有梦想!</li>\n</ul>\n<h2 id=\"中级程序员\"><a href=\"#中级程序员\" class=\"headerlink\" title=\"中级程序员\"></a>中级程序员</h2><ul>\n<li><p>在工作的时候就感觉时间飞逝,一天天很快过去.晚上睡觉的时候,我就会问自己,我今天到底做了什么功能?我收获了哪些技能?曾经有段时间每天都是该页面,我几乎烦的崩溃,感觉每天都在做无用的东西,后来发现,无论是前段后端,其实都是必不可少的技能,我的心态应该调整,让自己去喜欢前段,同时保持后端的热情.</p>\n</li>\n<li><p>一个成熟的程序员和菜鸟最大的区别应该是心态!</p>\n</li>\n</ul>\n<h2 id=\"高级程序员\"><a href=\"#高级程序员\" class=\"headerlink\" title=\"高级程序员\"></a>高级程序员</h2><ul>\n<li>不再是代码搬运工，根据业务和需求自己随便造个轮子什么的。强大的代码能力，考虑事情应该全面，深刻</li>\n</ul>\n<h2 id=\"架构师\"><a href=\"#架构师\" class=\"headerlink\" title=\"架构师\"></a>架构师</h2><ul>\n<li>未完待续</li>\n</ul>\n","excerpt":"<p><strong> 我的梦想：</strong> <Excerpt in index | 首页摘要><br>    一个人如果活着没有梦想,那和咸鱼有什么区别?<br>","more":"请问你的梦想是什么?</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"我的梦想是什么\"><a href=\"#我的梦想是什么\" class=\"headerlink\" title=\"我的梦想是什么?\"></a>我的梦想是什么?</h2><ul>\n<li><p>刚开始接触编程的时候,感觉代码是个神器的世界,在这里你可以为所欲为,然后看到很多大神的框架,软件,在使用别人好的框架,好的软件,那一刻我感觉 <strong>“我的梦想就是用代码改变世界!”</strong></p>\n</li>\n<li><p>感觉自己迷失了好久,找不到方向,曾经的激情不知道去了哪里?</p>\n</li>\n</ul>\n<h2 id=\"开始追梦\"><a href=\"#开始追梦\" class=\"headerlink\" title=\"开始追梦\"></a>开始追梦</h2><ul>\n<li>有了梦想,我开始了疯狂的奋斗,每天休息4,5个小时,全身心去学习编程,努力还是很快得到了回报,我用了3个月就入门学好了java,然后找了java程序员的工作,就这样开始了我程序员的追梦之旅!</li>\n</ul>\n<h2 id=\"初级程序员\"><a href=\"#初级程序员\" class=\"headerlink\" title=\"初级程序员\"></a>初级程序员</h2><ul>\n<li>虽然入门了,但是刚开始的工作并不是一帆风顺的.我还记得第一份任务,老大让我写一个稍微复杂的接口,客户专用的接口,使用springmvc,还要提交到git上,对我而言,这一切都是新东西,经过我几天的努力,还是搞砸了,就这样第一个任务以失败告终!</li>\n<li>虽然第一个任务失败了,但是工作还在继续,我还是继续努力的工作,我必须承认我不是编程的天才,可能别人一个小时完成的任务,我需要一个半小时,但是我必须做好,因为我有梦想!</li>\n</ul>\n<h2 id=\"中级程序员\"><a href=\"#中级程序员\" class=\"headerlink\" title=\"中级程序员\"></a>中级程序员</h2><ul>\n<li><p>在工作的时候就感觉时间飞逝,一天天很快过去.晚上睡觉的时候,我就会问自己,我今天到底做了什么功能?我收获了哪些技能?曾经有段时间每天都是该页面,我几乎烦的崩溃,感觉每天都在做无用的东西,后来发现,无论是前段后端,其实都是必不可少的技能,我的心态应该调整,让自己去喜欢前段,同时保持后端的热情.</p>\n</li>\n<li><p>一个成熟的程序员和菜鸟最大的区别应该是心态!</p>\n</li>\n</ul>\n<h2 id=\"高级程序员\"><a href=\"#高级程序员\" class=\"headerlink\" title=\"高级程序员\"></a>高级程序员</h2><ul>\n<li>不再是代码搬运工，根据业务和需求自己随便造个轮子什么的。强大的代码能力，考虑事情应该全面，深刻</li>\n</ul>\n<h2 id=\"架构师\"><a href=\"#架构师\" class=\"headerlink\" title=\"架构师\"></a>架构师</h2><ul>\n<li>未完待续</li>\n</ul>"},{"title":"分布式系统理论基础","date":"2018-02-26T14:31:40.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n分布式系统不是万能，不能解决所有痛点。在高可用，一致性，分区容错性必须有所权衡。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## CAP理论\n定理：任何分布式架构都只能同时满足两点，无法三者兼顾。\n* Consistency（一致性），数据一致更新，所有的数据变动都是同步的。\n* Availability（可用性），好的响应性能。\n* Partition tolerance（分区容忍性）可靠性，机器宕机是否影响使用。\n\n关系数据库的ACID模型拥有 高一致性 + 可用性 很难进行分区：\n1. Atomicity原子性：一个事务中所有操作都必须全部完成，要么全部不完成。\n2. Consistency一致性. 在事务开始或结束时，数据库应该在一致状态。\n3. Isolation隔离性. 事务将假定只有它自己在操作数据库，彼此不知晓。\n4. Durability持久性 一旦事务完成，就不能返回。\n跨数据库两段提交事务：2PC (two-phase commit)， 2PC is the anti-scalability pattern (Pat Helland)\n是反可伸缩模式的，JavaEE中的JTA事务可以支持2PC。因为2PC是反模式，尽量不要使用2PC，使用BASE来回避。\n\n## BASE理论\n* Basically Available 基本可用，支持分区失败\n* Soft state 软状态，允许状态某个时间短不同步，或者异步\n* Eventually consistent 最终一致性，要求数据最终结果一致，而不是时刻高度一致。\n\n## paxos协议\nPaxos算法的目的是为了解决分布式环境下一致性的问题。多个节点并发操纵数据，如何保证在读写过程中数据的一致性，并且解决方案要能适应分布式环境下的不可靠性（系统如何就一个值达到统一）。\n### Paxos的两个组件:\n* Proposer：提议发起者，处理客户端请求，将客户端的请求发送到集群中，以便决定这个值是否可以被批准。\n* Acceptor:提议批准者，负责处理接收到的提议，他们的回复就是一次投票。会存储一些状态来决定是否接收一个值\n\n### Paxos有两个原则\n1. 安全原则---保证不能做错的事\n    * a） 针对某个实例的表决只能有一个值被批准，不能出现一个被批准的值被另一个值覆盖的情况；(假设有一个值被多数Acceptor批准了，那么这个值就只能被学习)\n    * b） 每个节点只能学习到已经被批准的值，不能学习没有被批准的值。\n2. 存活原则---只要有多数服务器存活并且彼此间可以通信，最终都要做到的下列事情：\n    * a）最终会批准某个被提议的值；\n    * b）一个值被批准了，其他服务器最终会学习到这个值。\n\n## zab协议(ZooKeeper Atomic broadcast protocol)\nZAB协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。\n\n### Phase 0: Leader election（选举阶段）\n节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准 leader。只有到达 Phase 3 准 leader 才会成为真正的 leader。这一阶段的目的是就是为了选出一个准 leader，然后进入下一个阶段。\n\n### Phase 1: Discovery（发现阶段）\n在这个阶段，followers 跟准 leader 进行通信，同步 followers 最近接收的事务提议。这个一阶段的主要目的是发现当前大多数节点接收的最新提议，并且准 leader 生成新的 epoch，让 followers 接受，更新它们的 acceptedEpoch。\n一个 follower 只会连接一个 leader，如果有一个节点 f 认为另一个 follower p 是 leader，f 在尝试连接 p 时会被拒绝，f 被拒绝之后，就会进入 Phase 0。\n\n### Phase 2: Synchronization（同步阶段）\n同步阶段主要是利用 leader 前一阶段获得的最新提议历史，同步集群中所有的副本。只有当 quorum 都同步完成，准 leader 才会成为真正的 leader。follower 只会接收 zxid 比自己的 lastZxid 大的提议。\n\n### Phase 3: Broadcast（广播阶段）\n到了这个阶段，Zookeeper 集群才能正式对外提供事务服务，并且 leader 可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。\n\n## raft协议\n在Raft中，每个结点会处于下面三种状态中的一种：\n### follower\n所有结点都以follower的状态开始。如果没收到leader消息则会变成candidate状态。\n### candidate\n会向其他结点“拉选票”，如果得到大部分的票则成为leader。这个过程就叫做Leader选举(Leader Election)\n### leader\n所有对系统的修改都会先经过leader。每个修改都会写一条日志(log entry)。leader收到修改请求后的过程如下，这个过程叫做日志复制(Log Replication)：\n\n    1. 复制日志到所有follower结点(replicate entry)\n    2. 大部分结点响应时才提交日志\n    3. 通知所有follower结点日志已提交\n    4. 所有follower也提交日志\n    5. 现在整个系统处于一致的状态\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/dsbasic.md","raw":"title: 分布式系统理论基础\ndate: 2018-02-26 22:31:40\ntags: protocol\ncategories: 分布式架构\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n分布式系统不是万能，不能解决所有痛点。在高可用，一致性，分区容错性必须有所权衡。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## CAP理论\n定理：任何分布式架构都只能同时满足两点，无法三者兼顾。\n* Consistency（一致性），数据一致更新，所有的数据变动都是同步的。\n* Availability（可用性），好的响应性能。\n* Partition tolerance（分区容忍性）可靠性，机器宕机是否影响使用。\n\n关系数据库的ACID模型拥有 高一致性 + 可用性 很难进行分区：\n1. Atomicity原子性：一个事务中所有操作都必须全部完成，要么全部不完成。\n2. Consistency一致性. 在事务开始或结束时，数据库应该在一致状态。\n3. Isolation隔离性. 事务将假定只有它自己在操作数据库，彼此不知晓。\n4. Durability持久性 一旦事务完成，就不能返回。\n跨数据库两段提交事务：2PC (two-phase commit)， 2PC is the anti-scalability pattern (Pat Helland)\n是反可伸缩模式的，JavaEE中的JTA事务可以支持2PC。因为2PC是反模式，尽量不要使用2PC，使用BASE来回避。\n\n## BASE理论\n* Basically Available 基本可用，支持分区失败\n* Soft state 软状态，允许状态某个时间短不同步，或者异步\n* Eventually consistent 最终一致性，要求数据最终结果一致，而不是时刻高度一致。\n\n## paxos协议\nPaxos算法的目的是为了解决分布式环境下一致性的问题。多个节点并发操纵数据，如何保证在读写过程中数据的一致性，并且解决方案要能适应分布式环境下的不可靠性（系统如何就一个值达到统一）。\n### Paxos的两个组件:\n* Proposer：提议发起者，处理客户端请求，将客户端的请求发送到集群中，以便决定这个值是否可以被批准。\n* Acceptor:提议批准者，负责处理接收到的提议，他们的回复就是一次投票。会存储一些状态来决定是否接收一个值\n\n### Paxos有两个原则\n1. 安全原则---保证不能做错的事\n    * a） 针对某个实例的表决只能有一个值被批准，不能出现一个被批准的值被另一个值覆盖的情况；(假设有一个值被多数Acceptor批准了，那么这个值就只能被学习)\n    * b） 每个节点只能学习到已经被批准的值，不能学习没有被批准的值。\n2. 存活原则---只要有多数服务器存活并且彼此间可以通信，最终都要做到的下列事情：\n    * a）最终会批准某个被提议的值；\n    * b）一个值被批准了，其他服务器最终会学习到这个值。\n\n## zab协议(ZooKeeper Atomic broadcast protocol)\nZAB协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。\n\n### Phase 0: Leader election（选举阶段）\n节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准 leader。只有到达 Phase 3 准 leader 才会成为真正的 leader。这一阶段的目的是就是为了选出一个准 leader，然后进入下一个阶段。\n\n### Phase 1: Discovery（发现阶段）\n在这个阶段，followers 跟准 leader 进行通信，同步 followers 最近接收的事务提议。这个一阶段的主要目的是发现当前大多数节点接收的最新提议，并且准 leader 生成新的 epoch，让 followers 接受，更新它们的 acceptedEpoch。\n一个 follower 只会连接一个 leader，如果有一个节点 f 认为另一个 follower p 是 leader，f 在尝试连接 p 时会被拒绝，f 被拒绝之后，就会进入 Phase 0。\n\n### Phase 2: Synchronization（同步阶段）\n同步阶段主要是利用 leader 前一阶段获得的最新提议历史，同步集群中所有的副本。只有当 quorum 都同步完成，准 leader 才会成为真正的 leader。follower 只会接收 zxid 比自己的 lastZxid 大的提议。\n\n### Phase 3: Broadcast（广播阶段）\n到了这个阶段，Zookeeper 集群才能正式对外提供事务服务，并且 leader 可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。\n\n## raft协议\n在Raft中，每个结点会处于下面三种状态中的一种：\n### follower\n所有结点都以follower的状态开始。如果没收到leader消息则会变成candidate状态。\n### candidate\n会向其他结点“拉选票”，如果得到大部分的票则成为leader。这个过程就叫做Leader选举(Leader Election)\n### leader\n所有对系统的修改都会先经过leader。每个修改都会写一条日志(log entry)。leader收到修改请求后的过程如下，这个过程叫做日志复制(Log Replication)：\n\n    1. 复制日志到所有follower结点(replicate entry)\n    2. 大部分结点响应时才提交日志\n    3. 通知所有follower结点日志已提交\n    4. 所有follower也提交日志\n    5. 现在整个系统处于一致的状态\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"dsbasic","published":1,"updated":"2018-03-29T00:30:51.561Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla5r000p8p9kngnwqh64","content":"<p><strong> 分布式系统理论基础：</strong> <Excerpt in index | 首页摘要><br>分布式系统不是万能，不能解决所有痛点。在高可用，一致性，分区容错性必须有所权衡。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"CAP理论\"><a href=\"#CAP理论\" class=\"headerlink\" title=\"CAP理论\"></a>CAP理论</h2><p>定理：任何分布式架构都只能同时满足两点，无法三者兼顾。</p>\n<ul>\n<li>Consistency（一致性），数据一致更新，所有的数据变动都是同步的。</li>\n<li>Availability（可用性），好的响应性能。</li>\n<li>Partition tolerance（分区容忍性）可靠性，机器宕机是否影响使用。</li>\n</ul>\n<p>关系数据库的ACID模型拥有 高一致性 + 可用性 很难进行分区：</p>\n<ol>\n<li>Atomicity原子性：一个事务中所有操作都必须全部完成，要么全部不完成。</li>\n<li>Consistency一致性. 在事务开始或结束时，数据库应该在一致状态。</li>\n<li>Isolation隔离性. 事务将假定只有它自己在操作数据库，彼此不知晓。</li>\n<li>Durability持久性 一旦事务完成，就不能返回。<br>跨数据库两段提交事务：2PC (two-phase commit)， 2PC is the anti-scalability pattern (Pat Helland)<br>是反可伸缩模式的，JavaEE中的JTA事务可以支持2PC。因为2PC是反模式，尽量不要使用2PC，使用BASE来回避。</li>\n</ol>\n<h2 id=\"BASE理论\"><a href=\"#BASE理论\" class=\"headerlink\" title=\"BASE理论\"></a>BASE理论</h2><ul>\n<li>Basically Available 基本可用，支持分区失败</li>\n<li>Soft state 软状态，允许状态某个时间短不同步，或者异步</li>\n<li>Eventually consistent 最终一致性，要求数据最终结果一致，而不是时刻高度一致。</li>\n</ul>\n<h2 id=\"paxos协议\"><a href=\"#paxos协议\" class=\"headerlink\" title=\"paxos协议\"></a>paxos协议</h2><p>Paxos算法的目的是为了解决分布式环境下一致性的问题。多个节点并发操纵数据，如何保证在读写过程中数据的一致性，并且解决方案要能适应分布式环境下的不可靠性（系统如何就一个值达到统一）。</p>\n<h3 id=\"Paxos的两个组件\"><a href=\"#Paxos的两个组件\" class=\"headerlink\" title=\"Paxos的两个组件:\"></a>Paxos的两个组件:</h3><ul>\n<li>Proposer：提议发起者，处理客户端请求，将客户端的请求发送到集群中，以便决定这个值是否可以被批准。</li>\n<li>Acceptor:提议批准者，负责处理接收到的提议，他们的回复就是一次投票。会存储一些状态来决定是否接收一个值</li>\n</ul>\n<h3 id=\"Paxos有两个原则\"><a href=\"#Paxos有两个原则\" class=\"headerlink\" title=\"Paxos有两个原则\"></a>Paxos有两个原则</h3><ol>\n<li>安全原则—保证不能做错的事<ul>\n<li>a） 针对某个实例的表决只能有一个值被批准，不能出现一个被批准的值被另一个值覆盖的情况；(假设有一个值被多数Acceptor批准了，那么这个值就只能被学习)</li>\n<li>b） 每个节点只能学习到已经被批准的值，不能学习没有被批准的值。</li>\n</ul>\n</li>\n<li>存活原则—只要有多数服务器存活并且彼此间可以通信，最终都要做到的下列事情：<ul>\n<li>a）最终会批准某个被提议的值；</li>\n<li>b）一个值被批准了，其他服务器最终会学习到这个值。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"zab协议-ZooKeeper-Atomic-broadcast-protocol\"><a href=\"#zab协议-ZooKeeper-Atomic-broadcast-protocol\" class=\"headerlink\" title=\"zab协议(ZooKeeper Atomic broadcast protocol)\"></a>zab协议(ZooKeeper Atomic broadcast protocol)</h2><p>ZAB协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。</p>\n<h3 id=\"Phase-0-Leader-election（选举阶段）\"><a href=\"#Phase-0-Leader-election（选举阶段）\" class=\"headerlink\" title=\"Phase 0: Leader election（选举阶段）\"></a>Phase 0: Leader election（选举阶段）</h3><p>节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准 leader。只有到达 Phase 3 准 leader 才会成为真正的 leader。这一阶段的目的是就是为了选出一个准 leader，然后进入下一个阶段。</p>\n<h3 id=\"Phase-1-Discovery（发现阶段）\"><a href=\"#Phase-1-Discovery（发现阶段）\" class=\"headerlink\" title=\"Phase 1: Discovery（发现阶段）\"></a>Phase 1: Discovery（发现阶段）</h3><p>在这个阶段，followers 跟准 leader 进行通信，同步 followers 最近接收的事务提议。这个一阶段的主要目的是发现当前大多数节点接收的最新提议，并且准 leader 生成新的 epoch，让 followers 接受，更新它们的 acceptedEpoch。<br>一个 follower 只会连接一个 leader，如果有一个节点 f 认为另一个 follower p 是 leader，f 在尝试连接 p 时会被拒绝，f 被拒绝之后，就会进入 Phase 0。</p>\n<h3 id=\"Phase-2-Synchronization（同步阶段）\"><a href=\"#Phase-2-Synchronization（同步阶段）\" class=\"headerlink\" title=\"Phase 2: Synchronization（同步阶段）\"></a>Phase 2: Synchronization（同步阶段）</h3><p>同步阶段主要是利用 leader 前一阶段获得的最新提议历史，同步集群中所有的副本。只有当 quorum 都同步完成，准 leader 才会成为真正的 leader。follower 只会接收 zxid 比自己的 lastZxid 大的提议。</p>\n<h3 id=\"Phase-3-Broadcast（广播阶段）\"><a href=\"#Phase-3-Broadcast（广播阶段）\" class=\"headerlink\" title=\"Phase 3: Broadcast（广播阶段）\"></a>Phase 3: Broadcast（广播阶段）</h3><p>到了这个阶段，Zookeeper 集群才能正式对外提供事务服务，并且 leader 可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。</p>\n<h2 id=\"raft协议\"><a href=\"#raft协议\" class=\"headerlink\" title=\"raft协议\"></a>raft协议</h2><p>在Raft中，每个结点会处于下面三种状态中的一种：</p>\n<h3 id=\"follower\"><a href=\"#follower\" class=\"headerlink\" title=\"follower\"></a>follower</h3><p>所有结点都以follower的状态开始。如果没收到leader消息则会变成candidate状态。</p>\n<h3 id=\"candidate\"><a href=\"#candidate\" class=\"headerlink\" title=\"candidate\"></a>candidate</h3><p>会向其他结点“拉选票”，如果得到大部分的票则成为leader。这个过程就叫做Leader选举(Leader Election)</p>\n<h3 id=\"leader\"><a href=\"#leader\" class=\"headerlink\" title=\"leader\"></a>leader</h3><p>所有对系统的修改都会先经过leader。每个修改都会写一条日志(log entry)。leader收到修改请求后的过程如下，这个过程叫做日志复制(Log Replication)：</p>\n<pre><code>1. 复制日志到所有follower结点(replicate entry)\n2. 大部分结点响应时才提交日志\n3. 通知所有follower结点日志已提交\n4. 所有follower也提交日志\n5. 现在整个系统处于一致的状态\n</code></pre><blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 分布式系统理论基础：</strong> <Excerpt in index | 首页摘要><br>分布式系统不是万能，不能解决所有痛点。在高可用，一致性，分区容错性必须有所权衡。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"CAP理论\"><a href=\"#CAP理论\" class=\"headerlink\" title=\"CAP理论\"></a>CAP理论</h2><p>定理：任何分布式架构都只能同时满足两点，无法三者兼顾。</p>\n<ul>\n<li>Consistency（一致性），数据一致更新，所有的数据变动都是同步的。</li>\n<li>Availability（可用性），好的响应性能。</li>\n<li>Partition tolerance（分区容忍性）可靠性，机器宕机是否影响使用。</li>\n</ul>\n<p>关系数据库的ACID模型拥有 高一致性 + 可用性 很难进行分区：</p>\n<ol>\n<li>Atomicity原子性：一个事务中所有操作都必须全部完成，要么全部不完成。</li>\n<li>Consistency一致性. 在事务开始或结束时，数据库应该在一致状态。</li>\n<li>Isolation隔离性. 事务将假定只有它自己在操作数据库，彼此不知晓。</li>\n<li>Durability持久性 一旦事务完成，就不能返回。<br>跨数据库两段提交事务：2PC (two-phase commit)， 2PC is the anti-scalability pattern (Pat Helland)<br>是反可伸缩模式的，JavaEE中的JTA事务可以支持2PC。因为2PC是反模式，尽量不要使用2PC，使用BASE来回避。</li>\n</ol>\n<h2 id=\"BASE理论\"><a href=\"#BASE理论\" class=\"headerlink\" title=\"BASE理论\"></a>BASE理论</h2><ul>\n<li>Basically Available 基本可用，支持分区失败</li>\n<li>Soft state 软状态，允许状态某个时间短不同步，或者异步</li>\n<li>Eventually consistent 最终一致性，要求数据最终结果一致，而不是时刻高度一致。</li>\n</ul>\n<h2 id=\"paxos协议\"><a href=\"#paxos协议\" class=\"headerlink\" title=\"paxos协议\"></a>paxos协议</h2><p>Paxos算法的目的是为了解决分布式环境下一致性的问题。多个节点并发操纵数据，如何保证在读写过程中数据的一致性，并且解决方案要能适应分布式环境下的不可靠性（系统如何就一个值达到统一）。</p>\n<h3 id=\"Paxos的两个组件\"><a href=\"#Paxos的两个组件\" class=\"headerlink\" title=\"Paxos的两个组件:\"></a>Paxos的两个组件:</h3><ul>\n<li>Proposer：提议发起者，处理客户端请求，将客户端的请求发送到集群中，以便决定这个值是否可以被批准。</li>\n<li>Acceptor:提议批准者，负责处理接收到的提议，他们的回复就是一次投票。会存储一些状态来决定是否接收一个值</li>\n</ul>\n<h3 id=\"Paxos有两个原则\"><a href=\"#Paxos有两个原则\" class=\"headerlink\" title=\"Paxos有两个原则\"></a>Paxos有两个原则</h3><ol>\n<li>安全原则—保证不能做错的事<ul>\n<li>a） 针对某个实例的表决只能有一个值被批准，不能出现一个被批准的值被另一个值覆盖的情况；(假设有一个值被多数Acceptor批准了，那么这个值就只能被学习)</li>\n<li>b） 每个节点只能学习到已经被批准的值，不能学习没有被批准的值。</li>\n</ul>\n</li>\n<li>存活原则—只要有多数服务器存活并且彼此间可以通信，最终都要做到的下列事情：<ul>\n<li>a）最终会批准某个被提议的值；</li>\n<li>b）一个值被批准了，其他服务器最终会学习到这个值。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"zab协议-ZooKeeper-Atomic-broadcast-protocol\"><a href=\"#zab协议-ZooKeeper-Atomic-broadcast-protocol\" class=\"headerlink\" title=\"zab协议(ZooKeeper Atomic broadcast protocol)\"></a>zab协议(ZooKeeper Atomic broadcast protocol)</h2><p>ZAB协议是为分布式协调服务 ZooKeeper 专门设计的一种支持崩溃恢复的原子广播协议。在 ZooKeeper 中，主要依赖 ZAB 协议来实现分布式数据一致性，基于该协议，ZooKeeper 实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。</p>\n<h3 id=\"Phase-0-Leader-election（选举阶段）\"><a href=\"#Phase-0-Leader-election（选举阶段）\" class=\"headerlink\" title=\"Phase 0: Leader election（选举阶段）\"></a>Phase 0: Leader election（选举阶段）</h3><p>节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准 leader。只有到达 Phase 3 准 leader 才会成为真正的 leader。这一阶段的目的是就是为了选出一个准 leader，然后进入下一个阶段。</p>\n<h3 id=\"Phase-1-Discovery（发现阶段）\"><a href=\"#Phase-1-Discovery（发现阶段）\" class=\"headerlink\" title=\"Phase 1: Discovery（发现阶段）\"></a>Phase 1: Discovery（发现阶段）</h3><p>在这个阶段，followers 跟准 leader 进行通信，同步 followers 最近接收的事务提议。这个一阶段的主要目的是发现当前大多数节点接收的最新提议，并且准 leader 生成新的 epoch，让 followers 接受，更新它们的 acceptedEpoch。<br>一个 follower 只会连接一个 leader，如果有一个节点 f 认为另一个 follower p 是 leader，f 在尝试连接 p 时会被拒绝，f 被拒绝之后，就会进入 Phase 0。</p>\n<h3 id=\"Phase-2-Synchronization（同步阶段）\"><a href=\"#Phase-2-Synchronization（同步阶段）\" class=\"headerlink\" title=\"Phase 2: Synchronization（同步阶段）\"></a>Phase 2: Synchronization（同步阶段）</h3><p>同步阶段主要是利用 leader 前一阶段获得的最新提议历史，同步集群中所有的副本。只有当 quorum 都同步完成，准 leader 才会成为真正的 leader。follower 只会接收 zxid 比自己的 lastZxid 大的提议。</p>\n<h3 id=\"Phase-3-Broadcast（广播阶段）\"><a href=\"#Phase-3-Broadcast（广播阶段）\" class=\"headerlink\" title=\"Phase 3: Broadcast（广播阶段）\"></a>Phase 3: Broadcast（广播阶段）</h3><p>到了这个阶段，Zookeeper 集群才能正式对外提供事务服务，并且 leader 可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。</p>\n<h2 id=\"raft协议\"><a href=\"#raft协议\" class=\"headerlink\" title=\"raft协议\"></a>raft协议</h2><p>在Raft中，每个结点会处于下面三种状态中的一种：</p>\n<h3 id=\"follower\"><a href=\"#follower\" class=\"headerlink\" title=\"follower\"></a>follower</h3><p>所有结点都以follower的状态开始。如果没收到leader消息则会变成candidate状态。</p>\n<h3 id=\"candidate\"><a href=\"#candidate\" class=\"headerlink\" title=\"candidate\"></a>candidate</h3><p>会向其他结点“拉选票”，如果得到大部分的票则成为leader。这个过程就叫做Leader选举(Leader Election)</p>\n<h3 id=\"leader\"><a href=\"#leader\" class=\"headerlink\" title=\"leader\"></a>leader</h3><p>所有对系统的修改都会先经过leader。每个修改都会写一条日志(log entry)。leader收到修改请求后的过程如下，这个过程叫做日志复制(Log Replication)：</p>\n<pre><code>1. 复制日志到所有follower结点(replicate entry)\n2. 大部分结点响应时才提交日志\n3. 通知所有follower结点日志已提交\n4. 所有follower也提交日志\n5. 现在整个系统处于一致的状态\n</code></pre><blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"分布式锁的几种实现方式","date":"2018-03-02T14:18:29.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n在分布式架构中，由于多线程和多台服务器，何难保证顺序性。如果需要对某一个资源进行限制，比如票务，比如请求幂等性控制等，这个时候分布式锁就排上用处。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 什么是分布式锁\n分布式锁是控制分布式系统或不同系统之间共同访问共享资源的一种锁实现，如果不同的系统或同一个系统的不同主机之间共享了某个资源时，往往需要互斥来防止彼此干扰来保证一致性。\n\n## 分布式锁需要解决的问题\n1. 互斥性：任意时刻，只能有一个客户端获取锁，不能同时有两个客户端获取到锁。\n2. 安全性：锁只能被持有该锁的客户端删除，不能由其它客户端删除。\n3. 死锁：获取锁的客户端因为某些原因（如down机等）而未能释放锁，其它客户端再也无法获取到该锁。\n4. 容错：当部分节点（redis节点等）down机时，客户端仍然能够获取锁和释放锁。\n\n## 分布式锁的实现方式\n1. 数据库实现\n\n2. 缓存实现，比如redis\n\n3. zookeeper实现\n\n## 未完待续\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/dslock.md","raw":"title: 分布式锁的几种实现方式\ndate: 2018-03-02 22:18:29\ntags: java\ncategories: 分布式架构\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n在分布式架构中，由于多线程和多台服务器，何难保证顺序性。如果需要对某一个资源进行限制，比如票务，比如请求幂等性控制等，这个时候分布式锁就排上用处。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 什么是分布式锁\n分布式锁是控制分布式系统或不同系统之间共同访问共享资源的一种锁实现，如果不同的系统或同一个系统的不同主机之间共享了某个资源时，往往需要互斥来防止彼此干扰来保证一致性。\n\n## 分布式锁需要解决的问题\n1. 互斥性：任意时刻，只能有一个客户端获取锁，不能同时有两个客户端获取到锁。\n2. 安全性：锁只能被持有该锁的客户端删除，不能由其它客户端删除。\n3. 死锁：获取锁的客户端因为某些原因（如down机等）而未能释放锁，其它客户端再也无法获取到该锁。\n4. 容错：当部分节点（redis节点等）down机时，客户端仍然能够获取锁和释放锁。\n\n## 分布式锁的实现方式\n1. 数据库实现\n\n2. 缓存实现，比如redis\n\n3. zookeeper实现\n\n## 未完待续\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"dslock","published":1,"updated":"2018-03-26T14:45:15.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla5s000r8p9kwj2pd311","content":"<p><strong> 分布式锁的几种实现方式：</strong> <Excerpt in index | 首页摘要><br>在分布式架构中，由于多线程和多台服务器，何难保证顺序性。如果需要对某一个资源进行限制，比如票务，比如请求幂等性控制等，这个时候分布式锁就排上用处。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"什么是分布式锁\"><a href=\"#什么是分布式锁\" class=\"headerlink\" title=\"什么是分布式锁\"></a>什么是分布式锁</h2><p>分布式锁是控制分布式系统或不同系统之间共同访问共享资源的一种锁实现，如果不同的系统或同一个系统的不同主机之间共享了某个资源时，往往需要互斥来防止彼此干扰来保证一致性。</p>\n<h2 id=\"分布式锁需要解决的问题\"><a href=\"#分布式锁需要解决的问题\" class=\"headerlink\" title=\"分布式锁需要解决的问题\"></a>分布式锁需要解决的问题</h2><ol>\n<li>互斥性：任意时刻，只能有一个客户端获取锁，不能同时有两个客户端获取到锁。</li>\n<li>安全性：锁只能被持有该锁的客户端删除，不能由其它客户端删除。</li>\n<li>死锁：获取锁的客户端因为某些原因（如down机等）而未能释放锁，其它客户端再也无法获取到该锁。</li>\n<li>容错：当部分节点（redis节点等）down机时，客户端仍然能够获取锁和释放锁。</li>\n</ol>\n<h2 id=\"分布式锁的实现方式\"><a href=\"#分布式锁的实现方式\" class=\"headerlink\" title=\"分布式锁的实现方式\"></a>分布式锁的实现方式</h2><ol>\n<li><p>数据库实现</p>\n</li>\n<li><p>缓存实现，比如redis</p>\n</li>\n<li><p>zookeeper实现</p>\n</li>\n</ol>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 分布式锁的几种实现方式：</strong> <Excerpt in index | 首页摘要><br>在分布式架构中，由于多线程和多台服务器，何难保证顺序性。如果需要对某一个资源进行限制，比如票务，比如请求幂等性控制等，这个时候分布式锁就排上用处。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"什么是分布式锁\"><a href=\"#什么是分布式锁\" class=\"headerlink\" title=\"什么是分布式锁\"></a>什么是分布式锁</h2><p>分布式锁是控制分布式系统或不同系统之间共同访问共享资源的一种锁实现，如果不同的系统或同一个系统的不同主机之间共享了某个资源时，往往需要互斥来防止彼此干扰来保证一致性。</p>\n<h2 id=\"分布式锁需要解决的问题\"><a href=\"#分布式锁需要解决的问题\" class=\"headerlink\" title=\"分布式锁需要解决的问题\"></a>分布式锁需要解决的问题</h2><ol>\n<li>互斥性：任意时刻，只能有一个客户端获取锁，不能同时有两个客户端获取到锁。</li>\n<li>安全性：锁只能被持有该锁的客户端删除，不能由其它客户端删除。</li>\n<li>死锁：获取锁的客户端因为某些原因（如down机等）而未能释放锁，其它客户端再也无法获取到该锁。</li>\n<li>容错：当部分节点（redis节点等）down机时，客户端仍然能够获取锁和释放锁。</li>\n</ol>\n<h2 id=\"分布式锁的实现方式\"><a href=\"#分布式锁的实现方式\" class=\"headerlink\" title=\"分布式锁的实现方式\"></a>分布式锁的实现方式</h2><ol>\n<li><p>数据库实现</p>\n</li>\n<li><p>缓存实现，比如redis</p>\n</li>\n<li><p>zookeeper实现</p>\n</li>\n</ol>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"egg.js实战技巧","date":"2017-05-15T19:07:27.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n用eggjs一个多月，踩了不少坑，把踩坑过程分享出来，希望大家少走弯路。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## egg.js介绍\n请去官网看介绍 [egg.js](https://eggjs.org/zh-cn/)\n\n## 说明\n本文所有示例基于async function，node版本node>=7.6.\n\n## controller和service的两种写法：基于类和普通方法\n这两种写法在获取全局变量有些地方不一样，这里列举最常见的几个全局变量的异同。\n\n1. 基于类的controller\n```js\nmodule.exports = app => {\n  class User extends app.Controller {\n    async queryUser() {\n      // logger获取，request对象获取\n      app.logger.info(this.ctx.request.body)\n      // 全局配置文件获取\n      const domain = app.config.domain\n      let users = []\n      try {\n        // 全局插件获取\n        users = await app.model.user.find({})\n        // service获取\n        await this.ctx.service.user.find({})\n      } catch (e) {\n        app.logger.error(e)\n      }\n      // 获取body\n      this.ctx.body = {\n        users,\n      }\n      // 重定向写法\n      this.ctx.redirect('http://www.baidu.com')\n      // render 模版引擎，\n      this.ctx.body = app.nunjucks.render('register.nj')\n    }\n  return User\n}\n```\n\n2. 基于普通方法(exports)\n```js\nexports.register = async function register() {\n  // logger获取，request对象获取\n  this.logger.info(this.request.body)\n  try {\n    // 全局配置文件获取\n    const domain = this.app.config.domain\n    // service获取\n    await this.service.register.register(this.token, this.request.body)\n    // 全局插件获取\n    const users = await this.app.model.user.find({})\n    this.service.message.send()\n  } catch (e) {\n    this.logger.error(e)\n  }\n  // 获取body\n  this.body = { 'success' }\n  // 重定向写法\n  this.redirect('http://www.baidu.com')\n  // render 模版引擎，\n  this.body = this.app.nunjucks.render('success.nj', data)\n}\n```\n\n## 自定义配置文件\negg.js的配置文件非常人性化，有config.default.js,config.default.prod.js,config.test.js等等。\n运行时根据环境变量加载不同的配置文件。默认时config.default.js,指定环境变量后会把config.env.js(对应环境)的配置文件和config.default.js合并。\n\n## 调试代码\n由于使用了async await，调试起来有些麻烦，建议使用webstorm或者chrome进行调试，eggjs自带egg-bin，支持在chrome里进行调试，对async，await有良好的支持。\n使用chrome调试，配置如下：\n在package.json中添加script,使用`npm run debug`启动，复制链接在chrome中打开，\n```js\n  \"scripts\": {\n    \"start\": \"node index.js\",\n    \"debug\": \"egg-bin debug\"\n  }\n```\n![命令行显示](http://o7kalf5h3.bkt.clouddn.com/debug-egg.png)\n\n![断点调试](http://o7kalf5h3.bkt.clouddn.com/debug-egg-point.png)\n\n## 此文章持续更新,欢迎收藏关注\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/eggjs-action.md","raw":"title: egg.js实战技巧\ndate: 2017-05-16 03:07:27\ntags: node\ncategories: 编程语言\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n用eggjs一个多月，踩了不少坑，把踩坑过程分享出来，希望大家少走弯路。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## egg.js介绍\n请去官网看介绍 [egg.js](https://eggjs.org/zh-cn/)\n\n## 说明\n本文所有示例基于async function，node版本node>=7.6.\n\n## controller和service的两种写法：基于类和普通方法\n这两种写法在获取全局变量有些地方不一样，这里列举最常见的几个全局变量的异同。\n\n1. 基于类的controller\n```js\nmodule.exports = app => {\n  class User extends app.Controller {\n    async queryUser() {\n      // logger获取，request对象获取\n      app.logger.info(this.ctx.request.body)\n      // 全局配置文件获取\n      const domain = app.config.domain\n      let users = []\n      try {\n        // 全局插件获取\n        users = await app.model.user.find({})\n        // service获取\n        await this.ctx.service.user.find({})\n      } catch (e) {\n        app.logger.error(e)\n      }\n      // 获取body\n      this.ctx.body = {\n        users,\n      }\n      // 重定向写法\n      this.ctx.redirect('http://www.baidu.com')\n      // render 模版引擎，\n      this.ctx.body = app.nunjucks.render('register.nj')\n    }\n  return User\n}\n```\n\n2. 基于普通方法(exports)\n```js\nexports.register = async function register() {\n  // logger获取，request对象获取\n  this.logger.info(this.request.body)\n  try {\n    // 全局配置文件获取\n    const domain = this.app.config.domain\n    // service获取\n    await this.service.register.register(this.token, this.request.body)\n    // 全局插件获取\n    const users = await this.app.model.user.find({})\n    this.service.message.send()\n  } catch (e) {\n    this.logger.error(e)\n  }\n  // 获取body\n  this.body = { 'success' }\n  // 重定向写法\n  this.redirect('http://www.baidu.com')\n  // render 模版引擎，\n  this.body = this.app.nunjucks.render('success.nj', data)\n}\n```\n\n## 自定义配置文件\negg.js的配置文件非常人性化，有config.default.js,config.default.prod.js,config.test.js等等。\n运行时根据环境变量加载不同的配置文件。默认时config.default.js,指定环境变量后会把config.env.js(对应环境)的配置文件和config.default.js合并。\n\n## 调试代码\n由于使用了async await，调试起来有些麻烦，建议使用webstorm或者chrome进行调试，eggjs自带egg-bin，支持在chrome里进行调试，对async，await有良好的支持。\n使用chrome调试，配置如下：\n在package.json中添加script,使用`npm run debug`启动，复制链接在chrome中打开，\n```js\n  \"scripts\": {\n    \"start\": \"node index.js\",\n    \"debug\": \"egg-bin debug\"\n  }\n```\n![命令行显示](http://o7kalf5h3.bkt.clouddn.com/debug-egg.png)\n\n![断点调试](http://o7kalf5h3.bkt.clouddn.com/debug-egg-point.png)\n\n## 此文章持续更新,欢迎收藏关注\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"eggjs-action","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla5v000w8p9kdc8cjy5s","content":"<p><strong> egg.js实战技巧：</strong> <Excerpt in index | 首页摘要><br>用eggjs一个多月，踩了不少坑，把踩坑过程分享出来，希望大家少走弯路。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"egg-js介绍\"><a href=\"#egg-js介绍\" class=\"headerlink\" title=\"egg.js介绍\"></a>egg.js介绍</h2><p>请去官网看介绍 <a href=\"https://eggjs.org/zh-cn/\">egg.js</a></p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>本文所有示例基于async function，node版本node&gt;=7.6.</p>\n<h2 id=\"controller和service的两种写法：基于类和普通方法\"><a href=\"#controller和service的两种写法：基于类和普通方法\" class=\"headerlink\" title=\"controller和service的两种写法：基于类和普通方法\"></a>controller和service的两种写法：基于类和普通方法</h2><p>这两种写法在获取全局变量有些地方不一样，这里列举最常见的几个全局变量的异同。</p>\n<ol>\n<li><p>基于类的controller</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = app =&gt; &#123;</div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">app</span>.<span class=\"title\">Controller</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">async</span> queryUser() &#123;</div><div class=\"line\">      <span class=\"comment\">// logger获取，request对象获取</span></div><div class=\"line\">      app.logger.info(<span class=\"keyword\">this</span>.ctx.request.body)</div><div class=\"line\">      <span class=\"comment\">// 全局配置文件获取</span></div><div class=\"line\">      <span class=\"keyword\">const</span> domain = app.config.domain</div><div class=\"line\">      <span class=\"keyword\">let</span> users = []</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 全局插件获取</span></div><div class=\"line\">        users = <span class=\"keyword\">await</span> app.model.user.find(&#123;&#125;)</div><div class=\"line\">        <span class=\"comment\">// service获取</span></div><div class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.ctx.service.user.find(&#123;&#125;)</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">        app.logger.error(e)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// 获取body</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.ctx.body = &#123;</div><div class=\"line\">        users,</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// 重定向写法</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.ctx.redirect(<span class=\"string\">'http://www.baidu.com'</span>)</div><div class=\"line\">      <span class=\"comment\">// render 模版引擎，</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.ctx.body = app.nunjucks.render(<span class=\"string\">'register.nj'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> User</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>基于普通方法(exports)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.register = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">register</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// logger获取，request对象获取</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.logger.info(<span class=\"keyword\">this</span>.request.body)</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 全局配置文件获取</span></div><div class=\"line\">    <span class=\"keyword\">const</span> domain = <span class=\"keyword\">this</span>.app.config.domain</div><div class=\"line\">    <span class=\"comment\">// service获取</span></div><div class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.service.register.register(<span class=\"keyword\">this</span>.token, <span class=\"keyword\">this</span>.request.body)</div><div class=\"line\">    <span class=\"comment\">// 全局插件获取</span></div><div class=\"line\">    <span class=\"keyword\">const</span> users = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.app.model.user.find(&#123;&#125;)</div><div class=\"line\">    <span class=\"keyword\">this</span>.service.message.send()</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.logger.error(e)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 获取body</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.body = &#123; <span class=\"string\">'success'</span> &#125;</div><div class=\"line\">  <span class=\"comment\">// 重定向写法</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.redirect(<span class=\"string\">'http://www.baidu.com'</span>)</div><div class=\"line\">  <span class=\"comment\">// render 模版引擎，</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.body = <span class=\"keyword\">this</span>.app.nunjucks.render(<span class=\"string\">'success.nj'</span>, data)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"自定义配置文件\"><a href=\"#自定义配置文件\" class=\"headerlink\" title=\"自定义配置文件\"></a>自定义配置文件</h2><p>egg.js的配置文件非常人性化，有config.default.js,config.default.prod.js,config.test.js等等。<br>运行时根据环境变量加载不同的配置文件。默认时config.default.js,指定环境变量后会把config.env.js(对应环境)的配置文件和config.default.js合并。</p>\n<h2 id=\"调试代码\"><a href=\"#调试代码\" class=\"headerlink\" title=\"调试代码\"></a>调试代码</h2><p>由于使用了async await，调试起来有些麻烦，建议使用webstorm或者chrome进行调试，eggjs自带egg-bin，支持在chrome里进行调试，对async，await有良好的支持。<br>使用chrome调试，配置如下：<br>在package.json中添加script,使用<code>npm run debug</code>启动，复制链接在chrome中打开，<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">  <span class=\"string\">\"start\"</span>: <span class=\"string\">\"node index.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"debug\"</span>: <span class=\"string\">\"egg-bin debug\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://o7kalf5h3.bkt.clouddn.com/debug-egg.png\" alt=\"命令行显示\"></p>\n<p><img src=\"http://o7kalf5h3.bkt.clouddn.com/debug-egg-point.png\" alt=\"断点调试\"></p>\n<h2 id=\"此文章持续更新-欢迎收藏关注\"><a href=\"#此文章持续更新-欢迎收藏关注\" class=\"headerlink\" title=\"此文章持续更新,欢迎收藏关注\"></a>此文章持续更新,欢迎收藏关注</h2><blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> egg.js实战技巧：</strong> <Excerpt in index | 首页摘要><br>用eggjs一个多月，踩了不少坑，把踩坑过程分享出来，希望大家少走弯路。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"egg-js介绍\"><a href=\"#egg-js介绍\" class=\"headerlink\" title=\"egg.js介绍\"></a>egg.js介绍</h2><p>请去官网看介绍 <a href=\"https://eggjs.org/zh-cn/\">egg.js</a></p>\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>本文所有示例基于async function，node版本node&gt;=7.6.</p>\n<h2 id=\"controller和service的两种写法：基于类和普通方法\"><a href=\"#controller和service的两种写法：基于类和普通方法\" class=\"headerlink\" title=\"controller和service的两种写法：基于类和普通方法\"></a>controller和service的两种写法：基于类和普通方法</h2><p>这两种写法在获取全局变量有些地方不一样，这里列举最常见的几个全局变量的异同。</p>\n<ol>\n<li><p>基于类的controller</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = app =&gt; &#123;</div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">app</span>.<span class=\"title\">Controller</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">async</span> queryUser() &#123;</div><div class=\"line\">      <span class=\"comment\">// logger获取，request对象获取</span></div><div class=\"line\">      app.logger.info(<span class=\"keyword\">this</span>.ctx.request.body)</div><div class=\"line\">      <span class=\"comment\">// 全局配置文件获取</span></div><div class=\"line\">      <span class=\"keyword\">const</span> domain = app.config.domain</div><div class=\"line\">      <span class=\"keyword\">let</span> users = []</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 全局插件获取</span></div><div class=\"line\">        users = <span class=\"keyword\">await</span> app.model.user.find(&#123;&#125;)</div><div class=\"line\">        <span class=\"comment\">// service获取</span></div><div class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.ctx.service.user.find(&#123;&#125;)</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">        app.logger.error(e)</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// 获取body</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.ctx.body = &#123;</div><div class=\"line\">        users,</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// 重定向写法</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.ctx.redirect(<span class=\"string\">'http://www.baidu.com'</span>)</div><div class=\"line\">      <span class=\"comment\">// render 模版引擎，</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.ctx.body = app.nunjucks.render(<span class=\"string\">'register.nj'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> User</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>基于普通方法(exports)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.register = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">register</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// logger获取，request对象获取</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.logger.info(<span class=\"keyword\">this</span>.request.body)</div><div class=\"line\">  <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 全局配置文件获取</span></div><div class=\"line\">    <span class=\"keyword\">const</span> domain = <span class=\"keyword\">this</span>.app.config.domain</div><div class=\"line\">    <span class=\"comment\">// service获取</span></div><div class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.service.register.register(<span class=\"keyword\">this</span>.token, <span class=\"keyword\">this</span>.request.body)</div><div class=\"line\">    <span class=\"comment\">// 全局插件获取</span></div><div class=\"line\">    <span class=\"keyword\">const</span> users = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.app.model.user.find(&#123;&#125;)</div><div class=\"line\">    <span class=\"keyword\">this</span>.service.message.send()</div><div class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.logger.error(e)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 获取body</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.body = &#123; <span class=\"string\">'success'</span> &#125;</div><div class=\"line\">  <span class=\"comment\">// 重定向写法</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.redirect(<span class=\"string\">'http://www.baidu.com'</span>)</div><div class=\"line\">  <span class=\"comment\">// render 模版引擎，</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.body = <span class=\"keyword\">this</span>.app.nunjucks.render(<span class=\"string\">'success.nj'</span>, data)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"自定义配置文件\"><a href=\"#自定义配置文件\" class=\"headerlink\" title=\"自定义配置文件\"></a>自定义配置文件</h2><p>egg.js的配置文件非常人性化，有config.default.js,config.default.prod.js,config.test.js等等。<br>运行时根据环境变量加载不同的配置文件。默认时config.default.js,指定环境变量后会把config.env.js(对应环境)的配置文件和config.default.js合并。</p>\n<h2 id=\"调试代码\"><a href=\"#调试代码\" class=\"headerlink\" title=\"调试代码\"></a>调试代码</h2><p>由于使用了async await，调试起来有些麻烦，建议使用webstorm或者chrome进行调试，eggjs自带egg-bin，支持在chrome里进行调试，对async，await有良好的支持。<br>使用chrome调试，配置如下：<br>在package.json中添加script,使用<code>npm run debug</code>启动，复制链接在chrome中打开，<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">  <span class=\"string\">\"start\"</span>: <span class=\"string\">\"node index.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"debug\"</span>: <span class=\"string\">\"egg-bin debug\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://o7kalf5h3.bkt.clouddn.com/debug-egg.png\" alt=\"命令行显示\"></p>\n<p><img src=\"http://o7kalf5h3.bkt.clouddn.com/debug-egg-point.png\" alt=\"断点调试\"></p>\n<h2 id=\"此文章持续更新-欢迎收藏关注\"><a href=\"#此文章持续更新-欢迎收藏关注\" class=\"headerlink\" title=\"此文章持续更新,欢迎收藏关注\"></a>此文章持续更新,欢迎收藏关注</h2><blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"一个完整项目的得失","date":"2017-04-11T02:18:22.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n想做一个完美的cms太难，架构本身就是要有取舍，只有最合适的架构，没有最好的架构。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 概述\n今年从2月份到4月份做了一个完整到项目，后台cms系统，包括前台应用。写打造一个完美到系统，确实需要考虑太多因素，\n自己收获颇多，特此总结一下。\n\n## 架构\ncms后台主要使用java的spring，mybits，shiro框架，前台就是jquery，jsp，bootstrap，\n数据库方面是mysql，缓存没有使用\n\n## 数据库设计\n使用mysql设计数据库，对业务的不深入很多时候会导致设置的表满足不了需求\n1. 提前预留几个def空字段，这样不需要频繁的修改表结构\n2. 索引要建好，数据量增长起来后，没有索引搜索肯定慢的很，对常见的搜索条件建索引\n3. 对并发有个大致的数\n\n## nginx配置\n1. 反向代理配置，代理80端口，代理域名访问\n2. 静态资源缓存，压缩\n3. websocket配置，https配置\n4. 集群的负载均衡配置\n\n## tomcat配置\n1. jvm参数设置\n2. 项目路径设置\n3. 日志，重启配置\n\n## 安全问题\n1. 防止\n\n## 选购服务器和域名\n1. 估算并发量，预留一定的并发量\n2. 根据并发量计算带宽和cpu还有内存\n3. 根据网络情况选择不同区域的服务器\n4. 根据需求选择域名\n\n## 突发状况的处理机制\n1. 选购的第三方接口挂了\n2. 数据库挂了\n3. 服务器挂了\n4. 网络异常\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/fullprj-desc.md","raw":"title: 一个完整项目的得失\ndate: 2017-04-11 10:18:22\ntags: java\ncategories: 编程语言\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n想做一个完美的cms太难，架构本身就是要有取舍，只有最合适的架构，没有最好的架构。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 概述\n今年从2月份到4月份做了一个完整到项目，后台cms系统，包括前台应用。写打造一个完美到系统，确实需要考虑太多因素，\n自己收获颇多，特此总结一下。\n\n## 架构\ncms后台主要使用java的spring，mybits，shiro框架，前台就是jquery，jsp，bootstrap，\n数据库方面是mysql，缓存没有使用\n\n## 数据库设计\n使用mysql设计数据库，对业务的不深入很多时候会导致设置的表满足不了需求\n1. 提前预留几个def空字段，这样不需要频繁的修改表结构\n2. 索引要建好，数据量增长起来后，没有索引搜索肯定慢的很，对常见的搜索条件建索引\n3. 对并发有个大致的数\n\n## nginx配置\n1. 反向代理配置，代理80端口，代理域名访问\n2. 静态资源缓存，压缩\n3. websocket配置，https配置\n4. 集群的负载均衡配置\n\n## tomcat配置\n1. jvm参数设置\n2. 项目路径设置\n3. 日志，重启配置\n\n## 安全问题\n1. 防止\n\n## 选购服务器和域名\n1. 估算并发量，预留一定的并发量\n2. 根据并发量计算带宽和cpu还有内存\n3. 根据网络情况选择不同区域的服务器\n4. 根据需求选择域名\n\n## 突发状况的处理机制\n1. 选购的第三方接口挂了\n2. 数据库挂了\n3. 服务器挂了\n4. 网络异常\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"fullprj-desc","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla5x000x8p9khct3lsff","content":"<p><strong> 一个完整项目的得失：</strong> <Excerpt in index | 首页摘要><br>想做一个完美的cms太难，架构本身就是要有取舍，只有最合适的架构，没有最好的架构。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>今年从2月份到4月份做了一个完整到项目，后台cms系统，包括前台应用。写打造一个完美到系统，确实需要考虑太多因素，<br>自己收获颇多，特此总结一下。</p>\n<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><p>cms后台主要使用java的spring，mybits，shiro框架，前台就是jquery，jsp，bootstrap，<br>数据库方面是mysql，缓存没有使用</p>\n<h2 id=\"数据库设计\"><a href=\"#数据库设计\" class=\"headerlink\" title=\"数据库设计\"></a>数据库设计</h2><p>使用mysql设计数据库，对业务的不深入很多时候会导致设置的表满足不了需求</p>\n<ol>\n<li>提前预留几个def空字段，这样不需要频繁的修改表结构</li>\n<li>索引要建好，数据量增长起来后，没有索引搜索肯定慢的很，对常见的搜索条件建索引</li>\n<li>对并发有个大致的数</li>\n</ol>\n<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><ol>\n<li>反向代理配置，代理80端口，代理域名访问</li>\n<li>静态资源缓存，压缩</li>\n<li>websocket配置，https配置</li>\n<li>集群的负载均衡配置</li>\n</ol>\n<h2 id=\"tomcat配置\"><a href=\"#tomcat配置\" class=\"headerlink\" title=\"tomcat配置\"></a>tomcat配置</h2><ol>\n<li>jvm参数设置</li>\n<li>项目路径设置</li>\n<li>日志，重启配置</li>\n</ol>\n<h2 id=\"安全问题\"><a href=\"#安全问题\" class=\"headerlink\" title=\"安全问题\"></a>安全问题</h2><ol>\n<li>防止</li>\n</ol>\n<h2 id=\"选购服务器和域名\"><a href=\"#选购服务器和域名\" class=\"headerlink\" title=\"选购服务器和域名\"></a>选购服务器和域名</h2><ol>\n<li>估算并发量，预留一定的并发量</li>\n<li>根据并发量计算带宽和cpu还有内存</li>\n<li>根据网络情况选择不同区域的服务器</li>\n<li>根据需求选择域名</li>\n</ol>\n<h2 id=\"突发状况的处理机制\"><a href=\"#突发状况的处理机制\" class=\"headerlink\" title=\"突发状况的处理机制\"></a>突发状况的处理机制</h2><ol>\n<li>选购的第三方接口挂了</li>\n<li>数据库挂了</li>\n<li>服务器挂了</li>\n<li>网络异常</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 一个完整项目的得失：</strong> <Excerpt in index | 首页摘要><br>想做一个完美的cms太难，架构本身就是要有取舍，只有最合适的架构，没有最好的架构。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>今年从2月份到4月份做了一个完整到项目，后台cms系统，包括前台应用。写打造一个完美到系统，确实需要考虑太多因素，<br>自己收获颇多，特此总结一下。</p>\n<h2 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h2><p>cms后台主要使用java的spring，mybits，shiro框架，前台就是jquery，jsp，bootstrap，<br>数据库方面是mysql，缓存没有使用</p>\n<h2 id=\"数据库设计\"><a href=\"#数据库设计\" class=\"headerlink\" title=\"数据库设计\"></a>数据库设计</h2><p>使用mysql设计数据库，对业务的不深入很多时候会导致设置的表满足不了需求</p>\n<ol>\n<li>提前预留几个def空字段，这样不需要频繁的修改表结构</li>\n<li>索引要建好，数据量增长起来后，没有索引搜索肯定慢的很，对常见的搜索条件建索引</li>\n<li>对并发有个大致的数</li>\n</ol>\n<h2 id=\"nginx配置\"><a href=\"#nginx配置\" class=\"headerlink\" title=\"nginx配置\"></a>nginx配置</h2><ol>\n<li>反向代理配置，代理80端口，代理域名访问</li>\n<li>静态资源缓存，压缩</li>\n<li>websocket配置，https配置</li>\n<li>集群的负载均衡配置</li>\n</ol>\n<h2 id=\"tomcat配置\"><a href=\"#tomcat配置\" class=\"headerlink\" title=\"tomcat配置\"></a>tomcat配置</h2><ol>\n<li>jvm参数设置</li>\n<li>项目路径设置</li>\n<li>日志，重启配置</li>\n</ol>\n<h2 id=\"安全问题\"><a href=\"#安全问题\" class=\"headerlink\" title=\"安全问题\"></a>安全问题</h2><ol>\n<li>防止</li>\n</ol>\n<h2 id=\"选购服务器和域名\"><a href=\"#选购服务器和域名\" class=\"headerlink\" title=\"选购服务器和域名\"></a>选购服务器和域名</h2><ol>\n<li>估算并发量，预留一定的并发量</li>\n<li>根据并发量计算带宽和cpu还有内存</li>\n<li>根据网络情况选择不同区域的服务器</li>\n<li>根据需求选择域名</li>\n</ol>\n<h2 id=\"突发状况的处理机制\"><a href=\"#突发状况的处理机制\" class=\"headerlink\" title=\"突发状况的处理机制\"></a>突发状况的处理机制</h2><ol>\n<li>选购的第三方接口挂了</li>\n<li>数据库挂了</li>\n<li>服务器挂了</li>\n<li>网络异常</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"免费的开源书籍","date":"2016-11-28T16:15:52.000Z","_content":"** 免费的开源书籍：** <Excerpt in index | 首页摘要>\n国外程序员在 stackoverflow 推荐的程序员必读书籍，中文版。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 目录\n\n* [语言无关](#语言无关)\n  * [IDE](#ide)\n  * [MySQL](#mysql)\n  * [NoSQL](#nosql)\n  * [PostgreSQL](#postgresql)\n  * [Web](#web)\n  * [WEB服务器](#web服务器)\n  * [其它](#其它)\n  * [函数式概念](#函数式概念)\n  * [分布式系统](#分布式系统)\n  * [在线教育](#在线教育)\n  * [大数据](#大数据)\n  * [操作系统](#操作系统)\n  * [数据库](#数据库)\n  * [智能系统](#智能系统)\n  * [正则表达式](#正则表达式)\n  * [版本控制](#版本控制)\n  * [程序员杂谈](#程序员杂谈)\n  * [管理和监控](#管理和监控)\n  * [编程艺术](#编程艺术)\n  * [编译原理](#编译原理)\n  * [编辑器](#编辑器)\n  * [计算机图形学](#计算机图形学)\n  * [设计模式](#设计模式)\n  * [软件开发方法](#软件开发方法)\n  * [项目相关](#项目相关)\n* [语言相关](#语言相关)\n  * [Android](#android)\n  * [AWK](#awk)\n  * [C](#c)\n  * [C#](#c-sharp)\n  * [C++](#c-1)\n  * [CoffeeScript](#coffeescript)\n  * [Dart](#dart)\n  * [Elasticsearch](#elasticsearch)\n  * [Elixir](#elixir)\n  * [Erlang](#erlang)\n  * [Fortran](#fortran)\n  * [Golang](#golang)\n  * [Haskell](#haskell)\n  * [HTML / CSS](#html--css)\n  * [HTTP](#http)\n  * [iOS](#ios)\n  * [Java](#java)\n  * [JavaScript](#javascript)\n  * [LaTeX](#latex)\n  * [LISP](#lisp)\n  * [Lua](#lua)\n  * [Markdown](#markdown)\n  * [Node.js](#nodejs)\n  * [Perl](#perl)\n  * [PHP](#php)\n  * [Python](#python)\n  * [R](#r)\n  * [reStructuredText](#restructuredtext)\n  * [Ruby](#ruby)\n  * [Rust](#rust)\n  * [Scala](#scala)\n  * [Scheme](#scheme)\n  * [Shell](#shell)\n  * [Swift](#swift)\n  * [Vim](#vim)\n  * [Visual Prolog](#visual-prolog)\n\n\n## 语言无关\n\n## IDE\n\n* [IntelliJ IDEA 简体中文专题教程](https://github.com/judasn/IntelliJ-IDEA-Tutorial)\n\n\n## MySQL\n\n* [21分钟MySQL入门教程](http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html)\n* [MySQL索引背后的数据结构及算法原理](http://blog.codinglabs.org/articles/theory-of-mysql-index.html)\n\n\n## NoSQL\n\n* [Disque 使用教程](http://disquebook.com)\n* [Neo4j .rb 中文資源](http://neo4j.tw)\n* [Neo4j 简体中文手册 v1.8](http://docs.neo4j.org.cn)\n* [Redis 命令参考](http://redisdoc.com)\n* [Redis 设计与实现](http://redisbook.com)\n* [The Little MongoDB Book](https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md)\n* [The Little Redis Book](https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md)\n* [带有详细注释的 Redis 2.6 代码](https://github.com/huangz1990/annotated_redis_source)\n* [带有详细注释的 Redis 3.0 代码](https://github.com/huangz1990/redis-3.0-annotated)\n\n\n## PostgreSQL\n\n* [PostgreSQL 8.2.3 中文文档](http://works.jinbuguo.com/postgresql/menu823/index.html)\n* [PostgreSQL 9.3.1 中文文档](http://www.postgres.cn/docs/9.3/index.html)\n\n\n## Web\n\n* [3 Web Designs in 3 Weeks](https://www.gitbook.com/book/juntao/3-web-designs-in-3-weeks/details)\n* [Chrome 开发者工具中文手册](https://github.com/CN-Chrome-DevTools/CN-Chrome-DevTools)\n* [Chrome扩展开发文档](http://open.chrome.360.cn/extension_dev/overview.html)\n* [Growth: 全栈增长工程师指南](https://github.com/phodal/growth-ebook)\n* [Grunt中文文档](http://www.gruntjs.net)\n* [Gulp 入门指南](https://github.com/nimojs/gulp-book)\n* [gulp中文文档](http://www.gulpjs.com.cn/docs/)\n* [HTTP 接口设计指北](https://github.com/bolasblack/http-api-guide)\n* [HTTP/2.0 中文翻译](http://yuedu.baidu.com/ebook/478d1a62376baf1ffc4fad99?pn=1)\n* [http2讲解](https://www.gitbook.com/book/ye11ow/http2-explained/details)\n* [JSON风格指南](https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md)\n* [Wireshark用户手册](http://man.lupaworld.com/content/network/wireshark/index.html)\n* [一站式学习Wireshark](https://community.emc.com/thread/194901)\n* [关于浏览器和网络的 20 项须知](http://www.20thingsilearned.com/zh-CN/home)\n* [前端代码规范 及 最佳实践](http://coderlmn.github.io/code-standards/)\n* [前端开发体系建设日记](https://github.com/fouber/blog/issues/2)\n* [前端资源分享（一）](https://github.com/hacke2/hacke2.github.io/issues/1)\n* [前端资源分享（二）](https://github.com/hacke2/hacke2.github.io/issues/3)\n* [正则表达式30分钟入门教程](http://deerchao.net/tutorials/regex/regex.htm)\n* [浏览器开发工具的秘密](http://jinlong.github.io/2013/08/29/devtoolsecrets/)\n* [移动Web前端知识库](https://github.com/AlloyTeam/Mars)\n* [移动前端开发收藏夹](https://github.com/hoosin/mobile-web-favorites)\n\n\n## WEB服务器\n\n* [Apache 中文手册](http://works.jinbuguo.com/apache/menu22/index.html)\n* [Nginx开发从入门到精通](http://tengine.taobao.org/book/index.html) (淘宝团队出品)\n* [Nginx教程从入门到精通](http://www.ttlsa.com/nginx/nginx-stu-pdf/) (PDF版本，运维生存时间出品)\n\n\n## 其它\n\n* [OpenWrt智能、自动、透明翻墙路由器教程](https://softwaredownload.gitbooks.io/openwrt-fanqiang/content/)\n* [SAN 管理入门系列](https://community.emc.com/docs/DOC-16067)\n* [Sketch 中文手册](http://sketchcn.com/sketch-chinese-user-manual.html#introduce)\n* [深入理解并行编程](http://ifeve.com/perfbook/)\n\n\n## 函数式概念\n\n* [傻瓜函数编程](https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn)\n\n\n## 分布式系统\n\n* [走向分布式](http://dcaoyuan.github.io/papers/pdfs/Scalability.pdf) (PDF)\n\n\n## 在线教育\n\n* [51CTO学院](http://edu.51cto.com)\n* [Codecademy](https://www.codecademy.com/?locale_code=zh)\n* [CodeSchool](https://www.codeschool.com)\n* [Coursera](https://www.coursera.org/courses?orderby=upcoming&lngs=zh)\n* [Learn X in Y minutes](https://learnxinyminutes.com) (数十种语言快速入门教程)\n* [shiyanlou](https://www.shiyanlou.com)\n* [TeamTreeHouse](https://teamtreehouse.com)\n* [Udacity](https://www.udacity.com)\n* [xuetangX](https://www.xuetangx.com)\n* [慕课网](http://www.imooc.com/course/list) (丰富的移动端开发、php开发、web前端、html5教程以及css3视频教程等课程资源)\n* [极客学院](http://www.jikexueyuan.com)\n* [计蒜客](http://www.jisuanke.com)\n\n\n## 大数据\n\n* [Spark 编程指南简体中文版](https://aiyanbo.gitbooks.io/spark-programming-guide-zh-cn/content/)\n* [大型集群上的快速和通用数据处理架构](https://code.csdn.net/CODE_Translation/spark_matei_phd)\n* [大数据/数据挖掘/推荐系统/机器学习相关资源](https://github.com/Flowerowl/Big-Data-Resources)\n* [数据挖掘中经典的算法实现和详细的注释](https://github.com/linyiqun/DataMiningAlgorithm)\n* [面向程序员的数据挖掘指南](http://dataminingguide.books.yourtion.com)\n\n\n## 操作系统\n\n* [Debian 参考手册 ](http://man.chinaunix.net/linux/debian/reference/reference.zh-cn.html)\n* [Docker —— 从入门到实践](https://github.com/yeasy/docker_practice)\n* [Docker中文指南](https://github.com/widuu/chinese_docker)\n* [Docker入门实战](http://yuedu.baidu.com/ebook/d817967416fc700abb68fca1)\n* [FreeBSD 使用手册](http://www.freebsd.org/doc/zh_CN.UTF-8/books/handbook/)\n* [FreeRADIUS新手入门](http://freeradius.akagi201.org)\n* [Linux Documentation (中文版)](https://tinylab.gitbooks.io/linux-doc/content/zh-cn/)\n* [Linux Guide for Complete Beginners](http://happypeter.github.io/LGCB/book/)\n* [Linux 构建指南](http://works.jinbuguo.com/lfs/lfs62/index.html)\n* [Linux 系统高级编程](http://sourceforge.net/projects/elpi/)\n* [Linux工具快速教程](https://github.com/me115/linuxtools_rst)\n* [Mac 开发配置手册](https://aaaaaashu.gitbooks.io/mac-dev-setup/content/)\n* [Operating Systems: Three Easy Pieces](http://pages.cs.wisc.edu/~remzi/OSTEP/)\n* [The Linux Command Line](http://billie66.github.io/TLCL/index.html) (中英文版)\n* [Ubuntu 参考手册 ](http://wiki.ubuntu.org.cn/UbuntuManual)\n* [uCore Lab: Operating System Course in Tsinghua University](https://www.gitbook.com/book/objectkuan/ucore-docs/details)\n* [UNIX TOOLBOX](http://cb.vu/unixtoolbox_zh_CN.xhtml)\n* [命令行的艺术](https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md)\n* [嵌入式 Linux 知识库 (eLinux.org 中文版)](https://tinylab.gitbooks.io/elinux/content/zh/)\n* [开源世界旅行手册](http://i.linuxtoy.org/docs/guide/index.html)\n* [深入分析Linux内核源码](http://www.kerneltravel.net/kernel-book/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81.html)\n* [理解Linux进程](https://github.com/tobegit3hub/understand_linux_process)\n* [鸟哥的 Linux 私房菜 基础学习篇](http://vbird.dic.ksu.edu.tw/linux_basic/linux_basic.php)\n* [鸟哥的 Linux 私房菜 服务器架设篇](http://vbird.dic.ksu.edu.tw/linux_server/)\n\n\n## 数据库\n\n* [Redis 设计与实现](http://redisbook.com)\n* [The Little MongoDB Book 中文版](https://github.com/justinyhuang/the-little-mongodb-book-cn)\n\n\n## 智能系统\n\n* [一步步搭建物联网系统](https://github.com/phodal/designiot)\n\n\n## 正则表达式\n\n* [正则表达式30分钟入门教程](http://deerchao.net/tutorials/regex/regex.htm)\n\n\n## 版本控制\n\n* [Git - 简易指南](http://rogerdudler.github.io/git-guide/index.zh.html)\n* [Git-Cheat-Sheet](https://github.com/flyhigher139/Git-Cheat-Sheet) （感谢 @flyhigher139 翻译了中文版）\n* [Git Community Book 中文版](http://gitbook.liuhui998.com)\n* [git-flow 备忘清单](http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html)\n* [Git magic](http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/)\n* [Git Magic](http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/)\n* [Git 参考手册](http://gitref.justjavac.com)\n* [Github帮助文档](https://github.com/waylau/github-help)\n* [GitHub秘籍](https://snowdream86.gitbooks.io/github-cheat-sheet/content/zh/)\n* [Git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000) （本文由 [@廖雪峰](http://weibo.com/liaoxuefeng) 创作，如果觉得本教程对您有帮助，可以去 [iTunes](https://itunes.apple.com/cn/app/git-jiao-cheng/id876420437) 购买）\n* [Got GitHub](https://github.com/gotgit/gotgithub)\n* [GotGitHub](http://www.worldhello.net/gotgithub/index.html)\n* [HgInit (中文版)](http://bucunzai.net/hginit/)\n* [Mercurial 使用教程](https://www.mercurial-scm.org/wiki/ChineseTutorial)\n* [Pro Git](https://git-scm.com/book/zh/v2)\n* [Pro Git 中文版](https://www.gitbook.com/book/0532/progit/details) (整理在gitbook上)\n* [svn 手册](http://svnbook.red-bean.com/nightly/zh/index.html)\n* [学习 Git 分支](http://pcottle.github.io/learnGitBranching/) (点击右下角按钮可切换至简体及正体中文)\n* [沉浸式学 Git](http://igit.linuxtoy.org/index.html)\n* [猴子都能懂的GIT入门](http://backlogtool.com/git-guide/cn/)\n\n\n## 程序员杂谈\n\n* [程序员的自我修养](http://www.kancloud.cn/kancloud/a-programmer-prepares)\n\n\n## 管理和监控\n\n* [ElasticSearch 权威指南](https://www.gitbook.com/book/fuxiaopang/learnelasticsearch/details)\n* [Elasticsearch 权威指南（中文版）](http://es.xiaoleilu.com)\n* [ELKstack 中文指南](http://kibana.logstash.es)\n* [Logstash 最佳实践](https://github.com/chenryn/logstash-best-practice-cn)\n* [Mastering Elasticsearch(中文版)](http://udn.yyuap.com/doc/mastering-elasticsearch/)\n* [Puppet 2.7 Cookbook 中文版](http://bbs.konotes.org/workdoc/puppet-27/)\n\n\n## 编程艺术\n\n* [取悦的工序：如何理解游戏](http://read.douban.com/ebook/4972883/) (豆瓣阅读，免费书籍)\n* [每个程序员都应该了解的内存知识(译)](http://www.oschina.net/translate/what-every-programmer-should-know-about-memory-part1?print)【第一部分】\n* [程序员编程艺术](https://github.com/julycoding/The-Art-Of-Programming-by-July)\n* [编程入门指南](http://www.kancloud.cn/kancloud/intro-to-prog/52592)\n\n\n## 编译原理\n\n* [《计算机程序的结构和解释》公开课 翻译项目](https://github.com/DeathKing/Learning-SICP)\n\n\n## 编辑器\n\n* [exvim--vim 改良成IDE项目](http://exvim.github.io/docs-zh/intro/)\n* [Vim中文文档](https://github.com/vimcn/vimcdoc)\n* [所需即所获：像 IDE 一样使用 vim](https://github.com/yangyangwithgnu/use_vim_as_ide)\n* [笨方法学Vimscript 中译本](http://learnvimscriptthehardway.onefloweroneworld.com)\n\n\n## 计算机图形学\n\n* [OpenGL 教程](https://github.com/zilongshanren/opengl-tutorials)\n\n\n## 设计模式\n\n* [史上最全设计模式导学目录](http://blog.csdn.net/lovelion/article/details/17517213)\n* [图说设计模式](https://github.com/me115/design_patterns)\n\n\n## 软件开发方法\n\n* [傻瓜函数编程](https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn) (《Functional Programming For The Rest of Us》中文版)\n* [硝烟中的 Scrum 和 XP](http://www.infoq.com/cn/minibooks/scrum-xp-from-the-trenches)\n\n\n## 项目相关\n\n* [GNU make 指南](http://docs.huihoo.com/gnu/linux/gmake.html)\n* [Gradle 2 用户指南](https://github.com/waylau/Gradle-2-User-Guide)\n* [Gradle 中文使用文档](http://yuedu.baidu.com/ebook/f23af265998fcc22bcd10da2)\n* [Joel谈软件](http://local.joelonsoftware.com/wiki/Chinese_(Simplified))\n* [selenium 中文文档](https://github.com/fool2fish/selenium-doc)\n* [开源软件架构](http://www.ituring.com.cn/book/1143)\n* [持续集成（第二版）](http://article.yeeyan.org/view/2251/94882) (译言网)\n* [約耳談軟體(Joel on Software)](http://local.joelonsoftware.com/wiki/%E9%A6%96%E9%A0%81)\n* [编码规范](https://github.com/ecomfe/spec)\n* [让开发自动化系列专栏](http://www.ibm.com/developerworks/cn/java/j-ap/)\n* [追求代码质量](http://www.ibm.com/developerworks/cn/java/j-cq/)\n\n\n## 语言相关\n\n## Android\n\n* [Android Design(中文版)](http://www.apkbus.com/design/index.html)\n* [Android Note(开发过程中积累的知识点)](https://github.com/CharonChui/AndroidNote)\n* [Android6.0新特性详解](http://leanote.com/blog/post/561658f938f41126b2000298?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)\n* [Android学习之路](http://stormzhang.github.io/android/2014/07/07/learn-android-from-rookie/)\n* [Android开发技术前线(android-tech-frontier)](https://github.com/bboyfeiyu/android-tech-frontier)\n* [Google Android官方培训课程中文版](http://hukai.me/android-training-course-in-chinese/index.html)\n* Google Material Design 正體中文版 ([译本一](https://wcc723.gitbooks.io/google_design_translate/content/style-icons.html) [译本二](https://github.com/1sters/material_design_zh))\n* [Material Design 中文版](http://wiki.jikexueyuan.com/project/material-design/)\n* [Point-of-Android](https://github.com/FX-Max/Point-of-Android) Android 一些重要知识点解析整理\n\n\n## AWK\n\n* [awk中文指南](http://awk.readthedocs.org/en/latest/index.html)\n* [awk程序设计语言](https://github.com/wuzhouhui/awk)\n\n\n## C\n\n* [C 语言常见问题集](http://c-faq-chn.sourceforge.net/ccfaq/ccfaq.html)\n* [C/C++ 学习教程](http://doc.lellansin.com)\n* [Linux C 编程一站式学习](http://docs.linuxtone.org/ebooks/C&CPP/c/)\n* [新概念 C 语言教程](https://github.com/limingth/NCCL)\n\n\n## C Sharp\n\n* [精通C#(第6版) ](http://book.douban.com/subject/24827879/)\n\n\n## C++\n\n* [100个gcc小技巧](https://github.com/hellogcc/100-gcc-tips/blob/master/src/index.md)\n* [100个gdb小技巧](https://github.com/hellogcc/100-gdb-tips/blob/master/src/index.md)\n* [C 语言编程透视](https://tinylab.gitbooks.io/cbook/content/)\n* [C/C++ Primer](https://github.com/andycai/cprimer) - @andycai\n* [C++ FAQ LITE(中文版)](http://www.sunistudio.com/cppfaq/)\n* [C++ Primer 5th Answers](https://github.com/Mooophy/Cpp-Primer)\n* [C++ Template 进阶指南](https://github.com/wuye9036/CppTemplateTutorial)\n* [C++ 基础教程](http://www.prglab.com/cms/)\n* [C++ 并发编程(基于C++11)](https://chenxiaowei.gitbooks.io/cpp_concurrency_in_action/content/)\n* [C++ 并发编程指南](https://github.com/forhappy/Cplusplus-Concurrency-In-Practice)\n* [CGDB中文手册](https://github.com/leeyiw/cgdb-manual-in-chinese)\n* [Cmake 实践](http://sewm.pku.edu.cn/src/paradise/reference/CMake%20Practice.pdf) (PDF版)\n* [GNU make 指南](http://docs.huihoo.com/gnu/linux/gmake.html)\n* [Google C++ 风格指南](http://zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/contents/)\n* [QT 教程](http://www.kuqin.com/qtdocument/tutorial.html)\n* [ZMQ 指南](https://github.com/anjuke/zguide-cn)\n* [像计算机科学家一样思考（C++版)](http://www.ituring.com.cn/book/1203) (《How To Think Like a Computer Scientist: C++ Version》中文版)\n* [简单易懂的C魔法](http://www.nowamagic.net/librarys/books/contents/c)\n* [跟我一起写Makefile(PDF)](http://scc.qibebt.cas.cn/docs/linux/base/%B8%FA%CE%D2%D2%BB%C6%F0%D0%B4Makefile-%B3%C2%F0%A9.pdf) (PDF)\n\n\n## CoffeeScript\n\n* [CoffeeScript 中文](http://coffee-script.org)\n* [CoffeeScript 编程风格指南](https://github.com/elrrrrrrr/coffeescript-style-guide/blob/master/README-ZH.md)\n\n\n## Dart\n\n* [Dart 语言导览](http://dart.lidian.info/wiki/Language_Tour)\n\n\n## Elasticsearch\n\n* [Elasticsearch 权威指南](https://github.com/looly/elasticsearch-definitive-guide-cn) （《Elasticsearch the definitive guide》中文版）\n* [ELKstack 中文指南](http://kibana.logstash.es)\n* [Mastering Elasticsearch(中文版)](http://udn.yyuap.com/doc/mastering-elasticsearch/)\n\n\n## Elixir\n\n* [Elixir Getting Started 中文翻译](https://github.com/Ljzn/ElixrGettingStartedChinese)\n* [Elixir 编程语言教程](https://elixirschool.com/cn/) (Elixir School)\n* [Elixir元编程与DSL 中文翻译](https://github.com/Ljzn/MetaProgrammingInElixirChinese)\n* [Phoenix 框架中文文档](https://mydearxym.gitbooks.io/phoenix-doc-in-chinese/content/)\n\n\n## Erlang\n\n* [Erlang 并发编程](https://github.com/liancheng/cpie-cn) (《Concurrent Programming in Erlang (Part I)》中文版)\n\n\n## Fortran\n\n* [Fortran77和90/95编程入门](http://micro.ustc.edu.cn/Fortran/ZJDing/)\n\n\n## Golang\n\n* [Effective Go](http://www.hellogcc.org/effective_go.html)\n* [Go Web 编程](https://github.com/astaxie/build-web-application-with-golang)\n* [Go 入门指南](https://github.com/Unknwon/the-way-to-go_ZH_CN) (《The Way to Go》中文版)\n* [Go 官方文档翻译](https://github.com/golang-china/golangdoc.translations)\n* [Go 指南](http://go-tour-zh.appsp0t.com) (《A Tour of Go》中文版)\n* [Go 简易教程](https://github.com/songleo/the-little-go-book_ZH_CN) (《[The Little Go Book](https://github.com/karlseguin/the-little-go-book)》中文版)\n* [Go 编程基础](https://github.com/Unknwon/go-fundamental-programming)\n* [Go 语言标准库](https://github.com/polaris1119/The-Golang-Standard-Library-by-Example)\n* [Go命令教程](https://github.com/hyper-carrot/go_command_tutorial)\n* [Go实战开发](https://github.com/astaxie/Go-in-Action)\n* [Go语言博客实践](https://github.com/achun/Go-Blog-In-Action)\n* [Java程序员的Golang入门指南](http://blog.csdn.net/dc_726/article/details/46565241)\n* [Network programming with Go 中文翻译版本](https://github.com/astaxie/NPWG_zh)\n* [Revel 框架手册](http://gorevel.cn/docs/manual/index.html)\n* [学习Go语言](http://mikespook.com/learning-go/)\n\n\n## Groovy\n\n* [实战 Groovy 系列](http://www.ibm.com/developerworks/cn/java/j-pg/)\n\n\n## Haskell\n\n* [Haskell 趣学指南](http://learnyoua.haskell.sg)\n* [Real World Haskell 中文版](http://cnhaskell.com)\n\n\n## HTML / CSS\n\n* [CSS3 Tutorial 《CSS3 教程》](https://github.com/waylau/css3-tutorial)\n* [CSS参考手册](http://css.doyoe.com)\n* [Emmet 文档](http://yanxyz.github.io/emmet-docs/)\n* [HTML5 教程](http://www.w3school.com.cn/html5/)\n* [HTML和CSS编码规范](http://codeguide.bootcss.com)\n* [Sass Guidelines 中文](http://sass-guidelin.es/zh/)\n* [前端代码规范](http://alloyteam.github.io/CodeGuide/) (腾讯 AlloyTeam 团队)\n* [学习CSS布局](http://zh.learnlayout.com)\n* [通用 CSS 笔记、建议与指导](https://github.com/chadluo/CSS-Guidelines/blob/master/README.md)\n\n\n## iOS\n\n* [Apple Watch开发初探](http://nilsun.github.io/apple-watch/)\n* [Google Objective-C Style Guide 中文版](http://zh-google-styleguide.readthedocs.org/en/latest/google-objc-styleguide/)\n* [iOS7人机界面指南](http://isux.tencent.com/ios-human-interface-guidelines-ui-design-basics-ios7.html)\n* [iOS开发60分钟入门](https://github.com/qinjx/30min_guides/blob/master/ios.md)\n* [iPhone 6 屏幕揭秘](http://wileam.com/iphone-6-screen-cn/)\n* [网易斯坦福大学公开课：iOS 7应用开发字幕文件](https://github.com/jkyin/Subtitle)\n\n\n## Java\n\n* [Activiti 5.x 用户指南](https://github.com/waylau/activiti-5.x-user-guide)\n* [Apache MINA 2 用户指南](https://github.com/waylau/apache-mina-2.x-user-guide)\n* [Apache Shiro 用户指南](https://github.com/waylau/apache-shiro-1.2.x-reference)\n* [Google Java编程风格指南](http://www.hawstein.com/posts/google-java-style.html)\n* [H2 Database 教程](https://github.com/waylau/h2-database-doc)\n* [Java Servlet 3.1 规范](https://github.com/waylau/servlet-3.1-specification)\n* [Java 编码规范](https://github.com/waylau/java-code-conventions)\n* [Jersey 2.x 用户指南](https://github.com/waylau/Jersey-2.x-User-Guide)\n* [JSSE 参考指南](https://github.com/waylau/jsse-reference-guide)\n* [MyBatis中文文档](http://mybatis.github.io/mybatis-3/zh/index.html)\n* [Netty 4.x 用户指南](https://github.com/waylau/netty-4-user-guide)\n* [Netty 实战(精髓)](https://github.com/waylau/essential-netty-in-action)\n* [REST 实战](https://github.com/waylau/rest-in-action)\n* [Spring Boot参考指南](https://github.com/qibaoguang/Spring-Boot-Reference-Guide) (翻译中)\n* [Spring Framework 4.x参考文档](https://github.com/waylau/spring-framework-4-reference)\n* [用jersey构建REST服务](https://github.com/waylau/RestDemo)\n\n\n## Javascript\n\n* [Airbnb JavaScript 规范](https://github.com/adamlu/javascript-style-guide)\n* AngularJS\n  * [AngularJS中译本](https://github.com/peiransun/angularjs-cn)\n  * [AngularJS入门教程](https://github.com/zensh/AngularjsTutorial_cn)\n  * [AngularJS最佳实践和风格指南](https://github.com/mgechev/angularjs-style-guide/blob/master/README-zh-cn.md)\n  * [在Windows环境下用Yeoman构建AngularJS项目](http://www.waylau.com/build-angularjs-app-with-yeoman-in-windows/)\n  * [构建自己的AngularJS](https://github.com/xufei/Make-Your-Own-AngularJS/blob/master/01.md)\n* backbone.js\n  * [backbone.js中文文档](http://www.css88.com/doc/backbone/)\n  * [backbone.js入门教程](http://www.the5fire.com/backbone-js-tutorials-pdf-download.html) (PDF)\n  * [Backbone.js入门教程第二版](https://github.com/the5fire/backbonejs-learning-note)\n  * [Developing Backbone.js Applications(中文版)](http://feliving.github.io/developing-backbone-applications)\n* [Chrome扩展及应用开发](http://www.ituring.com.cn/minibook/950)\n* CoffeeScript\n  * [CoffeeScript 编码风格指南](https://github.com/geekplux/coffeescript-style-guide)\n* D3.js\n  * [D3.js 入门系列](http://www.ourd3js.com/wordpress/?cat=2) (还有进阶、高级等系列)\n  * [官方API文档](https://github.com/mbostock/d3/wiki/API--%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C)\n  * [张天旭的D3教程](http://blog.csdn.net/zhang__tianxu/article/category/1623437)\n  * [楚狂人的D3教程](http://www.cnblogs.com/winleisure/tag/D3.js/)\n* [ECMAScript 6 入门](http://es6.ruanyifeng.com) (作者：阮一峰)\n* ExtJS\n  * [Ext4.1.0 中文文档](http://extjs-doc-cn.github.io/ext4api/)\n* [Google JavaScript 代码风格指南](http://bq69.com/blog/articles/script/868/google-javascript-style-guide.html)\n* [Google JSON 风格指南](https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md)\n* impress.js\n  * [impress.js的中文教程](https://github.com/kokdemo/impress.js-tutorial-in-Chinese)\n* [JavaScript Promise迷你书](http://liubin.github.io/promises-book/)\n* [Javascript 原理](http://typeof.net/s/jsmech/)\n* [JavaScript 标准参考教程（alpha）](http://javascript.ruanyifeng.com)\n* [《JavaScript 模式》](https://github.com/jayli/javascript-patterns) “JavaScript patterns”中译本\n* [javascript 的 12 个怪癖](https://github.com/justjavac/12-javascript-quirks)\n* [JavaScript 秘密花园](http://bonsaiden.github.io/JavaScript-Garden/zh/)\n* [JavaScript核心概念及实践](http://icodeit.org/jsccp/) (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者)\n* [Javascript编程指南](http://pij.robinqu.me) ([源码](https://github.com/RobinQu/Programing-In-Javascript))\n* jQuery\n  * [How to write jQuery plugin](http://i5ting.github.io/How-to-write-jQuery-plugin/build/jquery.plugin.html)\n  * [简单易懂的JQuery魔法](http://www.nowamagic.net/librarys/books/contents/jquery)\n* Meteor\n  * [Discover Meteor](http://zh.discovermeteor.com)\n* Node.js\n  * [express.js 中文文档](http://expressjs.jser.us)\n  * [Express框架](http://javascript.ruanyifeng.com/nodejs/express.html)\n  * [koa 中文文档](https://github.com/guo-yu/koa-guide)\n  * [Learn You The Node.js For Much Win! (中文版)](https://www.npmjs.com/package/learnyounode-zh-cn)\n  * [Node debug 三法三例](http://i5ting.github.io/node-debug-tutorial/)\n  * [Node.js Fullstack《從零到一的進撃》](https://github.com/jollen/nodejs-fullstack-lessons)\n  * [Node.js 包教不包会](https://github.com/alsotang/node-lessons)\n  * [Nodejs Wiki Book](https://github.com/nodejs-tw/nodejs-wiki-book) (繁体中文)\n  * [nodejs中文文档](https://www.gitbook.com/book/0532/nodejs/details)\n  * [Node入门](http://www.nodebeginner.org/index-zh-cn.html)\n  * [七天学会NodeJS](http://nqdeng.github.io/7-days-nodejs/)\n  * [使用 Express + MongoDB 搭建多人博客](https://github.com/nswbmw/N-blog)\n* React.js\n  * [Learn React & Webpack by building the Hacker News front page](https://github.com/theJian/build-a-hn-front-page)\n  * [React Native 中文文档(含最新Android内容)](http://wiki.jikexueyuan.com/project/react-native/)\n  * [React webpack-cookbook](https://github.com/fakefish/react-webpack-cookbook)\n  * [React 入门教程](http://fraserxu.me/intro-to-react/)\n  * [React.js 中文文档](http://reactjs.cn)\n* underscore.js\n  * [Underscore.js中文文档](http://learningcn.com/underscore/)\n* [You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS) (深入JavaScript语言核心机制的系列图书)\n* Zepto.js\n  * [Zepto.js 中文文档](http://mweb.baidu.com/zeptoapi/)\n* [命名函数表达式探秘](http://justjavac.com/named-function-expressions-demystified.html)  (注:原文由[为之漫笔](http://www.cn-cuckoo.com) 翻译，原始地址无法打开，所以此处地址为我博客上的备份)\n* [学用 JavaScript 设计模式](http://www.oschina.net/translate/learning-javascript-design-patterns) (开源中国)\n* [深入理解JavaScript系列](http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html)\n\n\n## LaTeX\n\n* [LaTeX 笔记](http://www.dralpha.com/zh/tech/tech.htm)\n* [一份不太简短的 LaTeX2ε 介绍](http://ctan.org/pkg/lshort-zh-cn)\n* [大家來學 LaTeX](https://github.com/49951331/graduate-project-102pj/blob/master/docs/latex123.pdf) (PDF)\n\n\n## LISP\n\n* [ANSI Common Lisp 中文翻译版](http://acl.readthedocs.org/en/latest/)\n* [Common Lisp 高级编程技术](http://www.ituring.com.cn/minibook/862) (《On Lisp》中文版)\n\n\n## Lua\n\n* [Lua 5.3 参考手册](http://www.w3cschool.cc/manual/lua53doc/contents.html)\n\n\n## Markdown\n\n* [Markdown 快速入门](http://wowubuntu.com/markdown/basic.html)\n* [Markdown 简明教程](http://www.jianshu.com/p/7bd23251da0a)\n* [Markdown 语法说明](http://wowubuntu.com/markdown/)\n* [献给写作者的 Markdown 新手指南](http://www.jianshu.com/p/q81RER)\n\n\n## Node.js\n\n* [Node 入门](http://www.nodebeginner.org/index-zh-cn.html)\n* [The NodeJS 中文文档](https://www.gitbook.com/book/0532/nodejs/details)（社区翻译）\n* [七天学会NodeJS](http://nqdeng.github.io/7-days-nodejs/) 阿里出品，很好的入门资料\n\n\n## Perl\n\n* [Master Perl Today](https://github.com/fayland/chinese-perl-book)\n* [《Modern Perl》中文版](https://github.com/horus/modern_perl_book)\n* [Perl 5 教程](http://www.cbi.pku.edu.cn/chinese/documents/perl/index.htm)\n* [Perl 教程](http://www.yiibai.com/perl)\n\n\n## PHP\n\n* [PHP 之道](http://wulijun.github.io/php-the-right-way/)\n* [PHP5中文手册](http://php.net/manual/zh/)\n* [PHP扩展开发及内核应用](http://www.walu.cc/phpbook/preface.md)\n* [Symfony2 实例教程](https://wusuopu.gitbooks.io/symfony2_tutorial/content)\n* [深入理解 PHP 内核](http://www.php-internals.com/book/)\n\n\n## Python\n\n* [Django book 2.0](http://djangobook.py3k.cn/2.0/)\n* [Python 3 文档(简体中文) 3.2.2 documentation](http://docspy3zh.readthedocs.org/en/latest/)\n* [Python 中文学习大本营](http://www.pythondoc.com)\n* [深入 Python 3](https://github.com/jiechic/diveintopython3)\n* [笨办法学 Python](http://old.sebug.net/paper/books/LearnPythonTheHardWay/)\n\n\n## R\n\n* [153分钟学会 R](http://cran.r-project.org/doc/contrib/Liu-FAQ.pdf) (PDF)\n* [《R for beginners》中文版](http://www.biosino.org/R/R-doc/files/R4beg_cn_2.0.pdf) (PDF)\n* [R 导论](http://cran.r-project.org/doc/contrib/Ding-R-intro_cn.pdf) (《An Introduction to R》中文版) (PDF)\n* [用 R 构建 Shiny 应用程序](http://yanping.me/shiny-tutorial/) (《Building 'Shiny' Applications with R》中文版)\n* [统计学与 R 读书笔记](http://cran.r-project.org/doc/contrib/Xu-Statistics_and_R.pdf) (PDF)\n\n\n## reStructuredText\n\n* [reStructuredText 入门](http://www.pythondoc.com/sphinx/rest.html)\n* [reStructuredText 简明教程](http://jwch.sdut.edu.cn/book/rst.html)\n\n\n## Ruby\n\n* [Rails 风格指南](https://github.com/JuanitoFatas/rails-style-guide/blob/master/README-zhCN.md)\n* [Ruby on Rails Tutorial 原书第 2 版](http://railstutorial-china.org)\n* [Ruby on Rails 实战圣经](https://ihower.tw/rails4/)\n* [Ruby 风格指南](https://github.com/JuanitoFatas/ruby-style-guide/blob/master/README-zhCN.md)\n* [笨方法学 Ruby](http://lrthw.github.io)\n\n\n## Rust\n\n* [Rust 官方教程](https://github.com/KaiserY/rust-book-chinese)\n* [Rust 语言学习笔记](https://github.com/photino/rust-notes)\n* [RustPrimer](https://github.com/rustcc/RustPrimer)\n* [通过例子学习 Rust](https://github.com/rustcc/rust-by-example/)\n\n\n## Scala\n\n* [Effective Scala](http://twitter.github.io/effectivescala/index-cn.html)\n* [Scala 初学者指南](https://www.gitbook.com/book/windor/beginners-guide-to-scala/details) (The Neophyte's Guide to Scala)\n* [Scala 课堂](http://twitter.github.io/scala_school/zh_cn/index.html) (Twitter的Scala中文教程)\n\n\n## Scheme\n\n* [Scheme 入门教程](http://deathking.github.io/yast-cn/) (《Yet Another Scheme Tutorial》中文版)\n\n\n## Shell\n\n* [Shell 编程基础](http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80)\n* [Shell 脚本编程30分钟入门](https://github.com/qinjx/30min_guides/blob/master/shell.md)\n* [The Linux Command Line 中文版](http://billie66.github.io/TLCL/book/zh)\n\n\n## Swift\n\n* [《The Swift Programming Language》中文版](https://www.gitbook.com/book/numbbbbb/-the-swift-programming-language-/details)\n\n\n## Vim\n\n* [Vim Manual(中文版)](http://man.chinaunix.net/newsoft/vi/doc/help.html)\n* [大家來學 VIM](http://www.study-area.org/tips/vim/index.html)\n\n\n## Visual Prolog\n\n* [Visual Prolog 7初学指南](http://wiki.visual-prolog.com/index.php?title=A_Beginners_Guide_to_Visual_Prolog_in_Chinese)\n* [Visual Prolog 7边练边学](http://wiki.visual-prolog.com/index.php?title=Visual_Prolog_for_Tyros_in_Chinese)\n\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/free-books.md","raw":"title: 免费的开源书籍\ndate: 2016-11-29 00:15:52\ntags: book\ncategories: 资源分享\n---\n** 免费的开源书籍：** <Excerpt in index | 首页摘要>\n国外程序员在 stackoverflow 推荐的程序员必读书籍，中文版。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 目录\n\n* [语言无关](#语言无关)\n  * [IDE](#ide)\n  * [MySQL](#mysql)\n  * [NoSQL](#nosql)\n  * [PostgreSQL](#postgresql)\n  * [Web](#web)\n  * [WEB服务器](#web服务器)\n  * [其它](#其它)\n  * [函数式概念](#函数式概念)\n  * [分布式系统](#分布式系统)\n  * [在线教育](#在线教育)\n  * [大数据](#大数据)\n  * [操作系统](#操作系统)\n  * [数据库](#数据库)\n  * [智能系统](#智能系统)\n  * [正则表达式](#正则表达式)\n  * [版本控制](#版本控制)\n  * [程序员杂谈](#程序员杂谈)\n  * [管理和监控](#管理和监控)\n  * [编程艺术](#编程艺术)\n  * [编译原理](#编译原理)\n  * [编辑器](#编辑器)\n  * [计算机图形学](#计算机图形学)\n  * [设计模式](#设计模式)\n  * [软件开发方法](#软件开发方法)\n  * [项目相关](#项目相关)\n* [语言相关](#语言相关)\n  * [Android](#android)\n  * [AWK](#awk)\n  * [C](#c)\n  * [C#](#c-sharp)\n  * [C++](#c-1)\n  * [CoffeeScript](#coffeescript)\n  * [Dart](#dart)\n  * [Elasticsearch](#elasticsearch)\n  * [Elixir](#elixir)\n  * [Erlang](#erlang)\n  * [Fortran](#fortran)\n  * [Golang](#golang)\n  * [Haskell](#haskell)\n  * [HTML / CSS](#html--css)\n  * [HTTP](#http)\n  * [iOS](#ios)\n  * [Java](#java)\n  * [JavaScript](#javascript)\n  * [LaTeX](#latex)\n  * [LISP](#lisp)\n  * [Lua](#lua)\n  * [Markdown](#markdown)\n  * [Node.js](#nodejs)\n  * [Perl](#perl)\n  * [PHP](#php)\n  * [Python](#python)\n  * [R](#r)\n  * [reStructuredText](#restructuredtext)\n  * [Ruby](#ruby)\n  * [Rust](#rust)\n  * [Scala](#scala)\n  * [Scheme](#scheme)\n  * [Shell](#shell)\n  * [Swift](#swift)\n  * [Vim](#vim)\n  * [Visual Prolog](#visual-prolog)\n\n\n## 语言无关\n\n## IDE\n\n* [IntelliJ IDEA 简体中文专题教程](https://github.com/judasn/IntelliJ-IDEA-Tutorial)\n\n\n## MySQL\n\n* [21分钟MySQL入门教程](http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html)\n* [MySQL索引背后的数据结构及算法原理](http://blog.codinglabs.org/articles/theory-of-mysql-index.html)\n\n\n## NoSQL\n\n* [Disque 使用教程](http://disquebook.com)\n* [Neo4j .rb 中文資源](http://neo4j.tw)\n* [Neo4j 简体中文手册 v1.8](http://docs.neo4j.org.cn)\n* [Redis 命令参考](http://redisdoc.com)\n* [Redis 设计与实现](http://redisbook.com)\n* [The Little MongoDB Book](https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md)\n* [The Little Redis Book](https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md)\n* [带有详细注释的 Redis 2.6 代码](https://github.com/huangz1990/annotated_redis_source)\n* [带有详细注释的 Redis 3.0 代码](https://github.com/huangz1990/redis-3.0-annotated)\n\n\n## PostgreSQL\n\n* [PostgreSQL 8.2.3 中文文档](http://works.jinbuguo.com/postgresql/menu823/index.html)\n* [PostgreSQL 9.3.1 中文文档](http://www.postgres.cn/docs/9.3/index.html)\n\n\n## Web\n\n* [3 Web Designs in 3 Weeks](https://www.gitbook.com/book/juntao/3-web-designs-in-3-weeks/details)\n* [Chrome 开发者工具中文手册](https://github.com/CN-Chrome-DevTools/CN-Chrome-DevTools)\n* [Chrome扩展开发文档](http://open.chrome.360.cn/extension_dev/overview.html)\n* [Growth: 全栈增长工程师指南](https://github.com/phodal/growth-ebook)\n* [Grunt中文文档](http://www.gruntjs.net)\n* [Gulp 入门指南](https://github.com/nimojs/gulp-book)\n* [gulp中文文档](http://www.gulpjs.com.cn/docs/)\n* [HTTP 接口设计指北](https://github.com/bolasblack/http-api-guide)\n* [HTTP/2.0 中文翻译](http://yuedu.baidu.com/ebook/478d1a62376baf1ffc4fad99?pn=1)\n* [http2讲解](https://www.gitbook.com/book/ye11ow/http2-explained/details)\n* [JSON风格指南](https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md)\n* [Wireshark用户手册](http://man.lupaworld.com/content/network/wireshark/index.html)\n* [一站式学习Wireshark](https://community.emc.com/thread/194901)\n* [关于浏览器和网络的 20 项须知](http://www.20thingsilearned.com/zh-CN/home)\n* [前端代码规范 及 最佳实践](http://coderlmn.github.io/code-standards/)\n* [前端开发体系建设日记](https://github.com/fouber/blog/issues/2)\n* [前端资源分享（一）](https://github.com/hacke2/hacke2.github.io/issues/1)\n* [前端资源分享（二）](https://github.com/hacke2/hacke2.github.io/issues/3)\n* [正则表达式30分钟入门教程](http://deerchao.net/tutorials/regex/regex.htm)\n* [浏览器开发工具的秘密](http://jinlong.github.io/2013/08/29/devtoolsecrets/)\n* [移动Web前端知识库](https://github.com/AlloyTeam/Mars)\n* [移动前端开发收藏夹](https://github.com/hoosin/mobile-web-favorites)\n\n\n## WEB服务器\n\n* [Apache 中文手册](http://works.jinbuguo.com/apache/menu22/index.html)\n* [Nginx开发从入门到精通](http://tengine.taobao.org/book/index.html) (淘宝团队出品)\n* [Nginx教程从入门到精通](http://www.ttlsa.com/nginx/nginx-stu-pdf/) (PDF版本，运维生存时间出品)\n\n\n## 其它\n\n* [OpenWrt智能、自动、透明翻墙路由器教程](https://softwaredownload.gitbooks.io/openwrt-fanqiang/content/)\n* [SAN 管理入门系列](https://community.emc.com/docs/DOC-16067)\n* [Sketch 中文手册](http://sketchcn.com/sketch-chinese-user-manual.html#introduce)\n* [深入理解并行编程](http://ifeve.com/perfbook/)\n\n\n## 函数式概念\n\n* [傻瓜函数编程](https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn)\n\n\n## 分布式系统\n\n* [走向分布式](http://dcaoyuan.github.io/papers/pdfs/Scalability.pdf) (PDF)\n\n\n## 在线教育\n\n* [51CTO学院](http://edu.51cto.com)\n* [Codecademy](https://www.codecademy.com/?locale_code=zh)\n* [CodeSchool](https://www.codeschool.com)\n* [Coursera](https://www.coursera.org/courses?orderby=upcoming&lngs=zh)\n* [Learn X in Y minutes](https://learnxinyminutes.com) (数十种语言快速入门教程)\n* [shiyanlou](https://www.shiyanlou.com)\n* [TeamTreeHouse](https://teamtreehouse.com)\n* [Udacity](https://www.udacity.com)\n* [xuetangX](https://www.xuetangx.com)\n* [慕课网](http://www.imooc.com/course/list) (丰富的移动端开发、php开发、web前端、html5教程以及css3视频教程等课程资源)\n* [极客学院](http://www.jikexueyuan.com)\n* [计蒜客](http://www.jisuanke.com)\n\n\n## 大数据\n\n* [Spark 编程指南简体中文版](https://aiyanbo.gitbooks.io/spark-programming-guide-zh-cn/content/)\n* [大型集群上的快速和通用数据处理架构](https://code.csdn.net/CODE_Translation/spark_matei_phd)\n* [大数据/数据挖掘/推荐系统/机器学习相关资源](https://github.com/Flowerowl/Big-Data-Resources)\n* [数据挖掘中经典的算法实现和详细的注释](https://github.com/linyiqun/DataMiningAlgorithm)\n* [面向程序员的数据挖掘指南](http://dataminingguide.books.yourtion.com)\n\n\n## 操作系统\n\n* [Debian 参考手册 ](http://man.chinaunix.net/linux/debian/reference/reference.zh-cn.html)\n* [Docker —— 从入门到实践](https://github.com/yeasy/docker_practice)\n* [Docker中文指南](https://github.com/widuu/chinese_docker)\n* [Docker入门实战](http://yuedu.baidu.com/ebook/d817967416fc700abb68fca1)\n* [FreeBSD 使用手册](http://www.freebsd.org/doc/zh_CN.UTF-8/books/handbook/)\n* [FreeRADIUS新手入门](http://freeradius.akagi201.org)\n* [Linux Documentation (中文版)](https://tinylab.gitbooks.io/linux-doc/content/zh-cn/)\n* [Linux Guide for Complete Beginners](http://happypeter.github.io/LGCB/book/)\n* [Linux 构建指南](http://works.jinbuguo.com/lfs/lfs62/index.html)\n* [Linux 系统高级编程](http://sourceforge.net/projects/elpi/)\n* [Linux工具快速教程](https://github.com/me115/linuxtools_rst)\n* [Mac 开发配置手册](https://aaaaaashu.gitbooks.io/mac-dev-setup/content/)\n* [Operating Systems: Three Easy Pieces](http://pages.cs.wisc.edu/~remzi/OSTEP/)\n* [The Linux Command Line](http://billie66.github.io/TLCL/index.html) (中英文版)\n* [Ubuntu 参考手册 ](http://wiki.ubuntu.org.cn/UbuntuManual)\n* [uCore Lab: Operating System Course in Tsinghua University](https://www.gitbook.com/book/objectkuan/ucore-docs/details)\n* [UNIX TOOLBOX](http://cb.vu/unixtoolbox_zh_CN.xhtml)\n* [命令行的艺术](https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md)\n* [嵌入式 Linux 知识库 (eLinux.org 中文版)](https://tinylab.gitbooks.io/elinux/content/zh/)\n* [开源世界旅行手册](http://i.linuxtoy.org/docs/guide/index.html)\n* [深入分析Linux内核源码](http://www.kerneltravel.net/kernel-book/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81.html)\n* [理解Linux进程](https://github.com/tobegit3hub/understand_linux_process)\n* [鸟哥的 Linux 私房菜 基础学习篇](http://vbird.dic.ksu.edu.tw/linux_basic/linux_basic.php)\n* [鸟哥的 Linux 私房菜 服务器架设篇](http://vbird.dic.ksu.edu.tw/linux_server/)\n\n\n## 数据库\n\n* [Redis 设计与实现](http://redisbook.com)\n* [The Little MongoDB Book 中文版](https://github.com/justinyhuang/the-little-mongodb-book-cn)\n\n\n## 智能系统\n\n* [一步步搭建物联网系统](https://github.com/phodal/designiot)\n\n\n## 正则表达式\n\n* [正则表达式30分钟入门教程](http://deerchao.net/tutorials/regex/regex.htm)\n\n\n## 版本控制\n\n* [Git - 简易指南](http://rogerdudler.github.io/git-guide/index.zh.html)\n* [Git-Cheat-Sheet](https://github.com/flyhigher139/Git-Cheat-Sheet) （感谢 @flyhigher139 翻译了中文版）\n* [Git Community Book 中文版](http://gitbook.liuhui998.com)\n* [git-flow 备忘清单](http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html)\n* [Git magic](http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/)\n* [Git Magic](http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/)\n* [Git 参考手册](http://gitref.justjavac.com)\n* [Github帮助文档](https://github.com/waylau/github-help)\n* [GitHub秘籍](https://snowdream86.gitbooks.io/github-cheat-sheet/content/zh/)\n* [Git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000) （本文由 [@廖雪峰](http://weibo.com/liaoxuefeng) 创作，如果觉得本教程对您有帮助，可以去 [iTunes](https://itunes.apple.com/cn/app/git-jiao-cheng/id876420437) 购买）\n* [Got GitHub](https://github.com/gotgit/gotgithub)\n* [GotGitHub](http://www.worldhello.net/gotgithub/index.html)\n* [HgInit (中文版)](http://bucunzai.net/hginit/)\n* [Mercurial 使用教程](https://www.mercurial-scm.org/wiki/ChineseTutorial)\n* [Pro Git](https://git-scm.com/book/zh/v2)\n* [Pro Git 中文版](https://www.gitbook.com/book/0532/progit/details) (整理在gitbook上)\n* [svn 手册](http://svnbook.red-bean.com/nightly/zh/index.html)\n* [学习 Git 分支](http://pcottle.github.io/learnGitBranching/) (点击右下角按钮可切换至简体及正体中文)\n* [沉浸式学 Git](http://igit.linuxtoy.org/index.html)\n* [猴子都能懂的GIT入门](http://backlogtool.com/git-guide/cn/)\n\n\n## 程序员杂谈\n\n* [程序员的自我修养](http://www.kancloud.cn/kancloud/a-programmer-prepares)\n\n\n## 管理和监控\n\n* [ElasticSearch 权威指南](https://www.gitbook.com/book/fuxiaopang/learnelasticsearch/details)\n* [Elasticsearch 权威指南（中文版）](http://es.xiaoleilu.com)\n* [ELKstack 中文指南](http://kibana.logstash.es)\n* [Logstash 最佳实践](https://github.com/chenryn/logstash-best-practice-cn)\n* [Mastering Elasticsearch(中文版)](http://udn.yyuap.com/doc/mastering-elasticsearch/)\n* [Puppet 2.7 Cookbook 中文版](http://bbs.konotes.org/workdoc/puppet-27/)\n\n\n## 编程艺术\n\n* [取悦的工序：如何理解游戏](http://read.douban.com/ebook/4972883/) (豆瓣阅读，免费书籍)\n* [每个程序员都应该了解的内存知识(译)](http://www.oschina.net/translate/what-every-programmer-should-know-about-memory-part1?print)【第一部分】\n* [程序员编程艺术](https://github.com/julycoding/The-Art-Of-Programming-by-July)\n* [编程入门指南](http://www.kancloud.cn/kancloud/intro-to-prog/52592)\n\n\n## 编译原理\n\n* [《计算机程序的结构和解释》公开课 翻译项目](https://github.com/DeathKing/Learning-SICP)\n\n\n## 编辑器\n\n* [exvim--vim 改良成IDE项目](http://exvim.github.io/docs-zh/intro/)\n* [Vim中文文档](https://github.com/vimcn/vimcdoc)\n* [所需即所获：像 IDE 一样使用 vim](https://github.com/yangyangwithgnu/use_vim_as_ide)\n* [笨方法学Vimscript 中译本](http://learnvimscriptthehardway.onefloweroneworld.com)\n\n\n## 计算机图形学\n\n* [OpenGL 教程](https://github.com/zilongshanren/opengl-tutorials)\n\n\n## 设计模式\n\n* [史上最全设计模式导学目录](http://blog.csdn.net/lovelion/article/details/17517213)\n* [图说设计模式](https://github.com/me115/design_patterns)\n\n\n## 软件开发方法\n\n* [傻瓜函数编程](https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn) (《Functional Programming For The Rest of Us》中文版)\n* [硝烟中的 Scrum 和 XP](http://www.infoq.com/cn/minibooks/scrum-xp-from-the-trenches)\n\n\n## 项目相关\n\n* [GNU make 指南](http://docs.huihoo.com/gnu/linux/gmake.html)\n* [Gradle 2 用户指南](https://github.com/waylau/Gradle-2-User-Guide)\n* [Gradle 中文使用文档](http://yuedu.baidu.com/ebook/f23af265998fcc22bcd10da2)\n* [Joel谈软件](http://local.joelonsoftware.com/wiki/Chinese_(Simplified))\n* [selenium 中文文档](https://github.com/fool2fish/selenium-doc)\n* [开源软件架构](http://www.ituring.com.cn/book/1143)\n* [持续集成（第二版）](http://article.yeeyan.org/view/2251/94882) (译言网)\n* [約耳談軟體(Joel on Software)](http://local.joelonsoftware.com/wiki/%E9%A6%96%E9%A0%81)\n* [编码规范](https://github.com/ecomfe/spec)\n* [让开发自动化系列专栏](http://www.ibm.com/developerworks/cn/java/j-ap/)\n* [追求代码质量](http://www.ibm.com/developerworks/cn/java/j-cq/)\n\n\n## 语言相关\n\n## Android\n\n* [Android Design(中文版)](http://www.apkbus.com/design/index.html)\n* [Android Note(开发过程中积累的知识点)](https://github.com/CharonChui/AndroidNote)\n* [Android6.0新特性详解](http://leanote.com/blog/post/561658f938f41126b2000298?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)\n* [Android学习之路](http://stormzhang.github.io/android/2014/07/07/learn-android-from-rookie/)\n* [Android开发技术前线(android-tech-frontier)](https://github.com/bboyfeiyu/android-tech-frontier)\n* [Google Android官方培训课程中文版](http://hukai.me/android-training-course-in-chinese/index.html)\n* Google Material Design 正體中文版 ([译本一](https://wcc723.gitbooks.io/google_design_translate/content/style-icons.html) [译本二](https://github.com/1sters/material_design_zh))\n* [Material Design 中文版](http://wiki.jikexueyuan.com/project/material-design/)\n* [Point-of-Android](https://github.com/FX-Max/Point-of-Android) Android 一些重要知识点解析整理\n\n\n## AWK\n\n* [awk中文指南](http://awk.readthedocs.org/en/latest/index.html)\n* [awk程序设计语言](https://github.com/wuzhouhui/awk)\n\n\n## C\n\n* [C 语言常见问题集](http://c-faq-chn.sourceforge.net/ccfaq/ccfaq.html)\n* [C/C++ 学习教程](http://doc.lellansin.com)\n* [Linux C 编程一站式学习](http://docs.linuxtone.org/ebooks/C&CPP/c/)\n* [新概念 C 语言教程](https://github.com/limingth/NCCL)\n\n\n## C Sharp\n\n* [精通C#(第6版) ](http://book.douban.com/subject/24827879/)\n\n\n## C++\n\n* [100个gcc小技巧](https://github.com/hellogcc/100-gcc-tips/blob/master/src/index.md)\n* [100个gdb小技巧](https://github.com/hellogcc/100-gdb-tips/blob/master/src/index.md)\n* [C 语言编程透视](https://tinylab.gitbooks.io/cbook/content/)\n* [C/C++ Primer](https://github.com/andycai/cprimer) - @andycai\n* [C++ FAQ LITE(中文版)](http://www.sunistudio.com/cppfaq/)\n* [C++ Primer 5th Answers](https://github.com/Mooophy/Cpp-Primer)\n* [C++ Template 进阶指南](https://github.com/wuye9036/CppTemplateTutorial)\n* [C++ 基础教程](http://www.prglab.com/cms/)\n* [C++ 并发编程(基于C++11)](https://chenxiaowei.gitbooks.io/cpp_concurrency_in_action/content/)\n* [C++ 并发编程指南](https://github.com/forhappy/Cplusplus-Concurrency-In-Practice)\n* [CGDB中文手册](https://github.com/leeyiw/cgdb-manual-in-chinese)\n* [Cmake 实践](http://sewm.pku.edu.cn/src/paradise/reference/CMake%20Practice.pdf) (PDF版)\n* [GNU make 指南](http://docs.huihoo.com/gnu/linux/gmake.html)\n* [Google C++ 风格指南](http://zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/contents/)\n* [QT 教程](http://www.kuqin.com/qtdocument/tutorial.html)\n* [ZMQ 指南](https://github.com/anjuke/zguide-cn)\n* [像计算机科学家一样思考（C++版)](http://www.ituring.com.cn/book/1203) (《How To Think Like a Computer Scientist: C++ Version》中文版)\n* [简单易懂的C魔法](http://www.nowamagic.net/librarys/books/contents/c)\n* [跟我一起写Makefile(PDF)](http://scc.qibebt.cas.cn/docs/linux/base/%B8%FA%CE%D2%D2%BB%C6%F0%D0%B4Makefile-%B3%C2%F0%A9.pdf) (PDF)\n\n\n## CoffeeScript\n\n* [CoffeeScript 中文](http://coffee-script.org)\n* [CoffeeScript 编程风格指南](https://github.com/elrrrrrrr/coffeescript-style-guide/blob/master/README-ZH.md)\n\n\n## Dart\n\n* [Dart 语言导览](http://dart.lidian.info/wiki/Language_Tour)\n\n\n## Elasticsearch\n\n* [Elasticsearch 权威指南](https://github.com/looly/elasticsearch-definitive-guide-cn) （《Elasticsearch the definitive guide》中文版）\n* [ELKstack 中文指南](http://kibana.logstash.es)\n* [Mastering Elasticsearch(中文版)](http://udn.yyuap.com/doc/mastering-elasticsearch/)\n\n\n## Elixir\n\n* [Elixir Getting Started 中文翻译](https://github.com/Ljzn/ElixrGettingStartedChinese)\n* [Elixir 编程语言教程](https://elixirschool.com/cn/) (Elixir School)\n* [Elixir元编程与DSL 中文翻译](https://github.com/Ljzn/MetaProgrammingInElixirChinese)\n* [Phoenix 框架中文文档](https://mydearxym.gitbooks.io/phoenix-doc-in-chinese/content/)\n\n\n## Erlang\n\n* [Erlang 并发编程](https://github.com/liancheng/cpie-cn) (《Concurrent Programming in Erlang (Part I)》中文版)\n\n\n## Fortran\n\n* [Fortran77和90/95编程入门](http://micro.ustc.edu.cn/Fortran/ZJDing/)\n\n\n## Golang\n\n* [Effective Go](http://www.hellogcc.org/effective_go.html)\n* [Go Web 编程](https://github.com/astaxie/build-web-application-with-golang)\n* [Go 入门指南](https://github.com/Unknwon/the-way-to-go_ZH_CN) (《The Way to Go》中文版)\n* [Go 官方文档翻译](https://github.com/golang-china/golangdoc.translations)\n* [Go 指南](http://go-tour-zh.appsp0t.com) (《A Tour of Go》中文版)\n* [Go 简易教程](https://github.com/songleo/the-little-go-book_ZH_CN) (《[The Little Go Book](https://github.com/karlseguin/the-little-go-book)》中文版)\n* [Go 编程基础](https://github.com/Unknwon/go-fundamental-programming)\n* [Go 语言标准库](https://github.com/polaris1119/The-Golang-Standard-Library-by-Example)\n* [Go命令教程](https://github.com/hyper-carrot/go_command_tutorial)\n* [Go实战开发](https://github.com/astaxie/Go-in-Action)\n* [Go语言博客实践](https://github.com/achun/Go-Blog-In-Action)\n* [Java程序员的Golang入门指南](http://blog.csdn.net/dc_726/article/details/46565241)\n* [Network programming with Go 中文翻译版本](https://github.com/astaxie/NPWG_zh)\n* [Revel 框架手册](http://gorevel.cn/docs/manual/index.html)\n* [学习Go语言](http://mikespook.com/learning-go/)\n\n\n## Groovy\n\n* [实战 Groovy 系列](http://www.ibm.com/developerworks/cn/java/j-pg/)\n\n\n## Haskell\n\n* [Haskell 趣学指南](http://learnyoua.haskell.sg)\n* [Real World Haskell 中文版](http://cnhaskell.com)\n\n\n## HTML / CSS\n\n* [CSS3 Tutorial 《CSS3 教程》](https://github.com/waylau/css3-tutorial)\n* [CSS参考手册](http://css.doyoe.com)\n* [Emmet 文档](http://yanxyz.github.io/emmet-docs/)\n* [HTML5 教程](http://www.w3school.com.cn/html5/)\n* [HTML和CSS编码规范](http://codeguide.bootcss.com)\n* [Sass Guidelines 中文](http://sass-guidelin.es/zh/)\n* [前端代码规范](http://alloyteam.github.io/CodeGuide/) (腾讯 AlloyTeam 团队)\n* [学习CSS布局](http://zh.learnlayout.com)\n* [通用 CSS 笔记、建议与指导](https://github.com/chadluo/CSS-Guidelines/blob/master/README.md)\n\n\n## iOS\n\n* [Apple Watch开发初探](http://nilsun.github.io/apple-watch/)\n* [Google Objective-C Style Guide 中文版](http://zh-google-styleguide.readthedocs.org/en/latest/google-objc-styleguide/)\n* [iOS7人机界面指南](http://isux.tencent.com/ios-human-interface-guidelines-ui-design-basics-ios7.html)\n* [iOS开发60分钟入门](https://github.com/qinjx/30min_guides/blob/master/ios.md)\n* [iPhone 6 屏幕揭秘](http://wileam.com/iphone-6-screen-cn/)\n* [网易斯坦福大学公开课：iOS 7应用开发字幕文件](https://github.com/jkyin/Subtitle)\n\n\n## Java\n\n* [Activiti 5.x 用户指南](https://github.com/waylau/activiti-5.x-user-guide)\n* [Apache MINA 2 用户指南](https://github.com/waylau/apache-mina-2.x-user-guide)\n* [Apache Shiro 用户指南](https://github.com/waylau/apache-shiro-1.2.x-reference)\n* [Google Java编程风格指南](http://www.hawstein.com/posts/google-java-style.html)\n* [H2 Database 教程](https://github.com/waylau/h2-database-doc)\n* [Java Servlet 3.1 规范](https://github.com/waylau/servlet-3.1-specification)\n* [Java 编码规范](https://github.com/waylau/java-code-conventions)\n* [Jersey 2.x 用户指南](https://github.com/waylau/Jersey-2.x-User-Guide)\n* [JSSE 参考指南](https://github.com/waylau/jsse-reference-guide)\n* [MyBatis中文文档](http://mybatis.github.io/mybatis-3/zh/index.html)\n* [Netty 4.x 用户指南](https://github.com/waylau/netty-4-user-guide)\n* [Netty 实战(精髓)](https://github.com/waylau/essential-netty-in-action)\n* [REST 实战](https://github.com/waylau/rest-in-action)\n* [Spring Boot参考指南](https://github.com/qibaoguang/Spring-Boot-Reference-Guide) (翻译中)\n* [Spring Framework 4.x参考文档](https://github.com/waylau/spring-framework-4-reference)\n* [用jersey构建REST服务](https://github.com/waylau/RestDemo)\n\n\n## Javascript\n\n* [Airbnb JavaScript 规范](https://github.com/adamlu/javascript-style-guide)\n* AngularJS\n  * [AngularJS中译本](https://github.com/peiransun/angularjs-cn)\n  * [AngularJS入门教程](https://github.com/zensh/AngularjsTutorial_cn)\n  * [AngularJS最佳实践和风格指南](https://github.com/mgechev/angularjs-style-guide/blob/master/README-zh-cn.md)\n  * [在Windows环境下用Yeoman构建AngularJS项目](http://www.waylau.com/build-angularjs-app-with-yeoman-in-windows/)\n  * [构建自己的AngularJS](https://github.com/xufei/Make-Your-Own-AngularJS/blob/master/01.md)\n* backbone.js\n  * [backbone.js中文文档](http://www.css88.com/doc/backbone/)\n  * [backbone.js入门教程](http://www.the5fire.com/backbone-js-tutorials-pdf-download.html) (PDF)\n  * [Backbone.js入门教程第二版](https://github.com/the5fire/backbonejs-learning-note)\n  * [Developing Backbone.js Applications(中文版)](http://feliving.github.io/developing-backbone-applications)\n* [Chrome扩展及应用开发](http://www.ituring.com.cn/minibook/950)\n* CoffeeScript\n  * [CoffeeScript 编码风格指南](https://github.com/geekplux/coffeescript-style-guide)\n* D3.js\n  * [D3.js 入门系列](http://www.ourd3js.com/wordpress/?cat=2) (还有进阶、高级等系列)\n  * [官方API文档](https://github.com/mbostock/d3/wiki/API--%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C)\n  * [张天旭的D3教程](http://blog.csdn.net/zhang__tianxu/article/category/1623437)\n  * [楚狂人的D3教程](http://www.cnblogs.com/winleisure/tag/D3.js/)\n* [ECMAScript 6 入门](http://es6.ruanyifeng.com) (作者：阮一峰)\n* ExtJS\n  * [Ext4.1.0 中文文档](http://extjs-doc-cn.github.io/ext4api/)\n* [Google JavaScript 代码风格指南](http://bq69.com/blog/articles/script/868/google-javascript-style-guide.html)\n* [Google JSON 风格指南](https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md)\n* impress.js\n  * [impress.js的中文教程](https://github.com/kokdemo/impress.js-tutorial-in-Chinese)\n* [JavaScript Promise迷你书](http://liubin.github.io/promises-book/)\n* [Javascript 原理](http://typeof.net/s/jsmech/)\n* [JavaScript 标准参考教程（alpha）](http://javascript.ruanyifeng.com)\n* [《JavaScript 模式》](https://github.com/jayli/javascript-patterns) “JavaScript patterns”中译本\n* [javascript 的 12 个怪癖](https://github.com/justjavac/12-javascript-quirks)\n* [JavaScript 秘密花园](http://bonsaiden.github.io/JavaScript-Garden/zh/)\n* [JavaScript核心概念及实践](http://icodeit.org/jsccp/) (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者)\n* [Javascript编程指南](http://pij.robinqu.me) ([源码](https://github.com/RobinQu/Programing-In-Javascript))\n* jQuery\n  * [How to write jQuery plugin](http://i5ting.github.io/How-to-write-jQuery-plugin/build/jquery.plugin.html)\n  * [简单易懂的JQuery魔法](http://www.nowamagic.net/librarys/books/contents/jquery)\n* Meteor\n  * [Discover Meteor](http://zh.discovermeteor.com)\n* Node.js\n  * [express.js 中文文档](http://expressjs.jser.us)\n  * [Express框架](http://javascript.ruanyifeng.com/nodejs/express.html)\n  * [koa 中文文档](https://github.com/guo-yu/koa-guide)\n  * [Learn You The Node.js For Much Win! (中文版)](https://www.npmjs.com/package/learnyounode-zh-cn)\n  * [Node debug 三法三例](http://i5ting.github.io/node-debug-tutorial/)\n  * [Node.js Fullstack《從零到一的進撃》](https://github.com/jollen/nodejs-fullstack-lessons)\n  * [Node.js 包教不包会](https://github.com/alsotang/node-lessons)\n  * [Nodejs Wiki Book](https://github.com/nodejs-tw/nodejs-wiki-book) (繁体中文)\n  * [nodejs中文文档](https://www.gitbook.com/book/0532/nodejs/details)\n  * [Node入门](http://www.nodebeginner.org/index-zh-cn.html)\n  * [七天学会NodeJS](http://nqdeng.github.io/7-days-nodejs/)\n  * [使用 Express + MongoDB 搭建多人博客](https://github.com/nswbmw/N-blog)\n* React.js\n  * [Learn React & Webpack by building the Hacker News front page](https://github.com/theJian/build-a-hn-front-page)\n  * [React Native 中文文档(含最新Android内容)](http://wiki.jikexueyuan.com/project/react-native/)\n  * [React webpack-cookbook](https://github.com/fakefish/react-webpack-cookbook)\n  * [React 入门教程](http://fraserxu.me/intro-to-react/)\n  * [React.js 中文文档](http://reactjs.cn)\n* underscore.js\n  * [Underscore.js中文文档](http://learningcn.com/underscore/)\n* [You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS) (深入JavaScript语言核心机制的系列图书)\n* Zepto.js\n  * [Zepto.js 中文文档](http://mweb.baidu.com/zeptoapi/)\n* [命名函数表达式探秘](http://justjavac.com/named-function-expressions-demystified.html)  (注:原文由[为之漫笔](http://www.cn-cuckoo.com) 翻译，原始地址无法打开，所以此处地址为我博客上的备份)\n* [学用 JavaScript 设计模式](http://www.oschina.net/translate/learning-javascript-design-patterns) (开源中国)\n* [深入理解JavaScript系列](http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html)\n\n\n## LaTeX\n\n* [LaTeX 笔记](http://www.dralpha.com/zh/tech/tech.htm)\n* [一份不太简短的 LaTeX2ε 介绍](http://ctan.org/pkg/lshort-zh-cn)\n* [大家來學 LaTeX](https://github.com/49951331/graduate-project-102pj/blob/master/docs/latex123.pdf) (PDF)\n\n\n## LISP\n\n* [ANSI Common Lisp 中文翻译版](http://acl.readthedocs.org/en/latest/)\n* [Common Lisp 高级编程技术](http://www.ituring.com.cn/minibook/862) (《On Lisp》中文版)\n\n\n## Lua\n\n* [Lua 5.3 参考手册](http://www.w3cschool.cc/manual/lua53doc/contents.html)\n\n\n## Markdown\n\n* [Markdown 快速入门](http://wowubuntu.com/markdown/basic.html)\n* [Markdown 简明教程](http://www.jianshu.com/p/7bd23251da0a)\n* [Markdown 语法说明](http://wowubuntu.com/markdown/)\n* [献给写作者的 Markdown 新手指南](http://www.jianshu.com/p/q81RER)\n\n\n## Node.js\n\n* [Node 入门](http://www.nodebeginner.org/index-zh-cn.html)\n* [The NodeJS 中文文档](https://www.gitbook.com/book/0532/nodejs/details)（社区翻译）\n* [七天学会NodeJS](http://nqdeng.github.io/7-days-nodejs/) 阿里出品，很好的入门资料\n\n\n## Perl\n\n* [Master Perl Today](https://github.com/fayland/chinese-perl-book)\n* [《Modern Perl》中文版](https://github.com/horus/modern_perl_book)\n* [Perl 5 教程](http://www.cbi.pku.edu.cn/chinese/documents/perl/index.htm)\n* [Perl 教程](http://www.yiibai.com/perl)\n\n\n## PHP\n\n* [PHP 之道](http://wulijun.github.io/php-the-right-way/)\n* [PHP5中文手册](http://php.net/manual/zh/)\n* [PHP扩展开发及内核应用](http://www.walu.cc/phpbook/preface.md)\n* [Symfony2 实例教程](https://wusuopu.gitbooks.io/symfony2_tutorial/content)\n* [深入理解 PHP 内核](http://www.php-internals.com/book/)\n\n\n## Python\n\n* [Django book 2.0](http://djangobook.py3k.cn/2.0/)\n* [Python 3 文档(简体中文) 3.2.2 documentation](http://docspy3zh.readthedocs.org/en/latest/)\n* [Python 中文学习大本营](http://www.pythondoc.com)\n* [深入 Python 3](https://github.com/jiechic/diveintopython3)\n* [笨办法学 Python](http://old.sebug.net/paper/books/LearnPythonTheHardWay/)\n\n\n## R\n\n* [153分钟学会 R](http://cran.r-project.org/doc/contrib/Liu-FAQ.pdf) (PDF)\n* [《R for beginners》中文版](http://www.biosino.org/R/R-doc/files/R4beg_cn_2.0.pdf) (PDF)\n* [R 导论](http://cran.r-project.org/doc/contrib/Ding-R-intro_cn.pdf) (《An Introduction to R》中文版) (PDF)\n* [用 R 构建 Shiny 应用程序](http://yanping.me/shiny-tutorial/) (《Building 'Shiny' Applications with R》中文版)\n* [统计学与 R 读书笔记](http://cran.r-project.org/doc/contrib/Xu-Statistics_and_R.pdf) (PDF)\n\n\n## reStructuredText\n\n* [reStructuredText 入门](http://www.pythondoc.com/sphinx/rest.html)\n* [reStructuredText 简明教程](http://jwch.sdut.edu.cn/book/rst.html)\n\n\n## Ruby\n\n* [Rails 风格指南](https://github.com/JuanitoFatas/rails-style-guide/blob/master/README-zhCN.md)\n* [Ruby on Rails Tutorial 原书第 2 版](http://railstutorial-china.org)\n* [Ruby on Rails 实战圣经](https://ihower.tw/rails4/)\n* [Ruby 风格指南](https://github.com/JuanitoFatas/ruby-style-guide/blob/master/README-zhCN.md)\n* [笨方法学 Ruby](http://lrthw.github.io)\n\n\n## Rust\n\n* [Rust 官方教程](https://github.com/KaiserY/rust-book-chinese)\n* [Rust 语言学习笔记](https://github.com/photino/rust-notes)\n* [RustPrimer](https://github.com/rustcc/RustPrimer)\n* [通过例子学习 Rust](https://github.com/rustcc/rust-by-example/)\n\n\n## Scala\n\n* [Effective Scala](http://twitter.github.io/effectivescala/index-cn.html)\n* [Scala 初学者指南](https://www.gitbook.com/book/windor/beginners-guide-to-scala/details) (The Neophyte's Guide to Scala)\n* [Scala 课堂](http://twitter.github.io/scala_school/zh_cn/index.html) (Twitter的Scala中文教程)\n\n\n## Scheme\n\n* [Scheme 入门教程](http://deathking.github.io/yast-cn/) (《Yet Another Scheme Tutorial》中文版)\n\n\n## Shell\n\n* [Shell 编程基础](http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80)\n* [Shell 脚本编程30分钟入门](https://github.com/qinjx/30min_guides/blob/master/shell.md)\n* [The Linux Command Line 中文版](http://billie66.github.io/TLCL/book/zh)\n\n\n## Swift\n\n* [《The Swift Programming Language》中文版](https://www.gitbook.com/book/numbbbbb/-the-swift-programming-language-/details)\n\n\n## Vim\n\n* [Vim Manual(中文版)](http://man.chinaunix.net/newsoft/vi/doc/help.html)\n* [大家來學 VIM](http://www.study-area.org/tips/vim/index.html)\n\n\n## Visual Prolog\n\n* [Visual Prolog 7初学指南](http://wiki.visual-prolog.com/index.php?title=A_Beginners_Guide_to_Visual_Prolog_in_Chinese)\n* [Visual Prolog 7边练边学](http://wiki.visual-prolog.com/index.php?title=Visual_Prolog_for_Tyros_in_Chinese)\n\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"free-books","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla5z00118p9kmu5ccuhu","content":"<p><strong> 免费的开源书籍：</strong> <Excerpt in index | 首页摘要><br>国外程序员在 stackoverflow 推荐的程序员必读书籍，中文版。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#语言无关\">语言无关</a><ul>\n<li><a href=\"#ide\">IDE</a></li>\n<li><a href=\"#mysql\">MySQL</a></li>\n<li><a href=\"#nosql\">NoSQL</a></li>\n<li><a href=\"#postgresql\">PostgreSQL</a></li>\n<li><a href=\"#web\">Web</a></li>\n<li><a href=\"#web服务器\">WEB服务器</a></li>\n<li><a href=\"#其它\">其它</a></li>\n<li><a href=\"#函数式概念\">函数式概念</a></li>\n<li><a href=\"#分布式系统\">分布式系统</a></li>\n<li><a href=\"#在线教育\">在线教育</a></li>\n<li><a href=\"#大数据\">大数据</a></li>\n<li><a href=\"#操作系统\">操作系统</a></li>\n<li><a href=\"#数据库\">数据库</a></li>\n<li><a href=\"#智能系统\">智能系统</a></li>\n<li><a href=\"#正则表达式\">正则表达式</a></li>\n<li><a href=\"#版本控制\">版本控制</a></li>\n<li><a href=\"#程序员杂谈\">程序员杂谈</a></li>\n<li><a href=\"#管理和监控\">管理和监控</a></li>\n<li><a href=\"#编程艺术\">编程艺术</a></li>\n<li><a href=\"#编译原理\">编译原理</a></li>\n<li><a href=\"#编辑器\">编辑器</a></li>\n<li><a href=\"#计算机图形学\">计算机图形学</a></li>\n<li><a href=\"#设计模式\">设计模式</a></li>\n<li><a href=\"#软件开发方法\">软件开发方法</a></li>\n<li><a href=\"#项目相关\">项目相关</a></li>\n</ul>\n</li>\n<li><a href=\"#语言相关\">语言相关</a><ul>\n<li><a href=\"#android\">Android</a></li>\n<li><a href=\"#awk\">AWK</a></li>\n<li><a href=\"#c\">C</a></li>\n<li><a href=\"#c-sharp\">C#</a></li>\n<li><a href=\"#c-1\">C++</a></li>\n<li><a href=\"#coffeescript\">CoffeeScript</a></li>\n<li><a href=\"#dart\">Dart</a></li>\n<li><a href=\"#elasticsearch\">Elasticsearch</a></li>\n<li><a href=\"#elixir\">Elixir</a></li>\n<li><a href=\"#erlang\">Erlang</a></li>\n<li><a href=\"#fortran\">Fortran</a></li>\n<li><a href=\"#golang\">Golang</a></li>\n<li><a href=\"#haskell\">Haskell</a></li>\n<li><a href=\"#html--css\">HTML / CSS</a></li>\n<li><a href=\"#http\">HTTP</a></li>\n<li><a href=\"#ios\">iOS</a></li>\n<li><a href=\"#java\">Java</a></li>\n<li><a href=\"#javascript\">JavaScript</a></li>\n<li><a href=\"#latex\">LaTeX</a></li>\n<li><a href=\"#lisp\">LISP</a></li>\n<li><a href=\"#lua\">Lua</a></li>\n<li><a href=\"#markdown\">Markdown</a></li>\n<li><a href=\"#nodejs\">Node.js</a></li>\n<li><a href=\"#perl\">Perl</a></li>\n<li><a href=\"#php\">PHP</a></li>\n<li><a href=\"#python\">Python</a></li>\n<li><a href=\"#r\">R</a></li>\n<li><a href=\"#restructuredtext\">reStructuredText</a></li>\n<li><a href=\"#ruby\">Ruby</a></li>\n<li><a href=\"#rust\">Rust</a></li>\n<li><a href=\"#scala\">Scala</a></li>\n<li><a href=\"#scheme\">Scheme</a></li>\n<li><a href=\"#shell\">Shell</a></li>\n<li><a href=\"#swift\">Swift</a></li>\n<li><a href=\"#vim\">Vim</a></li>\n<li><a href=\"#visual-prolog\">Visual Prolog</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"语言无关\"><a href=\"#语言无关\" class=\"headerlink\" title=\"语言无关\"></a>语言无关</h2><h2 id=\"IDE\"><a href=\"#IDE\" class=\"headerlink\" title=\"IDE\"></a>IDE</h2><ul>\n<li><a href=\"https://github.com/judasn/IntelliJ-IDEA-Tutorial\">IntelliJ IDEA 简体中文专题教程</a></li>\n</ul>\n<h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><ul>\n<li><a href=\"http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html\">21分钟MySQL入门教程</a></li>\n<li><a href=\"http://blog.codinglabs.org/articles/theory-of-mysql-index.html\">MySQL索引背后的数据结构及算法原理</a></li>\n</ul>\n<h2 id=\"NoSQL\"><a href=\"#NoSQL\" class=\"headerlink\" title=\"NoSQL\"></a>NoSQL</h2><ul>\n<li><a href=\"http://disquebook.com\">Disque 使用教程</a></li>\n<li><a href=\"http://neo4j.tw\">Neo4j .rb 中文資源</a></li>\n<li><a href=\"http://docs.neo4j.org.cn\">Neo4j 简体中文手册 v1.8</a></li>\n<li><a href=\"http://redisdoc.com\">Redis 命令参考</a></li>\n<li><a href=\"http://redisbook.com\">Redis 设计与实现</a></li>\n<li><a href=\"https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md\">The Little MongoDB Book</a></li>\n<li><a href=\"https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md\">The Little Redis Book</a></li>\n<li><a href=\"https://github.com/huangz1990/annotated_redis_source\">带有详细注释的 Redis 2.6 代码</a></li>\n<li><a href=\"https://github.com/huangz1990/redis-3.0-annotated\">带有详细注释的 Redis 3.0 代码</a></li>\n</ul>\n<h2 id=\"PostgreSQL\"><a href=\"#PostgreSQL\" class=\"headerlink\" title=\"PostgreSQL\"></a>PostgreSQL</h2><ul>\n<li><a href=\"http://works.jinbuguo.com/postgresql/menu823/index.html\">PostgreSQL 8.2.3 中文文档</a></li>\n<li><a href=\"http://www.postgres.cn/docs/9.3/index.html\">PostgreSQL 9.3.1 中文文档</a></li>\n</ul>\n<h2 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h2><ul>\n<li><a href=\"https://www.gitbook.com/book/juntao/3-web-designs-in-3-weeks/details\">3 Web Designs in 3 Weeks</a></li>\n<li><a href=\"https://github.com/CN-Chrome-DevTools/CN-Chrome-DevTools\">Chrome 开发者工具中文手册</a></li>\n<li><a href=\"http://open.chrome.360.cn/extension_dev/overview.html\">Chrome扩展开发文档</a></li>\n<li><a href=\"https://github.com/phodal/growth-ebook\">Growth: 全栈增长工程师指南</a></li>\n<li><a href=\"http://www.gruntjs.net\">Grunt中文文档</a></li>\n<li><a href=\"https://github.com/nimojs/gulp-book\">Gulp 入门指南</a></li>\n<li><a href=\"http://www.gulpjs.com.cn/docs/\">gulp中文文档</a></li>\n<li><a href=\"https://github.com/bolasblack/http-api-guide\">HTTP 接口设计指北</a></li>\n<li><a href=\"http://yuedu.baidu.com/ebook/478d1a62376baf1ffc4fad99?pn=1\">HTTP/2.0 中文翻译</a></li>\n<li><a href=\"https://www.gitbook.com/book/ye11ow/http2-explained/details\">http2讲解</a></li>\n<li><a href=\"https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md\">JSON风格指南</a></li>\n<li><a href=\"http://man.lupaworld.com/content/network/wireshark/index.html\">Wireshark用户手册</a></li>\n<li><a href=\"https://community.emc.com/thread/194901\">一站式学习Wireshark</a></li>\n<li><a href=\"http://www.20thingsilearned.com/zh-CN/home\">关于浏览器和网络的 20 项须知</a></li>\n<li><a href=\"http://coderlmn.github.io/code-standards/\">前端代码规范 及 最佳实践</a></li>\n<li><a href=\"https://github.com/fouber/blog/issues/2\">前端开发体系建设日记</a></li>\n<li><a href=\"https://github.com/hacke2/hacke2.github.io/issues/1\">前端资源分享（一）</a></li>\n<li><a href=\"https://github.com/hacke2/hacke2.github.io/issues/3\">前端资源分享（二）</a></li>\n<li><a href=\"http://deerchao.net/tutorials/regex/regex.htm\">正则表达式30分钟入门教程</a></li>\n<li><a href=\"http://jinlong.github.io/2013/08/29/devtoolsecrets/\">浏览器开发工具的秘密</a></li>\n<li><a href=\"https://github.com/AlloyTeam/Mars\">移动Web前端知识库</a></li>\n<li><a href=\"https://github.com/hoosin/mobile-web-favorites\">移动前端开发收藏夹</a></li>\n</ul>\n<h2 id=\"WEB服务器\"><a href=\"#WEB服务器\" class=\"headerlink\" title=\"WEB服务器\"></a>WEB服务器</h2><ul>\n<li><a href=\"http://works.jinbuguo.com/apache/menu22/index.html\">Apache 中文手册</a></li>\n<li><a href=\"http://tengine.taobao.org/book/index.html\">Nginx开发从入门到精通</a> (淘宝团队出品)</li>\n<li><a href=\"http://www.ttlsa.com/nginx/nginx-stu-pdf/\">Nginx教程从入门到精通</a> (PDF版本，运维生存时间出品)</li>\n</ul>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><ul>\n<li><a href=\"https://softwaredownload.gitbooks.io/openwrt-fanqiang/content/\">OpenWrt智能、自动、透明翻墙路由器教程</a></li>\n<li><a href=\"https://community.emc.com/docs/DOC-16067\">SAN 管理入门系列</a></li>\n<li><a href=\"http://sketchcn.com/sketch-chinese-user-manual.html#introduce\">Sketch 中文手册</a></li>\n<li><a href=\"http://ifeve.com/perfbook/\">深入理解并行编程</a></li>\n</ul>\n<h2 id=\"函数式概念\"><a href=\"#函数式概念\" class=\"headerlink\" title=\"函数式概念\"></a>函数式概念</h2><ul>\n<li><a href=\"https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn\">傻瓜函数编程</a></li>\n</ul>\n<h2 id=\"分布式系统\"><a href=\"#分布式系统\" class=\"headerlink\" title=\"分布式系统\"></a>分布式系统</h2><ul>\n<li><a href=\"http://dcaoyuan.github.io/papers/pdfs/Scalability.pdf\">走向分布式</a> (PDF)</li>\n</ul>\n<h2 id=\"在线教育\"><a href=\"#在线教育\" class=\"headerlink\" title=\"在线教育\"></a>在线教育</h2><ul>\n<li><a href=\"http://edu.51cto.com\">51CTO学院</a></li>\n<li><a href=\"https://www.codecademy.com/?locale_code=zh\">Codecademy</a></li>\n<li><a href=\"https://www.codeschool.com\">CodeSchool</a></li>\n<li><a href=\"https://www.coursera.org/courses?orderby=upcoming&amp;lngs=zh\">Coursera</a></li>\n<li><a href=\"https://learnxinyminutes.com\">Learn X in Y minutes</a> (数十种语言快速入门教程)</li>\n<li><a href=\"https://www.shiyanlou.com\">shiyanlou</a></li>\n<li><a href=\"https://teamtreehouse.com\">TeamTreeHouse</a></li>\n<li><a href=\"https://www.udacity.com\">Udacity</a></li>\n<li><a href=\"https://www.xuetangx.com\">xuetangX</a></li>\n<li><a href=\"http://www.imooc.com/course/list\">慕课网</a> (丰富的移动端开发、php开发、web前端、html5教程以及css3视频教程等课程资源)</li>\n<li><a href=\"http://www.jikexueyuan.com\">极客学院</a></li>\n<li><a href=\"http://www.jisuanke.com\">计蒜客</a></li>\n</ul>\n<h2 id=\"大数据\"><a href=\"#大数据\" class=\"headerlink\" title=\"大数据\"></a>大数据</h2><ul>\n<li><a href=\"https://aiyanbo.gitbooks.io/spark-programming-guide-zh-cn/content/\">Spark 编程指南简体中文版</a></li>\n<li><a href=\"https://code.csdn.net/CODE_Translation/spark_matei_phd\">大型集群上的快速和通用数据处理架构</a></li>\n<li><a href=\"https://github.com/Flowerowl/Big-Data-Resources\">大数据/数据挖掘/推荐系统/机器学习相关资源</a></li>\n<li><a href=\"https://github.com/linyiqun/DataMiningAlgorithm\">数据挖掘中经典的算法实现和详细的注释</a></li>\n<li><a href=\"http://dataminingguide.books.yourtion.com\">面向程序员的数据挖掘指南</a></li>\n</ul>\n<h2 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h2><ul>\n<li><a href=\"http://man.chinaunix.net/linux/debian/reference/reference.zh-cn.html\">Debian 参考手册 </a></li>\n<li><a href=\"https://github.com/yeasy/docker_practice\">Docker —— 从入门到实践</a></li>\n<li><a href=\"https://github.com/widuu/chinese_docker\">Docker中文指南</a></li>\n<li><a href=\"http://yuedu.baidu.com/ebook/d817967416fc700abb68fca1\">Docker入门实战</a></li>\n<li><a href=\"http://www.freebsd.org/doc/zh_CN.UTF-8/books/handbook/\">FreeBSD 使用手册</a></li>\n<li><a href=\"http://freeradius.akagi201.org\">FreeRADIUS新手入门</a></li>\n<li><a href=\"https://tinylab.gitbooks.io/linux-doc/content/zh-cn/\">Linux Documentation (中文版)</a></li>\n<li><a href=\"http://happypeter.github.io/LGCB/book/\">Linux Guide for Complete Beginners</a></li>\n<li><a href=\"http://works.jinbuguo.com/lfs/lfs62/index.html\">Linux 构建指南</a></li>\n<li><a href=\"http://sourceforge.net/projects/elpi/\">Linux 系统高级编程</a></li>\n<li><a href=\"https://github.com/me115/linuxtools_rst\">Linux工具快速教程</a></li>\n<li><a href=\"https://aaaaaashu.gitbooks.io/mac-dev-setup/content/\">Mac 开发配置手册</a></li>\n<li><a href=\"http://pages.cs.wisc.edu/~remzi/OSTEP/\">Operating Systems: Three Easy Pieces</a></li>\n<li><a href=\"http://billie66.github.io/TLCL/index.html\">The Linux Command Line</a> (中英文版)</li>\n<li><a href=\"http://wiki.ubuntu.org.cn/UbuntuManual\">Ubuntu 参考手册 </a></li>\n<li><a href=\"https://www.gitbook.com/book/objectkuan/ucore-docs/details\">uCore Lab: Operating System Course in Tsinghua University</a></li>\n<li><a href=\"http://cb.vu/unixtoolbox_zh_CN.xhtml\">UNIX TOOLBOX</a></li>\n<li><a href=\"https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md\">命令行的艺术</a></li>\n<li><a href=\"https://tinylab.gitbooks.io/elinux/content/zh/\">嵌入式 Linux 知识库 (eLinux.org 中文版)</a></li>\n<li><a href=\"http://i.linuxtoy.org/docs/guide/index.html\">开源世界旅行手册</a></li>\n<li><a href=\"http://www.kerneltravel.net/kernel-book/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81.html\">深入分析Linux内核源码</a></li>\n<li><a href=\"https://github.com/tobegit3hub/understand_linux_process\">理解Linux进程</a></li>\n<li><a href=\"http://vbird.dic.ksu.edu.tw/linux_basic/linux_basic.php\">鸟哥的 Linux 私房菜 基础学习篇</a></li>\n<li><a href=\"http://vbird.dic.ksu.edu.tw/linux_server/\">鸟哥的 Linux 私房菜 服务器架设篇</a></li>\n</ul>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><ul>\n<li><a href=\"http://redisbook.com\">Redis 设计与实现</a></li>\n<li><a href=\"https://github.com/justinyhuang/the-little-mongodb-book-cn\">The Little MongoDB Book 中文版</a></li>\n</ul>\n<h2 id=\"智能系统\"><a href=\"#智能系统\" class=\"headerlink\" title=\"智能系统\"></a>智能系统</h2><ul>\n<li><a href=\"https://github.com/phodal/designiot\">一步步搭建物联网系统</a></li>\n</ul>\n<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><ul>\n<li><a href=\"http://deerchao.net/tutorials/regex/regex.htm\">正则表达式30分钟入门教程</a></li>\n</ul>\n<h2 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h2><ul>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\">Git - 简易指南</a></li>\n<li><a href=\"https://github.com/flyhigher139/Git-Cheat-Sheet\">Git-Cheat-Sheet</a> （感谢 @flyhigher139 翻译了中文版）</li>\n<li><a href=\"http://gitbook.liuhui998.com\">Git Community Book 中文版</a></li>\n<li><a href=\"http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html\">git-flow 备忘清单</a></li>\n<li><a href=\"http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/\">Git magic</a></li>\n<li><a href=\"http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/\">Git Magic</a></li>\n<li><a href=\"http://gitref.justjavac.com\">Git 参考手册</a></li>\n<li><a href=\"https://github.com/waylau/github-help\">Github帮助文档</a></li>\n<li><a href=\"https://snowdream86.gitbooks.io/github-cheat-sheet/content/zh/\">GitHub秘籍</a></li>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">Git教程</a> （本文由 <a href=\"http://weibo.com/liaoxuefeng\">@廖雪峰</a> 创作，如果觉得本教程对您有帮助，可以去 <a href=\"https://itunes.apple.com/cn/app/git-jiao-cheng/id876420437\">iTunes</a> 购买）</li>\n<li><a href=\"https://github.com/gotgit/gotgithub\">Got GitHub</a></li>\n<li><a href=\"http://www.worldhello.net/gotgithub/index.html\">GotGitHub</a></li>\n<li><a href=\"http://bucunzai.net/hginit/\">HgInit (中文版)</a></li>\n<li><a href=\"https://www.mercurial-scm.org/wiki/ChineseTutorial\">Mercurial 使用教程</a></li>\n<li><a href=\"https://git-scm.com/book/zh/v2\">Pro Git</a></li>\n<li><a href=\"https://www.gitbook.com/book/0532/progit/details\">Pro Git 中文版</a> (整理在gitbook上)</li>\n<li><a href=\"http://svnbook.red-bean.com/nightly/zh/index.html\">svn 手册</a></li>\n<li><a href=\"http://pcottle.github.io/learnGitBranching/\">学习 Git 分支</a> (点击右下角按钮可切换至简体及正体中文)</li>\n<li><a href=\"http://igit.linuxtoy.org/index.html\">沉浸式学 Git</a></li>\n<li><a href=\"http://backlogtool.com/git-guide/cn/\">猴子都能懂的GIT入门</a></li>\n</ul>\n<h2 id=\"程序员杂谈\"><a href=\"#程序员杂谈\" class=\"headerlink\" title=\"程序员杂谈\"></a>程序员杂谈</h2><ul>\n<li><a href=\"http://www.kancloud.cn/kancloud/a-programmer-prepares\">程序员的自我修养</a></li>\n</ul>\n<h2 id=\"管理和监控\"><a href=\"#管理和监控\" class=\"headerlink\" title=\"管理和监控\"></a>管理和监控</h2><ul>\n<li><a href=\"https://www.gitbook.com/book/fuxiaopang/learnelasticsearch/details\">ElasticSearch 权威指南</a></li>\n<li><a href=\"http://es.xiaoleilu.com\">Elasticsearch 权威指南（中文版）</a></li>\n<li><a href=\"http://kibana.logstash.es\">ELKstack 中文指南</a></li>\n<li><a href=\"https://github.com/chenryn/logstash-best-practice-cn\">Logstash 最佳实践</a></li>\n<li><a href=\"http://udn.yyuap.com/doc/mastering-elasticsearch/\">Mastering Elasticsearch(中文版)</a></li>\n<li><a href=\"http://bbs.konotes.org/workdoc/puppet-27/\">Puppet 2.7 Cookbook 中文版</a></li>\n</ul>\n<h2 id=\"编程艺术\"><a href=\"#编程艺术\" class=\"headerlink\" title=\"编程艺术\"></a>编程艺术</h2><ul>\n<li><a href=\"http://read.douban.com/ebook/4972883/\">取悦的工序：如何理解游戏</a> (豆瓣阅读，免费书籍)</li>\n<li><a href=\"http://www.oschina.net/translate/what-every-programmer-should-know-about-memory-part1?print\">每个程序员都应该了解的内存知识(译)</a>【第一部分】</li>\n<li><a href=\"https://github.com/julycoding/The-Art-Of-Programming-by-July\">程序员编程艺术</a></li>\n<li><a href=\"http://www.kancloud.cn/kancloud/intro-to-prog/52592\">编程入门指南</a></li>\n</ul>\n<h2 id=\"编译原理\"><a href=\"#编译原理\" class=\"headerlink\" title=\"编译原理\"></a>编译原理</h2><ul>\n<li><a href=\"https://github.com/DeathKing/Learning-SICP\">《计算机程序的结构和解释》公开课 翻译项目</a></li>\n</ul>\n<h2 id=\"编辑器\"><a href=\"#编辑器\" class=\"headerlink\" title=\"编辑器\"></a>编辑器</h2><ul>\n<li><a href=\"http://exvim.github.io/docs-zh/intro/\">exvim–vim 改良成IDE项目</a></li>\n<li><a href=\"https://github.com/vimcn/vimcdoc\">Vim中文文档</a></li>\n<li><a href=\"https://github.com/yangyangwithgnu/use_vim_as_ide\">所需即所获：像 IDE 一样使用 vim</a></li>\n<li><a href=\"http://learnvimscriptthehardway.onefloweroneworld.com\">笨方法学Vimscript 中译本</a></li>\n</ul>\n<h2 id=\"计算机图形学\"><a href=\"#计算机图形学\" class=\"headerlink\" title=\"计算机图形学\"></a>计算机图形学</h2><ul>\n<li><a href=\"https://github.com/zilongshanren/opengl-tutorials\">OpenGL 教程</a></li>\n</ul>\n<h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><ul>\n<li><a href=\"http://blog.csdn.net/lovelion/article/details/17517213\">史上最全设计模式导学目录</a></li>\n<li><a href=\"https://github.com/me115/design_patterns\">图说设计模式</a></li>\n</ul>\n<h2 id=\"软件开发方法\"><a href=\"#软件开发方法\" class=\"headerlink\" title=\"软件开发方法\"></a>软件开发方法</h2><ul>\n<li><a href=\"https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn\">傻瓜函数编程</a> (《Functional Programming For The Rest of Us》中文版)</li>\n<li><a href=\"http://www.infoq.com/cn/minibooks/scrum-xp-from-the-trenches\">硝烟中的 Scrum 和 XP</a></li>\n</ul>\n<h2 id=\"项目相关\"><a href=\"#项目相关\" class=\"headerlink\" title=\"项目相关\"></a>项目相关</h2><ul>\n<li><a href=\"http://docs.huihoo.com/gnu/linux/gmake.html\">GNU make 指南</a></li>\n<li><a href=\"https://github.com/waylau/Gradle-2-User-Guide\">Gradle 2 用户指南</a></li>\n<li><a href=\"http://yuedu.baidu.com/ebook/f23af265998fcc22bcd10da2\">Gradle 中文使用文档</a></li>\n<li><a href=\"http://local.joelonsoftware.com/wiki/Chinese_(Simplified\">Joel谈软件</a>)</li>\n<li><a href=\"https://github.com/fool2fish/selenium-doc\">selenium 中文文档</a></li>\n<li><a href=\"http://www.ituring.com.cn/book/1143\">开源软件架构</a></li>\n<li><a href=\"http://article.yeeyan.org/view/2251/94882\">持续集成（第二版）</a> (译言网)</li>\n<li><a href=\"http://local.joelonsoftware.com/wiki/%E9%A6%96%E9%A0%81\">約耳談軟體(Joel on Software)</a></li>\n<li><a href=\"https://github.com/ecomfe/spec\">编码规范</a></li>\n<li><a href=\"http://www.ibm.com/developerworks/cn/java/j-ap/\">让开发自动化系列专栏</a></li>\n<li><a href=\"http://www.ibm.com/developerworks/cn/java/j-cq/\">追求代码质量</a></li>\n</ul>\n<h2 id=\"语言相关\"><a href=\"#语言相关\" class=\"headerlink\" title=\"语言相关\"></a>语言相关</h2><h2 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h2><ul>\n<li><a href=\"http://www.apkbus.com/design/index.html\">Android Design(中文版)</a></li>\n<li><a href=\"https://github.com/CharonChui/AndroidNote\">Android Note(开发过程中积累的知识点)</a></li>\n<li><a href=\"http://leanote.com/blog/post/561658f938f41126b2000298?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\">Android6.0新特性详解</a></li>\n<li><a href=\"http://stormzhang.github.io/android/2014/07/07/learn-android-from-rookie/\">Android学习之路</a></li>\n<li><a href=\"https://github.com/bboyfeiyu/android-tech-frontier\">Android开发技术前线(android-tech-frontier)</a></li>\n<li><a href=\"http://hukai.me/android-training-course-in-chinese/index.html\">Google Android官方培训课程中文版</a></li>\n<li>Google Material Design 正體中文版 (<a href=\"https://wcc723.gitbooks.io/google_design_translate/content/style-icons.html\">译本一</a> <a href=\"https://github.com/1sters/material_design_zh\">译本二</a>)</li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/material-design/\">Material Design 中文版</a></li>\n<li><a href=\"https://github.com/FX-Max/Point-of-Android\">Point-of-Android</a> Android 一些重要知识点解析整理</li>\n</ul>\n<h2 id=\"AWK\"><a href=\"#AWK\" class=\"headerlink\" title=\"AWK\"></a>AWK</h2><ul>\n<li><a href=\"http://awk.readthedocs.org/en/latest/index.html\">awk中文指南</a></li>\n<li><a href=\"https://github.com/wuzhouhui/awk\">awk程序设计语言</a></li>\n</ul>\n<h2 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a>C</h2><ul>\n<li><a href=\"http://c-faq-chn.sourceforge.net/ccfaq/ccfaq.html\">C 语言常见问题集</a></li>\n<li><a href=\"http://doc.lellansin.com\">C/C++ 学习教程</a></li>\n<li><a href=\"http://docs.linuxtone.org/ebooks/C&amp;CPP/c/\">Linux C 编程一站式学习</a></li>\n<li><a href=\"https://github.com/limingth/NCCL\">新概念 C 语言教程</a></li>\n</ul>\n<h2 id=\"C-Sharp\"><a href=\"#C-Sharp\" class=\"headerlink\" title=\"C Sharp\"></a>C Sharp</h2><ul>\n<li><a href=\"http://book.douban.com/subject/24827879/\">精通C#(第6版) </a></li>\n</ul>\n<h2 id=\"C-1\"><a href=\"#C-1\" class=\"headerlink\" title=\"C++\"></a>C++</h2><ul>\n<li><a href=\"https://github.com/hellogcc/100-gcc-tips/blob/master/src/index.md\">100个gcc小技巧</a></li>\n<li><a href=\"https://github.com/hellogcc/100-gdb-tips/blob/master/src/index.md\">100个gdb小技巧</a></li>\n<li><a href=\"https://tinylab.gitbooks.io/cbook/content/\">C 语言编程透视</a></li>\n<li><a href=\"https://github.com/andycai/cprimer\">C/C++ Primer</a> - @andycai</li>\n<li><a href=\"http://www.sunistudio.com/cppfaq/\">C++ FAQ LITE(中文版)</a></li>\n<li><a href=\"https://github.com/Mooophy/Cpp-Primer\">C++ Primer 5th Answers</a></li>\n<li><a href=\"https://github.com/wuye9036/CppTemplateTutorial\">C++ Template 进阶指南</a></li>\n<li><a href=\"http://www.prglab.com/cms/\">C++ 基础教程</a></li>\n<li><a href=\"https://chenxiaowei.gitbooks.io/cpp_concurrency_in_action/content/\">C++ 并发编程(基于C++11)</a></li>\n<li><a href=\"https://github.com/forhappy/Cplusplus-Concurrency-In-Practice\">C++ 并发编程指南</a></li>\n<li><a href=\"https://github.com/leeyiw/cgdb-manual-in-chinese\">CGDB中文手册</a></li>\n<li><a href=\"http://sewm.pku.edu.cn/src/paradise/reference/CMake%20Practice.pdf\">Cmake 实践</a> (PDF版)</li>\n<li><a href=\"http://docs.huihoo.com/gnu/linux/gmake.html\">GNU make 指南</a></li>\n<li><a href=\"http://zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/contents/\">Google C++ 风格指南</a></li>\n<li><a href=\"http://www.kuqin.com/qtdocument/tutorial.html\">QT 教程</a></li>\n<li><a href=\"https://github.com/anjuke/zguide-cn\">ZMQ 指南</a></li>\n<li><a href=\"http://www.ituring.com.cn/book/1203\">像计算机科学家一样思考（C++版)</a> (《How To Think Like a Computer Scientist: C++ Version》中文版)</li>\n<li><a href=\"http://www.nowamagic.net/librarys/books/contents/c\">简单易懂的C魔法</a></li>\n<li><a href=\"http://scc.qibebt.cas.cn/docs/linux/base/%B8%FA%CE%D2%D2%BB%C6%F0%D0%B4Makefile-%B3%C2%F0%A9.pdf\">跟我一起写Makefile(PDF)</a> (PDF)</li>\n</ul>\n<h2 id=\"CoffeeScript\"><a href=\"#CoffeeScript\" class=\"headerlink\" title=\"CoffeeScript\"></a>CoffeeScript</h2><ul>\n<li><a href=\"http://coffee-script.org\">CoffeeScript 中文</a></li>\n<li><a href=\"https://github.com/elrrrrrrr/coffeescript-style-guide/blob/master/README-ZH.md\">CoffeeScript 编程风格指南</a></li>\n</ul>\n<h2 id=\"Dart\"><a href=\"#Dart\" class=\"headerlink\" title=\"Dart\"></a>Dart</h2><ul>\n<li><a href=\"http://dart.lidian.info/wiki/Language_Tour\">Dart 语言导览</a></li>\n</ul>\n<h2 id=\"Elasticsearch\"><a href=\"#Elasticsearch\" class=\"headerlink\" title=\"Elasticsearch\"></a>Elasticsearch</h2><ul>\n<li><a href=\"https://github.com/looly/elasticsearch-definitive-guide-cn\">Elasticsearch 权威指南</a> （《Elasticsearch the definitive guide》中文版）</li>\n<li><a href=\"http://kibana.logstash.es\">ELKstack 中文指南</a></li>\n<li><a href=\"http://udn.yyuap.com/doc/mastering-elasticsearch/\">Mastering Elasticsearch(中文版)</a></li>\n</ul>\n<h2 id=\"Elixir\"><a href=\"#Elixir\" class=\"headerlink\" title=\"Elixir\"></a>Elixir</h2><ul>\n<li><a href=\"https://github.com/Ljzn/ElixrGettingStartedChinese\">Elixir Getting Started 中文翻译</a></li>\n<li><a href=\"https://elixirschool.com/cn/\">Elixir 编程语言教程</a> (Elixir School)</li>\n<li><a href=\"https://github.com/Ljzn/MetaProgrammingInElixirChinese\">Elixir元编程与DSL 中文翻译</a></li>\n<li><a href=\"https://mydearxym.gitbooks.io/phoenix-doc-in-chinese/content/\">Phoenix 框架中文文档</a></li>\n</ul>\n<h2 id=\"Erlang\"><a href=\"#Erlang\" class=\"headerlink\" title=\"Erlang\"></a>Erlang</h2><ul>\n<li><a href=\"https://github.com/liancheng/cpie-cn\">Erlang 并发编程</a> (《Concurrent Programming in Erlang (Part I)》中文版)</li>\n</ul>\n<h2 id=\"Fortran\"><a href=\"#Fortran\" class=\"headerlink\" title=\"Fortran\"></a>Fortran</h2><ul>\n<li><a href=\"http://micro.ustc.edu.cn/Fortran/ZJDing/\">Fortran77和90/95编程入门</a></li>\n</ul>\n<h2 id=\"Golang\"><a href=\"#Golang\" class=\"headerlink\" title=\"Golang\"></a>Golang</h2><ul>\n<li><a href=\"http://www.hellogcc.org/effective_go.html\">Effective Go</a></li>\n<li><a href=\"https://github.com/astaxie/build-web-application-with-golang\">Go Web 编程</a></li>\n<li><a href=\"https://github.com/Unknwon/the-way-to-go_ZH_CN\">Go 入门指南</a> (《The Way to Go》中文版)</li>\n<li><a href=\"https://github.com/golang-china/golangdoc.translations\">Go 官方文档翻译</a></li>\n<li><a href=\"http://go-tour-zh.appsp0t.com\">Go 指南</a> (《A Tour of Go》中文版)</li>\n<li><a href=\"https://github.com/songleo/the-little-go-book_ZH_CN\">Go 简易教程</a> (《<a href=\"https://github.com/karlseguin/the-little-go-book\">The Little Go Book</a>》中文版)</li>\n<li><a href=\"https://github.com/Unknwon/go-fundamental-programming\">Go 编程基础</a></li>\n<li><a href=\"https://github.com/polaris1119/The-Golang-Standard-Library-by-Example\">Go 语言标准库</a></li>\n<li><a href=\"https://github.com/hyper-carrot/go_command_tutorial\">Go命令教程</a></li>\n<li><a href=\"https://github.com/astaxie/Go-in-Action\">Go实战开发</a></li>\n<li><a href=\"https://github.com/achun/Go-Blog-In-Action\">Go语言博客实践</a></li>\n<li><a href=\"http://blog.csdn.net/dc_726/article/details/46565241\">Java程序员的Golang入门指南</a></li>\n<li><a href=\"https://github.com/astaxie/NPWG_zh\">Network programming with Go 中文翻译版本</a></li>\n<li><a href=\"http://gorevel.cn/docs/manual/index.html\">Revel 框架手册</a></li>\n<li><a href=\"http://mikespook.com/learning-go/\">学习Go语言</a></li>\n</ul>\n<h2 id=\"Groovy\"><a href=\"#Groovy\" class=\"headerlink\" title=\"Groovy\"></a>Groovy</h2><ul>\n<li><a href=\"http://www.ibm.com/developerworks/cn/java/j-pg/\">实战 Groovy 系列</a></li>\n</ul>\n<h2 id=\"Haskell\"><a href=\"#Haskell\" class=\"headerlink\" title=\"Haskell\"></a>Haskell</h2><ul>\n<li><a href=\"http://learnyoua.haskell.sg\">Haskell 趣学指南</a></li>\n<li><a href=\"http://cnhaskell.com\">Real World Haskell 中文版</a></li>\n</ul>\n<h2 id=\"HTML-CSS\"><a href=\"#HTML-CSS\" class=\"headerlink\" title=\"HTML / CSS\"></a>HTML / CSS</h2><ul>\n<li><a href=\"https://github.com/waylau/css3-tutorial\">CSS3 Tutorial 《CSS3 教程》</a></li>\n<li><a href=\"http://css.doyoe.com\">CSS参考手册</a></li>\n<li><a href=\"http://yanxyz.github.io/emmet-docs/\">Emmet 文档</a></li>\n<li><a href=\"http://www.w3school.com.cn/html5/\">HTML5 教程</a></li>\n<li><a href=\"http://codeguide.bootcss.com\">HTML和CSS编码规范</a></li>\n<li><a href=\"http://sass-guidelin.es/zh/\">Sass Guidelines 中文</a></li>\n<li><a href=\"http://alloyteam.github.io/CodeGuide/\">前端代码规范</a> (腾讯 AlloyTeam 团队)</li>\n<li><a href=\"http://zh.learnlayout.com\">学习CSS布局</a></li>\n<li><a href=\"https://github.com/chadluo/CSS-Guidelines/blob/master/README.md\">通用 CSS 笔记、建议与指导</a></li>\n</ul>\n<h2 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h2><ul>\n<li><a href=\"http://nilsun.github.io/apple-watch/\">Apple Watch开发初探</a></li>\n<li><a href=\"http://zh-google-styleguide.readthedocs.org/en/latest/google-objc-styleguide/\">Google Objective-C Style Guide 中文版</a></li>\n<li><a href=\"http://isux.tencent.com/ios-human-interface-guidelines-ui-design-basics-ios7.html\">iOS7人机界面指南</a></li>\n<li><a href=\"https://github.com/qinjx/30min_guides/blob/master/ios.md\">iOS开发60分钟入门</a></li>\n<li><a href=\"http://wileam.com/iphone-6-screen-cn/\">iPhone 6 屏幕揭秘</a></li>\n<li><a href=\"https://github.com/jkyin/Subtitle\">网易斯坦福大学公开课：iOS 7应用开发字幕文件</a></li>\n</ul>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><ul>\n<li><a href=\"https://github.com/waylau/activiti-5.x-user-guide\">Activiti 5.x 用户指南</a></li>\n<li><a href=\"https://github.com/waylau/apache-mina-2.x-user-guide\">Apache MINA 2 用户指南</a></li>\n<li><a href=\"https://github.com/waylau/apache-shiro-1.2.x-reference\">Apache Shiro 用户指南</a></li>\n<li><a href=\"http://www.hawstein.com/posts/google-java-style.html\">Google Java编程风格指南</a></li>\n<li><a href=\"https://github.com/waylau/h2-database-doc\">H2 Database 教程</a></li>\n<li><a href=\"https://github.com/waylau/servlet-3.1-specification\">Java Servlet 3.1 规范</a></li>\n<li><a href=\"https://github.com/waylau/java-code-conventions\">Java 编码规范</a></li>\n<li><a href=\"https://github.com/waylau/Jersey-2.x-User-Guide\">Jersey 2.x 用户指南</a></li>\n<li><a href=\"https://github.com/waylau/jsse-reference-guide\">JSSE 参考指南</a></li>\n<li><a href=\"http://mybatis.github.io/mybatis-3/zh/index.html\">MyBatis中文文档</a></li>\n<li><a href=\"https://github.com/waylau/netty-4-user-guide\">Netty 4.x 用户指南</a></li>\n<li><a href=\"https://github.com/waylau/essential-netty-in-action\">Netty 实战(精髓)</a></li>\n<li><a href=\"https://github.com/waylau/rest-in-action\">REST 实战</a></li>\n<li><a href=\"https://github.com/qibaoguang/Spring-Boot-Reference-Guide\">Spring Boot参考指南</a> (翻译中)</li>\n<li><a href=\"https://github.com/waylau/spring-framework-4-reference\">Spring Framework 4.x参考文档</a></li>\n<li><a href=\"https://github.com/waylau/RestDemo\">用jersey构建REST服务</a></li>\n</ul>\n<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><ul>\n<li><a href=\"https://github.com/adamlu/javascript-style-guide\">Airbnb JavaScript 规范</a></li>\n<li>AngularJS<ul>\n<li><a href=\"https://github.com/peiransun/angularjs-cn\">AngularJS中译本</a></li>\n<li><a href=\"https://github.com/zensh/AngularjsTutorial_cn\">AngularJS入门教程</a></li>\n<li><a href=\"https://github.com/mgechev/angularjs-style-guide/blob/master/README-zh-cn.md\">AngularJS最佳实践和风格指南</a></li>\n<li><a href=\"http://www.waylau.com/build-angularjs-app-with-yeoman-in-windows/\">在Windows环境下用Yeoman构建AngularJS项目</a></li>\n<li><a href=\"https://github.com/xufei/Make-Your-Own-AngularJS/blob/master/01.md\">构建自己的AngularJS</a></li>\n</ul>\n</li>\n<li>backbone.js<ul>\n<li><a href=\"http://www.css88.com/doc/backbone/\">backbone.js中文文档</a></li>\n<li><a href=\"http://www.the5fire.com/backbone-js-tutorials-pdf-download.html\">backbone.js入门教程</a> (PDF)</li>\n<li><a href=\"https://github.com/the5fire/backbonejs-learning-note\">Backbone.js入门教程第二版</a></li>\n<li><a href=\"http://feliving.github.io/developing-backbone-applications\">Developing Backbone.js Applications(中文版)</a></li>\n</ul>\n</li>\n<li><a href=\"http://www.ituring.com.cn/minibook/950\">Chrome扩展及应用开发</a></li>\n<li>CoffeeScript<ul>\n<li><a href=\"https://github.com/geekplux/coffeescript-style-guide\">CoffeeScript 编码风格指南</a></li>\n</ul>\n</li>\n<li>D3.js<ul>\n<li><a href=\"http://www.ourd3js.com/wordpress/?cat=2\">D3.js 入门系列</a> (还有进阶、高级等系列)</li>\n<li><a href=\"https://github.com/mbostock/d3/wiki/API--%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C\">官方API文档</a></li>\n<li><a href=\"http://blog.csdn.net/zhang__tianxu/article/category/1623437\">张天旭的D3教程</a></li>\n<li><a href=\"http://www.cnblogs.com/winleisure/tag/D3.js/\">楚狂人的D3教程</a></li>\n</ul>\n</li>\n<li><a href=\"http://es6.ruanyifeng.com\">ECMAScript 6 入门</a> (作者：阮一峰)</li>\n<li>ExtJS<ul>\n<li><a href=\"http://extjs-doc-cn.github.io/ext4api/\">Ext4.1.0 中文文档</a></li>\n</ul>\n</li>\n<li><a href=\"http://bq69.com/blog/articles/script/868/google-javascript-style-guide.html\">Google JavaScript 代码风格指南</a></li>\n<li><a href=\"https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md\">Google JSON 风格指南</a></li>\n<li>impress.js<ul>\n<li><a href=\"https://github.com/kokdemo/impress.js-tutorial-in-Chinese\">impress.js的中文教程</a></li>\n</ul>\n</li>\n<li><a href=\"http://liubin.github.io/promises-book/\">JavaScript Promise迷你书</a></li>\n<li><a href=\"http://typeof.net/s/jsmech/\">Javascript 原理</a></li>\n<li><a href=\"http://javascript.ruanyifeng.com\">JavaScript 标准参考教程（alpha）</a></li>\n<li><a href=\"https://github.com/jayli/javascript-patterns\">《JavaScript 模式》</a> “JavaScript patterns”中译本</li>\n<li><a href=\"https://github.com/justjavac/12-javascript-quirks\">javascript 的 12 个怪癖</a></li>\n<li><a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/\">JavaScript 秘密花园</a></li>\n<li><a href=\"http://icodeit.org/jsccp/\">JavaScript核心概念及实践</a> (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者)</li>\n<li><a href=\"http://pij.robinqu.me\">Javascript编程指南</a> (<a href=\"https://github.com/RobinQu/Programing-In-Javascript\">源码</a>)</li>\n<li>jQuery<ul>\n<li><a href=\"http://i5ting.github.io/How-to-write-jQuery-plugin/build/jquery.plugin.html\">How to write jQuery plugin</a></li>\n<li><a href=\"http://www.nowamagic.net/librarys/books/contents/jquery\">简单易懂的JQuery魔法</a></li>\n</ul>\n</li>\n<li>Meteor<ul>\n<li><a href=\"http://zh.discovermeteor.com\">Discover Meteor</a></li>\n</ul>\n</li>\n<li>Node.js<ul>\n<li><a href=\"http://expressjs.jser.us\">express.js 中文文档</a></li>\n<li><a href=\"http://javascript.ruanyifeng.com/nodejs/express.html\">Express框架</a></li>\n<li><a href=\"https://github.com/guo-yu/koa-guide\">koa 中文文档</a></li>\n<li><a href=\"https://www.npmjs.com/package/learnyounode-zh-cn\">Learn You The Node.js For Much Win! (中文版)</a></li>\n<li><a href=\"http://i5ting.github.io/node-debug-tutorial/\">Node debug 三法三例</a></li>\n<li><a href=\"https://github.com/jollen/nodejs-fullstack-lessons\">Node.js Fullstack《從零到一的進撃》</a></li>\n<li><a href=\"https://github.com/alsotang/node-lessons\">Node.js 包教不包会</a></li>\n<li><a href=\"https://github.com/nodejs-tw/nodejs-wiki-book\">Nodejs Wiki Book</a> (繁体中文)</li>\n<li><a href=\"https://www.gitbook.com/book/0532/nodejs/details\">nodejs中文文档</a></li>\n<li><a href=\"http://www.nodebeginner.org/index-zh-cn.html\">Node入门</a></li>\n<li><a href=\"http://nqdeng.github.io/7-days-nodejs/\">七天学会NodeJS</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog\">使用 Express + MongoDB 搭建多人博客</a></li>\n</ul>\n</li>\n<li>React.js<ul>\n<li><a href=\"https://github.com/theJian/build-a-hn-front-page\">Learn React &amp; Webpack by building the Hacker News front page</a></li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/react-native/\">React Native 中文文档(含最新Android内容)</a></li>\n<li><a href=\"https://github.com/fakefish/react-webpack-cookbook\">React webpack-cookbook</a></li>\n<li><a href=\"http://fraserxu.me/intro-to-react/\">React 入门教程</a></li>\n<li><a href=\"http://reactjs.cn\">React.js 中文文档</a></li>\n</ul>\n</li>\n<li>underscore.js<ul>\n<li><a href=\"http://learningcn.com/underscore/\">Underscore.js中文文档</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS\">You-Dont-Know-JS</a> (深入JavaScript语言核心机制的系列图书)</li>\n<li>Zepto.js<ul>\n<li><a href=\"http://mweb.baidu.com/zeptoapi/\">Zepto.js 中文文档</a></li>\n</ul>\n</li>\n<li><a href=\"http://justjavac.com/named-function-expressions-demystified.html\">命名函数表达式探秘</a>  (注:原文由<a href=\"http://www.cn-cuckoo.com\">为之漫笔</a> 翻译，原始地址无法打开，所以此处地址为我博客上的备份)</li>\n<li><a href=\"http://www.oschina.net/translate/learning-javascript-design-patterns\">学用 JavaScript 设计模式</a> (开源中国)</li>\n<li><a href=\"http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html\">深入理解JavaScript系列</a></li>\n</ul>\n<h2 id=\"LaTeX\"><a href=\"#LaTeX\" class=\"headerlink\" title=\"LaTeX\"></a>LaTeX</h2><ul>\n<li><a href=\"http://www.dralpha.com/zh/tech/tech.htm\">LaTeX 笔记</a></li>\n<li><a href=\"http://ctan.org/pkg/lshort-zh-cn\">一份不太简短的 LaTeX2ε 介绍</a></li>\n<li><a href=\"https://github.com/49951331/graduate-project-102pj/blob/master/docs/latex123.pdf\">大家來學 LaTeX</a> (PDF)</li>\n</ul>\n<h2 id=\"LISP\"><a href=\"#LISP\" class=\"headerlink\" title=\"LISP\"></a>LISP</h2><ul>\n<li><a href=\"http://acl.readthedocs.org/en/latest/\">ANSI Common Lisp 中文翻译版</a></li>\n<li><a href=\"http://www.ituring.com.cn/minibook/862\">Common Lisp 高级编程技术</a> (《On Lisp》中文版)</li>\n</ul>\n<h2 id=\"Lua\"><a href=\"#Lua\" class=\"headerlink\" title=\"Lua\"></a>Lua</h2><ul>\n<li><a href=\"http://www.w3cschool.cc/manual/lua53doc/contents.html\">Lua 5.3 参考手册</a></li>\n</ul>\n<h2 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h2><ul>\n<li><a href=\"http://wowubuntu.com/markdown/basic.html\">Markdown 快速入门</a></li>\n<li><a href=\"http://www.jianshu.com/p/7bd23251da0a\">Markdown 简明教程</a></li>\n<li><a href=\"http://wowubuntu.com/markdown/\">Markdown 语法说明</a></li>\n<li><a href=\"http://www.jianshu.com/p/q81RER\">献给写作者的 Markdown 新手指南</a></li>\n</ul>\n<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><ul>\n<li><a href=\"http://www.nodebeginner.org/index-zh-cn.html\">Node 入门</a></li>\n<li><a href=\"https://www.gitbook.com/book/0532/nodejs/details\">The NodeJS 中文文档</a>（社区翻译）</li>\n<li><a href=\"http://nqdeng.github.io/7-days-nodejs/\">七天学会NodeJS</a> 阿里出品，很好的入门资料</li>\n</ul>\n<h2 id=\"Perl\"><a href=\"#Perl\" class=\"headerlink\" title=\"Perl\"></a>Perl</h2><ul>\n<li><a href=\"https://github.com/fayland/chinese-perl-book\">Master Perl Today</a></li>\n<li><a href=\"https://github.com/horus/modern_perl_book\">《Modern Perl》中文版</a></li>\n<li><a href=\"http://www.cbi.pku.edu.cn/chinese/documents/perl/index.htm\">Perl 5 教程</a></li>\n<li><a href=\"http://www.yiibai.com/perl\">Perl 教程</a></li>\n</ul>\n<h2 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h2><ul>\n<li><a href=\"http://wulijun.github.io/php-the-right-way/\">PHP 之道</a></li>\n<li><a href=\"http://php.net/manual/zh/\">PHP5中文手册</a></li>\n<li><a href=\"http://www.walu.cc/phpbook/preface.md\">PHP扩展开发及内核应用</a></li>\n<li><a href=\"https://wusuopu.gitbooks.io/symfony2_tutorial/content\">Symfony2 实例教程</a></li>\n<li><a href=\"http://www.php-internals.com/book/\">深入理解 PHP 内核</a></li>\n</ul>\n<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h2><ul>\n<li><a href=\"http://djangobook.py3k.cn/2.0/\">Django book 2.0</a></li>\n<li><a href=\"http://docspy3zh.readthedocs.org/en/latest/\">Python 3 文档(简体中文) 3.2.2 documentation</a></li>\n<li><a href=\"http://www.pythondoc.com\">Python 中文学习大本营</a></li>\n<li><a href=\"https://github.com/jiechic/diveintopython3\">深入 Python 3</a></li>\n<li><a href=\"http://old.sebug.net/paper/books/LearnPythonTheHardWay/\">笨办法学 Python</a></li>\n</ul>\n<h2 id=\"R\"><a href=\"#R\" class=\"headerlink\" title=\"R\"></a>R</h2><ul>\n<li><a href=\"http://cran.r-project.org/doc/contrib/Liu-FAQ.pdf\">153分钟学会 R</a> (PDF)</li>\n<li><a href=\"http://www.biosino.org/R/R-doc/files/R4beg_cn_2.0.pdf\">《R for beginners》中文版</a> (PDF)</li>\n<li><a href=\"http://cran.r-project.org/doc/contrib/Ding-R-intro_cn.pdf\">R 导论</a> (《An Introduction to R》中文版) (PDF)</li>\n<li><a href=\"http://yanping.me/shiny-tutorial/\">用 R 构建 Shiny 应用程序</a> (《Building ‘Shiny’ Applications with R》中文版)</li>\n<li><a href=\"http://cran.r-project.org/doc/contrib/Xu-Statistics_and_R.pdf\">统计学与 R 读书笔记</a> (PDF)</li>\n</ul>\n<h2 id=\"reStructuredText\"><a href=\"#reStructuredText\" class=\"headerlink\" title=\"reStructuredText\"></a>reStructuredText</h2><ul>\n<li><a href=\"http://www.pythondoc.com/sphinx/rest.html\">reStructuredText 入门</a></li>\n<li><a href=\"http://jwch.sdut.edu.cn/book/rst.html\">reStructuredText 简明教程</a></li>\n</ul>\n<h2 id=\"Ruby\"><a href=\"#Ruby\" class=\"headerlink\" title=\"Ruby\"></a>Ruby</h2><ul>\n<li><a href=\"https://github.com/JuanitoFatas/rails-style-guide/blob/master/README-zhCN.md\">Rails 风格指南</a></li>\n<li><a href=\"http://railstutorial-china.org\">Ruby on Rails Tutorial 原书第 2 版</a></li>\n<li><a href=\"https://ihower.tw/rails4/\">Ruby on Rails 实战圣经</a></li>\n<li><a href=\"https://github.com/JuanitoFatas/ruby-style-guide/blob/master/README-zhCN.md\">Ruby 风格指南</a></li>\n<li><a href=\"http://lrthw.github.io\">笨方法学 Ruby</a></li>\n</ul>\n<h2 id=\"Rust\"><a href=\"#Rust\" class=\"headerlink\" title=\"Rust\"></a>Rust</h2><ul>\n<li><a href=\"https://github.com/KaiserY/rust-book-chinese\">Rust 官方教程</a></li>\n<li><a href=\"https://github.com/photino/rust-notes\">Rust 语言学习笔记</a></li>\n<li><a href=\"https://github.com/rustcc/RustPrimer\">RustPrimer</a></li>\n<li><a href=\"https://github.com/rustcc/rust-by-example/\">通过例子学习 Rust</a></li>\n</ul>\n<h2 id=\"Scala\"><a href=\"#Scala\" class=\"headerlink\" title=\"Scala\"></a>Scala</h2><ul>\n<li><a href=\"http://twitter.github.io/effectivescala/index-cn.html\">Effective Scala</a></li>\n<li><a href=\"https://www.gitbook.com/book/windor/beginners-guide-to-scala/details\">Scala 初学者指南</a> (The Neophyte’s Guide to Scala)</li>\n<li><a href=\"http://twitter.github.io/scala_school/zh_cn/index.html\">Scala 课堂</a> (Twitter的Scala中文教程)</li>\n</ul>\n<h2 id=\"Scheme\"><a href=\"#Scheme\" class=\"headerlink\" title=\"Scheme\"></a>Scheme</h2><ul>\n<li><a href=\"http://deathking.github.io/yast-cn/\">Scheme 入门教程</a> (《Yet Another Scheme Tutorial》中文版)</li>\n</ul>\n<h2 id=\"Shell\"><a href=\"#Shell\" class=\"headerlink\" title=\"Shell\"></a>Shell</h2><ul>\n<li><a href=\"http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80\">Shell 编程基础</a></li>\n<li><a href=\"https://github.com/qinjx/30min_guides/blob/master/shell.md\">Shell 脚本编程30分钟入门</a></li>\n<li><a href=\"http://billie66.github.io/TLCL/book/zh\">The Linux Command Line 中文版</a></li>\n</ul>\n<h2 id=\"Swift\"><a href=\"#Swift\" class=\"headerlink\" title=\"Swift\"></a>Swift</h2><ul>\n<li><a href=\"https://www.gitbook.com/book/numbbbbb/-the-swift-programming-language-/details\">《The Swift Programming Language》中文版</a></li>\n</ul>\n<h2 id=\"Vim\"><a href=\"#Vim\" class=\"headerlink\" title=\"Vim\"></a>Vim</h2><ul>\n<li><a href=\"http://man.chinaunix.net/newsoft/vi/doc/help.html\">Vim Manual(中文版)</a></li>\n<li><a href=\"http://www.study-area.org/tips/vim/index.html\">大家來學 VIM</a></li>\n</ul>\n<h2 id=\"Visual-Prolog\"><a href=\"#Visual-Prolog\" class=\"headerlink\" title=\"Visual Prolog\"></a>Visual Prolog</h2><ul>\n<li><a href=\"http://wiki.visual-prolog.com/index.php?title=A_Beginners_Guide_to_Visual_Prolog_in_Chinese\">Visual Prolog 7初学指南</a></li>\n<li><a href=\"http://wiki.visual-prolog.com/index.php?title=Visual_Prolog_for_Tyros_in_Chinese\">Visual Prolog 7边练边学</a></li>\n</ul>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 免费的开源书籍：</strong> <Excerpt in index | 首页摘要><br>国外程序员在 stackoverflow 推荐的程序员必读书籍，中文版。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#语言无关\">语言无关</a><ul>\n<li><a href=\"#ide\">IDE</a></li>\n<li><a href=\"#mysql\">MySQL</a></li>\n<li><a href=\"#nosql\">NoSQL</a></li>\n<li><a href=\"#postgresql\">PostgreSQL</a></li>\n<li><a href=\"#web\">Web</a></li>\n<li><a href=\"#web服务器\">WEB服务器</a></li>\n<li><a href=\"#其它\">其它</a></li>\n<li><a href=\"#函数式概念\">函数式概念</a></li>\n<li><a href=\"#分布式系统\">分布式系统</a></li>\n<li><a href=\"#在线教育\">在线教育</a></li>\n<li><a href=\"#大数据\">大数据</a></li>\n<li><a href=\"#操作系统\">操作系统</a></li>\n<li><a href=\"#数据库\">数据库</a></li>\n<li><a href=\"#智能系统\">智能系统</a></li>\n<li><a href=\"#正则表达式\">正则表达式</a></li>\n<li><a href=\"#版本控制\">版本控制</a></li>\n<li><a href=\"#程序员杂谈\">程序员杂谈</a></li>\n<li><a href=\"#管理和监控\">管理和监控</a></li>\n<li><a href=\"#编程艺术\">编程艺术</a></li>\n<li><a href=\"#编译原理\">编译原理</a></li>\n<li><a href=\"#编辑器\">编辑器</a></li>\n<li><a href=\"#计算机图形学\">计算机图形学</a></li>\n<li><a href=\"#设计模式\">设计模式</a></li>\n<li><a href=\"#软件开发方法\">软件开发方法</a></li>\n<li><a href=\"#项目相关\">项目相关</a></li>\n</ul>\n</li>\n<li><a href=\"#语言相关\">语言相关</a><ul>\n<li><a href=\"#android\">Android</a></li>\n<li><a href=\"#awk\">AWK</a></li>\n<li><a href=\"#c\">C</a></li>\n<li><a href=\"#c-sharp\">C#</a></li>\n<li><a href=\"#c-1\">C++</a></li>\n<li><a href=\"#coffeescript\">CoffeeScript</a></li>\n<li><a href=\"#dart\">Dart</a></li>\n<li><a href=\"#elasticsearch\">Elasticsearch</a></li>\n<li><a href=\"#elixir\">Elixir</a></li>\n<li><a href=\"#erlang\">Erlang</a></li>\n<li><a href=\"#fortran\">Fortran</a></li>\n<li><a href=\"#golang\">Golang</a></li>\n<li><a href=\"#haskell\">Haskell</a></li>\n<li><a href=\"#html--css\">HTML / CSS</a></li>\n<li><a href=\"#http\">HTTP</a></li>\n<li><a href=\"#ios\">iOS</a></li>\n<li><a href=\"#java\">Java</a></li>\n<li><a href=\"#javascript\">JavaScript</a></li>\n<li><a href=\"#latex\">LaTeX</a></li>\n<li><a href=\"#lisp\">LISP</a></li>\n<li><a href=\"#lua\">Lua</a></li>\n<li><a href=\"#markdown\">Markdown</a></li>\n<li><a href=\"#nodejs\">Node.js</a></li>\n<li><a href=\"#perl\">Perl</a></li>\n<li><a href=\"#php\">PHP</a></li>\n<li><a href=\"#python\">Python</a></li>\n<li><a href=\"#r\">R</a></li>\n<li><a href=\"#restructuredtext\">reStructuredText</a></li>\n<li><a href=\"#ruby\">Ruby</a></li>\n<li><a href=\"#rust\">Rust</a></li>\n<li><a href=\"#scala\">Scala</a></li>\n<li><a href=\"#scheme\">Scheme</a></li>\n<li><a href=\"#shell\">Shell</a></li>\n<li><a href=\"#swift\">Swift</a></li>\n<li><a href=\"#vim\">Vim</a></li>\n<li><a href=\"#visual-prolog\">Visual Prolog</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"语言无关\"><a href=\"#语言无关\" class=\"headerlink\" title=\"语言无关\"></a>语言无关</h2><h2 id=\"IDE\"><a href=\"#IDE\" class=\"headerlink\" title=\"IDE\"></a>IDE</h2><ul>\n<li><a href=\"https://github.com/judasn/IntelliJ-IDEA-Tutorial\">IntelliJ IDEA 简体中文专题教程</a></li>\n</ul>\n<h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><ul>\n<li><a href=\"http://www.cnblogs.com/mr-wid/archive/2013/05/09/3068229.html\">21分钟MySQL入门教程</a></li>\n<li><a href=\"http://blog.codinglabs.org/articles/theory-of-mysql-index.html\">MySQL索引背后的数据结构及算法原理</a></li>\n</ul>\n<h2 id=\"NoSQL\"><a href=\"#NoSQL\" class=\"headerlink\" title=\"NoSQL\"></a>NoSQL</h2><ul>\n<li><a href=\"http://disquebook.com\">Disque 使用教程</a></li>\n<li><a href=\"http://neo4j.tw\">Neo4j .rb 中文資源</a></li>\n<li><a href=\"http://docs.neo4j.org.cn\">Neo4j 简体中文手册 v1.8</a></li>\n<li><a href=\"http://redisdoc.com\">Redis 命令参考</a></li>\n<li><a href=\"http://redisbook.com\">Redis 设计与实现</a></li>\n<li><a href=\"https://github.com/justinyhuang/the-little-mongodb-book-cn/blob/master/mongodb.md\">The Little MongoDB Book</a></li>\n<li><a href=\"https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md\">The Little Redis Book</a></li>\n<li><a href=\"https://github.com/huangz1990/annotated_redis_source\">带有详细注释的 Redis 2.6 代码</a></li>\n<li><a href=\"https://github.com/huangz1990/redis-3.0-annotated\">带有详细注释的 Redis 3.0 代码</a></li>\n</ul>\n<h2 id=\"PostgreSQL\"><a href=\"#PostgreSQL\" class=\"headerlink\" title=\"PostgreSQL\"></a>PostgreSQL</h2><ul>\n<li><a href=\"http://works.jinbuguo.com/postgresql/menu823/index.html\">PostgreSQL 8.2.3 中文文档</a></li>\n<li><a href=\"http://www.postgres.cn/docs/9.3/index.html\">PostgreSQL 9.3.1 中文文档</a></li>\n</ul>\n<h2 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h2><ul>\n<li><a href=\"https://www.gitbook.com/book/juntao/3-web-designs-in-3-weeks/details\">3 Web Designs in 3 Weeks</a></li>\n<li><a href=\"https://github.com/CN-Chrome-DevTools/CN-Chrome-DevTools\">Chrome 开发者工具中文手册</a></li>\n<li><a href=\"http://open.chrome.360.cn/extension_dev/overview.html\">Chrome扩展开发文档</a></li>\n<li><a href=\"https://github.com/phodal/growth-ebook\">Growth: 全栈增长工程师指南</a></li>\n<li><a href=\"http://www.gruntjs.net\">Grunt中文文档</a></li>\n<li><a href=\"https://github.com/nimojs/gulp-book\">Gulp 入门指南</a></li>\n<li><a href=\"http://www.gulpjs.com.cn/docs/\">gulp中文文档</a></li>\n<li><a href=\"https://github.com/bolasblack/http-api-guide\">HTTP 接口设计指北</a></li>\n<li><a href=\"http://yuedu.baidu.com/ebook/478d1a62376baf1ffc4fad99?pn=1\">HTTP/2.0 中文翻译</a></li>\n<li><a href=\"https://www.gitbook.com/book/ye11ow/http2-explained/details\">http2讲解</a></li>\n<li><a href=\"https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md\">JSON风格指南</a></li>\n<li><a href=\"http://man.lupaworld.com/content/network/wireshark/index.html\">Wireshark用户手册</a></li>\n<li><a href=\"https://community.emc.com/thread/194901\">一站式学习Wireshark</a></li>\n<li><a href=\"http://www.20thingsilearned.com/zh-CN/home\">关于浏览器和网络的 20 项须知</a></li>\n<li><a href=\"http://coderlmn.github.io/code-standards/\">前端代码规范 及 最佳实践</a></li>\n<li><a href=\"https://github.com/fouber/blog/issues/2\">前端开发体系建设日记</a></li>\n<li><a href=\"https://github.com/hacke2/hacke2.github.io/issues/1\">前端资源分享（一）</a></li>\n<li><a href=\"https://github.com/hacke2/hacke2.github.io/issues/3\">前端资源分享（二）</a></li>\n<li><a href=\"http://deerchao.net/tutorials/regex/regex.htm\">正则表达式30分钟入门教程</a></li>\n<li><a href=\"http://jinlong.github.io/2013/08/29/devtoolsecrets/\">浏览器开发工具的秘密</a></li>\n<li><a href=\"https://github.com/AlloyTeam/Mars\">移动Web前端知识库</a></li>\n<li><a href=\"https://github.com/hoosin/mobile-web-favorites\">移动前端开发收藏夹</a></li>\n</ul>\n<h2 id=\"WEB服务器\"><a href=\"#WEB服务器\" class=\"headerlink\" title=\"WEB服务器\"></a>WEB服务器</h2><ul>\n<li><a href=\"http://works.jinbuguo.com/apache/menu22/index.html\">Apache 中文手册</a></li>\n<li><a href=\"http://tengine.taobao.org/book/index.html\">Nginx开发从入门到精通</a> (淘宝团队出品)</li>\n<li><a href=\"http://www.ttlsa.com/nginx/nginx-stu-pdf/\">Nginx教程从入门到精通</a> (PDF版本，运维生存时间出品)</li>\n</ul>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><ul>\n<li><a href=\"https://softwaredownload.gitbooks.io/openwrt-fanqiang/content/\">OpenWrt智能、自动、透明翻墙路由器教程</a></li>\n<li><a href=\"https://community.emc.com/docs/DOC-16067\">SAN 管理入门系列</a></li>\n<li><a href=\"http://sketchcn.com/sketch-chinese-user-manual.html#introduce\">Sketch 中文手册</a></li>\n<li><a href=\"http://ifeve.com/perfbook/\">深入理解并行编程</a></li>\n</ul>\n<h2 id=\"函数式概念\"><a href=\"#函数式概念\" class=\"headerlink\" title=\"函数式概念\"></a>函数式概念</h2><ul>\n<li><a href=\"https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn\">傻瓜函数编程</a></li>\n</ul>\n<h2 id=\"分布式系统\"><a href=\"#分布式系统\" class=\"headerlink\" title=\"分布式系统\"></a>分布式系统</h2><ul>\n<li><a href=\"http://dcaoyuan.github.io/papers/pdfs/Scalability.pdf\">走向分布式</a> (PDF)</li>\n</ul>\n<h2 id=\"在线教育\"><a href=\"#在线教育\" class=\"headerlink\" title=\"在线教育\"></a>在线教育</h2><ul>\n<li><a href=\"http://edu.51cto.com\">51CTO学院</a></li>\n<li><a href=\"https://www.codecademy.com/?locale_code=zh\">Codecademy</a></li>\n<li><a href=\"https://www.codeschool.com\">CodeSchool</a></li>\n<li><a href=\"https://www.coursera.org/courses?orderby=upcoming&amp;lngs=zh\">Coursera</a></li>\n<li><a href=\"https://learnxinyminutes.com\">Learn X in Y minutes</a> (数十种语言快速入门教程)</li>\n<li><a href=\"https://www.shiyanlou.com\">shiyanlou</a></li>\n<li><a href=\"https://teamtreehouse.com\">TeamTreeHouse</a></li>\n<li><a href=\"https://www.udacity.com\">Udacity</a></li>\n<li><a href=\"https://www.xuetangx.com\">xuetangX</a></li>\n<li><a href=\"http://www.imooc.com/course/list\">慕课网</a> (丰富的移动端开发、php开发、web前端、html5教程以及css3视频教程等课程资源)</li>\n<li><a href=\"http://www.jikexueyuan.com\">极客学院</a></li>\n<li><a href=\"http://www.jisuanke.com\">计蒜客</a></li>\n</ul>\n<h2 id=\"大数据\"><a href=\"#大数据\" class=\"headerlink\" title=\"大数据\"></a>大数据</h2><ul>\n<li><a href=\"https://aiyanbo.gitbooks.io/spark-programming-guide-zh-cn/content/\">Spark 编程指南简体中文版</a></li>\n<li><a href=\"https://code.csdn.net/CODE_Translation/spark_matei_phd\">大型集群上的快速和通用数据处理架构</a></li>\n<li><a href=\"https://github.com/Flowerowl/Big-Data-Resources\">大数据/数据挖掘/推荐系统/机器学习相关资源</a></li>\n<li><a href=\"https://github.com/linyiqun/DataMiningAlgorithm\">数据挖掘中经典的算法实现和详细的注释</a></li>\n<li><a href=\"http://dataminingguide.books.yourtion.com\">面向程序员的数据挖掘指南</a></li>\n</ul>\n<h2 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h2><ul>\n<li><a href=\"http://man.chinaunix.net/linux/debian/reference/reference.zh-cn.html\">Debian 参考手册 </a></li>\n<li><a href=\"https://github.com/yeasy/docker_practice\">Docker —— 从入门到实践</a></li>\n<li><a href=\"https://github.com/widuu/chinese_docker\">Docker中文指南</a></li>\n<li><a href=\"http://yuedu.baidu.com/ebook/d817967416fc700abb68fca1\">Docker入门实战</a></li>\n<li><a href=\"http://www.freebsd.org/doc/zh_CN.UTF-8/books/handbook/\">FreeBSD 使用手册</a></li>\n<li><a href=\"http://freeradius.akagi201.org\">FreeRADIUS新手入门</a></li>\n<li><a href=\"https://tinylab.gitbooks.io/linux-doc/content/zh-cn/\">Linux Documentation (中文版)</a></li>\n<li><a href=\"http://happypeter.github.io/LGCB/book/\">Linux Guide for Complete Beginners</a></li>\n<li><a href=\"http://works.jinbuguo.com/lfs/lfs62/index.html\">Linux 构建指南</a></li>\n<li><a href=\"http://sourceforge.net/projects/elpi/\">Linux 系统高级编程</a></li>\n<li><a href=\"https://github.com/me115/linuxtools_rst\">Linux工具快速教程</a></li>\n<li><a href=\"https://aaaaaashu.gitbooks.io/mac-dev-setup/content/\">Mac 开发配置手册</a></li>\n<li><a href=\"http://pages.cs.wisc.edu/~remzi/OSTEP/\">Operating Systems: Three Easy Pieces</a></li>\n<li><a href=\"http://billie66.github.io/TLCL/index.html\">The Linux Command Line</a> (中英文版)</li>\n<li><a href=\"http://wiki.ubuntu.org.cn/UbuntuManual\">Ubuntu 参考手册 </a></li>\n<li><a href=\"https://www.gitbook.com/book/objectkuan/ucore-docs/details\">uCore Lab: Operating System Course in Tsinghua University</a></li>\n<li><a href=\"http://cb.vu/unixtoolbox_zh_CN.xhtml\">UNIX TOOLBOX</a></li>\n<li><a href=\"https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md\">命令行的艺术</a></li>\n<li><a href=\"https://tinylab.gitbooks.io/elinux/content/zh/\">嵌入式 Linux 知识库 (eLinux.org 中文版)</a></li>\n<li><a href=\"http://i.linuxtoy.org/docs/guide/index.html\">开源世界旅行手册</a></li>\n<li><a href=\"http://www.kerneltravel.net/kernel-book/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90Linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81.html\">深入分析Linux内核源码</a></li>\n<li><a href=\"https://github.com/tobegit3hub/understand_linux_process\">理解Linux进程</a></li>\n<li><a href=\"http://vbird.dic.ksu.edu.tw/linux_basic/linux_basic.php\">鸟哥的 Linux 私房菜 基础学习篇</a></li>\n<li><a href=\"http://vbird.dic.ksu.edu.tw/linux_server/\">鸟哥的 Linux 私房菜 服务器架设篇</a></li>\n</ul>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><ul>\n<li><a href=\"http://redisbook.com\">Redis 设计与实现</a></li>\n<li><a href=\"https://github.com/justinyhuang/the-little-mongodb-book-cn\">The Little MongoDB Book 中文版</a></li>\n</ul>\n<h2 id=\"智能系统\"><a href=\"#智能系统\" class=\"headerlink\" title=\"智能系统\"></a>智能系统</h2><ul>\n<li><a href=\"https://github.com/phodal/designiot\">一步步搭建物联网系统</a></li>\n</ul>\n<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><ul>\n<li><a href=\"http://deerchao.net/tutorials/regex/regex.htm\">正则表达式30分钟入门教程</a></li>\n</ul>\n<h2 id=\"版本控制\"><a href=\"#版本控制\" class=\"headerlink\" title=\"版本控制\"></a>版本控制</h2><ul>\n<li><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\">Git - 简易指南</a></li>\n<li><a href=\"https://github.com/flyhigher139/Git-Cheat-Sheet\">Git-Cheat-Sheet</a> （感谢 @flyhigher139 翻译了中文版）</li>\n<li><a href=\"http://gitbook.liuhui998.com\">Git Community Book 中文版</a></li>\n<li><a href=\"http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html\">git-flow 备忘清单</a></li>\n<li><a href=\"http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/\">Git magic</a></li>\n<li><a href=\"http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/\">Git Magic</a></li>\n<li><a href=\"http://gitref.justjavac.com\">Git 参考手册</a></li>\n<li><a href=\"https://github.com/waylau/github-help\">Github帮助文档</a></li>\n<li><a href=\"https://snowdream86.gitbooks.io/github-cheat-sheet/content/zh/\">GitHub秘籍</a></li>\n<li><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">Git教程</a> （本文由 <a href=\"http://weibo.com/liaoxuefeng\">@廖雪峰</a> 创作，如果觉得本教程对您有帮助，可以去 <a href=\"https://itunes.apple.com/cn/app/git-jiao-cheng/id876420437\">iTunes</a> 购买）</li>\n<li><a href=\"https://github.com/gotgit/gotgithub\">Got GitHub</a></li>\n<li><a href=\"http://www.worldhello.net/gotgithub/index.html\">GotGitHub</a></li>\n<li><a href=\"http://bucunzai.net/hginit/\">HgInit (中文版)</a></li>\n<li><a href=\"https://www.mercurial-scm.org/wiki/ChineseTutorial\">Mercurial 使用教程</a></li>\n<li><a href=\"https://git-scm.com/book/zh/v2\">Pro Git</a></li>\n<li><a href=\"https://www.gitbook.com/book/0532/progit/details\">Pro Git 中文版</a> (整理在gitbook上)</li>\n<li><a href=\"http://svnbook.red-bean.com/nightly/zh/index.html\">svn 手册</a></li>\n<li><a href=\"http://pcottle.github.io/learnGitBranching/\">学习 Git 分支</a> (点击右下角按钮可切换至简体及正体中文)</li>\n<li><a href=\"http://igit.linuxtoy.org/index.html\">沉浸式学 Git</a></li>\n<li><a href=\"http://backlogtool.com/git-guide/cn/\">猴子都能懂的GIT入门</a></li>\n</ul>\n<h2 id=\"程序员杂谈\"><a href=\"#程序员杂谈\" class=\"headerlink\" title=\"程序员杂谈\"></a>程序员杂谈</h2><ul>\n<li><a href=\"http://www.kancloud.cn/kancloud/a-programmer-prepares\">程序员的自我修养</a></li>\n</ul>\n<h2 id=\"管理和监控\"><a href=\"#管理和监控\" class=\"headerlink\" title=\"管理和监控\"></a>管理和监控</h2><ul>\n<li><a href=\"https://www.gitbook.com/book/fuxiaopang/learnelasticsearch/details\">ElasticSearch 权威指南</a></li>\n<li><a href=\"http://es.xiaoleilu.com\">Elasticsearch 权威指南（中文版）</a></li>\n<li><a href=\"http://kibana.logstash.es\">ELKstack 中文指南</a></li>\n<li><a href=\"https://github.com/chenryn/logstash-best-practice-cn\">Logstash 最佳实践</a></li>\n<li><a href=\"http://udn.yyuap.com/doc/mastering-elasticsearch/\">Mastering Elasticsearch(中文版)</a></li>\n<li><a href=\"http://bbs.konotes.org/workdoc/puppet-27/\">Puppet 2.7 Cookbook 中文版</a></li>\n</ul>\n<h2 id=\"编程艺术\"><a href=\"#编程艺术\" class=\"headerlink\" title=\"编程艺术\"></a>编程艺术</h2><ul>\n<li><a href=\"http://read.douban.com/ebook/4972883/\">取悦的工序：如何理解游戏</a> (豆瓣阅读，免费书籍)</li>\n<li><a href=\"http://www.oschina.net/translate/what-every-programmer-should-know-about-memory-part1?print\">每个程序员都应该了解的内存知识(译)</a>【第一部分】</li>\n<li><a href=\"https://github.com/julycoding/The-Art-Of-Programming-by-July\">程序员编程艺术</a></li>\n<li><a href=\"http://www.kancloud.cn/kancloud/intro-to-prog/52592\">编程入门指南</a></li>\n</ul>\n<h2 id=\"编译原理\"><a href=\"#编译原理\" class=\"headerlink\" title=\"编译原理\"></a>编译原理</h2><ul>\n<li><a href=\"https://github.com/DeathKing/Learning-SICP\">《计算机程序的结构和解释》公开课 翻译项目</a></li>\n</ul>\n<h2 id=\"编辑器\"><a href=\"#编辑器\" class=\"headerlink\" title=\"编辑器\"></a>编辑器</h2><ul>\n<li><a href=\"http://exvim.github.io/docs-zh/intro/\">exvim–vim 改良成IDE项目</a></li>\n<li><a href=\"https://github.com/vimcn/vimcdoc\">Vim中文文档</a></li>\n<li><a href=\"https://github.com/yangyangwithgnu/use_vim_as_ide\">所需即所获：像 IDE 一样使用 vim</a></li>\n<li><a href=\"http://learnvimscriptthehardway.onefloweroneworld.com\">笨方法学Vimscript 中译本</a></li>\n</ul>\n<h2 id=\"计算机图形学\"><a href=\"#计算机图形学\" class=\"headerlink\" title=\"计算机图形学\"></a>计算机图形学</h2><ul>\n<li><a href=\"https://github.com/zilongshanren/opengl-tutorials\">OpenGL 教程</a></li>\n</ul>\n<h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><ul>\n<li><a href=\"http://blog.csdn.net/lovelion/article/details/17517213\">史上最全设计模式导学目录</a></li>\n<li><a href=\"https://github.com/me115/design_patterns\">图说设计模式</a></li>\n</ul>\n<h2 id=\"软件开发方法\"><a href=\"#软件开发方法\" class=\"headerlink\" title=\"软件开发方法\"></a>软件开发方法</h2><ul>\n<li><a href=\"https://github.com/justinyhuang/Functional-Programming-For-The-Rest-of-Us-Cn\">傻瓜函数编程</a> (《Functional Programming For The Rest of Us》中文版)</li>\n<li><a href=\"http://www.infoq.com/cn/minibooks/scrum-xp-from-the-trenches\">硝烟中的 Scrum 和 XP</a></li>\n</ul>\n<h2 id=\"项目相关\"><a href=\"#项目相关\" class=\"headerlink\" title=\"项目相关\"></a>项目相关</h2><ul>\n<li><a href=\"http://docs.huihoo.com/gnu/linux/gmake.html\">GNU make 指南</a></li>\n<li><a href=\"https://github.com/waylau/Gradle-2-User-Guide\">Gradle 2 用户指南</a></li>\n<li><a href=\"http://yuedu.baidu.com/ebook/f23af265998fcc22bcd10da2\">Gradle 中文使用文档</a></li>\n<li><a href=\"http://local.joelonsoftware.com/wiki/Chinese_(Simplified\">Joel谈软件</a>)</li>\n<li><a href=\"https://github.com/fool2fish/selenium-doc\">selenium 中文文档</a></li>\n<li><a href=\"http://www.ituring.com.cn/book/1143\">开源软件架构</a></li>\n<li><a href=\"http://article.yeeyan.org/view/2251/94882\">持续集成（第二版）</a> (译言网)</li>\n<li><a href=\"http://local.joelonsoftware.com/wiki/%E9%A6%96%E9%A0%81\">約耳談軟體(Joel on Software)</a></li>\n<li><a href=\"https://github.com/ecomfe/spec\">编码规范</a></li>\n<li><a href=\"http://www.ibm.com/developerworks/cn/java/j-ap/\">让开发自动化系列专栏</a></li>\n<li><a href=\"http://www.ibm.com/developerworks/cn/java/j-cq/\">追求代码质量</a></li>\n</ul>\n<h2 id=\"语言相关\"><a href=\"#语言相关\" class=\"headerlink\" title=\"语言相关\"></a>语言相关</h2><h2 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h2><ul>\n<li><a href=\"http://www.apkbus.com/design/index.html\">Android Design(中文版)</a></li>\n<li><a href=\"https://github.com/CharonChui/AndroidNote\">Android Note(开发过程中积累的知识点)</a></li>\n<li><a href=\"http://leanote.com/blog/post/561658f938f41126b2000298?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\">Android6.0新特性详解</a></li>\n<li><a href=\"http://stormzhang.github.io/android/2014/07/07/learn-android-from-rookie/\">Android学习之路</a></li>\n<li><a href=\"https://github.com/bboyfeiyu/android-tech-frontier\">Android开发技术前线(android-tech-frontier)</a></li>\n<li><a href=\"http://hukai.me/android-training-course-in-chinese/index.html\">Google Android官方培训课程中文版</a></li>\n<li>Google Material Design 正體中文版 (<a href=\"https://wcc723.gitbooks.io/google_design_translate/content/style-icons.html\">译本一</a> <a href=\"https://github.com/1sters/material_design_zh\">译本二</a>)</li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/material-design/\">Material Design 中文版</a></li>\n<li><a href=\"https://github.com/FX-Max/Point-of-Android\">Point-of-Android</a> Android 一些重要知识点解析整理</li>\n</ul>\n<h2 id=\"AWK\"><a href=\"#AWK\" class=\"headerlink\" title=\"AWK\"></a>AWK</h2><ul>\n<li><a href=\"http://awk.readthedocs.org/en/latest/index.html\">awk中文指南</a></li>\n<li><a href=\"https://github.com/wuzhouhui/awk\">awk程序设计语言</a></li>\n</ul>\n<h2 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a>C</h2><ul>\n<li><a href=\"http://c-faq-chn.sourceforge.net/ccfaq/ccfaq.html\">C 语言常见问题集</a></li>\n<li><a href=\"http://doc.lellansin.com\">C/C++ 学习教程</a></li>\n<li><a href=\"http://docs.linuxtone.org/ebooks/C&amp;CPP/c/\">Linux C 编程一站式学习</a></li>\n<li><a href=\"https://github.com/limingth/NCCL\">新概念 C 语言教程</a></li>\n</ul>\n<h2 id=\"C-Sharp\"><a href=\"#C-Sharp\" class=\"headerlink\" title=\"C Sharp\"></a>C Sharp</h2><ul>\n<li><a href=\"http://book.douban.com/subject/24827879/\">精通C#(第6版) </a></li>\n</ul>\n<h2 id=\"C-1\"><a href=\"#C-1\" class=\"headerlink\" title=\"C++\"></a>C++</h2><ul>\n<li><a href=\"https://github.com/hellogcc/100-gcc-tips/blob/master/src/index.md\">100个gcc小技巧</a></li>\n<li><a href=\"https://github.com/hellogcc/100-gdb-tips/blob/master/src/index.md\">100个gdb小技巧</a></li>\n<li><a href=\"https://tinylab.gitbooks.io/cbook/content/\">C 语言编程透视</a></li>\n<li><a href=\"https://github.com/andycai/cprimer\">C/C++ Primer</a> - @andycai</li>\n<li><a href=\"http://www.sunistudio.com/cppfaq/\">C++ FAQ LITE(中文版)</a></li>\n<li><a href=\"https://github.com/Mooophy/Cpp-Primer\">C++ Primer 5th Answers</a></li>\n<li><a href=\"https://github.com/wuye9036/CppTemplateTutorial\">C++ Template 进阶指南</a></li>\n<li><a href=\"http://www.prglab.com/cms/\">C++ 基础教程</a></li>\n<li><a href=\"https://chenxiaowei.gitbooks.io/cpp_concurrency_in_action/content/\">C++ 并发编程(基于C++11)</a></li>\n<li><a href=\"https://github.com/forhappy/Cplusplus-Concurrency-In-Practice\">C++ 并发编程指南</a></li>\n<li><a href=\"https://github.com/leeyiw/cgdb-manual-in-chinese\">CGDB中文手册</a></li>\n<li><a href=\"http://sewm.pku.edu.cn/src/paradise/reference/CMake%20Practice.pdf\">Cmake 实践</a> (PDF版)</li>\n<li><a href=\"http://docs.huihoo.com/gnu/linux/gmake.html\">GNU make 指南</a></li>\n<li><a href=\"http://zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/contents/\">Google C++ 风格指南</a></li>\n<li><a href=\"http://www.kuqin.com/qtdocument/tutorial.html\">QT 教程</a></li>\n<li><a href=\"https://github.com/anjuke/zguide-cn\">ZMQ 指南</a></li>\n<li><a href=\"http://www.ituring.com.cn/book/1203\">像计算机科学家一样思考（C++版)</a> (《How To Think Like a Computer Scientist: C++ Version》中文版)</li>\n<li><a href=\"http://www.nowamagic.net/librarys/books/contents/c\">简单易懂的C魔法</a></li>\n<li><a href=\"http://scc.qibebt.cas.cn/docs/linux/base/%B8%FA%CE%D2%D2%BB%C6%F0%D0%B4Makefile-%B3%C2%F0%A9.pdf\">跟我一起写Makefile(PDF)</a> (PDF)</li>\n</ul>\n<h2 id=\"CoffeeScript\"><a href=\"#CoffeeScript\" class=\"headerlink\" title=\"CoffeeScript\"></a>CoffeeScript</h2><ul>\n<li><a href=\"http://coffee-script.org\">CoffeeScript 中文</a></li>\n<li><a href=\"https://github.com/elrrrrrrr/coffeescript-style-guide/blob/master/README-ZH.md\">CoffeeScript 编程风格指南</a></li>\n</ul>\n<h2 id=\"Dart\"><a href=\"#Dart\" class=\"headerlink\" title=\"Dart\"></a>Dart</h2><ul>\n<li><a href=\"http://dart.lidian.info/wiki/Language_Tour\">Dart 语言导览</a></li>\n</ul>\n<h2 id=\"Elasticsearch\"><a href=\"#Elasticsearch\" class=\"headerlink\" title=\"Elasticsearch\"></a>Elasticsearch</h2><ul>\n<li><a href=\"https://github.com/looly/elasticsearch-definitive-guide-cn\">Elasticsearch 权威指南</a> （《Elasticsearch the definitive guide》中文版）</li>\n<li><a href=\"http://kibana.logstash.es\">ELKstack 中文指南</a></li>\n<li><a href=\"http://udn.yyuap.com/doc/mastering-elasticsearch/\">Mastering Elasticsearch(中文版)</a></li>\n</ul>\n<h2 id=\"Elixir\"><a href=\"#Elixir\" class=\"headerlink\" title=\"Elixir\"></a>Elixir</h2><ul>\n<li><a href=\"https://github.com/Ljzn/ElixrGettingStartedChinese\">Elixir Getting Started 中文翻译</a></li>\n<li><a href=\"https://elixirschool.com/cn/\">Elixir 编程语言教程</a> (Elixir School)</li>\n<li><a href=\"https://github.com/Ljzn/MetaProgrammingInElixirChinese\">Elixir元编程与DSL 中文翻译</a></li>\n<li><a href=\"https://mydearxym.gitbooks.io/phoenix-doc-in-chinese/content/\">Phoenix 框架中文文档</a></li>\n</ul>\n<h2 id=\"Erlang\"><a href=\"#Erlang\" class=\"headerlink\" title=\"Erlang\"></a>Erlang</h2><ul>\n<li><a href=\"https://github.com/liancheng/cpie-cn\">Erlang 并发编程</a> (《Concurrent Programming in Erlang (Part I)》中文版)</li>\n</ul>\n<h2 id=\"Fortran\"><a href=\"#Fortran\" class=\"headerlink\" title=\"Fortran\"></a>Fortran</h2><ul>\n<li><a href=\"http://micro.ustc.edu.cn/Fortran/ZJDing/\">Fortran77和90/95编程入门</a></li>\n</ul>\n<h2 id=\"Golang\"><a href=\"#Golang\" class=\"headerlink\" title=\"Golang\"></a>Golang</h2><ul>\n<li><a href=\"http://www.hellogcc.org/effective_go.html\">Effective Go</a></li>\n<li><a href=\"https://github.com/astaxie/build-web-application-with-golang\">Go Web 编程</a></li>\n<li><a href=\"https://github.com/Unknwon/the-way-to-go_ZH_CN\">Go 入门指南</a> (《The Way to Go》中文版)</li>\n<li><a href=\"https://github.com/golang-china/golangdoc.translations\">Go 官方文档翻译</a></li>\n<li><a href=\"http://go-tour-zh.appsp0t.com\">Go 指南</a> (《A Tour of Go》中文版)</li>\n<li><a href=\"https://github.com/songleo/the-little-go-book_ZH_CN\">Go 简易教程</a> (《<a href=\"https://github.com/karlseguin/the-little-go-book\">The Little Go Book</a>》中文版)</li>\n<li><a href=\"https://github.com/Unknwon/go-fundamental-programming\">Go 编程基础</a></li>\n<li><a href=\"https://github.com/polaris1119/The-Golang-Standard-Library-by-Example\">Go 语言标准库</a></li>\n<li><a href=\"https://github.com/hyper-carrot/go_command_tutorial\">Go命令教程</a></li>\n<li><a href=\"https://github.com/astaxie/Go-in-Action\">Go实战开发</a></li>\n<li><a href=\"https://github.com/achun/Go-Blog-In-Action\">Go语言博客实践</a></li>\n<li><a href=\"http://blog.csdn.net/dc_726/article/details/46565241\">Java程序员的Golang入门指南</a></li>\n<li><a href=\"https://github.com/astaxie/NPWG_zh\">Network programming with Go 中文翻译版本</a></li>\n<li><a href=\"http://gorevel.cn/docs/manual/index.html\">Revel 框架手册</a></li>\n<li><a href=\"http://mikespook.com/learning-go/\">学习Go语言</a></li>\n</ul>\n<h2 id=\"Groovy\"><a href=\"#Groovy\" class=\"headerlink\" title=\"Groovy\"></a>Groovy</h2><ul>\n<li><a href=\"http://www.ibm.com/developerworks/cn/java/j-pg/\">实战 Groovy 系列</a></li>\n</ul>\n<h2 id=\"Haskell\"><a href=\"#Haskell\" class=\"headerlink\" title=\"Haskell\"></a>Haskell</h2><ul>\n<li><a href=\"http://learnyoua.haskell.sg\">Haskell 趣学指南</a></li>\n<li><a href=\"http://cnhaskell.com\">Real World Haskell 中文版</a></li>\n</ul>\n<h2 id=\"HTML-CSS\"><a href=\"#HTML-CSS\" class=\"headerlink\" title=\"HTML / CSS\"></a>HTML / CSS</h2><ul>\n<li><a href=\"https://github.com/waylau/css3-tutorial\">CSS3 Tutorial 《CSS3 教程》</a></li>\n<li><a href=\"http://css.doyoe.com\">CSS参考手册</a></li>\n<li><a href=\"http://yanxyz.github.io/emmet-docs/\">Emmet 文档</a></li>\n<li><a href=\"http://www.w3school.com.cn/html5/\">HTML5 教程</a></li>\n<li><a href=\"http://codeguide.bootcss.com\">HTML和CSS编码规范</a></li>\n<li><a href=\"http://sass-guidelin.es/zh/\">Sass Guidelines 中文</a></li>\n<li><a href=\"http://alloyteam.github.io/CodeGuide/\">前端代码规范</a> (腾讯 AlloyTeam 团队)</li>\n<li><a href=\"http://zh.learnlayout.com\">学习CSS布局</a></li>\n<li><a href=\"https://github.com/chadluo/CSS-Guidelines/blob/master/README.md\">通用 CSS 笔记、建议与指导</a></li>\n</ul>\n<h2 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h2><ul>\n<li><a href=\"http://nilsun.github.io/apple-watch/\">Apple Watch开发初探</a></li>\n<li><a href=\"http://zh-google-styleguide.readthedocs.org/en/latest/google-objc-styleguide/\">Google Objective-C Style Guide 中文版</a></li>\n<li><a href=\"http://isux.tencent.com/ios-human-interface-guidelines-ui-design-basics-ios7.html\">iOS7人机界面指南</a></li>\n<li><a href=\"https://github.com/qinjx/30min_guides/blob/master/ios.md\">iOS开发60分钟入门</a></li>\n<li><a href=\"http://wileam.com/iphone-6-screen-cn/\">iPhone 6 屏幕揭秘</a></li>\n<li><a href=\"https://github.com/jkyin/Subtitle\">网易斯坦福大学公开课：iOS 7应用开发字幕文件</a></li>\n</ul>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><ul>\n<li><a href=\"https://github.com/waylau/activiti-5.x-user-guide\">Activiti 5.x 用户指南</a></li>\n<li><a href=\"https://github.com/waylau/apache-mina-2.x-user-guide\">Apache MINA 2 用户指南</a></li>\n<li><a href=\"https://github.com/waylau/apache-shiro-1.2.x-reference\">Apache Shiro 用户指南</a></li>\n<li><a href=\"http://www.hawstein.com/posts/google-java-style.html\">Google Java编程风格指南</a></li>\n<li><a href=\"https://github.com/waylau/h2-database-doc\">H2 Database 教程</a></li>\n<li><a href=\"https://github.com/waylau/servlet-3.1-specification\">Java Servlet 3.1 规范</a></li>\n<li><a href=\"https://github.com/waylau/java-code-conventions\">Java 编码规范</a></li>\n<li><a href=\"https://github.com/waylau/Jersey-2.x-User-Guide\">Jersey 2.x 用户指南</a></li>\n<li><a href=\"https://github.com/waylau/jsse-reference-guide\">JSSE 参考指南</a></li>\n<li><a href=\"http://mybatis.github.io/mybatis-3/zh/index.html\">MyBatis中文文档</a></li>\n<li><a href=\"https://github.com/waylau/netty-4-user-guide\">Netty 4.x 用户指南</a></li>\n<li><a href=\"https://github.com/waylau/essential-netty-in-action\">Netty 实战(精髓)</a></li>\n<li><a href=\"https://github.com/waylau/rest-in-action\">REST 实战</a></li>\n<li><a href=\"https://github.com/qibaoguang/Spring-Boot-Reference-Guide\">Spring Boot参考指南</a> (翻译中)</li>\n<li><a href=\"https://github.com/waylau/spring-framework-4-reference\">Spring Framework 4.x参考文档</a></li>\n<li><a href=\"https://github.com/waylau/RestDemo\">用jersey构建REST服务</a></li>\n</ul>\n<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h2><ul>\n<li><a href=\"https://github.com/adamlu/javascript-style-guide\">Airbnb JavaScript 规范</a></li>\n<li>AngularJS<ul>\n<li><a href=\"https://github.com/peiransun/angularjs-cn\">AngularJS中译本</a></li>\n<li><a href=\"https://github.com/zensh/AngularjsTutorial_cn\">AngularJS入门教程</a></li>\n<li><a href=\"https://github.com/mgechev/angularjs-style-guide/blob/master/README-zh-cn.md\">AngularJS最佳实践和风格指南</a></li>\n<li><a href=\"http://www.waylau.com/build-angularjs-app-with-yeoman-in-windows/\">在Windows环境下用Yeoman构建AngularJS项目</a></li>\n<li><a href=\"https://github.com/xufei/Make-Your-Own-AngularJS/blob/master/01.md\">构建自己的AngularJS</a></li>\n</ul>\n</li>\n<li>backbone.js<ul>\n<li><a href=\"http://www.css88.com/doc/backbone/\">backbone.js中文文档</a></li>\n<li><a href=\"http://www.the5fire.com/backbone-js-tutorials-pdf-download.html\">backbone.js入门教程</a> (PDF)</li>\n<li><a href=\"https://github.com/the5fire/backbonejs-learning-note\">Backbone.js入门教程第二版</a></li>\n<li><a href=\"http://feliving.github.io/developing-backbone-applications\">Developing Backbone.js Applications(中文版)</a></li>\n</ul>\n</li>\n<li><a href=\"http://www.ituring.com.cn/minibook/950\">Chrome扩展及应用开发</a></li>\n<li>CoffeeScript<ul>\n<li><a href=\"https://github.com/geekplux/coffeescript-style-guide\">CoffeeScript 编码风格指南</a></li>\n</ul>\n</li>\n<li>D3.js<ul>\n<li><a href=\"http://www.ourd3js.com/wordpress/?cat=2\">D3.js 入门系列</a> (还有进阶、高级等系列)</li>\n<li><a href=\"https://github.com/mbostock/d3/wiki/API--%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C\">官方API文档</a></li>\n<li><a href=\"http://blog.csdn.net/zhang__tianxu/article/category/1623437\">张天旭的D3教程</a></li>\n<li><a href=\"http://www.cnblogs.com/winleisure/tag/D3.js/\">楚狂人的D3教程</a></li>\n</ul>\n</li>\n<li><a href=\"http://es6.ruanyifeng.com\">ECMAScript 6 入门</a> (作者：阮一峰)</li>\n<li>ExtJS<ul>\n<li><a href=\"http://extjs-doc-cn.github.io/ext4api/\">Ext4.1.0 中文文档</a></li>\n</ul>\n</li>\n<li><a href=\"http://bq69.com/blog/articles/script/868/google-javascript-style-guide.html\">Google JavaScript 代码风格指南</a></li>\n<li><a href=\"https://github.com/darcyliu/google-styleguide/blob/master/JSONStyleGuide.md\">Google JSON 风格指南</a></li>\n<li>impress.js<ul>\n<li><a href=\"https://github.com/kokdemo/impress.js-tutorial-in-Chinese\">impress.js的中文教程</a></li>\n</ul>\n</li>\n<li><a href=\"http://liubin.github.io/promises-book/\">JavaScript Promise迷你书</a></li>\n<li><a href=\"http://typeof.net/s/jsmech/\">Javascript 原理</a></li>\n<li><a href=\"http://javascript.ruanyifeng.com\">JavaScript 标准参考教程（alpha）</a></li>\n<li><a href=\"https://github.com/jayli/javascript-patterns\">《JavaScript 模式》</a> “JavaScript patterns”中译本</li>\n<li><a href=\"https://github.com/justjavac/12-javascript-quirks\">javascript 的 12 个怪癖</a></li>\n<li><a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/\">JavaScript 秘密花园</a></li>\n<li><a href=\"http://icodeit.org/jsccp/\">JavaScript核心概念及实践</a> (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者)</li>\n<li><a href=\"http://pij.robinqu.me\">Javascript编程指南</a> (<a href=\"https://github.com/RobinQu/Programing-In-Javascript\">源码</a>)</li>\n<li>jQuery<ul>\n<li><a href=\"http://i5ting.github.io/How-to-write-jQuery-plugin/build/jquery.plugin.html\">How to write jQuery plugin</a></li>\n<li><a href=\"http://www.nowamagic.net/librarys/books/contents/jquery\">简单易懂的JQuery魔法</a></li>\n</ul>\n</li>\n<li>Meteor<ul>\n<li><a href=\"http://zh.discovermeteor.com\">Discover Meteor</a></li>\n</ul>\n</li>\n<li>Node.js<ul>\n<li><a href=\"http://expressjs.jser.us\">express.js 中文文档</a></li>\n<li><a href=\"http://javascript.ruanyifeng.com/nodejs/express.html\">Express框架</a></li>\n<li><a href=\"https://github.com/guo-yu/koa-guide\">koa 中文文档</a></li>\n<li><a href=\"https://www.npmjs.com/package/learnyounode-zh-cn\">Learn You The Node.js For Much Win! (中文版)</a></li>\n<li><a href=\"http://i5ting.github.io/node-debug-tutorial/\">Node debug 三法三例</a></li>\n<li><a href=\"https://github.com/jollen/nodejs-fullstack-lessons\">Node.js Fullstack《從零到一的進撃》</a></li>\n<li><a href=\"https://github.com/alsotang/node-lessons\">Node.js 包教不包会</a></li>\n<li><a href=\"https://github.com/nodejs-tw/nodejs-wiki-book\">Nodejs Wiki Book</a> (繁体中文)</li>\n<li><a href=\"https://www.gitbook.com/book/0532/nodejs/details\">nodejs中文文档</a></li>\n<li><a href=\"http://www.nodebeginner.org/index-zh-cn.html\">Node入门</a></li>\n<li><a href=\"http://nqdeng.github.io/7-days-nodejs/\">七天学会NodeJS</a></li>\n<li><a href=\"https://github.com/nswbmw/N-blog\">使用 Express + MongoDB 搭建多人博客</a></li>\n</ul>\n</li>\n<li>React.js<ul>\n<li><a href=\"https://github.com/theJian/build-a-hn-front-page\">Learn React &amp; Webpack by building the Hacker News front page</a></li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/react-native/\">React Native 中文文档(含最新Android内容)</a></li>\n<li><a href=\"https://github.com/fakefish/react-webpack-cookbook\">React webpack-cookbook</a></li>\n<li><a href=\"http://fraserxu.me/intro-to-react/\">React 入门教程</a></li>\n<li><a href=\"http://reactjs.cn\">React.js 中文文档</a></li>\n</ul>\n</li>\n<li>underscore.js<ul>\n<li><a href=\"http://learningcn.com/underscore/\">Underscore.js中文文档</a></li>\n</ul>\n</li>\n<li><a href=\"https://github.com/getify/You-Dont-Know-JS\">You-Dont-Know-JS</a> (深入JavaScript语言核心机制的系列图书)</li>\n<li>Zepto.js<ul>\n<li><a href=\"http://mweb.baidu.com/zeptoapi/\">Zepto.js 中文文档</a></li>\n</ul>\n</li>\n<li><a href=\"http://justjavac.com/named-function-expressions-demystified.html\">命名函数表达式探秘</a>  (注:原文由<a href=\"http://www.cn-cuckoo.com\">为之漫笔</a> 翻译，原始地址无法打开，所以此处地址为我博客上的备份)</li>\n<li><a href=\"http://www.oschina.net/translate/learning-javascript-design-patterns\">学用 JavaScript 设计模式</a> (开源中国)</li>\n<li><a href=\"http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html\">深入理解JavaScript系列</a></li>\n</ul>\n<h2 id=\"LaTeX\"><a href=\"#LaTeX\" class=\"headerlink\" title=\"LaTeX\"></a>LaTeX</h2><ul>\n<li><a href=\"http://www.dralpha.com/zh/tech/tech.htm\">LaTeX 笔记</a></li>\n<li><a href=\"http://ctan.org/pkg/lshort-zh-cn\">一份不太简短的 LaTeX2ε 介绍</a></li>\n<li><a href=\"https://github.com/49951331/graduate-project-102pj/blob/master/docs/latex123.pdf\">大家來學 LaTeX</a> (PDF)</li>\n</ul>\n<h2 id=\"LISP\"><a href=\"#LISP\" class=\"headerlink\" title=\"LISP\"></a>LISP</h2><ul>\n<li><a href=\"http://acl.readthedocs.org/en/latest/\">ANSI Common Lisp 中文翻译版</a></li>\n<li><a href=\"http://www.ituring.com.cn/minibook/862\">Common Lisp 高级编程技术</a> (《On Lisp》中文版)</li>\n</ul>\n<h2 id=\"Lua\"><a href=\"#Lua\" class=\"headerlink\" title=\"Lua\"></a>Lua</h2><ul>\n<li><a href=\"http://www.w3cschool.cc/manual/lua53doc/contents.html\">Lua 5.3 参考手册</a></li>\n</ul>\n<h2 id=\"Markdown\"><a href=\"#Markdown\" class=\"headerlink\" title=\"Markdown\"></a>Markdown</h2><ul>\n<li><a href=\"http://wowubuntu.com/markdown/basic.html\">Markdown 快速入门</a></li>\n<li><a href=\"http://www.jianshu.com/p/7bd23251da0a\">Markdown 简明教程</a></li>\n<li><a href=\"http://wowubuntu.com/markdown/\">Markdown 语法说明</a></li>\n<li><a href=\"http://www.jianshu.com/p/q81RER\">献给写作者的 Markdown 新手指南</a></li>\n</ul>\n<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><ul>\n<li><a href=\"http://www.nodebeginner.org/index-zh-cn.html\">Node 入门</a></li>\n<li><a href=\"https://www.gitbook.com/book/0532/nodejs/details\">The NodeJS 中文文档</a>（社区翻译）</li>\n<li><a href=\"http://nqdeng.github.io/7-days-nodejs/\">七天学会NodeJS</a> 阿里出品，很好的入门资料</li>\n</ul>\n<h2 id=\"Perl\"><a href=\"#Perl\" class=\"headerlink\" title=\"Perl\"></a>Perl</h2><ul>\n<li><a href=\"https://github.com/fayland/chinese-perl-book\">Master Perl Today</a></li>\n<li><a href=\"https://github.com/horus/modern_perl_book\">《Modern Perl》中文版</a></li>\n<li><a href=\"http://www.cbi.pku.edu.cn/chinese/documents/perl/index.htm\">Perl 5 教程</a></li>\n<li><a href=\"http://www.yiibai.com/perl\">Perl 教程</a></li>\n</ul>\n<h2 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h2><ul>\n<li><a href=\"http://wulijun.github.io/php-the-right-way/\">PHP 之道</a></li>\n<li><a href=\"http://php.net/manual/zh/\">PHP5中文手册</a></li>\n<li><a href=\"http://www.walu.cc/phpbook/preface.md\">PHP扩展开发及内核应用</a></li>\n<li><a href=\"https://wusuopu.gitbooks.io/symfony2_tutorial/content\">Symfony2 实例教程</a></li>\n<li><a href=\"http://www.php-internals.com/book/\">深入理解 PHP 内核</a></li>\n</ul>\n<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h2><ul>\n<li><a href=\"http://djangobook.py3k.cn/2.0/\">Django book 2.0</a></li>\n<li><a href=\"http://docspy3zh.readthedocs.org/en/latest/\">Python 3 文档(简体中文) 3.2.2 documentation</a></li>\n<li><a href=\"http://www.pythondoc.com\">Python 中文学习大本营</a></li>\n<li><a href=\"https://github.com/jiechic/diveintopython3\">深入 Python 3</a></li>\n<li><a href=\"http://old.sebug.net/paper/books/LearnPythonTheHardWay/\">笨办法学 Python</a></li>\n</ul>\n<h2 id=\"R\"><a href=\"#R\" class=\"headerlink\" title=\"R\"></a>R</h2><ul>\n<li><a href=\"http://cran.r-project.org/doc/contrib/Liu-FAQ.pdf\">153分钟学会 R</a> (PDF)</li>\n<li><a href=\"http://www.biosino.org/R/R-doc/files/R4beg_cn_2.0.pdf\">《R for beginners》中文版</a> (PDF)</li>\n<li><a href=\"http://cran.r-project.org/doc/contrib/Ding-R-intro_cn.pdf\">R 导论</a> (《An Introduction to R》中文版) (PDF)</li>\n<li><a href=\"http://yanping.me/shiny-tutorial/\">用 R 构建 Shiny 应用程序</a> (《Building ‘Shiny’ Applications with R》中文版)</li>\n<li><a href=\"http://cran.r-project.org/doc/contrib/Xu-Statistics_and_R.pdf\">统计学与 R 读书笔记</a> (PDF)</li>\n</ul>\n<h2 id=\"reStructuredText\"><a href=\"#reStructuredText\" class=\"headerlink\" title=\"reStructuredText\"></a>reStructuredText</h2><ul>\n<li><a href=\"http://www.pythondoc.com/sphinx/rest.html\">reStructuredText 入门</a></li>\n<li><a href=\"http://jwch.sdut.edu.cn/book/rst.html\">reStructuredText 简明教程</a></li>\n</ul>\n<h2 id=\"Ruby\"><a href=\"#Ruby\" class=\"headerlink\" title=\"Ruby\"></a>Ruby</h2><ul>\n<li><a href=\"https://github.com/JuanitoFatas/rails-style-guide/blob/master/README-zhCN.md\">Rails 风格指南</a></li>\n<li><a href=\"http://railstutorial-china.org\">Ruby on Rails Tutorial 原书第 2 版</a></li>\n<li><a href=\"https://ihower.tw/rails4/\">Ruby on Rails 实战圣经</a></li>\n<li><a href=\"https://github.com/JuanitoFatas/ruby-style-guide/blob/master/README-zhCN.md\">Ruby 风格指南</a></li>\n<li><a href=\"http://lrthw.github.io\">笨方法学 Ruby</a></li>\n</ul>\n<h2 id=\"Rust\"><a href=\"#Rust\" class=\"headerlink\" title=\"Rust\"></a>Rust</h2><ul>\n<li><a href=\"https://github.com/KaiserY/rust-book-chinese\">Rust 官方教程</a></li>\n<li><a href=\"https://github.com/photino/rust-notes\">Rust 语言学习笔记</a></li>\n<li><a href=\"https://github.com/rustcc/RustPrimer\">RustPrimer</a></li>\n<li><a href=\"https://github.com/rustcc/rust-by-example/\">通过例子学习 Rust</a></li>\n</ul>\n<h2 id=\"Scala\"><a href=\"#Scala\" class=\"headerlink\" title=\"Scala\"></a>Scala</h2><ul>\n<li><a href=\"http://twitter.github.io/effectivescala/index-cn.html\">Effective Scala</a></li>\n<li><a href=\"https://www.gitbook.com/book/windor/beginners-guide-to-scala/details\">Scala 初学者指南</a> (The Neophyte’s Guide to Scala)</li>\n<li><a href=\"http://twitter.github.io/scala_school/zh_cn/index.html\">Scala 课堂</a> (Twitter的Scala中文教程)</li>\n</ul>\n<h2 id=\"Scheme\"><a href=\"#Scheme\" class=\"headerlink\" title=\"Scheme\"></a>Scheme</h2><ul>\n<li><a href=\"http://deathking.github.io/yast-cn/\">Scheme 入门教程</a> (《Yet Another Scheme Tutorial》中文版)</li>\n</ul>\n<h2 id=\"Shell\"><a href=\"#Shell\" class=\"headerlink\" title=\"Shell\"></a>Shell</h2><ul>\n<li><a href=\"http://wiki.ubuntu.org.cn/Shell%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80\">Shell 编程基础</a></li>\n<li><a href=\"https://github.com/qinjx/30min_guides/blob/master/shell.md\">Shell 脚本编程30分钟入门</a></li>\n<li><a href=\"http://billie66.github.io/TLCL/book/zh\">The Linux Command Line 中文版</a></li>\n</ul>\n<h2 id=\"Swift\"><a href=\"#Swift\" class=\"headerlink\" title=\"Swift\"></a>Swift</h2><ul>\n<li><a href=\"https://www.gitbook.com/book/numbbbbb/-the-swift-programming-language-/details\">《The Swift Programming Language》中文版</a></li>\n</ul>\n<h2 id=\"Vim\"><a href=\"#Vim\" class=\"headerlink\" title=\"Vim\"></a>Vim</h2><ul>\n<li><a href=\"http://man.chinaunix.net/newsoft/vi/doc/help.html\">Vim Manual(中文版)</a></li>\n<li><a href=\"http://www.study-area.org/tips/vim/index.html\">大家來學 VIM</a></li>\n</ul>\n<h2 id=\"Visual-Prolog\"><a href=\"#Visual-Prolog\" class=\"headerlink\" title=\"Visual Prolog\"></a>Visual Prolog</h2><ul>\n<li><a href=\"http://wiki.visual-prolog.com/index.php?title=A_Beginners_Guide_to_Visual_Prolog_in_Chinese\">Visual Prolog 7初学指南</a></li>\n<li><a href=\"http://wiki.visual-prolog.com/index.php?title=Visual_Prolog_for_Tyros_in_Chinese\">Visual Prolog 7边练边学</a></li>\n</ul>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"使用Ghost搭建个人博客","date":"2016-05-03T23:59:22.000Z","_content":"** 使用ghost搭建个人博客：** <Excerpt in index | 首页摘要>\n\t使用ghost搭建个人博客\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## ghost简介\n- ghost是轻量级的博客建站工具,使用起来简单,功能强大,适合个人搭建小型网站,个人博客,或者个人展示的网站\n- ghost基于nodejs,对于熟悉js的前端小伙伴来说,入手起来也是简单不少.\n\n## 准备工作\n1. 安装nodejs\n2. 安转git\n3. 配置ssh\n4. 下载ghost\n3. 购买域名\n\n## 搭建博客\n\n## 定制个人博客\n\n## 享受吧\n","source":"_posts/ghost-blog.md","raw":"title: 使用ghost搭建个人博客\ndate: 2016-05-04 07:59:22\ntags: others\ncategories: 开发工具\n---\n** 使用ghost搭建个人博客：** <Excerpt in index | 首页摘要>\n\t使用ghost搭建个人博客\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## ghost简介\n- ghost是轻量级的博客建站工具,使用起来简单,功能强大,适合个人搭建小型网站,个人博客,或者个人展示的网站\n- ghost基于nodejs,对于熟悉js的前端小伙伴来说,入手起来也是简单不少.\n\n## 准备工作\n1. 安装nodejs\n2. 安转git\n3. 配置ssh\n4. 下载ghost\n3. 购买域名\n\n## 搭建博客\n\n## 定制个人博客\n\n## 享受吧\n","slug":"ghost-blog","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla6000148p9kuk4zgbz6","content":"<p><strong> 使用ghost搭建个人博客：</strong> <Excerpt in index | 首页摘要><br>    使用ghost搭建个人博客<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"ghost简介\"><a href=\"#ghost简介\" class=\"headerlink\" title=\"ghost简介\"></a>ghost简介</h2><ul>\n<li>ghost是轻量级的博客建站工具,使用起来简单,功能强大,适合个人搭建小型网站,个人博客,或者个人展示的网站</li>\n<li>ghost基于nodejs,对于熟悉js的前端小伙伴来说,入手起来也是简单不少.</li>\n</ul>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ol>\n<li>安装nodejs</li>\n<li>安转git</li>\n<li>配置ssh</li>\n<li>下载ghost</li>\n<li>购买域名</li>\n</ol>\n<h2 id=\"搭建博客\"><a href=\"#搭建博客\" class=\"headerlink\" title=\"搭建博客\"></a>搭建博客</h2><h2 id=\"定制个人博客\"><a href=\"#定制个人博客\" class=\"headerlink\" title=\"定制个人博客\"></a>定制个人博客</h2><h2 id=\"享受吧\"><a href=\"#享受吧\" class=\"headerlink\" title=\"享受吧\"></a>享受吧</h2>","excerpt":"<p><strong> 使用ghost搭建个人博客：</strong> <Excerpt in index | 首页摘要><br>    使用ghost搭建个人博客<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"ghost简介\"><a href=\"#ghost简介\" class=\"headerlink\" title=\"ghost简介\"></a>ghost简介</h2><ul>\n<li>ghost是轻量级的博客建站工具,使用起来简单,功能强大,适合个人搭建小型网站,个人博客,或者个人展示的网站</li>\n<li>ghost基于nodejs,对于熟悉js的前端小伙伴来说,入手起来也是简单不少.</li>\n</ul>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ol>\n<li>安装nodejs</li>\n<li>安转git</li>\n<li>配置ssh</li>\n<li>下载ghost</li>\n<li>购买域名</li>\n</ol>\n<h2 id=\"搭建博客\"><a href=\"#搭建博客\" class=\"headerlink\" title=\"搭建博客\"></a>搭建博客</h2><h2 id=\"定制个人博客\"><a href=\"#定制个人博客\" class=\"headerlink\" title=\"定制个人博客\"></a>定制个人博客</h2><h2 id=\"享受吧\"><a href=\"#享受吧\" class=\"headerlink\" title=\"享受吧\"></a>享受吧</h2>"},{"title":"Git比svn的优势","date":"2016-05-22T03:13:00.000Z","_content":"** git比svn的优势：** <Excerpt in index | 首页摘要>\n    主要介绍svn和git在使用的时候一些区别\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 合并操作时对提交过程的保留\n- git:合并操作保留原有的提交过程\n- svn:多个提交合并为一个提交\n- 不用因为合并操作而导致追踪的困难\n\n## 修正提交\n- git：可以修正提交。  \n使用功能分支工作流，在自己的分支可以方便修正提交而不会影响大家。\n- svn：一旦提交就到服务器上，实际使用中就是不能修改  \n（svn可以在服务器上修改，因为过程复杂需要权限实际上从不会这样做）\n\n\n## 本地分支\n- git可以方便的创建本地分支,创建时间极短,分支可以是本地的,不会存在svn中目录权限的问题\n\n## 强大的合并能力\n- git：重命名（无论文件还有目录）提交 可以合并上 文件重命名前的这些文件的提交\n\n- svn：重命名（无论文件还有目录）提交后，你本地/或是分支上 有文件重命名前的这些文件的修改或提交，在做合并操作时,你会碰上传说中难搞的***树冲突***！\n\n- 这就导致在调整目录名称和类名调整的时候比较繁琐,需要告诉大家,我修改完以后你再修改\n\n\n## tag的支持\n\n- svn在模型上是没有分支和tag的。tag是通过目录权限限制（对开发只读）来保证不变。\n- git模型上一等公民支持tag，保证只读。\n\n## 速度优势\n\n- git的提交是个本地提交,相对svn来说如闪电一般\n- git提供了暂存区,可以方便制定提交内容,而不是全部内容\n\n## 日志查看\n- git：本地包含了完整的日志，闪电的速度（并且无需网络)\n- svn：需要从服务拉取。\n- 一旦用了git后，等待svn日志过程简直让我发狂\n","source":"_posts/git-svn.md","raw":"title: git比svn的优势\ndate: 2016-05-22 11:13:00\ntags: others\ncategories: 开发工具\n---\n** git比svn的优势：** <Excerpt in index | 首页摘要>\n    主要介绍svn和git在使用的时候一些区别\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 合并操作时对提交过程的保留\n- git:合并操作保留原有的提交过程\n- svn:多个提交合并为一个提交\n- 不用因为合并操作而导致追踪的困难\n\n## 修正提交\n- git：可以修正提交。  \n使用功能分支工作流，在自己的分支可以方便修正提交而不会影响大家。\n- svn：一旦提交就到服务器上，实际使用中就是不能修改  \n（svn可以在服务器上修改，因为过程复杂需要权限实际上从不会这样做）\n\n\n## 本地分支\n- git可以方便的创建本地分支,创建时间极短,分支可以是本地的,不会存在svn中目录权限的问题\n\n## 强大的合并能力\n- git：重命名（无论文件还有目录）提交 可以合并上 文件重命名前的这些文件的提交\n\n- svn：重命名（无论文件还有目录）提交后，你本地/或是分支上 有文件重命名前的这些文件的修改或提交，在做合并操作时,你会碰上传说中难搞的***树冲突***！\n\n- 这就导致在调整目录名称和类名调整的时候比较繁琐,需要告诉大家,我修改完以后你再修改\n\n\n## tag的支持\n\n- svn在模型上是没有分支和tag的。tag是通过目录权限限制（对开发只读）来保证不变。\n- git模型上一等公民支持tag，保证只读。\n\n## 速度优势\n\n- git的提交是个本地提交,相对svn来说如闪电一般\n- git提供了暂存区,可以方便制定提交内容,而不是全部内容\n\n## 日志查看\n- git：本地包含了完整的日志，闪电的速度（并且无需网络)\n- svn：需要从服务拉取。\n- 一旦用了git后，等待svn日志过程简直让我发狂\n","slug":"git-svn","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla6200178p9ktcxdgkrj","content":"<p><strong> git比svn的优势：</strong> <Excerpt in index | 首页摘要><br>    主要介绍svn和git在使用的时候一些区别<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"合并操作时对提交过程的保留\"><a href=\"#合并操作时对提交过程的保留\" class=\"headerlink\" title=\"合并操作时对提交过程的保留\"></a>合并操作时对提交过程的保留</h2><ul>\n<li>git:合并操作保留原有的提交过程</li>\n<li>svn:多个提交合并为一个提交</li>\n<li>不用因为合并操作而导致追踪的困难</li>\n</ul>\n<h2 id=\"修正提交\"><a href=\"#修正提交\" class=\"headerlink\" title=\"修正提交\"></a>修正提交</h2><ul>\n<li>git：可以修正提交。<br>使用功能分支工作流，在自己的分支可以方便修正提交而不会影响大家。</li>\n<li>svn：一旦提交就到服务器上，实际使用中就是不能修改<br>（svn可以在服务器上修改，因为过程复杂需要权限实际上从不会这样做）</li>\n</ul>\n<h2 id=\"本地分支\"><a href=\"#本地分支\" class=\"headerlink\" title=\"本地分支\"></a>本地分支</h2><ul>\n<li>git可以方便的创建本地分支,创建时间极短,分支可以是本地的,不会存在svn中目录权限的问题</li>\n</ul>\n<h2 id=\"强大的合并能力\"><a href=\"#强大的合并能力\" class=\"headerlink\" title=\"强大的合并能力\"></a>强大的合并能力</h2><ul>\n<li><p>git：重命名（无论文件还有目录）提交 可以合并上 文件重命名前的这些文件的提交</p>\n</li>\n<li><p>svn：重命名（无论文件还有目录）提交后，你本地/或是分支上 有文件重命名前的这些文件的修改或提交，在做合并操作时,你会碰上传说中难搞的<strong><em>树冲突</em></strong>！</p>\n</li>\n<li><p>这就导致在调整目录名称和类名调整的时候比较繁琐,需要告诉大家,我修改完以后你再修改</p>\n</li>\n</ul>\n<h2 id=\"tag的支持\"><a href=\"#tag的支持\" class=\"headerlink\" title=\"tag的支持\"></a>tag的支持</h2><ul>\n<li>svn在模型上是没有分支和tag的。tag是通过目录权限限制（对开发只读）来保证不变。</li>\n<li>git模型上一等公民支持tag，保证只读。</li>\n</ul>\n<h2 id=\"速度优势\"><a href=\"#速度优势\" class=\"headerlink\" title=\"速度优势\"></a>速度优势</h2><ul>\n<li>git的提交是个本地提交,相对svn来说如闪电一般</li>\n<li>git提供了暂存区,可以方便制定提交内容,而不是全部内容</li>\n</ul>\n<h2 id=\"日志查看\"><a href=\"#日志查看\" class=\"headerlink\" title=\"日志查看\"></a>日志查看</h2><ul>\n<li>git：本地包含了完整的日志，闪电的速度（并且无需网络)</li>\n<li>svn：需要从服务拉取。</li>\n<li>一旦用了git后，等待svn日志过程简直让我发狂</li>\n</ul>\n","excerpt":"<p><strong> git比svn的优势：</strong> <Excerpt in index | 首页摘要><br>    主要介绍svn和git在使用的时候一些区别<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"合并操作时对提交过程的保留\"><a href=\"#合并操作时对提交过程的保留\" class=\"headerlink\" title=\"合并操作时对提交过程的保留\"></a>合并操作时对提交过程的保留</h2><ul>\n<li>git:合并操作保留原有的提交过程</li>\n<li>svn:多个提交合并为一个提交</li>\n<li>不用因为合并操作而导致追踪的困难</li>\n</ul>\n<h2 id=\"修正提交\"><a href=\"#修正提交\" class=\"headerlink\" title=\"修正提交\"></a>修正提交</h2><ul>\n<li>git：可以修正提交。<br>使用功能分支工作流，在自己的分支可以方便修正提交而不会影响大家。</li>\n<li>svn：一旦提交就到服务器上，实际使用中就是不能修改<br>（svn可以在服务器上修改，因为过程复杂需要权限实际上从不会这样做）</li>\n</ul>\n<h2 id=\"本地分支\"><a href=\"#本地分支\" class=\"headerlink\" title=\"本地分支\"></a>本地分支</h2><ul>\n<li>git可以方便的创建本地分支,创建时间极短,分支可以是本地的,不会存在svn中目录权限的问题</li>\n</ul>\n<h2 id=\"强大的合并能力\"><a href=\"#强大的合并能力\" class=\"headerlink\" title=\"强大的合并能力\"></a>强大的合并能力</h2><ul>\n<li><p>git：重命名（无论文件还有目录）提交 可以合并上 文件重命名前的这些文件的提交</p>\n</li>\n<li><p>svn：重命名（无论文件还有目录）提交后，你本地/或是分支上 有文件重命名前的这些文件的修改或提交，在做合并操作时,你会碰上传说中难搞的<strong><em>树冲突</em></strong>！</p>\n</li>\n<li><p>这就导致在调整目录名称和类名调整的时候比较繁琐,需要告诉大家,我修改完以后你再修改</p>\n</li>\n</ul>\n<h2 id=\"tag的支持\"><a href=\"#tag的支持\" class=\"headerlink\" title=\"tag的支持\"></a>tag的支持</h2><ul>\n<li>svn在模型上是没有分支和tag的。tag是通过目录权限限制（对开发只读）来保证不变。</li>\n<li>git模型上一等公民支持tag，保证只读。</li>\n</ul>\n<h2 id=\"速度优势\"><a href=\"#速度优势\" class=\"headerlink\" title=\"速度优势\"></a>速度优势</h2><ul>\n<li>git的提交是个本地提交,相对svn来说如闪电一般</li>\n<li>git提供了暂存区,可以方便制定提交内容,而不是全部内容</li>\n</ul>\n<h2 id=\"日志查看\"><a href=\"#日志查看\" class=\"headerlink\" title=\"日志查看\"></a>日志查看</h2><ul>\n<li>git：本地包含了完整的日志，闪电的速度（并且无需网络)</li>\n<li>svn：需要从服务拉取。</li>\n<li>一旦用了git后，等待svn日志过程简直让我发狂</li>\n</ul>"},{"title":"Git学习笔记","date":"2016-05-01T00:24:45.000Z","_content":"** git学习笔记：** <Excerpt in index | 首页摘要>\n\tgit的常用操作，高级技巧都要哦\n<!-- more -->\n<The rest of contents | 余下全文\\>\n\n## 安装git\n1. 下载安装包 ￼下载地址￼\n2. 安装git\n3. 进入命令行,输入git看看是否成功\n\n## 配置git\n1. 配置全局用户名和密码\n\t\\`git config --global user.name \"John Doe\"\n\tgit config --global user.email johndoe@example.com\n\t\\`\n2. 配置ssh公钥\n\t`cd ~/.ssh` 然后`ls`\n\t如果没有,直接生成,一路点击enter\n\t\\`\\`\\`\n\tssh-keygen\n\tcat \\~/.ssh/id\\_rsa.pub\n\t\\`\\`\\`\n\t把公钥配置到github的个人设置\n\n## 常用的命令\n1. repository操作\n\t- 检出（clone）仓库代码：`git clone repository-url` / `git clone repository-url local-directoryname`\n\t\t+ 例如，clone jquery 仓库到本地： `git clone git://github.com/jquery/jquery.git`\n\t\t+ clone jquery 仓库到本地，并且重命名为 my-jquery ：`git clone git://github.com/jquery/jquery.git my-jquery`\n\t- 查看远程仓库：`git remote -v`\n\t- 添加远程仓库：`git remote add [name] [repository-url]`\n\t- 删除远程仓库：`git remote rm [name]`\n\t- 修改远程仓库地址：`git remote set-url origin new-repository-url`\n\t- 拉取远程仓库： `git pull [remoteName] [localBranchName]`\n\t- 推送远程仓库： `git push [remoteName] [localBranchName]`\n\n2. 提交/拉取/合并/删除\n\t- 添加文件到暂存区（staged）：`git add filename` / `git stage filename`\n\t- 将所有修改文件添加到暂存区（staged）： `git add --all` / `git add -A`\n\t- 提交修改到暂存区（staged）：`git commit -m 'commit message'` / `git commit -a -m 'commit message'` 注意理解 -a 参数的意义\n\t- 从Git仓库中删除文件：`git rm filename`\n\t- 从Git仓库中删除文件，但本地文件保留：`git rm --cached filename`\n\t- 重命名某个文件：`git mv filename newfilename` 或者直接修改完毕文件名 ，进行`git add -A && git commit -m 'commit message'` Git会自动识别是重命名了文件\n\n\t- 获取远程最新代码到本地：`git pull (origin branchname)` 可以指定分支名，也可以忽略。pull 命令自动 fetch 远程代码并且 merge，如果有冲突，会显示在状态栏，需要手动处理。更推荐使用：`git fetch` 之后 `git merge --no-ff origin branchname` 拉取最新的代码到本地仓库，并手动 merge 。\n\n3. 日志查看\n\t- 查看日志：`git log`\n\t- 查看日志，并查看每次的修改内容：`git log -p`\n\t- 查看日志，并查看每次文件的简单修改状态：`git log --stat`\n\t- 一行显示日志：`git log --pretty=oneline` / `git log --pretty='format:\"%h - %an, %ar : %s'`\n\t- 查看日志范围：\n\t\t+ 查看最近10条日志：`git log -10`\n\t\t+ 查看2周前：`git log --until=2week` 或者指定2周的明确日期，比如：`git log --until=2015-08-12`\n\t\t+ 查看最近2周内：`git log --since=2week` 或者指定2周明确日志，比如：`git log --since=2015-08-12`\n\t\t+ 只查看某个用户的提交：`git log --committer=user.name` / `git log --author=user.name`\n4. 取消操作\n\t- 上次提交msg错误/有未提交的文件应该同上一次一起提交，需要重新提交备注：`git commit --amend -m 'new msg'`\n\t- 一次`git add -A`后，需要将某个文件撤回到工作区，即：某个文件不应该在本次commit中：`git reset HEAD filename`\n\t- 撤销某些文件的修改内容：`git checkout -- filename` 注意：一旦执行，所有的改动都没有了，谨慎！谨慎！谨慎！\n\t- 将工作区内容回退到远端的某个版本：`git reset --hard <sha1-of-commit>`\n\t\t+ `--hard`：reset stage and working directory ,<commitid> 以来所有的变更全部丢弃，并将 HEAD 指向<commitid>\n\t\t+ `--soft`：nothing changed to stage and working directory ,仅仅将HEAD指向<commitid> ，所有变更显示在”changed to be committed”中\n\t\t+ `--mixed`：default,reset stage ,nothing to working directory ，这也就是第二个例子的原因\n\n5. 比较差异\n\t- 查看工作区（working directory）和暂存区（staged）之间差异：`git diff`\n\t- 查看工作区（working directory）与当前仓库版本（repository）HEAD版本差异：`git diff HEAD`\n\t- 查看暂存区（staged）与当前仓库版本（repository）差异：`git diff --cached` / `git diff --staged`\n\n6. 合并操作\n\t- 解决冲突后/获取远程最新代码后合并代码：`git merge branchname`\n\t- 保留该存在版本合并log：`git merge --no-ff branchname` 参数`--no-ff`防止 fast-forward 的提交\n","source":"_posts/git-config-study.md","raw":"title: git学习笔记\ndate: 2016-05-01 08:24:45\ntags: others\ncategories: 学习笔记\n---\n** git学习笔记：** <Excerpt in index | 首页摘要>\n\tgit的常用操作，高级技巧都要哦\n<!-- more -->\n<The rest of contents | 余下全文\\>\n\n## 安装git\n1. 下载安装包 ￼下载地址￼\n2. 安装git\n3. 进入命令行,输入git看看是否成功\n\n## 配置git\n1. 配置全局用户名和密码\n\t\\`git config --global user.name \"John Doe\"\n\tgit config --global user.email johndoe@example.com\n\t\\`\n2. 配置ssh公钥\n\t`cd ~/.ssh` 然后`ls`\n\t如果没有,直接生成,一路点击enter\n\t\\`\\`\\`\n\tssh-keygen\n\tcat \\~/.ssh/id\\_rsa.pub\n\t\\`\\`\\`\n\t把公钥配置到github的个人设置\n\n## 常用的命令\n1. repository操作\n\t- 检出（clone）仓库代码：`git clone repository-url` / `git clone repository-url local-directoryname`\n\t\t+ 例如，clone jquery 仓库到本地： `git clone git://github.com/jquery/jquery.git`\n\t\t+ clone jquery 仓库到本地，并且重命名为 my-jquery ：`git clone git://github.com/jquery/jquery.git my-jquery`\n\t- 查看远程仓库：`git remote -v`\n\t- 添加远程仓库：`git remote add [name] [repository-url]`\n\t- 删除远程仓库：`git remote rm [name]`\n\t- 修改远程仓库地址：`git remote set-url origin new-repository-url`\n\t- 拉取远程仓库： `git pull [remoteName] [localBranchName]`\n\t- 推送远程仓库： `git push [remoteName] [localBranchName]`\n\n2. 提交/拉取/合并/删除\n\t- 添加文件到暂存区（staged）：`git add filename` / `git stage filename`\n\t- 将所有修改文件添加到暂存区（staged）： `git add --all` / `git add -A`\n\t- 提交修改到暂存区（staged）：`git commit -m 'commit message'` / `git commit -a -m 'commit message'` 注意理解 -a 参数的意义\n\t- 从Git仓库中删除文件：`git rm filename`\n\t- 从Git仓库中删除文件，但本地文件保留：`git rm --cached filename`\n\t- 重命名某个文件：`git mv filename newfilename` 或者直接修改完毕文件名 ，进行`git add -A && git commit -m 'commit message'` Git会自动识别是重命名了文件\n\n\t- 获取远程最新代码到本地：`git pull (origin branchname)` 可以指定分支名，也可以忽略。pull 命令自动 fetch 远程代码并且 merge，如果有冲突，会显示在状态栏，需要手动处理。更推荐使用：`git fetch` 之后 `git merge --no-ff origin branchname` 拉取最新的代码到本地仓库，并手动 merge 。\n\n3. 日志查看\n\t- 查看日志：`git log`\n\t- 查看日志，并查看每次的修改内容：`git log -p`\n\t- 查看日志，并查看每次文件的简单修改状态：`git log --stat`\n\t- 一行显示日志：`git log --pretty=oneline` / `git log --pretty='format:\"%h - %an, %ar : %s'`\n\t- 查看日志范围：\n\t\t+ 查看最近10条日志：`git log -10`\n\t\t+ 查看2周前：`git log --until=2week` 或者指定2周的明确日期，比如：`git log --until=2015-08-12`\n\t\t+ 查看最近2周内：`git log --since=2week` 或者指定2周明确日志，比如：`git log --since=2015-08-12`\n\t\t+ 只查看某个用户的提交：`git log --committer=user.name` / `git log --author=user.name`\n4. 取消操作\n\t- 上次提交msg错误/有未提交的文件应该同上一次一起提交，需要重新提交备注：`git commit --amend -m 'new msg'`\n\t- 一次`git add -A`后，需要将某个文件撤回到工作区，即：某个文件不应该在本次commit中：`git reset HEAD filename`\n\t- 撤销某些文件的修改内容：`git checkout -- filename` 注意：一旦执行，所有的改动都没有了，谨慎！谨慎！谨慎！\n\t- 将工作区内容回退到远端的某个版本：`git reset --hard <sha1-of-commit>`\n\t\t+ `--hard`：reset stage and working directory ,<commitid> 以来所有的变更全部丢弃，并将 HEAD 指向<commitid>\n\t\t+ `--soft`：nothing changed to stage and working directory ,仅仅将HEAD指向<commitid> ，所有变更显示在”changed to be committed”中\n\t\t+ `--mixed`：default,reset stage ,nothing to working directory ，这也就是第二个例子的原因\n\n5. 比较差异\n\t- 查看工作区（working directory）和暂存区（staged）之间差异：`git diff`\n\t- 查看工作区（working directory）与当前仓库版本（repository）HEAD版本差异：`git diff HEAD`\n\t- 查看暂存区（staged）与当前仓库版本（repository）差异：`git diff --cached` / `git diff --staged`\n\n6. 合并操作\n\t- 解决冲突后/获取远程最新代码后合并代码：`git merge branchname`\n\t- 保留该存在版本合并log：`git merge --no-ff branchname` 参数`--no-ff`防止 fast-forward 的提交\n","slug":"git-config-study","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla64001b8p9ko5ulybji","content":"<p><strong> git学习笔记：</strong> <Excerpt in index | 首页摘要><br>    git的常用操作，高级技巧都要哦<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文\\>\n\n<h2 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h2><ol>\n<li>下载安装包 ￼下载地址￼</li>\n<li>安装git</li>\n<li>进入命令行,输入git看看是否成功</li>\n</ol>\n<h2 id=\"配置git\"><a href=\"#配置git\" class=\"headerlink\" title=\"配置git\"></a>配置git</h2><ol>\n<li>配置全局用户名和密码<br> `git config –global user.name “John Doe”<br> git config –global user.email johndoe@example.com<br> `</li>\n<li>配置ssh公钥<br> <code>cd ~/.ssh</code> 然后<code>ls</code><br> 如果没有,直接生成,一路点击enter<br> ```<br> ssh-keygen<br> cat ~/.ssh/id_rsa.pub<br> ```<br> 把公钥配置到github的个人设置</li>\n</ol>\n<h2 id=\"常用的命令\"><a href=\"#常用的命令\" class=\"headerlink\" title=\"常用的命令\"></a>常用的命令</h2><ol>\n<li><p>repository操作</p>\n<ul>\n<li>检出（clone）仓库代码：<code>git clone repository-url</code> / <code>git clone repository-url local-directoryname</code><ul>\n<li>例如，clone jquery 仓库到本地： <code>git clone git://github.com/jquery/jquery.git</code></li>\n<li>clone jquery 仓库到本地，并且重命名为 my-jquery ：<code>git clone git://github.com/jquery/jquery.git my-jquery</code></li>\n</ul>\n</li>\n<li>查看远程仓库：<code>git remote -v</code></li>\n<li>添加远程仓库：<code>git remote add [name] [repository-url]</code></li>\n<li>删除远程仓库：<code>git remote rm [name]</code></li>\n<li>修改远程仓库地址：<code>git remote set-url origin new-repository-url</code></li>\n<li>拉取远程仓库： <code>git pull [remoteName] [localBranchName]</code></li>\n<li>推送远程仓库： <code>git push [remoteName] [localBranchName]</code></li>\n</ul>\n</li>\n<li><p>提交/拉取/合并/删除</p>\n<ul>\n<li>添加文件到暂存区（staged）：<code>git add filename</code> / <code>git stage filename</code></li>\n<li>将所有修改文件添加到暂存区（staged）： <code>git add --all</code> / <code>git add -A</code></li>\n<li>提交修改到暂存区（staged）：<code>git commit -m &#39;commit message&#39;</code> / <code>git commit -a -m &#39;commit message&#39;</code> 注意理解 -a 参数的意义</li>\n<li>从Git仓库中删除文件：<code>git rm filename</code></li>\n<li>从Git仓库中删除文件，但本地文件保留：<code>git rm --cached filename</code></li>\n<li><p>重命名某个文件：<code>git mv filename newfilename</code> 或者直接修改完毕文件名 ，进行<code>git add -A &amp;&amp; git commit -m &#39;commit message&#39;</code> Git会自动识别是重命名了文件</p>\n</li>\n<li><p>获取远程最新代码到本地：<code>git pull (origin branchname)</code> 可以指定分支名，也可以忽略。pull 命令自动 fetch 远程代码并且 merge，如果有冲突，会显示在状态栏，需要手动处理。更推荐使用：<code>git fetch</code> 之后 <code>git merge --no-ff origin branchname</code> 拉取最新的代码到本地仓库，并手动 merge 。</p>\n</li>\n</ul>\n</li>\n<li><p>日志查看</p>\n<ul>\n<li>查看日志：<code>git log</code></li>\n<li>查看日志，并查看每次的修改内容：<code>git log -p</code></li>\n<li>查看日志，并查看每次文件的简单修改状态：<code>git log --stat</code></li>\n<li>一行显示日志：<code>git log --pretty=oneline</code> / <code>git log --pretty=&#39;format:&quot;%h - %an, %ar : %s&#39;</code></li>\n<li>查看日志范围：<ul>\n<li>查看最近10条日志：<code>git log -10</code></li>\n<li>查看2周前：<code>git log --until=2week</code> 或者指定2周的明确日期，比如：<code>git log --until=2015-08-12</code></li>\n<li>查看最近2周内：<code>git log --since=2week</code> 或者指定2周明确日志，比如：<code>git log --since=2015-08-12</code></li>\n<li>只查看某个用户的提交：<code>git log --committer=user.name</code> / <code>git log --author=user.name</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>取消操作</p>\n<ul>\n<li>上次提交msg错误/有未提交的文件应该同上一次一起提交，需要重新提交备注：<code>git commit --amend -m &#39;new msg&#39;</code></li>\n<li>一次<code>git add -A</code>后，需要将某个文件撤回到工作区，即：某个文件不应该在本次commit中：<code>git reset HEAD filename</code></li>\n<li>撤销某些文件的修改内容：<code>git checkout -- filename</code> 注意：一旦执行，所有的改动都没有了，谨慎！谨慎！谨慎！</li>\n<li>将工作区内容回退到远端的某个版本：<code>git reset --hard &lt;sha1-of-commit&gt;</code><ul>\n<li><code>--hard</code>：reset stage and working directory ,<commitid> 以来所有的变更全部丢弃，并将 HEAD 指向<commitid></li>\n<li><code>--soft</code>：nothing changed to stage and working directory ,仅仅将HEAD指向<commitid> ，所有变更显示在”changed to be committed”中</li>\n<li><code>--mixed</code>：default,reset stage ,nothing to working directory ，这也就是第二个例子的原因</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>比较差异</p>\n<ul>\n<li>查看工作区（working directory）和暂存区（staged）之间差异：<code>git diff</code></li>\n<li>查看工作区（working directory）与当前仓库版本（repository）HEAD版本差异：<code>git diff HEAD</code></li>\n<li>查看暂存区（staged）与当前仓库版本（repository）差异：<code>git diff --cached</code> / <code>git diff --staged</code></li>\n</ul>\n</li>\n<li><p>合并操作</p>\n<ul>\n<li>解决冲突后/获取远程最新代码后合并代码：<code>git merge branchname</code></li>\n<li>保留该存在版本合并log：<code>git merge --no-ff branchname</code> 参数<code>--no-ff</code>防止 fast-forward 的提交</li>\n</ul>\n</li>\n</ol>\n","excerpt":"<p><strong> git学习笔记：</strong> <Excerpt in index | 首页摘要><br>    git的常用操作，高级技巧都要哦<br>","more":"</p>\n<The rest of contents | 余下全文\\>\n\n<h2 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h2><ol>\n<li>下载安装包 ￼下载地址￼</li>\n<li>安装git</li>\n<li>进入命令行,输入git看看是否成功</li>\n</ol>\n<h2 id=\"配置git\"><a href=\"#配置git\" class=\"headerlink\" title=\"配置git\"></a>配置git</h2><ol>\n<li>配置全局用户名和密码<br> `git config –global user.name “John Doe”<br> git config –global user.email johndoe@example.com<br> `</li>\n<li>配置ssh公钥<br> <code>cd ~/.ssh</code> 然后<code>ls</code><br> 如果没有,直接生成,一路点击enter<br> ```<br> ssh-keygen<br> cat ~/.ssh/id_rsa.pub<br> ```<br> 把公钥配置到github的个人设置</li>\n</ol>\n<h2 id=\"常用的命令\"><a href=\"#常用的命令\" class=\"headerlink\" title=\"常用的命令\"></a>常用的命令</h2><ol>\n<li><p>repository操作</p>\n<ul>\n<li>检出（clone）仓库代码：<code>git clone repository-url</code> / <code>git clone repository-url local-directoryname</code><ul>\n<li>例如，clone jquery 仓库到本地： <code>git clone git://github.com/jquery/jquery.git</code></li>\n<li>clone jquery 仓库到本地，并且重命名为 my-jquery ：<code>git clone git://github.com/jquery/jquery.git my-jquery</code></li>\n</ul>\n</li>\n<li>查看远程仓库：<code>git remote -v</code></li>\n<li>添加远程仓库：<code>git remote add [name] [repository-url]</code></li>\n<li>删除远程仓库：<code>git remote rm [name]</code></li>\n<li>修改远程仓库地址：<code>git remote set-url origin new-repository-url</code></li>\n<li>拉取远程仓库： <code>git pull [remoteName] [localBranchName]</code></li>\n<li>推送远程仓库： <code>git push [remoteName] [localBranchName]</code></li>\n</ul>\n</li>\n<li><p>提交/拉取/合并/删除</p>\n<ul>\n<li>添加文件到暂存区（staged）：<code>git add filename</code> / <code>git stage filename</code></li>\n<li>将所有修改文件添加到暂存区（staged）： <code>git add --all</code> / <code>git add -A</code></li>\n<li>提交修改到暂存区（staged）：<code>git commit -m &#39;commit message&#39;</code> / <code>git commit -a -m &#39;commit message&#39;</code> 注意理解 -a 参数的意义</li>\n<li>从Git仓库中删除文件：<code>git rm filename</code></li>\n<li>从Git仓库中删除文件，但本地文件保留：<code>git rm --cached filename</code></li>\n<li><p>重命名某个文件：<code>git mv filename newfilename</code> 或者直接修改完毕文件名 ，进行<code>git add -A &amp;&amp; git commit -m &#39;commit message&#39;</code> Git会自动识别是重命名了文件</p>\n</li>\n<li><p>获取远程最新代码到本地：<code>git pull (origin branchname)</code> 可以指定分支名，也可以忽略。pull 命令自动 fetch 远程代码并且 merge，如果有冲突，会显示在状态栏，需要手动处理。更推荐使用：<code>git fetch</code> 之后 <code>git merge --no-ff origin branchname</code> 拉取最新的代码到本地仓库，并手动 merge 。</p>\n</li>\n</ul>\n</li>\n<li><p>日志查看</p>\n<ul>\n<li>查看日志：<code>git log</code></li>\n<li>查看日志，并查看每次的修改内容：<code>git log -p</code></li>\n<li>查看日志，并查看每次文件的简单修改状态：<code>git log --stat</code></li>\n<li>一行显示日志：<code>git log --pretty=oneline</code> / <code>git log --pretty=&#39;format:&quot;%h - %an, %ar : %s&#39;</code></li>\n<li>查看日志范围：<ul>\n<li>查看最近10条日志：<code>git log -10</code></li>\n<li>查看2周前：<code>git log --until=2week</code> 或者指定2周的明确日期，比如：<code>git log --until=2015-08-12</code></li>\n<li>查看最近2周内：<code>git log --since=2week</code> 或者指定2周明确日志，比如：<code>git log --since=2015-08-12</code></li>\n<li>只查看某个用户的提交：<code>git log --committer=user.name</code> / <code>git log --author=user.name</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>取消操作</p>\n<ul>\n<li>上次提交msg错误/有未提交的文件应该同上一次一起提交，需要重新提交备注：<code>git commit --amend -m &#39;new msg&#39;</code></li>\n<li>一次<code>git add -A</code>后，需要将某个文件撤回到工作区，即：某个文件不应该在本次commit中：<code>git reset HEAD filename</code></li>\n<li>撤销某些文件的修改内容：<code>git checkout -- filename</code> 注意：一旦执行，所有的改动都没有了，谨慎！谨慎！谨慎！</li>\n<li>将工作区内容回退到远端的某个版本：<code>git reset --hard &lt;sha1-of-commit&gt;</code><ul>\n<li><code>--hard</code>：reset stage and working directory ,<commitid> 以来所有的变更全部丢弃，并将 HEAD 指向<commitid></li>\n<li><code>--soft</code>：nothing changed to stage and working directory ,仅仅将HEAD指向<commitid> ，所有变更显示在”changed to be committed”中</li>\n<li><code>--mixed</code>：default,reset stage ,nothing to working directory ，这也就是第二个例子的原因</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>比较差异</p>\n<ul>\n<li>查看工作区（working directory）和暂存区（staged）之间差异：<code>git diff</code></li>\n<li>查看工作区（working directory）与当前仓库版本（repository）HEAD版本差异：<code>git diff HEAD</code></li>\n<li>查看暂存区（staged）与当前仓库版本（repository）差异：<code>git diff --cached</code> / <code>git diff --staged</code></li>\n</ul>\n</li>\n<li><p>合并操作</p>\n<ul>\n<li>解决冲突后/获取远程最新代码后合并代码：<code>git merge branchname</code></li>\n<li>保留该存在版本合并log：<code>git merge --no-ff branchname</code> 参数<code>--no-ff</code>防止 fast-forward 的提交</li>\n</ul>\n</li>\n</ol>"},{"title":"Hexo和github打造个人博客","date":"2015-12-20T14:35:04.000Z","_content":"** hexo和github打造个人博客 ：** <Excerpt in index | 首页摘要>\n    使用hexo和github打造属于自己的静态博客，展示自己的作品，思想……\n<!-- more -->\n<The rest of contents | 余下全文>\n\n##说明\n    自己在使用hexo搭建静态博客的时候踩了许多坑,最终去官网看教程搞定了,  \n    建议用hexo搭建个人博客的时候,最好看清教程的日期和使用的版本,这样就  \n    不会因为版本的不同导致的问题了.建议先去hexo官网了解一下\n   [**hexo官网**][1]\n## 1.准备工作\n 1. 安装nodejs\n    - 去官网下载nodejs安装(推荐安装4.x),安装之后在命令行 node -v,如果成功说明node环境ok,不成功就去环境变量配置一下.\n 2. 安装hexo\n    - 使用命令 npm install hexo -g,执行hexo -v 查看版本,本教程适合**3.1.1以上**版本\n 3. 安装git\n    - 去官网下载git安装,不会自行百度\n 4. 配置git\n    - 配置ssh私钥,上传到github上\n\n## 2.github-pages的说明\n\n 1. github有两种主页,一种是github-page(个人主页),一种是项目主页,本教程针对个人主页\n 2. github-page需要将hexo博客发布到repository的master(主干)即可\n 3. github的个人主页要求repository的名称和username一致，加入username是tom，则repository的名称为tom.github.io\n\n## 3.使用hexo写博客\n    - 新建一个文件夹myblog,\n    - 右键git bash here使用git的shell\n    - 在shell中输入hexo init,回车执行\n    - 在shell中输入hexo g ,回车\n    - 在shell中hexo s,回车\n    - 去浏览器访问http://localhost:4000,访问到主页,然后在shell中ctrl c停止\n    - 在shell中hexo new \"first-blog\",回车\n    - 在shell中hexo g ,回车\n    - 在shell中hexo s ,回车,在访问\n    - ok,在本地测试就没问题了\n\n## 4.发布到github\n打开项目根部录下的.config.yml,找到deploy,修改如下:\n\n```\n   deploy:\n    - type: git\n      repo: git@github.com:yourname/yourname.github.io.git,master\n```\n\n```\ndeploy:\n  type: git\n  repo: <repository url>\n  branch: [branch]\n  message: [message]\n```\n访问地址就是 http://tom.github.io/\n## 5.常用命令\n    命令的简写为：\n    ```\n    hexo n == hexo new\n    hexo g == hexo generate\n    hexo s == hexo server\n    hexo d == hexo deploy\n    hexo clean  删除public文件夹\n    ```\n\n## 6.常见问题\n1. 部署时出现git not found\n  - npm install hexo-deployer-git --save  安装依赖包\n\n\n## 7.详细设置    \n    每个人对自己的博客都有不一样的要求，比如主题，分类，标签，评论插件的选择，  \n    这些对程序员的你来说，都是小菜一碟，下面是官网教程：\n   [hexo官方文档][2]\n\n\n博客效果可以看我的个人博客     [我的个人博客][3]\n\n\n  [1]: https://hexo.io/zh-cn/\n  [2]: https://hexo.io/docs/\n  [3]: http://geeksblog.cc\n","source":"_posts/hexo-githup-blog.md","raw":"title: hexo和github打造个人博客\ndate: 2015-12-20 22:35:04\ntags: hexo\ncategories: 开发工具\n---\n** hexo和github打造个人博客 ：** <Excerpt in index | 首页摘要>\n    使用hexo和github打造属于自己的静态博客，展示自己的作品，思想……\n<!-- more -->\n<The rest of contents | 余下全文>\n\n##说明\n    自己在使用hexo搭建静态博客的时候踩了许多坑,最终去官网看教程搞定了,  \n    建议用hexo搭建个人博客的时候,最好看清教程的日期和使用的版本,这样就  \n    不会因为版本的不同导致的问题了.建议先去hexo官网了解一下\n   [**hexo官网**][1]\n## 1.准备工作\n 1. 安装nodejs\n    - 去官网下载nodejs安装(推荐安装4.x),安装之后在命令行 node -v,如果成功说明node环境ok,不成功就去环境变量配置一下.\n 2. 安装hexo\n    - 使用命令 npm install hexo -g,执行hexo -v 查看版本,本教程适合**3.1.1以上**版本\n 3. 安装git\n    - 去官网下载git安装,不会自行百度\n 4. 配置git\n    - 配置ssh私钥,上传到github上\n\n## 2.github-pages的说明\n\n 1. github有两种主页,一种是github-page(个人主页),一种是项目主页,本教程针对个人主页\n 2. github-page需要将hexo博客发布到repository的master(主干)即可\n 3. github的个人主页要求repository的名称和username一致，加入username是tom，则repository的名称为tom.github.io\n\n## 3.使用hexo写博客\n    - 新建一个文件夹myblog,\n    - 右键git bash here使用git的shell\n    - 在shell中输入hexo init,回车执行\n    - 在shell中输入hexo g ,回车\n    - 在shell中hexo s,回车\n    - 去浏览器访问http://localhost:4000,访问到主页,然后在shell中ctrl c停止\n    - 在shell中hexo new \"first-blog\",回车\n    - 在shell中hexo g ,回车\n    - 在shell中hexo s ,回车,在访问\n    - ok,在本地测试就没问题了\n\n## 4.发布到github\n打开项目根部录下的.config.yml,找到deploy,修改如下:\n\n```\n   deploy:\n    - type: git\n      repo: git@github.com:yourname/yourname.github.io.git,master\n```\n\n```\ndeploy:\n  type: git\n  repo: <repository url>\n  branch: [branch]\n  message: [message]\n```\n访问地址就是 http://tom.github.io/\n## 5.常用命令\n    命令的简写为：\n    ```\n    hexo n == hexo new\n    hexo g == hexo generate\n    hexo s == hexo server\n    hexo d == hexo deploy\n    hexo clean  删除public文件夹\n    ```\n\n## 6.常见问题\n1. 部署时出现git not found\n  - npm install hexo-deployer-git --save  安装依赖包\n\n\n## 7.详细设置    \n    每个人对自己的博客都有不一样的要求，比如主题，分类，标签，评论插件的选择，  \n    这些对程序员的你来说，都是小菜一碟，下面是官网教程：\n   [hexo官方文档][2]\n\n\n博客效果可以看我的个人博客     [我的个人博客][3]\n\n\n  [1]: https://hexo.io/zh-cn/\n  [2]: https://hexo.io/docs/\n  [3]: http://geeksblog.cc\n","slug":"hexo-githup-blog","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla66001f8p9k7be0af5h","content":"<p><strong> hexo和github打造个人博客 ：</strong> <Excerpt in index | 首页摘要><br>    使用hexo和github打造属于自己的静态博客，展示自己的作品，思想……<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<p>##说明<br>    自己在使用hexo搭建静态博客的时候踩了许多坑,最终去官网看教程搞定了,<br>    建议用hexo搭建个人博客的时候,最好看清教程的日期和使用的版本,这样就<br>    不会因为版本的不同导致的问题了.建议先去hexo官网了解一下<br>   <a href=\"https://hexo.io/zh-cn/\"><strong>hexo官网</strong></a></p>\n<h2 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1.准备工作\"></a>1.准备工作</h2><ol>\n<li>安装nodejs<ul>\n<li>去官网下载nodejs安装(推荐安装4.x),安装之后在命令行 node -v,如果成功说明node环境ok,不成功就去环境变量配置一下.</li>\n</ul>\n</li>\n<li>安装hexo<ul>\n<li>使用命令 npm install hexo -g,执行hexo -v 查看版本,本教程适合<strong>3.1.1以上</strong>版本</li>\n</ul>\n</li>\n<li>安装git<ul>\n<li>去官网下载git安装,不会自行百度</li>\n</ul>\n</li>\n<li>配置git<ul>\n<li>配置ssh私钥,上传到github上</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-github-pages的说明\"><a href=\"#2-github-pages的说明\" class=\"headerlink\" title=\"2.github-pages的说明\"></a>2.github-pages的说明</h2><ol>\n<li>github有两种主页,一种是github-page(个人主页),一种是项目主页,本教程针对个人主页</li>\n<li>github-page需要将hexo博客发布到repository的master(主干)即可</li>\n<li>github的个人主页要求repository的名称和username一致，加入username是tom，则repository的名称为tom.github.io</li>\n</ol>\n<h2 id=\"3-使用hexo写博客\"><a href=\"#3-使用hexo写博客\" class=\"headerlink\" title=\"3.使用hexo写博客\"></a>3.使用hexo写博客</h2><pre><code>- 新建一个文件夹myblog,\n- 右键git bash here使用git的shell\n- 在shell中输入hexo init,回车执行\n- 在shell中输入hexo g ,回车\n- 在shell中hexo s,回车\n- 去浏览器访问http://localhost:4000,访问到主页,然后在shell中ctrl c停止\n- 在shell中hexo new &quot;first-blog&quot;,回车\n- 在shell中hexo g ,回车\n- 在shell中hexo s ,回车,在访问\n- ok,在本地测试就没问题了\n</code></pre><h2 id=\"4-发布到github\"><a href=\"#4-发布到github\" class=\"headerlink\" title=\"4.发布到github\"></a>4.发布到github</h2><p>打开项目根部录下的.config.yml,找到deploy,修改如下:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\"> - <span class=\"attribute\">type</span>: git</div><div class=\"line\">   <span class=\"attribute\">repo</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:yourname/yourname.github.io.git,master</div></pre></td></tr></table></figure>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">deploy:</span></div><div class=\"line\"><span class=\"symbol\">  type:</span> git</div><div class=\"line\"><span class=\"symbol\">  repo:</span> <span class=\"params\">&lt;repository url&gt;</span></div><div class=\"line\"><span class=\"symbol\">  branch:</span> [branch]</div><div class=\"line\"><span class=\"symbol\">  message:</span> [message]</div></pre></td></tr></table></figure>\n<p>访问地址就是 <a href=\"http://tom.github.io/\">http://tom.github.io/</a></p>\n<h2 id=\"5-常用命令\"><a href=\"#5-常用命令\" class=\"headerlink\" title=\"5.常用命令\"></a>5.常用命令</h2><pre><code>命令的简写为：\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n == hexo <span class=\"keyword\">new</span></div><div class=\"line\">hexo g == hexo <span class=\"keyword\">generate</span></div><div class=\"line\">hexo s == hexo server</div><div class=\"line\">hexo d == hexo deploy</div><div class=\"line\">hexo clean  删除public文件夹</div></pre></td></tr></table></figure>\n</code></pre><h2 id=\"6-常见问题\"><a href=\"#6-常见问题\" class=\"headerlink\" title=\"6.常见问题\"></a>6.常见问题</h2><ol>\n<li>部署时出现git not found<ul>\n<li>npm install hexo-deployer-git –save  安装依赖包</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"7-详细设置\"><a href=\"#7-详细设置\" class=\"headerlink\" title=\"7.详细设置\"></a>7.详细设置</h2><pre><code>每个人对自己的博客都有不一样的要求，比如主题，分类，标签，评论插件的选择，  \n这些对程序员的你来说，都是小菜一碟，下面是官网教程：\n</code></pre><p>   <a href=\"https://hexo.io/docs/\">hexo官方文档</a></p>\n<p>博客效果可以看我的个人博客     <a href=\"http://geeksblog.cc\">我的个人博客</a></p>\n","excerpt":"<p><strong> hexo和github打造个人博客 ：</strong> <Excerpt in index | 首页摘要><br>    使用hexo和github打造属于自己的静态博客，展示自己的作品，思想……<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<p>##说明<br>    自己在使用hexo搭建静态博客的时候踩了许多坑,最终去官网看教程搞定了,<br>    建议用hexo搭建个人博客的时候,最好看清教程的日期和使用的版本,这样就<br>    不会因为版本的不同导致的问题了.建议先去hexo官网了解一下<br>   <a href=\"https://hexo.io/zh-cn/\"><strong>hexo官网</strong></a></p>\n<h2 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1.准备工作\"></a>1.准备工作</h2><ol>\n<li>安装nodejs<ul>\n<li>去官网下载nodejs安装(推荐安装4.x),安装之后在命令行 node -v,如果成功说明node环境ok,不成功就去环境变量配置一下.</li>\n</ul>\n</li>\n<li>安装hexo<ul>\n<li>使用命令 npm install hexo -g,执行hexo -v 查看版本,本教程适合<strong>3.1.1以上</strong>版本</li>\n</ul>\n</li>\n<li>安装git<ul>\n<li>去官网下载git安装,不会自行百度</li>\n</ul>\n</li>\n<li>配置git<ul>\n<li>配置ssh私钥,上传到github上</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-github-pages的说明\"><a href=\"#2-github-pages的说明\" class=\"headerlink\" title=\"2.github-pages的说明\"></a>2.github-pages的说明</h2><ol>\n<li>github有两种主页,一种是github-page(个人主页),一种是项目主页,本教程针对个人主页</li>\n<li>github-page需要将hexo博客发布到repository的master(主干)即可</li>\n<li>github的个人主页要求repository的名称和username一致，加入username是tom，则repository的名称为tom.github.io</li>\n</ol>\n<h2 id=\"3-使用hexo写博客\"><a href=\"#3-使用hexo写博客\" class=\"headerlink\" title=\"3.使用hexo写博客\"></a>3.使用hexo写博客</h2><pre><code>- 新建一个文件夹myblog,\n- 右键git bash here使用git的shell\n- 在shell中输入hexo init,回车执行\n- 在shell中输入hexo g ,回车\n- 在shell中hexo s,回车\n- 去浏览器访问http://localhost:4000,访问到主页,然后在shell中ctrl c停止\n- 在shell中hexo new &quot;first-blog&quot;,回车\n- 在shell中hexo g ,回车\n- 在shell中hexo s ,回车,在访问\n- ok,在本地测试就没问题了\n</code></pre><h2 id=\"4-发布到github\"><a href=\"#4-发布到github\" class=\"headerlink\" title=\"4.发布到github\"></a>4.发布到github</h2><p>打开项目根部录下的.config.yml,找到deploy,修改如下:</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\"> - <span class=\"attribute\">type</span>: git</div><div class=\"line\">   <span class=\"attribute\">repo</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:yourname/yourname.github.io.git,master</div></pre></td></tr></table></figure>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">deploy:</span></div><div class=\"line\"><span class=\"symbol\">  type:</span> git</div><div class=\"line\"><span class=\"symbol\">  repo:</span> <span class=\"params\">&lt;repository url&gt;</span></div><div class=\"line\"><span class=\"symbol\">  branch:</span> [branch]</div><div class=\"line\"><span class=\"symbol\">  message:</span> [message]</div></pre></td></tr></table></figure>\n<p>访问地址就是 <a href=\"http://tom.github.io/\">http://tom.github.io/</a></p>\n<h2 id=\"5-常用命令\"><a href=\"#5-常用命令\" class=\"headerlink\" title=\"5.常用命令\"></a>5.常用命令</h2><pre><code>命令的简写为：\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n == hexo <span class=\"keyword\">new</span></div><div class=\"line\">hexo g == hexo <span class=\"keyword\">generate</span></div><div class=\"line\">hexo s == hexo server</div><div class=\"line\">hexo d == hexo deploy</div><div class=\"line\">hexo clean  删除public文件夹</div></pre></td></tr></table></figure>\n</code></pre><h2 id=\"6-常见问题\"><a href=\"#6-常见问题\" class=\"headerlink\" title=\"6.常见问题\"></a>6.常见问题</h2><ol>\n<li>部署时出现git not found<ul>\n<li>npm install hexo-deployer-git –save  安装依赖包</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"7-详细设置\"><a href=\"#7-详细设置\" class=\"headerlink\" title=\"7.详细设置\"></a>7.详细设置</h2><pre><code>每个人对自己的博客都有不一样的要求，比如主题，分类，标签，评论插件的选择，  \n这些对程序员的你来说，都是小菜一碟，下面是官网教程：\n</code></pre><p>   <a href=\"https://hexo.io/docs/\">hexo官方文档</a></p>\n<p>博客效果可以看我的个人博客     <a href=\"http://geeksblog.cc\">我的个人博客</a></p>"},{"title":"Hexo配置和优化记录","date":"2016-11-28T15:07:12.000Z","_content":"** hexo配置和优化高级篇：** <Excerpt in index | 首页摘要>\n本文章不讲解hexo的基础配置，只针对hexo的高级配置，性能优化，seo配置进行讲解。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 前言\n仔细想想，使用hexo搭建博客也有半年多了，但是发现访问量一直几乎没有，特别是经历几次迁移之后，之前从github到coding，\n现在迁移到了云服务器，研究了一下如何进行seo和网站性能优化，便有了这篇文章。\n\n## 实用的功能\n1. 站内搜索（百度的）\n2. 本地搜索（本地插件）\n3. 网站统计\n4. 留言功能\n5. rss订阅功能\n\n\n## 性能优化\n1. html压缩\n2. css压缩\n3. js压缩·\n4. img压缩\n5. nginx代理，开启gzip压缩\n6. cdn代理css和图·片\n7. 删除主题无用的js和css\n\n## seo优化\n1. sitemap\n2. 对于没有价值的外链a标签添加`rel=\"external nofollow\"`\n3. 使用meta标签\n4. 使用robots文件\n5. 主动提交sitemap到搜索引擎\n6. 添加外链和内链\n\n\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/hexo-config.md","raw":"title: hexo配置和优化记录\ndate: 2016-11-28 23:07:12\ntags: hexo\ncategories: 开发工具\n---\n** hexo配置和优化高级篇：** <Excerpt in index | 首页摘要>\n本文章不讲解hexo的基础配置，只针对hexo的高级配置，性能优化，seo配置进行讲解。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 前言\n仔细想想，使用hexo搭建博客也有半年多了，但是发现访问量一直几乎没有，特别是经历几次迁移之后，之前从github到coding，\n现在迁移到了云服务器，研究了一下如何进行seo和网站性能优化，便有了这篇文章。\n\n## 实用的功能\n1. 站内搜索（百度的）\n2. 本地搜索（本地插件）\n3. 网站统计\n4. 留言功能\n5. rss订阅功能\n\n\n## 性能优化\n1. html压缩\n2. css压缩\n3. js压缩·\n4. img压缩\n5. nginx代理，开启gzip压缩\n6. cdn代理css和图·片\n7. 删除主题无用的js和css\n\n## seo优化\n1. sitemap\n2. 对于没有价值的外链a标签添加`rel=\"external nofollow\"`\n3. 使用meta标签\n4. 使用robots文件\n5. 主动提交sitemap到搜索引擎\n6. 添加外链和内链\n\n\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"hexo-config","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla68001j8p9ko7d1o7uv","content":"<p><strong> hexo配置和优化高级篇：</strong> <Excerpt in index | 首页摘要><br>本文章不讲解hexo的基础配置，只针对hexo的高级配置，性能优化，seo配置进行讲解。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>仔细想想，使用hexo搭建博客也有半年多了，但是发现访问量一直几乎没有，特别是经历几次迁移之后，之前从github到coding，<br>现在迁移到了云服务器，研究了一下如何进行seo和网站性能优化，便有了这篇文章。</p>\n<h2 id=\"实用的功能\"><a href=\"#实用的功能\" class=\"headerlink\" title=\"实用的功能\"></a>实用的功能</h2><ol>\n<li>站内搜索（百度的）</li>\n<li>本地搜索（本地插件）</li>\n<li>网站统计</li>\n<li>留言功能</li>\n<li>rss订阅功能</li>\n</ol>\n<h2 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h2><ol>\n<li>html压缩</li>\n<li>css压缩</li>\n<li>js压缩·</li>\n<li>img压缩</li>\n<li>nginx代理，开启gzip压缩</li>\n<li>cdn代理css和图·片</li>\n<li>删除主题无用的js和css</li>\n</ol>\n<h2 id=\"seo优化\"><a href=\"#seo优化\" class=\"headerlink\" title=\"seo优化\"></a>seo优化</h2><ol>\n<li>sitemap</li>\n<li>对于没有价值的外链a标签添加<code>rel=&quot;external nofollow&quot;</code></li>\n<li>使用meta标签</li>\n<li>使用robots文件</li>\n<li>主动提交sitemap到搜索引擎</li>\n<li>添加外链和内链</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> hexo配置和优化高级篇：</strong> <Excerpt in index | 首页摘要><br>本文章不讲解hexo的基础配置，只针对hexo的高级配置，性能优化，seo配置进行讲解。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>仔细想想，使用hexo搭建博客也有半年多了，但是发现访问量一直几乎没有，特别是经历几次迁移之后，之前从github到coding，<br>现在迁移到了云服务器，研究了一下如何进行seo和网站性能优化，便有了这篇文章。</p>\n<h2 id=\"实用的功能\"><a href=\"#实用的功能\" class=\"headerlink\" title=\"实用的功能\"></a>实用的功能</h2><ol>\n<li>站内搜索（百度的）</li>\n<li>本地搜索（本地插件）</li>\n<li>网站统计</li>\n<li>留言功能</li>\n<li>rss订阅功能</li>\n</ol>\n<h2 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h2><ol>\n<li>html压缩</li>\n<li>css压缩</li>\n<li>js压缩·</li>\n<li>img压缩</li>\n<li>nginx代理，开启gzip压缩</li>\n<li>cdn代理css和图·片</li>\n<li>删除主题无用的js和css</li>\n</ol>\n<h2 id=\"seo优化\"><a href=\"#seo优化\" class=\"headerlink\" title=\"seo优化\"></a>seo优化</h2><ol>\n<li>sitemap</li>\n<li>对于没有价值的外链a标签添加<code>rel=&quot;external nofollow&quot;</code></li>\n<li>使用meta标签</li>\n<li>使用robots文件</li>\n<li>主动提交sitemap到搜索引擎</li>\n<li>添加外链和内链</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Hexo自用黑色主题","date":"2017-05-23T03:32:59.000Z","_content":"** hexo和coding打造静态博客 ：** <Excerpt in index | 首页摘要\\>\n使用hexo一年有余，对所有主题都感觉有所缺陷，便修改了一个自用黑色主题，本主题以黑色和蓝色为主，色彩鲜明，主题明确。\t\n<!-- more -->\n<The rest of contents | 余下全文\\>\n\n## 主题图片\n![主题首页](http://o7kalf5h3.bkt.clouddn.com/blog-index.png) \n\n## black-blue主题来源\n本主题修改自**spfk**主题，但之前spfk主题有很多问题，本主题改进如下：\n1. 压缩js，css提高性能\n2. 代码段样式显示更完美\n3. 增加本地搜索\n4. 设置更合适的字体大小\n5. 颜色以黑色和蓝色为主，色彩鲜明\n6. seo适当优化\n7. 删除多说，有言，增加畅言评论\n8. 删除stylus，全部改用css方便修改\n\n## 主题地址\n[black-blue](https://github.com/maochunguang/black-blue)\n\n## 注意：\n大家使用主题的时候，把**主题配置文件_config.yml**以下几项必须修改，项目里实用的是我博客的正式代码，请大家修改成自己的！\n```yml\ngoogle_analytics: xxx\nbaidu_analytics: xxxxxxx\ndisqus:\n  on: false\n  shortname: xxxx\n# 畅言评论\nchangyan:\n  on: true\n  appid: xxxx\n  conf: xxxxx\n\n```\n## black-blue主题配置\n### 切换主题\n复制主题到themes目录下`cd themes && git clone https://github.com/maochunguang/black-blue`，修改_config.yml `theme: black-blue`\n\n### 安装常用插件，建议全部安装\n```bash\n## rss插件\nnpm install hexo-generator-feed --save\n## 站点sitemap生成插件\nnpm install hexo-generator-sitemap --save\nnpm install hexo-generator-baidu-sitemap --save\n## 百度url提交\nnpm install hexo-baidu-url-submit --save\n## 本地搜索插件集成\nnpm install hexo-generator-search --save\n```\n### 博客全局配置，修改根目录下_config.yml\n插件配置\n```yml\nPlugins:\n- hexo-generator-feed\n- hexo-generator-sitemap\n- hexo-generator-baidu-sitemap\n```\nrss设置\n```yml\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n```\n本地搜索配置\n```yml\nsearch:\n  path: search.json\n  field: post\n```\n站点地图，seo搜索引擎需要\n```yml\nsitemap:\n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n```\n### 主题配置\n菜单配置\n```yml\n## 添加单独的页面:hexo new page about，about是页面的路径，也是名称\n## Tags Cloud Page: `hexo new page tags`\nmenu:\n  # 主页: /archives/\n  所有文章: /archives/\n  玩转开发工具: /categories/开发工具/\n  玩转数码: /categories/digital\n  认知提升: /categories/cognition\n  关于我: /about/\n```\n评论配置\n```yml\n# 是否开启畅言评论，\nchangyan:\n  on: true\n  appid: xxxx\n  conf: xxxxxxxxxxxx\n# 是否开启disqus，\ndisqus:\n  on: false\n  shortname: mmmmmm\n```\n\n### 其他配置，**详细的配置请下载主题，都有注释**\n```yml\n# 数学公式支持\nmathjax: false\n# Socail Share | 是否开启分享\nbaidushare: true\n# 谷歌分析，百度分析，seo分析很有用\ngoogle_analytics: xxxxxx\nbaidu_analytics: xxcxcxcsdsf\n\n```\n## 自定义配置（对前端技术有了解即可）\n### 显示更多和折叠文章\n你的md文件格式需要按下面的来：\n```\ntitle: 突破算法第11天-红黑树\ndate: 2017-10-30 22:35:37\ntags: 算法\ncategories: algorithm\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n红黑树\n<!-- more -->\n<The rest of contents | 余下全文>\n正文……\n```\n\n### 头像配置\n在themes/black-blue/source/img/avatar.png,替换此头像即可实现自定义头像\n\n### 背景图片配置\n在themes/black-blue/source/background/,替换为自己喜欢的图片，图片名称不能改\n\n### 添加评论插件\n比如把畅言替换为有言\n1. 先修改themes/black-blue/_config.yml文件\n```yml\nchangyan:\n  on: true\n  uid: xxxxxxx\n```\n2. 修改themes/black-blue/layout/_partial/comments/changyan.ejs\n```js\n<section class=\"changyan\" id=\"comments\">\n<div id=\"uyan_frame\"></div>\n<script type=\"text/javascript\" src=\"http://v2.uyan.cc/code/uyan.js?uid=<%= uid%>\">\n</script>\n</section>\n```\n3. 修改themes/black-blue/layout/_partial/article.ejs\n```js\n<%- partial('comments/changyan', {\n  uid: theme.changyan.uid\n}) %>\n```\n4. 重新生成页面`hexo g`\n","source":"_posts/hexo-theme.md","raw":"title: hexo自用黑色主题\ndate: 2017-05-23 11:32:59\ntags: hexo\ncategories: 开发工具\n---\n** hexo和coding打造静态博客 ：** <Excerpt in index | 首页摘要\\>\n使用hexo一年有余，对所有主题都感觉有所缺陷，便修改了一个自用黑色主题，本主题以黑色和蓝色为主，色彩鲜明，主题明确。\t\n<!-- more -->\n<The rest of contents | 余下全文\\>\n\n## 主题图片\n![主题首页](http://o7kalf5h3.bkt.clouddn.com/blog-index.png) \n\n## black-blue主题来源\n本主题修改自**spfk**主题，但之前spfk主题有很多问题，本主题改进如下：\n1. 压缩js，css提高性能\n2. 代码段样式显示更完美\n3. 增加本地搜索\n4. 设置更合适的字体大小\n5. 颜色以黑色和蓝色为主，色彩鲜明\n6. seo适当优化\n7. 删除多说，有言，增加畅言评论\n8. 删除stylus，全部改用css方便修改\n\n## 主题地址\n[black-blue](https://github.com/maochunguang/black-blue)\n\n## 注意：\n大家使用主题的时候，把**主题配置文件_config.yml**以下几项必须修改，项目里实用的是我博客的正式代码，请大家修改成自己的！\n```yml\ngoogle_analytics: xxx\nbaidu_analytics: xxxxxxx\ndisqus:\n  on: false\n  shortname: xxxx\n# 畅言评论\nchangyan:\n  on: true\n  appid: xxxx\n  conf: xxxxx\n\n```\n## black-blue主题配置\n### 切换主题\n复制主题到themes目录下`cd themes && git clone https://github.com/maochunguang/black-blue`，修改_config.yml `theme: black-blue`\n\n### 安装常用插件，建议全部安装\n```bash\n## rss插件\nnpm install hexo-generator-feed --save\n## 站点sitemap生成插件\nnpm install hexo-generator-sitemap --save\nnpm install hexo-generator-baidu-sitemap --save\n## 百度url提交\nnpm install hexo-baidu-url-submit --save\n## 本地搜索插件集成\nnpm install hexo-generator-search --save\n```\n### 博客全局配置，修改根目录下_config.yml\n插件配置\n```yml\nPlugins:\n- hexo-generator-feed\n- hexo-generator-sitemap\n- hexo-generator-baidu-sitemap\n```\nrss设置\n```yml\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n```\n本地搜索配置\n```yml\nsearch:\n  path: search.json\n  field: post\n```\n站点地图，seo搜索引擎需要\n```yml\nsitemap:\n  path: sitemap.xml\nbaidusitemap:\n  path: baidusitemap.xml\n```\n### 主题配置\n菜单配置\n```yml\n## 添加单独的页面:hexo new page about，about是页面的路径，也是名称\n## Tags Cloud Page: `hexo new page tags`\nmenu:\n  # 主页: /archives/\n  所有文章: /archives/\n  玩转开发工具: /categories/开发工具/\n  玩转数码: /categories/digital\n  认知提升: /categories/cognition\n  关于我: /about/\n```\n评论配置\n```yml\n# 是否开启畅言评论，\nchangyan:\n  on: true\n  appid: xxxx\n  conf: xxxxxxxxxxxx\n# 是否开启disqus，\ndisqus:\n  on: false\n  shortname: mmmmmm\n```\n\n### 其他配置，**详细的配置请下载主题，都有注释**\n```yml\n# 数学公式支持\nmathjax: false\n# Socail Share | 是否开启分享\nbaidushare: true\n# 谷歌分析，百度分析，seo分析很有用\ngoogle_analytics: xxxxxx\nbaidu_analytics: xxcxcxcsdsf\n\n```\n## 自定义配置（对前端技术有了解即可）\n### 显示更多和折叠文章\n你的md文件格式需要按下面的来：\n```\ntitle: 突破算法第11天-红黑树\ndate: 2017-10-30 22:35:37\ntags: 算法\ncategories: algorithm\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n红黑树\n<!-- more -->\n<The rest of contents | 余下全文>\n正文……\n```\n\n### 头像配置\n在themes/black-blue/source/img/avatar.png,替换此头像即可实现自定义头像\n\n### 背景图片配置\n在themes/black-blue/source/background/,替换为自己喜欢的图片，图片名称不能改\n\n### 添加评论插件\n比如把畅言替换为有言\n1. 先修改themes/black-blue/_config.yml文件\n```yml\nchangyan:\n  on: true\n  uid: xxxxxxx\n```\n2. 修改themes/black-blue/layout/_partial/comments/changyan.ejs\n```js\n<section class=\"changyan\" id=\"comments\">\n<div id=\"uyan_frame\"></div>\n<script type=\"text/javascript\" src=\"http://v2.uyan.cc/code/uyan.js?uid=<%= uid%>\">\n</script>\n</section>\n```\n3. 修改themes/black-blue/layout/_partial/article.ejs\n```js\n<%- partial('comments/changyan', {\n  uid: theme.changyan.uid\n}) %>\n```\n4. 重新生成页面`hexo g`\n","slug":"hexo-theme","published":1,"updated":"2017-11-03T13:48:29.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla6b001n8p9knamman33","content":"<p><strong> hexo和coding打造静态博客 ：</strong> <Excerpt in index | 首页摘要\\><br>使用hexo一年有余，对所有主题都感觉有所缺陷，便修改了一个自用黑色主题，本主题以黑色和蓝色为主，色彩鲜明，主题明确。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文\\>\n\n<h2 id=\"主题图片\"><a href=\"#主题图片\" class=\"headerlink\" title=\"主题图片\"></a>主题图片</h2><p><img src=\"http://o7kalf5h3.bkt.clouddn.com/blog-index.png\" alt=\"主题首页\"> </p>\n<h2 id=\"black-blue主题来源\"><a href=\"#black-blue主题来源\" class=\"headerlink\" title=\"black-blue主题来源\"></a>black-blue主题来源</h2><p>本主题修改自<strong>spfk</strong>主题，但之前spfk主题有很多问题，本主题改进如下：</p>\n<ol>\n<li>压缩js，css提高性能</li>\n<li>代码段样式显示更完美</li>\n<li>增加本地搜索</li>\n<li>设置更合适的字体大小</li>\n<li>颜色以黑色和蓝色为主，色彩鲜明</li>\n<li>seo适当优化</li>\n<li>删除多说，有言，增加畅言评论</li>\n<li>删除stylus，全部改用css方便修改</li>\n</ol>\n<h2 id=\"主题地址\"><a href=\"#主题地址\" class=\"headerlink\" title=\"主题地址\"></a>主题地址</h2><p><a href=\"https://github.com/maochunguang/black-blue\">black-blue</a></p>\n<h2 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h2><p>大家使用主题的时候，把<strong>主题配置文件_config.yml</strong>以下几项必须修改，项目里实用的是我博客的正式代码，请大家修改成自己的！<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">google_analytics:</span> xxx</div><div class=\"line\"><span class=\"attr\">baidu_analytics:</span> xxxxxxx</div><div class=\"line\"><span class=\"attr\">disqus:</span></div><div class=\"line\"><span class=\"attr\">  on:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  shortname:</span> xxxx</div><div class=\"line\"><span class=\"comment\"># 畅言评论</span></div><div class=\"line\"><span class=\"attr\">changyan:</span></div><div class=\"line\"><span class=\"attr\">  on:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  appid:</span> xxxx</div><div class=\"line\"><span class=\"attr\">  conf:</span> xxxxx</div></pre></td></tr></table></figure></p>\n<h2 id=\"black-blue主题配置\"><a href=\"#black-blue主题配置\" class=\"headerlink\" title=\"black-blue主题配置\"></a>black-blue主题配置</h2><h3 id=\"切换主题\"><a href=\"#切换主题\" class=\"headerlink\" title=\"切换主题\"></a>切换主题</h3><p>复制主题到themes目录下<code>cd themes &amp;&amp; git clone https://github.com/maochunguang/black-blue</code>，修改_config.yml <code>theme: black-blue</code></p>\n<h3 id=\"安装常用插件，建议全部安装\"><a href=\"#安装常用插件，建议全部安装\" class=\"headerlink\" title=\"安装常用插件，建议全部安装\"></a>安装常用插件，建议全部安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">## rss插件</span></div><div class=\"line\">npm install hexo-generator-feed --save</div><div class=\"line\"><span class=\"comment\">## 站点sitemap生成插件</span></div><div class=\"line\">npm install hexo-generator-sitemap --save</div><div class=\"line\">npm install hexo-generator-baidu-sitemap --save</div><div class=\"line\"><span class=\"comment\">## 百度url提交</span></div><div class=\"line\">npm install hexo-baidu-url-submit --save</div><div class=\"line\"><span class=\"comment\">## 本地搜索插件集成</span></div><div class=\"line\">npm install hexo-generator-search --save</div></pre></td></tr></table></figure>\n<h3 id=\"博客全局配置，修改根目录下-config-yml\"><a href=\"#博客全局配置，修改根目录下-config-yml\" class=\"headerlink\" title=\"博客全局配置，修改根目录下_config.yml\"></a>博客全局配置，修改根目录下_config.yml</h3><p>插件配置<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Plugins:</span></div><div class=\"line\"><span class=\"bullet\">-</span> hexo-generator-feed</div><div class=\"line\"><span class=\"bullet\">-</span> hexo-generator-sitemap</div><div class=\"line\"><span class=\"bullet\">-</span> hexo-generator-baidu-sitemap</div></pre></td></tr></table></figure></p>\n<p>rss设置<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">feed:</span></div><div class=\"line\"><span class=\"attr\">  type:</span> atom</div><div class=\"line\"><span class=\"attr\">  path:</span> atom.xml</div><div class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">20</span></div></pre></td></tr></table></figure></p>\n<p>本地搜索配置<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">search:</span></div><div class=\"line\"><span class=\"attr\">  path:</span> search.json</div><div class=\"line\"><span class=\"attr\">  field:</span> post</div></pre></td></tr></table></figure></p>\n<p>站点地图，seo搜索引擎需要<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">sitemap:</span></div><div class=\"line\"><span class=\"attr\">  path:</span> sitemap.xml</div><div class=\"line\"><span class=\"attr\">baidusitemap:</span></div><div class=\"line\"><span class=\"attr\">  path:</span> baidusitemap.xml</div></pre></td></tr></table></figure></p>\n<h3 id=\"主题配置\"><a href=\"#主题配置\" class=\"headerlink\" title=\"主题配置\"></a>主题配置</h3><p>菜单配置<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">## 添加单独的页面:hexo new page about，about是页面的路径，也是名称</span></div><div class=\"line\"><span class=\"comment\">## Tags Cloud Page: `hexo new page tags`</span></div><div class=\"line\"><span class=\"attr\">menu:</span></div><div class=\"line\">  <span class=\"comment\"># 主页: /archives/</span></div><div class=\"line\">  所有文章: /archives/</div><div class=\"line\">  玩转开发工具: /categories/开发工具/</div><div class=\"line\">  玩转数码: /categories/digital</div><div class=\"line\">  认知提升: /categories/cognition</div><div class=\"line\">  关于我: /about/</div></pre></td></tr></table></figure></p>\n<p>评论配置<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 是否开启畅言评论，</span></div><div class=\"line\"><span class=\"attr\">changyan:</span></div><div class=\"line\"><span class=\"attr\">  on:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  appid:</span> xxxx</div><div class=\"line\"><span class=\"attr\">  conf:</span> xxxxxxxxxxxx</div><div class=\"line\"><span class=\"comment\"># 是否开启disqus，</span></div><div class=\"line\"><span class=\"attr\">disqus:</span></div><div class=\"line\"><span class=\"attr\">  on:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  shortname:</span> mmmmmm</div></pre></td></tr></table></figure></p>\n<h3 id=\"其他配置，详细的配置请下载主题，都有注释\"><a href=\"#其他配置，详细的配置请下载主题，都有注释\" class=\"headerlink\" title=\"其他配置，详细的配置请下载主题，都有注释\"></a>其他配置，<strong>详细的配置请下载主题，都有注释</strong></h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 数学公式支持</span></div><div class=\"line\"><span class=\"attr\">mathjax:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"comment\"># Socail Share | 是否开启分享</span></div><div class=\"line\"><span class=\"attr\">baidushare:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\"># 谷歌分析，百度分析，seo分析很有用</span></div><div class=\"line\"><span class=\"attr\">google_analytics:</span> xxxxxx</div><div class=\"line\"><span class=\"attr\">baidu_analytics:</span> xxcxcxcsdsf</div></pre></td></tr></table></figure>\n<h2 id=\"自定义配置（对前端技术有了解即可）\"><a href=\"#自定义配置（对前端技术有了解即可）\" class=\"headerlink\" title=\"自定义配置（对前端技术有了解即可）\"></a>自定义配置（对前端技术有了解即可）</h2><h3 id=\"显示更多和折叠文章\"><a href=\"#显示更多和折叠文章\" class=\"headerlink\" title=\"显示更多和折叠文章\"></a>显示更多和折叠文章</h3><p>你的md文件格式需要按下面的来：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">title:</span> 突破算法第<span class=\"number\">11</span>天-红黑树</div><div class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2017</span><span class=\"bullet\">-10</span><span class=\"bullet\">-30</span> <span class=\"number\">22</span>:<span class=\"number\">35</span>:<span class=\"number\">37</span></div><div class=\"line\"><span class=\"attr\">tags:</span> 算法</div><div class=\"line\"><span class=\"attr\">categories:</span> algorithm</div><div class=\"line\"><span class=\"meta\">---</span></div><div class=\"line\">** &#123;&#123; title &#125;&#125;：** &lt;Excerpt in index | 首页摘要<span class=\"string\">&gt;</div><div class=\"line\">红黑树</div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\">&lt;The rest of contents | 余下全文&gt;</div><div class=\"line\">正文……</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"头像配置\"><a href=\"#头像配置\" class=\"headerlink\" title=\"头像配置\"></a>头像配置</h3><p>在themes/black-blue/source/img/avatar.png,替换此头像即可实现自定义头像</p>\n<h3 id=\"背景图片配置\"><a href=\"#背景图片配置\" class=\"headerlink\" title=\"背景图片配置\"></a>背景图片配置</h3><p>在themes/black-blue/source/background/,替换为自己喜欢的图片，图片名称不能改</p>\n<h3 id=\"添加评论插件\"><a href=\"#添加评论插件\" class=\"headerlink\" title=\"添加评论插件\"></a>添加评论插件</h3><p>比如把畅言替换为有言</p>\n<ol>\n<li><p>先修改themes/black-blue/_config.yml文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">changyan:</span></div><div class=\"line\"><span class=\"attr\">  on:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  uid:</span> xxxxxxx</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改themes/black-blue/layout/_partial/comments/changyan.ejs</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;section <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"changyan\"</span> id=<span class=\"string\">\"comments\"</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"uyan_frame\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://v2.uyan.cc/code/uyan.js?uid=&lt;%= uid%&gt;\"</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\">&lt;<span class=\"regexp\">/section&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>修改themes/black-blue/layout/_partial/article.ejs</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- partial(<span class=\"string\">'comments/changyan'</span>, &#123;</div><div class=\"line\">  uid: theme.changyan.uid</div><div class=\"line\">&#125;) %&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>重新生成页面<code>hexo g</code></p>\n</li>\n</ol>\n","excerpt":"<p><strong> hexo和coding打造静态博客 ：</strong> <Excerpt in index | 首页摘要\\><br>使用hexo一年有余，对所有主题都感觉有所缺陷，便修改了一个自用黑色主题，本主题以黑色和蓝色为主，色彩鲜明，主题明确。<br>","more":"</p>\n<The rest of contents | 余下全文\\>\n\n<h2 id=\"主题图片\"><a href=\"#主题图片\" class=\"headerlink\" title=\"主题图片\"></a>主题图片</h2><p><img src=\"http://o7kalf5h3.bkt.clouddn.com/blog-index.png\" alt=\"主题首页\"> </p>\n<h2 id=\"black-blue主题来源\"><a href=\"#black-blue主题来源\" class=\"headerlink\" title=\"black-blue主题来源\"></a>black-blue主题来源</h2><p>本主题修改自<strong>spfk</strong>主题，但之前spfk主题有很多问题，本主题改进如下：</p>\n<ol>\n<li>压缩js，css提高性能</li>\n<li>代码段样式显示更完美</li>\n<li>增加本地搜索</li>\n<li>设置更合适的字体大小</li>\n<li>颜色以黑色和蓝色为主，色彩鲜明</li>\n<li>seo适当优化</li>\n<li>删除多说，有言，增加畅言评论</li>\n<li>删除stylus，全部改用css方便修改</li>\n</ol>\n<h2 id=\"主题地址\"><a href=\"#主题地址\" class=\"headerlink\" title=\"主题地址\"></a>主题地址</h2><p><a href=\"https://github.com/maochunguang/black-blue\">black-blue</a></p>\n<h2 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h2><p>大家使用主题的时候，把<strong>主题配置文件_config.yml</strong>以下几项必须修改，项目里实用的是我博客的正式代码，请大家修改成自己的！<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">google_analytics:</span> xxx</div><div class=\"line\"><span class=\"attr\">baidu_analytics:</span> xxxxxxx</div><div class=\"line\"><span class=\"attr\">disqus:</span></div><div class=\"line\"><span class=\"attr\">  on:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  shortname:</span> xxxx</div><div class=\"line\"><span class=\"comment\"># 畅言评论</span></div><div class=\"line\"><span class=\"attr\">changyan:</span></div><div class=\"line\"><span class=\"attr\">  on:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  appid:</span> xxxx</div><div class=\"line\"><span class=\"attr\">  conf:</span> xxxxx</div></pre></td></tr></table></figure></p>\n<h2 id=\"black-blue主题配置\"><a href=\"#black-blue主题配置\" class=\"headerlink\" title=\"black-blue主题配置\"></a>black-blue主题配置</h2><h3 id=\"切换主题\"><a href=\"#切换主题\" class=\"headerlink\" title=\"切换主题\"></a>切换主题</h3><p>复制主题到themes目录下<code>cd themes &amp;&amp; git clone https://github.com/maochunguang/black-blue</code>，修改_config.yml <code>theme: black-blue</code></p>\n<h3 id=\"安装常用插件，建议全部安装\"><a href=\"#安装常用插件，建议全部安装\" class=\"headerlink\" title=\"安装常用插件，建议全部安装\"></a>安装常用插件，建议全部安装</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">## rss插件</span></div><div class=\"line\">npm install hexo-generator-feed --save</div><div class=\"line\"><span class=\"comment\">## 站点sitemap生成插件</span></div><div class=\"line\">npm install hexo-generator-sitemap --save</div><div class=\"line\">npm install hexo-generator-baidu-sitemap --save</div><div class=\"line\"><span class=\"comment\">## 百度url提交</span></div><div class=\"line\">npm install hexo-baidu-url-submit --save</div><div class=\"line\"><span class=\"comment\">## 本地搜索插件集成</span></div><div class=\"line\">npm install hexo-generator-search --save</div></pre></td></tr></table></figure>\n<h3 id=\"博客全局配置，修改根目录下-config-yml\"><a href=\"#博客全局配置，修改根目录下-config-yml\" class=\"headerlink\" title=\"博客全局配置，修改根目录下_config.yml\"></a>博客全局配置，修改根目录下_config.yml</h3><p>插件配置<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">Plugins:</span></div><div class=\"line\"><span class=\"bullet\">-</span> hexo-generator-feed</div><div class=\"line\"><span class=\"bullet\">-</span> hexo-generator-sitemap</div><div class=\"line\"><span class=\"bullet\">-</span> hexo-generator-baidu-sitemap</div></pre></td></tr></table></figure></p>\n<p>rss设置<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">feed:</span></div><div class=\"line\"><span class=\"attr\">  type:</span> atom</div><div class=\"line\"><span class=\"attr\">  path:</span> atom.xml</div><div class=\"line\"><span class=\"attr\">  limit:</span> <span class=\"number\">20</span></div></pre></td></tr></table></figure></p>\n<p>本地搜索配置<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">search:</span></div><div class=\"line\"><span class=\"attr\">  path:</span> search.json</div><div class=\"line\"><span class=\"attr\">  field:</span> post</div></pre></td></tr></table></figure></p>\n<p>站点地图，seo搜索引擎需要<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">sitemap:</span></div><div class=\"line\"><span class=\"attr\">  path:</span> sitemap.xml</div><div class=\"line\"><span class=\"attr\">baidusitemap:</span></div><div class=\"line\"><span class=\"attr\">  path:</span> baidusitemap.xml</div></pre></td></tr></table></figure></p>\n<h3 id=\"主题配置\"><a href=\"#主题配置\" class=\"headerlink\" title=\"主题配置\"></a>主题配置</h3><p>菜单配置<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">## 添加单独的页面:hexo new page about，about是页面的路径，也是名称</span></div><div class=\"line\"><span class=\"comment\">## Tags Cloud Page: `hexo new page tags`</span></div><div class=\"line\"><span class=\"attr\">menu:</span></div><div class=\"line\">  <span class=\"comment\"># 主页: /archives/</span></div><div class=\"line\">  所有文章: /archives/</div><div class=\"line\">  玩转开发工具: /categories/开发工具/</div><div class=\"line\">  玩转数码: /categories/digital</div><div class=\"line\">  认知提升: /categories/cognition</div><div class=\"line\">  关于我: /about/</div></pre></td></tr></table></figure></p>\n<p>评论配置<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 是否开启畅言评论，</span></div><div class=\"line\"><span class=\"attr\">changyan:</span></div><div class=\"line\"><span class=\"attr\">  on:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  appid:</span> xxxx</div><div class=\"line\"><span class=\"attr\">  conf:</span> xxxxxxxxxxxx</div><div class=\"line\"><span class=\"comment\"># 是否开启disqus，</span></div><div class=\"line\"><span class=\"attr\">disqus:</span></div><div class=\"line\"><span class=\"attr\">  on:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">  shortname:</span> mmmmmm</div></pre></td></tr></table></figure></p>\n<h3 id=\"其他配置，详细的配置请下载主题，都有注释\"><a href=\"#其他配置，详细的配置请下载主题，都有注释\" class=\"headerlink\" title=\"其他配置，详细的配置请下载主题，都有注释\"></a>其他配置，<strong>详细的配置请下载主题，都有注释</strong></h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 数学公式支持</span></div><div class=\"line\"><span class=\"attr\">mathjax:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"comment\"># Socail Share | 是否开启分享</span></div><div class=\"line\"><span class=\"attr\">baidushare:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"comment\"># 谷歌分析，百度分析，seo分析很有用</span></div><div class=\"line\"><span class=\"attr\">google_analytics:</span> xxxxxx</div><div class=\"line\"><span class=\"attr\">baidu_analytics:</span> xxcxcxcsdsf</div></pre></td></tr></table></figure>\n<h2 id=\"自定义配置（对前端技术有了解即可）\"><a href=\"#自定义配置（对前端技术有了解即可）\" class=\"headerlink\" title=\"自定义配置（对前端技术有了解即可）\"></a>自定义配置（对前端技术有了解即可）</h2><h3 id=\"显示更多和折叠文章\"><a href=\"#显示更多和折叠文章\" class=\"headerlink\" title=\"显示更多和折叠文章\"></a>显示更多和折叠文章</h3><p>你的md文件格式需要按下面的来：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">title:</span> 突破算法第<span class=\"number\">11</span>天-红黑树</div><div class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2017</span><span class=\"bullet\">-10</span><span class=\"bullet\">-30</span> <span class=\"number\">22</span>:<span class=\"number\">35</span>:<span class=\"number\">37</span></div><div class=\"line\"><span class=\"attr\">tags:</span> 算法</div><div class=\"line\"><span class=\"attr\">categories:</span> algorithm</div><div class=\"line\"><span class=\"meta\">---</span></div><div class=\"line\">** &#123;&#123; title &#125;&#125;：** &lt;Excerpt in index | 首页摘要<span class=\"string\">&gt;</div><div class=\"line\">红黑树</div><div class=\"line\">&lt;!-- more --&gt;</div><div class=\"line\">&lt;The rest of contents | 余下全文&gt;</div><div class=\"line\">正文……</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"头像配置\"><a href=\"#头像配置\" class=\"headerlink\" title=\"头像配置\"></a>头像配置</h3><p>在themes/black-blue/source/img/avatar.png,替换此头像即可实现自定义头像</p>\n<h3 id=\"背景图片配置\"><a href=\"#背景图片配置\" class=\"headerlink\" title=\"背景图片配置\"></a>背景图片配置</h3><p>在themes/black-blue/source/background/,替换为自己喜欢的图片，图片名称不能改</p>\n<h3 id=\"添加评论插件\"><a href=\"#添加评论插件\" class=\"headerlink\" title=\"添加评论插件\"></a>添加评论插件</h3><p>比如把畅言替换为有言</p>\n<ol>\n<li><p>先修改themes/black-blue/_config.yml文件</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">changyan:</span></div><div class=\"line\"><span class=\"attr\">  on:</span> <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"attr\">  uid:</span> xxxxxxx</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改themes/black-blue/layout/_partial/comments/changyan.ejs</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;section <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"changyan\"</span> id=<span class=\"string\">\"comments\"</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"uyan_frame\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://v2.uyan.cc/code/uyan.js?uid=&lt;%= uid%&gt;\"</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></div><div class=\"line\">&lt;<span class=\"regexp\">/section&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>修改themes/black-blue/layout/_partial/article.ejs</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- partial(<span class=\"string\">'comments/changyan'</span>, &#123;</div><div class=\"line\">  uid: theme.changyan.uid</div><div class=\"line\">&#125;) %&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>重新生成页面<code>hexo g</code></p>\n</li>\n</ol>"},{"title":"Java面试大全自制版","date":"2017-07-24T13:07:00.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\njava语言知识点多而杂，面试时很多人找不到重点。这份java面试大全，有部分网络上资源，大多数是从好的文章和书籍里总结出来的知识点。\n<!-- more -->\n<The rest of contents | 余下全文>\n## 本书的目的\n每个java程序员在面试前都不知该准备什么？或者是随便看几个文章就去面试，这样的结果很容易失败！希望本书能给java程序员一个好的指引，让java程序员没有难找的工作！\n\n## 目录\n[gitbook地址](https://maochunguang.gitbooks.io/java-interview/)\n![目录截图](http://o7kalf5h3.bkt.clouddn.com/java-tips.png)\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/java-interview.md","raw":"title: java面试大全自制版\ndate: 2017-07-24 21:07:00\ntags: java\ncategories: 学习笔记\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\njava语言知识点多而杂，面试时很多人找不到重点。这份java面试大全，有部分网络上资源，大多数是从好的文章和书籍里总结出来的知识点。\n<!-- more -->\n<The rest of contents | 余下全文>\n## 本书的目的\n每个java程序员在面试前都不知该准备什么？或者是随便看几个文章就去面试，这样的结果很容易失败！希望本书能给java程序员一个好的指引，让java程序员没有难找的工作！\n\n## 目录\n[gitbook地址](https://maochunguang.gitbooks.io/java-interview/)\n![目录截图](http://o7kalf5h3.bkt.clouddn.com/java-tips.png)\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"java-interview","published":1,"updated":"2017-07-24T13:20:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla6e001r8p9kcodpllue","content":"<p><strong> Java面试大全自制版：</strong> <Excerpt in index | 首页摘要><br>java语言知识点多而杂，面试时很多人找不到重点。这份java面试大全，有部分网络上资源，大多数是从好的文章和书籍里总结出来的知识点。<br><a id=\"more\"></a></p>\n<p><The rest of contents | 余下全文></p>\n<h2 id=\"本书的目的\"><a href=\"#本书的目的\" class=\"headerlink\" title=\"本书的目的\"></a>本书的目的</h2><p>每个java程序员在面试前都不知该准备什么？或者是随便看几个文章就去面试，这样的结果很容易失败！希望本书能给java程序员一个好的指引，让java程序员没有难找的工作！</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p><a href=\"https://maochunguang.gitbooks.io/java-interview/\">gitbook地址</a><br><img src=\"http://o7kalf5h3.bkt.clouddn.com/java-tips.png\" alt=\"目录截图\"></p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> Java面试大全自制版：</strong> <Excerpt in index | 首页摘要><br>java语言知识点多而杂，面试时很多人找不到重点。这份java面试大全，有部分网络上资源，大多数是从好的文章和书籍里总结出来的知识点。<br>","more":"</p>\n<p><The rest of contents | 余下全文></p>\n<h2 id=\"本书的目的\"><a href=\"#本书的目的\" class=\"headerlink\" title=\"本书的目的\"></a>本书的目的</h2><p>每个java程序员在面试前都不知该准备什么？或者是随便看几个文章就去面试，这样的结果很容易失败！希望本书能给java程序员一个好的指引，让java程序员没有难找的工作！</p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p><a href=\"https://maochunguang.gitbooks.io/java-interview/\">gitbook地址</a><br><img src=\"http://o7kalf5h3.bkt.clouddn.com/java-tips.png\" alt=\"目录截图\"></p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Java和javascript日期详解","date":"2016-05-13T13:48:00.000Z","_content":"** java，js日期转换：** <Excerpt in index | 首页摘要>\n    java的各种日期转换\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 日期表示类型\n1. 获取long类型的日期格式\n```java\nlong time = System.currentTimeMillis();\nSystem.out.printf(time+\"\");\nDate date =new Date();\nSystem.out.println(date.getTime());\n```\n2. 获取制定格式的日期\n```java\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\nDate date =new Date();\nSystem.out.println(sdf.format(date) );\n```\n3. 把制定格式的日期转为date或者毫秒值\n```java\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\nDate date = sdf.parse(\"2016-05-22 10:15:21\");\nlong mills = date.getTime();\n```\n- 说明:System.currentTimeMillis()并不能精确到1ms的级别,它取决于运行的系统,你再windows,mac,linux精确的范围都有差异,对于有高精度时间的要求,不能使用这个\n\n## 日期计算\n1. 最方便的方式是将时间转为毫秒值进行计算\n```java\nDate from =new Date();\nThread.sleep(200);//线程休眠2ms\nDate to =new Date();\nSystem.out.println(to.getTime()-from.getTime());\n```\n\n## 高精度时间\n```java\nlong time1 =System.nanoTime();\nSystem.out.printf(time1+\"\");\n```\n- 说明:System.nanoTime()提高了ns级别的精度,1ms=1000000ns,\n\n## javascript日期\n1. 获取时间的毫秒值，获取月份，时间\n```js\nvar myDate = new Date();\nmyDate.getYear(); //获取当前年份(2位)\nmyDate.getFullYear(); //获取完整的年份(4位,1970-????)\nmyDate.getMonth(); //获取当前月份(0-11,0代表1月)\nmyDate.getDate(); //获取当前日(1-31)\nmyDate.getDay(); //获取当前星期X(0-6,0代表星期天)\nmyDate.getTime(); //获取当前时间(从1970.1.1开始的毫秒数)\nmyDate.getHours(); //获取当前小时数(0-23)\nmyDate.getMinutes(); //获取当前分钟数(0-59)\nmyDate.getSeconds(); //获取当前秒数(0-59)\nmyDate.getMilliseconds(); //获取当前毫秒数(0-999)\nmyDate.toLocaleDateString(); //获取当前日期\nvar mytime=myDate.toLocaleTimeString(); //获取当前时间\nmyDate.toLocaleString( ); //获取日期与时间\n```\n2. 时间戳获取\n注意，java，php等生成的时间戳是秒，不是毫秒，所以需要签名时间戳的时候，需要转为秒时间戳\n```js\nvar time = new Date();\nvar timestamp = parseInt(time.getTime()/1000);\n```\n3. 格式化时间\n```js\n//获取当前时间，格式YYYY-MM-DD\nfunction getNowFormatDate() {\n    var date = new Date();\n    var seperator1 = \"-\";\n    var year = date.getFullYear();\n    var month = date.getMonth() + 1;\n    var strDate = date.getDate();\n    if (month >= 1 && month <= 9) {\n        month = \"0\" + month;\n    }\n    if (strDate >= 0 && strDate <= 9) {\n        strDate = \"0\" + strDate;\n    }\n    var currentdate = year + seperator1 + month + seperator1 + strDate;\n    return currentdate;\n}\n```\n","source":"_posts/java-date.md","raw":"title: java和javascript日期详解\ndate: 2016-05-13 21:48:00\ntags: java\ncategories: 编程语言\n---\n** java，js日期转换：** <Excerpt in index | 首页摘要>\n    java的各种日期转换\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 日期表示类型\n1. 获取long类型的日期格式\n```java\nlong time = System.currentTimeMillis();\nSystem.out.printf(time+\"\");\nDate date =new Date();\nSystem.out.println(date.getTime());\n```\n2. 获取制定格式的日期\n```java\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\nDate date =new Date();\nSystem.out.println(sdf.format(date) );\n```\n3. 把制定格式的日期转为date或者毫秒值\n```java\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\nDate date = sdf.parse(\"2016-05-22 10:15:21\");\nlong mills = date.getTime();\n```\n- 说明:System.currentTimeMillis()并不能精确到1ms的级别,它取决于运行的系统,你再windows,mac,linux精确的范围都有差异,对于有高精度时间的要求,不能使用这个\n\n## 日期计算\n1. 最方便的方式是将时间转为毫秒值进行计算\n```java\nDate from =new Date();\nThread.sleep(200);//线程休眠2ms\nDate to =new Date();\nSystem.out.println(to.getTime()-from.getTime());\n```\n\n## 高精度时间\n```java\nlong time1 =System.nanoTime();\nSystem.out.printf(time1+\"\");\n```\n- 说明:System.nanoTime()提高了ns级别的精度,1ms=1000000ns,\n\n## javascript日期\n1. 获取时间的毫秒值，获取月份，时间\n```js\nvar myDate = new Date();\nmyDate.getYear(); //获取当前年份(2位)\nmyDate.getFullYear(); //获取完整的年份(4位,1970-????)\nmyDate.getMonth(); //获取当前月份(0-11,0代表1月)\nmyDate.getDate(); //获取当前日(1-31)\nmyDate.getDay(); //获取当前星期X(0-6,0代表星期天)\nmyDate.getTime(); //获取当前时间(从1970.1.1开始的毫秒数)\nmyDate.getHours(); //获取当前小时数(0-23)\nmyDate.getMinutes(); //获取当前分钟数(0-59)\nmyDate.getSeconds(); //获取当前秒数(0-59)\nmyDate.getMilliseconds(); //获取当前毫秒数(0-999)\nmyDate.toLocaleDateString(); //获取当前日期\nvar mytime=myDate.toLocaleTimeString(); //获取当前时间\nmyDate.toLocaleString( ); //获取日期与时间\n```\n2. 时间戳获取\n注意，java，php等生成的时间戳是秒，不是毫秒，所以需要签名时间戳的时候，需要转为秒时间戳\n```js\nvar time = new Date();\nvar timestamp = parseInt(time.getTime()/1000);\n```\n3. 格式化时间\n```js\n//获取当前时间，格式YYYY-MM-DD\nfunction getNowFormatDate() {\n    var date = new Date();\n    var seperator1 = \"-\";\n    var year = date.getFullYear();\n    var month = date.getMonth() + 1;\n    var strDate = date.getDate();\n    if (month >= 1 && month <= 9) {\n        month = \"0\" + month;\n    }\n    if (strDate >= 0 && strDate <= 9) {\n        strDate = \"0\" + strDate;\n    }\n    var currentdate = year + seperator1 + month + seperator1 + strDate;\n    return currentdate;\n}\n```\n","slug":"java-date","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla6i001v8p9kviplf684","content":"<p><strong> java，js日期转换：</strong> <Excerpt in index | 首页摘要><br>    java的各种日期转换<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"日期表示类型\"><a href=\"#日期表示类型\" class=\"headerlink\" title=\"日期表示类型\"></a>日期表示类型</h2><ol>\n<li><p>获取long类型的日期格式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">long</span> time = System.currentTimeMillis();</div><div class=\"line\">System.out.printf(time+<span class=\"string\">\"\"</span>);</div><div class=\"line\">Date date =<span class=\"keyword\">new</span> Date();</div><div class=\"line\">System.out.println(date.getTime());</div></pre></td></tr></table></figure>\n</li>\n<li><p>获取制定格式的日期</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd hh:mm:ss\"</span>);</div><div class=\"line\">Date date =<span class=\"keyword\">new</span> Date();</div><div class=\"line\">System.out.println(sdf.format(date) );</div></pre></td></tr></table></figure>\n</li>\n<li><p>把制定格式的日期转为date或者毫秒值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd hh:mm:ss\"</span>);</div><div class=\"line\">Date date = sdf.parse(<span class=\"string\">\"2016-05-22 10:15:21\"</span>);</div><div class=\"line\"><span class=\"keyword\">long</span> mills = date.getTime();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>说明:System.currentTimeMillis()并不能精确到1ms的级别,它取决于运行的系统,你再windows,mac,linux精确的范围都有差异,对于有高精度时间的要求,不能使用这个</li>\n</ul>\n<h2 id=\"日期计算\"><a href=\"#日期计算\" class=\"headerlink\" title=\"日期计算\"></a>日期计算</h2><ol>\n<li>最方便的方式是将时间转为毫秒值进行计算<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Date from =<span class=\"keyword\">new</span> Date();</div><div class=\"line\">Thread.sleep(<span class=\"number\">200</span>);<span class=\"comment\">//线程休眠2ms</span></div><div class=\"line\">Date to =<span class=\"keyword\">new</span> Date();</div><div class=\"line\">System.out.println(to.getTime()-from.getTime());</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"高精度时间\"><a href=\"#高精度时间\" class=\"headerlink\" title=\"高精度时间\"></a>高精度时间</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">long</span> time1 =System.nanoTime();</div><div class=\"line\">System.out.printf(time1+<span class=\"string\">\"\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>说明:System.nanoTime()提高了ns级别的精度,1ms=1000000ns,</li>\n</ul>\n<h2 id=\"javascript日期\"><a href=\"#javascript日期\" class=\"headerlink\" title=\"javascript日期\"></a>javascript日期</h2><ol>\n<li><p>获取时间的毫秒值，获取月份，时间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">myDate.getYear(); <span class=\"comment\">//获取当前年份(2位)</span></div><div class=\"line\">myDate.getFullYear(); <span class=\"comment\">//获取完整的年份(4位,1970-????)</span></div><div class=\"line\">myDate.getMonth(); <span class=\"comment\">//获取当前月份(0-11,0代表1月)</span></div><div class=\"line\">myDate.getDate(); <span class=\"comment\">//获取当前日(1-31)</span></div><div class=\"line\">myDate.getDay(); <span class=\"comment\">//获取当前星期X(0-6,0代表星期天)</span></div><div class=\"line\">myDate.getTime(); <span class=\"comment\">//获取当前时间(从1970.1.1开始的毫秒数)</span></div><div class=\"line\">myDate.getHours(); <span class=\"comment\">//获取当前小时数(0-23)</span></div><div class=\"line\">myDate.getMinutes(); <span class=\"comment\">//获取当前分钟数(0-59)</span></div><div class=\"line\">myDate.getSeconds(); <span class=\"comment\">//获取当前秒数(0-59)</span></div><div class=\"line\">myDate.getMilliseconds(); <span class=\"comment\">//获取当前毫秒数(0-999)</span></div><div class=\"line\">myDate.toLocaleDateString(); <span class=\"comment\">//获取当前日期</span></div><div class=\"line\"><span class=\"keyword\">var</span> mytime=myDate.toLocaleTimeString(); <span class=\"comment\">//获取当前时间</span></div><div class=\"line\">myDate.toLocaleString( ); <span class=\"comment\">//获取日期与时间</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>时间戳获取<br>注意，java，php等生成的时间戳是秒，不是毫秒，所以需要签名时间戳的时候，需要转为秒时间戳</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"keyword\">var</span> timestamp = <span class=\"built_in\">parseInt</span>(time.getTime()/<span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>格式化时间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取当前时间，格式YYYY-MM-DD</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNowFormatDate</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    <span class=\"keyword\">var</span> seperator1 = <span class=\"string\">\"-\"</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> year = date.getFullYear();</div><div class=\"line\">    <span class=\"keyword\">var</span> month = date.getMonth() + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> strDate = date.getDate();</div><div class=\"line\">    <span class=\"keyword\">if</span> (month &gt;= <span class=\"number\">1</span> &amp;&amp; month &lt;= <span class=\"number\">9</span>) &#123;</div><div class=\"line\">        month = <span class=\"string\">\"0\"</span> + month;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (strDate &gt;= <span class=\"number\">0</span> &amp;&amp; strDate &lt;= <span class=\"number\">9</span>) &#123;</div><div class=\"line\">        strDate = <span class=\"string\">\"0\"</span> + strDate;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> currentdate = year + seperator1 + month + seperator1 + strDate;</div><div class=\"line\">    <span class=\"keyword\">return</span> currentdate;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"<p><strong> java，js日期转换：</strong> <Excerpt in index | 首页摘要><br>    java的各种日期转换<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"日期表示类型\"><a href=\"#日期表示类型\" class=\"headerlink\" title=\"日期表示类型\"></a>日期表示类型</h2><ol>\n<li><p>获取long类型的日期格式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">long</span> time = System.currentTimeMillis();</div><div class=\"line\">System.out.printf(time+<span class=\"string\">\"\"</span>);</div><div class=\"line\">Date date =<span class=\"keyword\">new</span> Date();</div><div class=\"line\">System.out.println(date.getTime());</div></pre></td></tr></table></figure>\n</li>\n<li><p>获取制定格式的日期</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd hh:mm:ss\"</span>);</div><div class=\"line\">Date date =<span class=\"keyword\">new</span> Date();</div><div class=\"line\">System.out.println(sdf.format(date) );</div></pre></td></tr></table></figure>\n</li>\n<li><p>把制定格式的日期转为date或者毫秒值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd hh:mm:ss\"</span>);</div><div class=\"line\">Date date = sdf.parse(<span class=\"string\">\"2016-05-22 10:15:21\"</span>);</div><div class=\"line\"><span class=\"keyword\">long</span> mills = date.getTime();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>说明:System.currentTimeMillis()并不能精确到1ms的级别,它取决于运行的系统,你再windows,mac,linux精确的范围都有差异,对于有高精度时间的要求,不能使用这个</li>\n</ul>\n<h2 id=\"日期计算\"><a href=\"#日期计算\" class=\"headerlink\" title=\"日期计算\"></a>日期计算</h2><ol>\n<li>最方便的方式是将时间转为毫秒值进行计算<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Date from =<span class=\"keyword\">new</span> Date();</div><div class=\"line\">Thread.sleep(<span class=\"number\">200</span>);<span class=\"comment\">//线程休眠2ms</span></div><div class=\"line\">Date to =<span class=\"keyword\">new</span> Date();</div><div class=\"line\">System.out.println(to.getTime()-from.getTime());</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"高精度时间\"><a href=\"#高精度时间\" class=\"headerlink\" title=\"高精度时间\"></a>高精度时间</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">long</span> time1 =System.nanoTime();</div><div class=\"line\">System.out.printf(time1+<span class=\"string\">\"\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>说明:System.nanoTime()提高了ns级别的精度,1ms=1000000ns,</li>\n</ul>\n<h2 id=\"javascript日期\"><a href=\"#javascript日期\" class=\"headerlink\" title=\"javascript日期\"></a>javascript日期</h2><ol>\n<li><p>获取时间的毫秒值，获取月份，时间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myDate = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">myDate.getYear(); <span class=\"comment\">//获取当前年份(2位)</span></div><div class=\"line\">myDate.getFullYear(); <span class=\"comment\">//获取完整的年份(4位,1970-????)</span></div><div class=\"line\">myDate.getMonth(); <span class=\"comment\">//获取当前月份(0-11,0代表1月)</span></div><div class=\"line\">myDate.getDate(); <span class=\"comment\">//获取当前日(1-31)</span></div><div class=\"line\">myDate.getDay(); <span class=\"comment\">//获取当前星期X(0-6,0代表星期天)</span></div><div class=\"line\">myDate.getTime(); <span class=\"comment\">//获取当前时间(从1970.1.1开始的毫秒数)</span></div><div class=\"line\">myDate.getHours(); <span class=\"comment\">//获取当前小时数(0-23)</span></div><div class=\"line\">myDate.getMinutes(); <span class=\"comment\">//获取当前分钟数(0-59)</span></div><div class=\"line\">myDate.getSeconds(); <span class=\"comment\">//获取当前秒数(0-59)</span></div><div class=\"line\">myDate.getMilliseconds(); <span class=\"comment\">//获取当前毫秒数(0-999)</span></div><div class=\"line\">myDate.toLocaleDateString(); <span class=\"comment\">//获取当前日期</span></div><div class=\"line\"><span class=\"keyword\">var</span> mytime=myDate.toLocaleTimeString(); <span class=\"comment\">//获取当前时间</span></div><div class=\"line\">myDate.toLocaleString( ); <span class=\"comment\">//获取日期与时间</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>时间戳获取<br>注意，java，php等生成的时间戳是秒，不是毫秒，所以需要签名时间戳的时候，需要转为秒时间戳</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"keyword\">var</span> timestamp = <span class=\"built_in\">parseInt</span>(time.getTime()/<span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>格式化时间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取当前时间，格式YYYY-MM-DD</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNowFormatDate</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    <span class=\"keyword\">var</span> seperator1 = <span class=\"string\">\"-\"</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> year = date.getFullYear();</div><div class=\"line\">    <span class=\"keyword\">var</span> month = date.getMonth() + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> strDate = date.getDate();</div><div class=\"line\">    <span class=\"keyword\">if</span> (month &gt;= <span class=\"number\">1</span> &amp;&amp; month &lt;= <span class=\"number\">9</span>) &#123;</div><div class=\"line\">        month = <span class=\"string\">\"0\"</span> + month;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (strDate &gt;= <span class=\"number\">0</span> &amp;&amp; strDate &lt;= <span class=\"number\">9</span>) &#123;</div><div class=\"line\">        strDate = <span class=\"string\">\"0\"</span> + strDate;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> currentdate = year + seperator1 + month + seperator1 + strDate;</div><div class=\"line\">    <span class=\"keyword\">return</span> currentdate;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"Kobo Aura One导出笔记高级配置","date":"2017-06-23T02:22:57.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\nkobo电子书折腾记，导出笔记，从激活到设置，打补丁实现自定义配置，还是自己折腾起来有意思啊。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 建议\n买电子书是为了阅读和学习，不是天天折腾电子书，一天刷一次机，如果只是看书，做笔记，学个英文什么的\n原生系统是最好的。如果看pdf为主，不建议买这电子书，看pdf首选电脑，平板，sony dsp系列，用普通的电子书阅读器，体验太差。\n\n## kobo原生系统的功能（推荐原生系统，打上补丁）\n1. 格式支持epub，mobi，cbz漫画，txt，kobo epub格式\n2. 高亮，笔记，导出笔记（需要配置一下）\n3. 字典（英文，中文，法文等多国字典，可以自己修改）\n4. 阅读pocket文章（可以把网页保存到pocket，实用pocket同步到阅读器）\n5. 自动亮度（最大的优点）\n\n## koreader的功能\n1. 格式支持epub，mobi，cbz漫画，txt，kobo epub格式\n2. 扫描版pdf支持重拍，切边（最大特色）\n3. 笔记导出到印象笔记\n4. 字典（强大的字典扩展）\n\n\n## 激活\n**说明：wifi激活需要翻墙，可以实用笔记连接vpn，然后共享wifi给kobo**\n1. wifi激活,\n2. kobo setup desktop激活，去kobo官网下载软件，然后电脑需要翻墙，电子书连接上电脑，用软件登录激活。这个软件很不好用，bug也多，建议使用wifi激活。\n\n## 更新固件，打补丁\nkobo的更新固件，更新补丁都是一个模式，把固件或者补丁放到.kobo文件夹，弹出设备就会自动重启\n\n## 字体\n电脑连接kobo，在根目录建立一个fonts文件夹，把需要的字体放进去即可\n\n## 词典\n下载网上改好的字典，直接放到.kobo文件夹下的dict目录下，然后重启就可以了\n\n## 自定义配置\n1. 刷新页数（打补丁）\n2. 上下页宽（打补丁）\n3. 全屏模式（修改配置文件）\n4. 字体高级设置（修改配置文件）\n5. 导出笔记和高亮（修改配置文件）\n\n## kobo高级配置文件详解\n用电脑连接kobo电子书，打开Kobo找到eReader.conf文件，最好用notepad++修改，或者其他文本编辑器。\n```conf\n[FeatureSettings]\n#导出笔记\nExportHighlightsEnabled=true\n#显示全书的页码，而不是章节的页码\nFullBookPageNumbers=true\n#用在线等维基百科代替词典查询\nOnlineWikipedia=true\n#全屏阅读\nFullScreenReading=true\n#图片缩放\nImageZoom=true\n#浏览器全屏\nFullScreenBrowser=true\n#关机键截图，但是关机键就无法关机了，不要设置这个鸡肋的功能\nScreenshots=true\n[Reading]\n#翻页刷新的页数，20页全刷一次\nnumPartialUpdatePageTurns=20\n#左边距\nreadingLeftMargin=0\n#右边距\nreadingRightMargin=0\n#行高\nreadingLineHeight=1.4\n\n[PowerOptions]\n#自动关机时间\nAutoOffMinutes=60\n```\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/kobo-config.md","raw":"title: kobo aura one导出笔记高级配置\ndate: 2017-06-23 10:22:57\ntags: 开发工具\ncategories: others\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\nkobo电子书折腾记，导出笔记，从激活到设置，打补丁实现自定义配置，还是自己折腾起来有意思啊。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 建议\n买电子书是为了阅读和学习，不是天天折腾电子书，一天刷一次机，如果只是看书，做笔记，学个英文什么的\n原生系统是最好的。如果看pdf为主，不建议买这电子书，看pdf首选电脑，平板，sony dsp系列，用普通的电子书阅读器，体验太差。\n\n## kobo原生系统的功能（推荐原生系统，打上补丁）\n1. 格式支持epub，mobi，cbz漫画，txt，kobo epub格式\n2. 高亮，笔记，导出笔记（需要配置一下）\n3. 字典（英文，中文，法文等多国字典，可以自己修改）\n4. 阅读pocket文章（可以把网页保存到pocket，实用pocket同步到阅读器）\n5. 自动亮度（最大的优点）\n\n## koreader的功能\n1. 格式支持epub，mobi，cbz漫画，txt，kobo epub格式\n2. 扫描版pdf支持重拍，切边（最大特色）\n3. 笔记导出到印象笔记\n4. 字典（强大的字典扩展）\n\n\n## 激活\n**说明：wifi激活需要翻墙，可以实用笔记连接vpn，然后共享wifi给kobo**\n1. wifi激活,\n2. kobo setup desktop激活，去kobo官网下载软件，然后电脑需要翻墙，电子书连接上电脑，用软件登录激活。这个软件很不好用，bug也多，建议使用wifi激活。\n\n## 更新固件，打补丁\nkobo的更新固件，更新补丁都是一个模式，把固件或者补丁放到.kobo文件夹，弹出设备就会自动重启\n\n## 字体\n电脑连接kobo，在根目录建立一个fonts文件夹，把需要的字体放进去即可\n\n## 词典\n下载网上改好的字典，直接放到.kobo文件夹下的dict目录下，然后重启就可以了\n\n## 自定义配置\n1. 刷新页数（打补丁）\n2. 上下页宽（打补丁）\n3. 全屏模式（修改配置文件）\n4. 字体高级设置（修改配置文件）\n5. 导出笔记和高亮（修改配置文件）\n\n## kobo高级配置文件详解\n用电脑连接kobo电子书，打开Kobo找到eReader.conf文件，最好用notepad++修改，或者其他文本编辑器。\n```conf\n[FeatureSettings]\n#导出笔记\nExportHighlightsEnabled=true\n#显示全书的页码，而不是章节的页码\nFullBookPageNumbers=true\n#用在线等维基百科代替词典查询\nOnlineWikipedia=true\n#全屏阅读\nFullScreenReading=true\n#图片缩放\nImageZoom=true\n#浏览器全屏\nFullScreenBrowser=true\n#关机键截图，但是关机键就无法关机了，不要设置这个鸡肋的功能\nScreenshots=true\n[Reading]\n#翻页刷新的页数，20页全刷一次\nnumPartialUpdatePageTurns=20\n#左边距\nreadingLeftMargin=0\n#右边距\nreadingRightMargin=0\n#行高\nreadingLineHeight=1.4\n\n[PowerOptions]\n#自动关机时间\nAutoOffMinutes=60\n```\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"kobo-config","published":1,"updated":"2017-06-23T03:36:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla6k001z8p9kq42tn3h6","content":"<p><strong> Kobo Aura One导出笔记高级配置：</strong> <Excerpt in index | 首页摘要><br>kobo电子书折腾记，导出笔记，从激活到设置，打补丁实现自定义配置，还是自己折腾起来有意思啊。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h2><p>买电子书是为了阅读和学习，不是天天折腾电子书，一天刷一次机，如果只是看书，做笔记，学个英文什么的<br>原生系统是最好的。如果看pdf为主，不建议买这电子书，看pdf首选电脑，平板，sony dsp系列，用普通的电子书阅读器，体验太差。</p>\n<h2 id=\"kobo原生系统的功能（推荐原生系统，打上补丁）\"><a href=\"#kobo原生系统的功能（推荐原生系统，打上补丁）\" class=\"headerlink\" title=\"kobo原生系统的功能（推荐原生系统，打上补丁）\"></a>kobo原生系统的功能（推荐原生系统，打上补丁）</h2><ol>\n<li>格式支持epub，mobi，cbz漫画，txt，kobo epub格式</li>\n<li>高亮，笔记，导出笔记（需要配置一下）</li>\n<li>字典（英文，中文，法文等多国字典，可以自己修改）</li>\n<li>阅读pocket文章（可以把网页保存到pocket，实用pocket同步到阅读器）</li>\n<li>自动亮度（最大的优点）</li>\n</ol>\n<h2 id=\"koreader的功能\"><a href=\"#koreader的功能\" class=\"headerlink\" title=\"koreader的功能\"></a>koreader的功能</h2><ol>\n<li>格式支持epub，mobi，cbz漫画，txt，kobo epub格式</li>\n<li>扫描版pdf支持重拍，切边（最大特色）</li>\n<li>笔记导出到印象笔记</li>\n<li>字典（强大的字典扩展）</li>\n</ol>\n<h2 id=\"激活\"><a href=\"#激活\" class=\"headerlink\" title=\"激活\"></a>激活</h2><p><strong>说明：wifi激活需要翻墙，可以实用笔记连接vpn，然后共享wifi给kobo</strong></p>\n<ol>\n<li>wifi激活,</li>\n<li>kobo setup desktop激活，去kobo官网下载软件，然后电脑需要翻墙，电子书连接上电脑，用软件登录激活。这个软件很不好用，bug也多，建议使用wifi激活。</li>\n</ol>\n<h2 id=\"更新固件，打补丁\"><a href=\"#更新固件，打补丁\" class=\"headerlink\" title=\"更新固件，打补丁\"></a>更新固件，打补丁</h2><p>kobo的更新固件，更新补丁都是一个模式，把固件或者补丁放到.kobo文件夹，弹出设备就会自动重启</p>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><p>电脑连接kobo，在根目录建立一个fonts文件夹，把需要的字体放进去即可</p>\n<h2 id=\"词典\"><a href=\"#词典\" class=\"headerlink\" title=\"词典\"></a>词典</h2><p>下载网上改好的字典，直接放到.kobo文件夹下的dict目录下，然后重启就可以了</p>\n<h2 id=\"自定义配置\"><a href=\"#自定义配置\" class=\"headerlink\" title=\"自定义配置\"></a>自定义配置</h2><ol>\n<li>刷新页数（打补丁）</li>\n<li>上下页宽（打补丁）</li>\n<li>全屏模式（修改配置文件）</li>\n<li>字体高级设置（修改配置文件）</li>\n<li>导出笔记和高亮（修改配置文件）</li>\n</ol>\n<h2 id=\"kobo高级配置文件详解\"><a href=\"#kobo高级配置文件详解\" class=\"headerlink\" title=\"kobo高级配置文件详解\"></a>kobo高级配置文件详解</h2><p>用电脑连接kobo电子书，打开Kobo找到eReader.conf文件，最好用notepad++修改，或者其他文本编辑器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">[FeatureSettings]</div><div class=\"line\">#导出笔记</div><div class=\"line\">ExportHighlightsEnabled=true</div><div class=\"line\">#显示全书的页码，而不是章节的页码</div><div class=\"line\">FullBookPageNumbers=true</div><div class=\"line\">#用在线等维基百科代替词典查询</div><div class=\"line\">OnlineWikipedia=true</div><div class=\"line\">#全屏阅读</div><div class=\"line\">FullScreenReading=true</div><div class=\"line\">#图片缩放</div><div class=\"line\">ImageZoom=true</div><div class=\"line\">#浏览器全屏</div><div class=\"line\">FullScreenBrowser=true</div><div class=\"line\">#关机键截图，但是关机键就无法关机了，不要设置这个鸡肋的功能</div><div class=\"line\">Screenshots=true</div><div class=\"line\">[Reading]</div><div class=\"line\">#翻页刷新的页数，20页全刷一次</div><div class=\"line\">numPartialUpdatePageTurns=20</div><div class=\"line\">#左边距</div><div class=\"line\">readingLeftMargin=0</div><div class=\"line\">#右边距</div><div class=\"line\">readingRightMargin=0</div><div class=\"line\">#行高</div><div class=\"line\">readingLineHeight=1.4</div><div class=\"line\"></div><div class=\"line\">[PowerOptions]</div><div class=\"line\">#自动关机时间</div><div class=\"line\">AutoOffMinutes=60</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> Kobo Aura One导出笔记高级配置：</strong> <Excerpt in index | 首页摘要><br>kobo电子书折腾记，导出笔记，从激活到设置，打补丁实现自定义配置，还是自己折腾起来有意思啊。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h2><p>买电子书是为了阅读和学习，不是天天折腾电子书，一天刷一次机，如果只是看书，做笔记，学个英文什么的<br>原生系统是最好的。如果看pdf为主，不建议买这电子书，看pdf首选电脑，平板，sony dsp系列，用普通的电子书阅读器，体验太差。</p>\n<h2 id=\"kobo原生系统的功能（推荐原生系统，打上补丁）\"><a href=\"#kobo原生系统的功能（推荐原生系统，打上补丁）\" class=\"headerlink\" title=\"kobo原生系统的功能（推荐原生系统，打上补丁）\"></a>kobo原生系统的功能（推荐原生系统，打上补丁）</h2><ol>\n<li>格式支持epub，mobi，cbz漫画，txt，kobo epub格式</li>\n<li>高亮，笔记，导出笔记（需要配置一下）</li>\n<li>字典（英文，中文，法文等多国字典，可以自己修改）</li>\n<li>阅读pocket文章（可以把网页保存到pocket，实用pocket同步到阅读器）</li>\n<li>自动亮度（最大的优点）</li>\n</ol>\n<h2 id=\"koreader的功能\"><a href=\"#koreader的功能\" class=\"headerlink\" title=\"koreader的功能\"></a>koreader的功能</h2><ol>\n<li>格式支持epub，mobi，cbz漫画，txt，kobo epub格式</li>\n<li>扫描版pdf支持重拍，切边（最大特色）</li>\n<li>笔记导出到印象笔记</li>\n<li>字典（强大的字典扩展）</li>\n</ol>\n<h2 id=\"激活\"><a href=\"#激活\" class=\"headerlink\" title=\"激活\"></a>激活</h2><p><strong>说明：wifi激活需要翻墙，可以实用笔记连接vpn，然后共享wifi给kobo</strong></p>\n<ol>\n<li>wifi激活,</li>\n<li>kobo setup desktop激活，去kobo官网下载软件，然后电脑需要翻墙，电子书连接上电脑，用软件登录激活。这个软件很不好用，bug也多，建议使用wifi激活。</li>\n</ol>\n<h2 id=\"更新固件，打补丁\"><a href=\"#更新固件，打补丁\" class=\"headerlink\" title=\"更新固件，打补丁\"></a>更新固件，打补丁</h2><p>kobo的更新固件，更新补丁都是一个模式，把固件或者补丁放到.kobo文件夹，弹出设备就会自动重启</p>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><p>电脑连接kobo，在根目录建立一个fonts文件夹，把需要的字体放进去即可</p>\n<h2 id=\"词典\"><a href=\"#词典\" class=\"headerlink\" title=\"词典\"></a>词典</h2><p>下载网上改好的字典，直接放到.kobo文件夹下的dict目录下，然后重启就可以了</p>\n<h2 id=\"自定义配置\"><a href=\"#自定义配置\" class=\"headerlink\" title=\"自定义配置\"></a>自定义配置</h2><ol>\n<li>刷新页数（打补丁）</li>\n<li>上下页宽（打补丁）</li>\n<li>全屏模式（修改配置文件）</li>\n<li>字体高级设置（修改配置文件）</li>\n<li>导出笔记和高亮（修改配置文件）</li>\n</ol>\n<h2 id=\"kobo高级配置文件详解\"><a href=\"#kobo高级配置文件详解\" class=\"headerlink\" title=\"kobo高级配置文件详解\"></a>kobo高级配置文件详解</h2><p>用电脑连接kobo电子书，打开Kobo找到eReader.conf文件，最好用notepad++修改，或者其他文本编辑器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">[FeatureSettings]</div><div class=\"line\">#导出笔记</div><div class=\"line\">ExportHighlightsEnabled=true</div><div class=\"line\">#显示全书的页码，而不是章节的页码</div><div class=\"line\">FullBookPageNumbers=true</div><div class=\"line\">#用在线等维基百科代替词典查询</div><div class=\"line\">OnlineWikipedia=true</div><div class=\"line\">#全屏阅读</div><div class=\"line\">FullScreenReading=true</div><div class=\"line\">#图片缩放</div><div class=\"line\">ImageZoom=true</div><div class=\"line\">#浏览器全屏</div><div class=\"line\">FullScreenBrowser=true</div><div class=\"line\">#关机键截图，但是关机键就无法关机了，不要设置这个鸡肋的功能</div><div class=\"line\">Screenshots=true</div><div class=\"line\">[Reading]</div><div class=\"line\">#翻页刷新的页数，20页全刷一次</div><div class=\"line\">numPartialUpdatePageTurns=20</div><div class=\"line\">#左边距</div><div class=\"line\">readingLeftMargin=0</div><div class=\"line\">#右边距</div><div class=\"line\">readingRightMargin=0</div><div class=\"line\">#行高</div><div class=\"line\">readingLineHeight=1.4</div><div class=\"line\"></div><div class=\"line\">[PowerOptions]</div><div class=\"line\">#自动关机时间</div><div class=\"line\">AutoOffMinutes=60</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"mac下mysql5.6字符集设置","date":"2016-05-28T15:10:37.000Z","_content":"** mac下mysql5.6字符集设置：** <Excerpt in index | 首页摘要>\n    在mac下设置mysql5.6字符集时踩过的坑，百分百保证有效\n<!-- more -->\n<The rest of contents | 余下全文>\n## 为什么要设置字符集\n1. 设置字符集主要是解决乱码问题，由于中文和英文编码不同导致，中文出现乱码，所以一般都设置为utf8格式\n2. 不同的字符集和编码占用的字节不同，选择适合的编码会提高数据库性能\n\n## mac下设置\n- 在/etc/my.cnf文件进行设置，如果没有此文件可以从/usr/local/mysql/support-files/拷贝，命令如下\n```\ncd /usr/local/mysql/support-files\nsudo cp my.cnf /etc/my.cnf\n```\n查看文件的读写权限，如果为644（rw- r-- r--）则改为(664) (rw- rw- r--)\n如果改为(666)(rw- rw- rw-)则修改以后配置文件不会生效\n```\nsudo chmod 664 /etc/my.cnf\n```\n\n- my.cnf设置如下：\n```\n[client]\ndefault-character-set=utf8\n[mysqld]\ncollation-server = utf8_unicode_ci\ninit-connect='SET NAMES utf8'\ncharacter-set-server = utf8\n[mysql]\ndefault-character-set=utf8\n```\n\n## 查看设置是否成功\n在命令行输入mysql，如果提示没有命令的话，在bash或者zsh的文件里修改，我用的是zsh，设置~/.zshrc,\n```\nexport MYSQL=\"/usr/local/mysql/bin/\"\nexport PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$MYSQL\"\n```\n在命令行输入mysql,进入mysql命令行后，输入`status;`或者`show variables like '%char%';`\n```\n| character_set_client     | utf8                                                    |\n| character_set_connection | utf8                                                    |\n| character_set_database   | utf8                                                    |\n| character_set_filesystem | binary                                                  |\n| character_set_results    | utf8                                                    |\n| character_set_server     | utf8                                                    |\n| character_set_system     | utf8                                                    |\n| character_sets_dir       | /usr/local/mysql-5.6.30-osx10.11-x86_64/share/charsets/\n```\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/mac-mysql-unicode.md","raw":"title: mac下mysql5.6字符集设置\ndate: 2016-05-28 23:10:37\ntags: mysql\ncategories: 数据库\n---\n** mac下mysql5.6字符集设置：** <Excerpt in index | 首页摘要>\n    在mac下设置mysql5.6字符集时踩过的坑，百分百保证有效\n<!-- more -->\n<The rest of contents | 余下全文>\n## 为什么要设置字符集\n1. 设置字符集主要是解决乱码问题，由于中文和英文编码不同导致，中文出现乱码，所以一般都设置为utf8格式\n2. 不同的字符集和编码占用的字节不同，选择适合的编码会提高数据库性能\n\n## mac下设置\n- 在/etc/my.cnf文件进行设置，如果没有此文件可以从/usr/local/mysql/support-files/拷贝，命令如下\n```\ncd /usr/local/mysql/support-files\nsudo cp my.cnf /etc/my.cnf\n```\n查看文件的读写权限，如果为644（rw- r-- r--）则改为(664) (rw- rw- r--)\n如果改为(666)(rw- rw- rw-)则修改以后配置文件不会生效\n```\nsudo chmod 664 /etc/my.cnf\n```\n\n- my.cnf设置如下：\n```\n[client]\ndefault-character-set=utf8\n[mysqld]\ncollation-server = utf8_unicode_ci\ninit-connect='SET NAMES utf8'\ncharacter-set-server = utf8\n[mysql]\ndefault-character-set=utf8\n```\n\n## 查看设置是否成功\n在命令行输入mysql，如果提示没有命令的话，在bash或者zsh的文件里修改，我用的是zsh，设置~/.zshrc,\n```\nexport MYSQL=\"/usr/local/mysql/bin/\"\nexport PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$MYSQL\"\n```\n在命令行输入mysql,进入mysql命令行后，输入`status;`或者`show variables like '%char%';`\n```\n| character_set_client     | utf8                                                    |\n| character_set_connection | utf8                                                    |\n| character_set_database   | utf8                                                    |\n| character_set_filesystem | binary                                                  |\n| character_set_results    | utf8                                                    |\n| character_set_server     | utf8                                                    |\n| character_set_system     | utf8                                                    |\n| character_sets_dir       | /usr/local/mysql-5.6.30-osx10.11-x86_64/share/charsets/\n```\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"mac-mysql-unicode","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla6l00218p9kjly0r2zg","content":"<p><strong> mac下mysql5.6字符集设置：</strong> <Excerpt in index | 首页摘要><br>    在mac下设置mysql5.6字符集时踩过的坑，百分百保证有效<br><a id=\"more\"></a></p>\n<p><The rest of contents | 余下全文></p>\n<h2 id=\"为什么要设置字符集\"><a href=\"#为什么要设置字符集\" class=\"headerlink\" title=\"为什么要设置字符集\"></a>为什么要设置字符集</h2><ol>\n<li>设置字符集主要是解决乱码问题，由于中文和英文编码不同导致，中文出现乱码，所以一般都设置为utf8格式</li>\n<li>不同的字符集和编码占用的字节不同，选择适合的编码会提高数据库性能</li>\n</ol>\n<h2 id=\"mac下设置\"><a href=\"#mac下设置\" class=\"headerlink\" title=\"mac下设置\"></a>mac下设置</h2><ul>\n<li>在/etc/my.cnf文件进行设置，如果没有此文件可以从/usr/local/mysql/support-files/拷贝，命令如下<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cd</span> /usr/local/mysql/support-<span class=\"keyword\">files</span></div><div class=\"line\">sudo <span class=\"keyword\">cp</span> my.<span class=\"keyword\">cnf</span> /etc/my.<span class=\"keyword\">cnf</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>查看文件的读写权限，如果为644（rw- r– r–）则改为(664) (rw- rw- r–)<br>如果改为(666)(rw- rw- rw-)则修改以后配置文件不会生效<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chmod <span class=\"number\">664</span> /etc/<span class=\"keyword\">my</span>.cnf</div></pre></td></tr></table></figure></p>\n<ul>\n<li>my.cnf设置如下：<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[client]</span></div><div class=\"line\"><span class=\"attr\">default-character-set</span>=utf8</div><div class=\"line\"><span class=\"section\">[mysqld]</span></div><div class=\"line\"><span class=\"attr\">collation-server</span> = utf8_unicode_ci</div><div class=\"line\"><span class=\"attr\">init-connect</span>=<span class=\"string\">'SET NAMES utf8'</span></div><div class=\"line\"><span class=\"attr\">character-set-server</span> = utf8</div><div class=\"line\"><span class=\"section\">[mysql]</span></div><div class=\"line\"><span class=\"attr\">default-character-set</span>=utf8</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"查看设置是否成功\"><a href=\"#查看设置是否成功\" class=\"headerlink\" title=\"查看设置是否成功\"></a>查看设置是否成功</h2><p>在命令行输入mysql，如果提示没有命令的话，在bash或者zsh的文件里修改，我用的是zsh，设置~/.zshrc,<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> MYSQL=<span class=\"string\">\"/usr/local/mysql/bin/\"</span></div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"string\">\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:<span class=\"variable\">$MYSQL</span>\"</span></div></pre></td></tr></table></figure></p>\n<p>在命令行输入mysql,进入mysql命令行后，输入<code>status;</code>或者<code>show variables like &#39;%char%&#39;;</code><br><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">|<span class=\"string\"> character_set_client     </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_connection </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_database   </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_filesystem </span>|<span class=\"string\"> binary                                                  </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_results    </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_server     </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_system     </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_sets_dir       </span>|<span class=\"string\"> /usr/local/mysql-5.6.30-osx10.11-x86_64/share/charsets/</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> mac下mysql5.6字符集设置：</strong> <Excerpt in index | 首页摘要><br>    在mac下设置mysql5.6字符集时踩过的坑，百分百保证有效<br>","more":"</p>\n<p><The rest of contents | 余下全文></p>\n<h2 id=\"为什么要设置字符集\"><a href=\"#为什么要设置字符集\" class=\"headerlink\" title=\"为什么要设置字符集\"></a>为什么要设置字符集</h2><ol>\n<li>设置字符集主要是解决乱码问题，由于中文和英文编码不同导致，中文出现乱码，所以一般都设置为utf8格式</li>\n<li>不同的字符集和编码占用的字节不同，选择适合的编码会提高数据库性能</li>\n</ol>\n<h2 id=\"mac下设置\"><a href=\"#mac下设置\" class=\"headerlink\" title=\"mac下设置\"></a>mac下设置</h2><ul>\n<li>在/etc/my.cnf文件进行设置，如果没有此文件可以从/usr/local/mysql/support-files/拷贝，命令如下<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cd</span> /usr/local/mysql/support-<span class=\"keyword\">files</span></div><div class=\"line\">sudo <span class=\"keyword\">cp</span> my.<span class=\"keyword\">cnf</span> /etc/my.<span class=\"keyword\">cnf</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>查看文件的读写权限，如果为644（rw- r– r–）则改为(664) (rw- rw- r–)<br>如果改为(666)(rw- rw- rw-)则修改以后配置文件不会生效<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chmod <span class=\"number\">664</span> /etc/<span class=\"keyword\">my</span>.cnf</div></pre></td></tr></table></figure></p>\n<ul>\n<li>my.cnf设置如下：<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[client]</span></div><div class=\"line\"><span class=\"attr\">default-character-set</span>=utf8</div><div class=\"line\"><span class=\"section\">[mysqld]</span></div><div class=\"line\"><span class=\"attr\">collation-server</span> = utf8_unicode_ci</div><div class=\"line\"><span class=\"attr\">init-connect</span>=<span class=\"string\">'SET NAMES utf8'</span></div><div class=\"line\"><span class=\"attr\">character-set-server</span> = utf8</div><div class=\"line\"><span class=\"section\">[mysql]</span></div><div class=\"line\"><span class=\"attr\">default-character-set</span>=utf8</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"查看设置是否成功\"><a href=\"#查看设置是否成功\" class=\"headerlink\" title=\"查看设置是否成功\"></a>查看设置是否成功</h2><p>在命令行输入mysql，如果提示没有命令的话，在bash或者zsh的文件里修改，我用的是zsh，设置~/.zshrc,<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> MYSQL=<span class=\"string\">\"/usr/local/mysql/bin/\"</span></div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"string\">\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:<span class=\"variable\">$MYSQL</span>\"</span></div></pre></td></tr></table></figure></p>\n<p>在命令行输入mysql,进入mysql命令行后，输入<code>status;</code>或者<code>show variables like &#39;%char%&#39;;</code><br><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">|<span class=\"string\"> character_set_client     </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_connection </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_database   </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_filesystem </span>|<span class=\"string\"> binary                                                  </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_results    </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_server     </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_system     </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_sets_dir       </span>|<span class=\"string\"> /usr/local/mysql-5.6.30-osx10.11-x86_64/share/charsets/</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Mac最实用快捷键","date":"2017-04-21T02:53:08.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\nmac系统最常用的一些快捷键，吐血推荐\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 文件操作\n* 打开文件／文件夹    cmd + o\n* 选择文件／文件夹    文件夹名称（英文）\n* 删除文件／文件夹    cmd + del\n* 新建文件夹         cmd + shift + n\n* 新建文件\n* 预览文件           space\n* 重命名             enter\n* 文件目录前进后退        cmd + [ 或者 cmd + ]\n* 文件上层目录，下层目录   cmd + ⬆️  cmd + ⬇️\n\n## 搜索操作\n全局搜索  ctrl + space\n文本搜索  cmd + f\n\n## mac fn快捷键\n屏幕亮度 f1 f2\n任务视图 f3\n应用程序 f4\n键盘背光 f5 f6\n音乐播放 f7 f8 f9\n音量 f10 f11 f12\n\n## 未完待续\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/mac-shortcut.md","raw":"title: mac最实用快捷键\ndate: 2017-04-21 10:53:08\ntags: mac\ncategories: 开发工具\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\nmac系统最常用的一些快捷键，吐血推荐\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 文件操作\n* 打开文件／文件夹    cmd + o\n* 选择文件／文件夹    文件夹名称（英文）\n* 删除文件／文件夹    cmd + del\n* 新建文件夹         cmd + shift + n\n* 新建文件\n* 预览文件           space\n* 重命名             enter\n* 文件目录前进后退        cmd + [ 或者 cmd + ]\n* 文件上层目录，下层目录   cmd + ⬆️  cmd + ⬇️\n\n## 搜索操作\n全局搜索  ctrl + space\n文本搜索  cmd + f\n\n## mac fn快捷键\n屏幕亮度 f1 f2\n任务视图 f3\n应用程序 f4\n键盘背光 f5 f6\n音乐播放 f7 f8 f9\n音量 f10 f11 f12\n\n## 未完待续\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"mac-shortcut","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla6n00268p9k9ns1bdcm","content":"<p><strong> Mac最实用快捷键：</strong> <Excerpt in index | 首页摘要><br>mac系统最常用的一些快捷键，吐血推荐<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h2><ul>\n<li>打开文件／文件夹    cmd + o</li>\n<li>选择文件／文件夹    文件夹名称（英文）</li>\n<li>删除文件／文件夹    cmd + del</li>\n<li>新建文件夹         cmd + shift + n</li>\n<li>新建文件</li>\n<li>预览文件           space</li>\n<li>重命名             enter</li>\n<li>文件目录前进后退        cmd + [ 或者 cmd + ]</li>\n<li>文件上层目录，下层目录   cmd + ⬆️  cmd + ⬇️</li>\n</ul>\n<h2 id=\"搜索操作\"><a href=\"#搜索操作\" class=\"headerlink\" title=\"搜索操作\"></a>搜索操作</h2><p>全局搜索  ctrl + space<br>文本搜索  cmd + f</p>\n<h2 id=\"mac-fn快捷键\"><a href=\"#mac-fn快捷键\" class=\"headerlink\" title=\"mac fn快捷键\"></a>mac fn快捷键</h2><p>屏幕亮度 f1 f2<br>任务视图 f3<br>应用程序 f4<br>键盘背光 f5 f6<br>音乐播放 f7 f8 f9<br>音量 f10 f11 f12</p>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> Mac最实用快捷键：</strong> <Excerpt in index | 首页摘要><br>mac系统最常用的一些快捷键，吐血推荐<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h2><ul>\n<li>打开文件／文件夹    cmd + o</li>\n<li>选择文件／文件夹    文件夹名称（英文）</li>\n<li>删除文件／文件夹    cmd + del</li>\n<li>新建文件夹         cmd + shift + n</li>\n<li>新建文件</li>\n<li>预览文件           space</li>\n<li>重命名             enter</li>\n<li>文件目录前进后退        cmd + [ 或者 cmd + ]</li>\n<li>文件上层目录，下层目录   cmd + ⬆️  cmd + ⬇️</li>\n</ul>\n<h2 id=\"搜索操作\"><a href=\"#搜索操作\" class=\"headerlink\" title=\"搜索操作\"></a>搜索操作</h2><p>全局搜索  ctrl + space<br>文本搜索  cmd + f</p>\n<h2 id=\"mac-fn快捷键\"><a href=\"#mac-fn快捷键\" class=\"headerlink\" title=\"mac fn快捷键\"></a>mac fn快捷键</h2><p>屏幕亮度 f1 f2<br>任务视图 f3<br>应用程序 f4<br>键盘背光 f5 f6<br>音乐播放 f7 f8 f9<br>音量 f10 f11 f12</p>\n<h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Mac开发环境配置","date":"2016-11-27T07:52:38.000Z","_content":"** mac开发环境配置：** <Excerpt in index | 首页摘要>\n工欲善其事，必先利其器，做好开发者，先搞好开发环境啊。针对mac开发者的开发配置，把mac打造成最具生产力工具！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 软件下载说明\n下面所提到的软件，有很多需要付费或者破解版，为了方便大家使用，会在网盘分享给大家，只需在评论的地方留下自己的**百度云账号**！！！\n\n## 软件分类说明\n1. 通用（开发者必备的软件）\n2. java类（java开发者必不可少）\n3. 前端类（偏前端和nodejs）\n4. python类\n5. 数据库类\n6. 其他（php，ruby等等）\n\n## 通用软件\n1. Alfred\n2. dash\n3. homebrew\n4. zsh（oh my zsh）\n5. sublime text3,\n6. vscode\n7. paste(剪切板工具)\n8. BetterSnapTool(分屏软件)\n9. cornerstone(svn)\n10. tower(git)\n11. alternote()\n12. paw\n13. chrome\n14. firefox\n15. pdf expert\n16. CheatSheet\n17. snippetslab\n\n## java软件\n1. jdk\n2. idea\n3. eclipse\n4. maven\n5. zookeeper,dubbo\n6. tomcat\n7. apache\n\n## 前端必备\n1. nvm(nodejs,npm,cnpm)\n2. webpack\n3. yo\n4. webstorm\n\n\n## python必备\n1. pycharm\n2. sublime text（插件）\n\n## 数据库类\n1. mysql\n2. mongodb\n3. sqllite\n4. navicate\n5. robomongo\n6. redis\n\n## 其他软件\n1. office\n2. keynote,pages,number\n3. photoshop\n\n文章长期更新，请收藏\n\n\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/mac-dev.md","raw":"title: mac开发环境配置\ndate: 2016-11-27 15:52:38\ntags: mac\ncategories: 开发工具\n---\n** mac开发环境配置：** <Excerpt in index | 首页摘要>\n工欲善其事，必先利其器，做好开发者，先搞好开发环境啊。针对mac开发者的开发配置，把mac打造成最具生产力工具！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 软件下载说明\n下面所提到的软件，有很多需要付费或者破解版，为了方便大家使用，会在网盘分享给大家，只需在评论的地方留下自己的**百度云账号**！！！\n\n## 软件分类说明\n1. 通用（开发者必备的软件）\n2. java类（java开发者必不可少）\n3. 前端类（偏前端和nodejs）\n4. python类\n5. 数据库类\n6. 其他（php，ruby等等）\n\n## 通用软件\n1. Alfred\n2. dash\n3. homebrew\n4. zsh（oh my zsh）\n5. sublime text3,\n6. vscode\n7. paste(剪切板工具)\n8. BetterSnapTool(分屏软件)\n9. cornerstone(svn)\n10. tower(git)\n11. alternote()\n12. paw\n13. chrome\n14. firefox\n15. pdf expert\n16. CheatSheet\n17. snippetslab\n\n## java软件\n1. jdk\n2. idea\n3. eclipse\n4. maven\n5. zookeeper,dubbo\n6. tomcat\n7. apache\n\n## 前端必备\n1. nvm(nodejs,npm,cnpm)\n2. webpack\n3. yo\n4. webstorm\n\n\n## python必备\n1. pycharm\n2. sublime text（插件）\n\n## 数据库类\n1. mysql\n2. mongodb\n3. sqllite\n4. navicate\n5. robomongo\n6. redis\n\n## 其他软件\n1. office\n2. keynote,pages,number\n3. photoshop\n\n文章长期更新，请收藏\n\n\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"mac-dev","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla6o00288p9kt88tujla","content":"<p><strong> mac开发环境配置：</strong> <Excerpt in index | 首页摘要><br>工欲善其事，必先利其器，做好开发者，先搞好开发环境啊。针对mac开发者的开发配置，把mac打造成最具生产力工具！<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"软件下载说明\"><a href=\"#软件下载说明\" class=\"headerlink\" title=\"软件下载说明\"></a>软件下载说明</h2><p>下面所提到的软件，有很多需要付费或者破解版，为了方便大家使用，会在网盘分享给大家，只需在评论的地方留下自己的<strong>百度云账号</strong>！！！</p>\n<h2 id=\"软件分类说明\"><a href=\"#软件分类说明\" class=\"headerlink\" title=\"软件分类说明\"></a>软件分类说明</h2><ol>\n<li>通用（开发者必备的软件）</li>\n<li>java类（java开发者必不可少）</li>\n<li>前端类（偏前端和nodejs）</li>\n<li>python类</li>\n<li>数据库类</li>\n<li>其他（php，ruby等等）</li>\n</ol>\n<h2 id=\"通用软件\"><a href=\"#通用软件\" class=\"headerlink\" title=\"通用软件\"></a>通用软件</h2><ol>\n<li>Alfred</li>\n<li>dash</li>\n<li>homebrew</li>\n<li>zsh（oh my zsh）</li>\n<li>sublime text3,</li>\n<li>vscode</li>\n<li>paste(剪切板工具)</li>\n<li>BetterSnapTool(分屏软件)</li>\n<li>cornerstone(svn)</li>\n<li>tower(git)</li>\n<li>alternote()</li>\n<li>paw</li>\n<li>chrome</li>\n<li>firefox</li>\n<li>pdf expert</li>\n<li>CheatSheet</li>\n<li>snippetslab</li>\n</ol>\n<h2 id=\"java软件\"><a href=\"#java软件\" class=\"headerlink\" title=\"java软件\"></a>java软件</h2><ol>\n<li>jdk</li>\n<li>idea</li>\n<li>eclipse</li>\n<li>maven</li>\n<li>zookeeper,dubbo</li>\n<li>tomcat</li>\n<li>apache</li>\n</ol>\n<h2 id=\"前端必备\"><a href=\"#前端必备\" class=\"headerlink\" title=\"前端必备\"></a>前端必备</h2><ol>\n<li>nvm(nodejs,npm,cnpm)</li>\n<li>webpack</li>\n<li>yo</li>\n<li>webstorm</li>\n</ol>\n<h2 id=\"python必备\"><a href=\"#python必备\" class=\"headerlink\" title=\"python必备\"></a>python必备</h2><ol>\n<li>pycharm</li>\n<li>sublime text（插件）</li>\n</ol>\n<h2 id=\"数据库类\"><a href=\"#数据库类\" class=\"headerlink\" title=\"数据库类\"></a>数据库类</h2><ol>\n<li>mysql</li>\n<li>mongodb</li>\n<li>sqllite</li>\n<li>navicate</li>\n<li>robomongo</li>\n<li>redis</li>\n</ol>\n<h2 id=\"其他软件\"><a href=\"#其他软件\" class=\"headerlink\" title=\"其他软件\"></a>其他软件</h2><ol>\n<li>office</li>\n<li>keynote,pages,number</li>\n<li>photoshop</li>\n</ol>\n<p>文章长期更新，请收藏</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> mac开发环境配置：</strong> <Excerpt in index | 首页摘要><br>工欲善其事，必先利其器，做好开发者，先搞好开发环境啊。针对mac开发者的开发配置，把mac打造成最具生产力工具！<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"软件下载说明\"><a href=\"#软件下载说明\" class=\"headerlink\" title=\"软件下载说明\"></a>软件下载说明</h2><p>下面所提到的软件，有很多需要付费或者破解版，为了方便大家使用，会在网盘分享给大家，只需在评论的地方留下自己的<strong>百度云账号</strong>！！！</p>\n<h2 id=\"软件分类说明\"><a href=\"#软件分类说明\" class=\"headerlink\" title=\"软件分类说明\"></a>软件分类说明</h2><ol>\n<li>通用（开发者必备的软件）</li>\n<li>java类（java开发者必不可少）</li>\n<li>前端类（偏前端和nodejs）</li>\n<li>python类</li>\n<li>数据库类</li>\n<li>其他（php，ruby等等）</li>\n</ol>\n<h2 id=\"通用软件\"><a href=\"#通用软件\" class=\"headerlink\" title=\"通用软件\"></a>通用软件</h2><ol>\n<li>Alfred</li>\n<li>dash</li>\n<li>homebrew</li>\n<li>zsh（oh my zsh）</li>\n<li>sublime text3,</li>\n<li>vscode</li>\n<li>paste(剪切板工具)</li>\n<li>BetterSnapTool(分屏软件)</li>\n<li>cornerstone(svn)</li>\n<li>tower(git)</li>\n<li>alternote()</li>\n<li>paw</li>\n<li>chrome</li>\n<li>firefox</li>\n<li>pdf expert</li>\n<li>CheatSheet</li>\n<li>snippetslab</li>\n</ol>\n<h2 id=\"java软件\"><a href=\"#java软件\" class=\"headerlink\" title=\"java软件\"></a>java软件</h2><ol>\n<li>jdk</li>\n<li>idea</li>\n<li>eclipse</li>\n<li>maven</li>\n<li>zookeeper,dubbo</li>\n<li>tomcat</li>\n<li>apache</li>\n</ol>\n<h2 id=\"前端必备\"><a href=\"#前端必备\" class=\"headerlink\" title=\"前端必备\"></a>前端必备</h2><ol>\n<li>nvm(nodejs,npm,cnpm)</li>\n<li>webpack</li>\n<li>yo</li>\n<li>webstorm</li>\n</ol>\n<h2 id=\"python必备\"><a href=\"#python必备\" class=\"headerlink\" title=\"python必备\"></a>python必备</h2><ol>\n<li>pycharm</li>\n<li>sublime text（插件）</li>\n</ol>\n<h2 id=\"数据库类\"><a href=\"#数据库类\" class=\"headerlink\" title=\"数据库类\"></a>数据库类</h2><ol>\n<li>mysql</li>\n<li>mongodb</li>\n<li>sqllite</li>\n<li>navicate</li>\n<li>robomongo</li>\n<li>redis</li>\n</ol>\n<h2 id=\"其他软件\"><a href=\"#其他软件\" class=\"headerlink\" title=\"其他软件\"></a>其他软件</h2><ol>\n<li>office</li>\n<li>keynote,pages,number</li>\n<li>photoshop</li>\n</ol>\n<p>文章长期更新，请收藏</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Mongodb从入门到精通","date":"2017-05-26T15:21:23.000Z","_content":"** mongodb从入门到精通** <Excerpt in index | 首页摘要>\n    mongodb日常使用的一些知识，增删改查，索引，分片。\n <!-- more -->\n<The rest of contents | 余下全文>\n\n## mongodb学习\n## 1.mongodb特性\n    1）mongo是一个面向文档的数据库，它集合了nosql和sql数据库两方面的特性。\n    2）所有实体都是在首次使用时创建。\n    3）没有严格的事务特性，但是它保证任何一次数据变更都是原子性的。\n    4）也没有固定的数据模型\n    5）mongo以javascript作为命令行执行引擎，所以利用shell进行复杂的计算和查询时会相当的慢。\n    6）mongo本身支持集群和数据分片\n    7）mongo是c++实现的，支持windows mac linux等主流操作系统\n    8）性能优越，速度快\n## 2.mongo常用操作\n### 增删操作\n```js\ndb.user.insert({name:'aaaa',age:30});\ndb.user.save({name:'aaaa',age:30});\ndb.collection.insertOne({});//(3.2新特性)\ndb.collection.deleteOne({},{});//(3.2新特性)\ndb.collection.remove({name:'aaa'});\ndb.collection.remove();//(删除全部)\n```\n### 更新操作\n```js\ndb.users.update({\"name\": \"joe\"}, joe );\n//upsert模式\ndb.users.update({\"name\": \"joe\"}, joe,  true );\n//MULTI模式\ndb.users.update({\"name\": \"joe\"}, joe,  true ，true);\n```\n> update是对文档替换，而不是局部修改默认情况update更新匹配的第一条文档，multi模式更新所有匹配的  \n\n### 查询操作\n普通查询\n```js\ndb.user.find();\ndb.user.find({name:'aaa'});\ndb.user.findOne({name:'aaa'});\n```\n模糊查询\n```js\ndb.UserInfo.find({userName :'/A/'}) //（名称%A%）\ndb.UserInfo.find({userName :'/^A/'}) //(名称A%)\n```\n### 操作符\n1. $lt, $lte,$gt, $gte(<, <=, >, >= ) \t\n2. $all\t数组中的元素是否完全匹配  db.things.find( { a: { $all: [ 2, 3 ] } } );\n3. $exists  可选：true，false  db.things.find( { a : { $exists : true } } );\n4. $mod  取模：a % 10 == 1  db.things.find( { a : { $mod : [ 10 , 1 ] } } );\n5. $ne 取反：即not equals  db.things.find( { x : { $ne : 3 } } );\n6. $in 类似于SQL的IN操作  db.things.find({j:{$in: [2,4,6]}});\n7. $nin $in的反操作，即SQL的  NOT IN  db.things.find({j:{$nin: [2,4,6]}});\n8. $nor $or的反操作，即不匹配(a或b)  db.things.find( { name : \"bob\", $nor : [ { a : 1 },{ b : 2 }]})\n9. $or Or子句，注意$or不能嵌套使用  db.things.find( { name : \"bob\" , $or : [ { a : 1 },{ b : 2 }]})\n10. $size  匹配数组长度  db.things.find( { a : { $size: 1 } } );\n11. $type  匹配子键的数据类型，详情请看  db.things.find( { a : { $type : 2 } } );\n\n### 数组查询\n$size 用来匹配数组长度（即最大下标）  \n// 返回comments包含5个元素的文档   \ndb.posts.find({}, {comments:{‘$size’: 5}});  \n// 使用冗余字段来实现  \ndb.posts.find({}, {‘commentCount’: { ‘$gt’: 5 }});   \n$slice 操作符类似于子键筛选，只不过它筛选的是数组中的项  \n// 仅返回数组中的前5项  \ndb.posts.find({}, {comments:{‘$slice’: 5}});  \n// 仅返回数组中的最后5项  \ndb.posts.find({}, {comments:{‘$slice’: -5}});  \n// 跳过数组中的前20项，返回接下来的10项  \ndb.posts.find({}, {comments:{‘$slice’: [20, 10]}});  \n// 跳过数组中的最后20项，返回接下来的10项  \ndb.posts.find({}, {comments:{‘$slice’: [-20, 10]}});  \nMongoDB 允许在查询中指定数组的下标，以实现更加精确的匹配  \n// 返回comments中第1项的by子键为Abe的所有文档  \ndb.posts.find( { \"comments.0.by\" : \"Abe\" } );   \n## 3.索引的使用\n### 创建索引\n```js\ndb.things.ensureIndex({'j': 1});\n//创建子文档 索引\ndb.things.ensureIndex({'user.Name' : - 1});\n//创建 复合 索引\ndb.things.ensureIndex({\n'j' : 1 ,   //  升序\n'x' : - 1   //  降序\n});\n```\n如果 您的 find 操作只用到了一个键，那么索引方向是无关紧要的  \n\t\t当创建复合索引的时候，一定要谨慎斟酌每个键的排序方向\n\n### 修改索引\n修改索引，只需要重新 运行索引 命令即可  \n如果索引已经存在则会 重建， 不存在的索引会被 添加  \n```js\ndb.things.ensureIndex ({\n\t//原来的索引会 重建\n\t'user.Name ' : - 1 ,\n\t//新增一个升序 索引\n\t'user.Name ' : 1 ,\n\t//为 Age 新建降序 索引\n\t'user.Age ' :  - 1\n\t//打开后台执行\n},{\t'background' :   true});\n//重建索引\ndb.things.reIndex();\n```\n### 删除索引\n```js\n//删除集合中的所有 索引\ndb.things.dropIndexes ();  \n//删除指定键的索引  \ndb.things.dropIndex ({\n\tx :   1 ,\n\ty :   - 1\n});  \n//使用 command 删除指定键的 索引\ndb.runCommand ({\n\tdropIndexes : 'foo ' ,\n\tindex:{ y : 1 }\n});  \n//使用 command 删除所有 索引\ndb.runCommand ({dropIndexes : 'foo ',index: '*'})\n```\n如果是删除集合中所有的文档（remove）则不会影响索引，当有新文档插入时，索引就会重建。\n\n### 唯一索引\n创建唯一索引，同时这也是一个符合唯一索引  \n```js\ndb.things.ensureIndex (\n{\n\t'firstName ' :   1 ,\n\t'lastName ' :   1\n},   {\n//指定为唯一索引\n'unique': true ,\n//删除重复 记录\n'dropDups': true\n});\n```\n### 强制使用索引\n```js\n//强制使用索引 a 和 b\ndb.collection.find({\n\t'a' :   4 ,\n\t'b' :   5 ,\n\t'c' :   6\n}).hint({\n\t'a' :   1 ,\n\t'b' :   1\n});\n//强制不使用任何 索引\ndb.collection.find().hint({\n\t'$natural' :   1\n});\n```\n----------\n索引总结:\n* 索引可以加速查询；\n* 单个索引无需在意其索引方向；\n* 多键索引需要慎重考虑每个索引的方向；\n* 做海量数据更新时应当先卸载所有索引，待数据更新完成后再重建索引；\n* 不要试图为每个键都创建索引，应考虑实际需要，并不是索引越多越好；\n* 唯一索引可以用来消除重复记录；\n* 地理空间索引是没有单位的，其内部实现是基本的勾股定理算法\n\n\n## 4.mongo数据库管理\n### 安全与认证\n1. 默认为无认证，启动用登录 shell ；\n2. 添加账号；\n3. 关闭 shell .关闭 MongoDB ；\n4. 为 MongoDB 增加 — auth 参数；\n5. 重 启 MongoDB ；\n6. 登录 shell ，此时就需要认证了\n\n### 冷备份\n1. 关闭MongoDB引擎\n2. 拷贝数据库文件夹及文件\n3. 恢复时反向操作即可\t\t\n* 优点：可以完全保证数据完整性；\n* 缺点：需要数据库引擎离线 \t\n### 热备份\n1.  保持MongoDB为运行状态\n2. 使用mongodump备份数据\n3. 使用mongorestore恢复数据\n* 优点：数据库引擎无须离线\n* 缺点：不能保证数据完整性，操作时会降低MongoDB性能\n\n### 主从复制备份\n1. 创建主从复制机制\n2. 配置完成后数据会自动同步\n3. 恢复途径很多\n* 优点：可以保持MongoDB处于联机状态，不影响性能\n* 缺点：在数据写入密集的情况下可能无法保证数据完整性\n\n### 修复db.repairDatabase();\n* 修复数据库还可以起到压缩数据的作用；\n* 修复数据库的操作相当耗时，万不得已请不要使用；\n* 建议经常做数据备份；\n## 5.mongo复制(集群)\n1. 主从复制\n选项  \t说明\n--only  作用是限定仅复制指定的某个数据库\n--slavedelay  为复制设置操作延迟，单位为秒\n--fastsync  以主节点的数据快照为基础启动从节点。\n--autoresync  当主从节点数据不一致时，是否自动重新同步\n--oplogSize  设定主节点中的oplog的容量，单位是MB\n\n2. 副本集\n与普通主从复制集群相比，具有自动检测机制\n需要使用—replSet 选项指定副本同伴\n任何时候，副本集当中最多只允许有1个活跃节点\n\n3. 读写分离\n将密集的读取操作分流到从节点上，降低主节点的负载\n默认情况下，从节点是不允许处理\n客户端请求的，需要使用—slaveOkay打开\n不适用于实时性要求非常高的应用\n\n4. 工作原理—— OPLOG\noplog保存在local数据库中，oplog就在其中的\noplog.$main集合内保存。该集合的每个文档都记录了主节点上执行的一个操作，其键定义如下：\n\tts：操作时间戳，占用4字节\n\top：操作类型，占用1字节\n\tns：操作对象的命名空间（或理解为集合全名）\n\to：进一步指定所执行的操作，例如插入\n\n5. 工作原理—— 同步\n\t从节点首次启动时，做完整同步\n\t主节点数据发生变化时，做增量同步\n\t从节点与主节点数据严重不一致时，做完整同步\n\n6. 复制管理—— 诊断\ndb.printReplicationInfo()\n在主节点上使用\n\t返回信息是oplog的大小以及各种操作的耗时. 空间占用等数据\n在从节点上使用\ndb.printSlaveReplicationInfo()\n\t返回信息是从节点的数据源列表. 同步延迟时间等\n\n7. 复制管理—— 变更OPLOG 容量\n在主节点上使用\n\t设定—oplogSize参数\n\t重启MongoDB\n\n8. 复制管理—— 复制认证\n主从节点皆须配置\n\t存储在local.system.users\n\t优先尝试repl用户\n\t主从节点的用户配置必须保持一致\n## 6.MONGODB分片\n### 分片与自动分片\n分片是指将数据拆分，分散到不同的实例上进行负载分流的做法。我们常说的“分表”、“分库”、“分区”等概念都属于分片的实际体现。\n传统分片做法是手工分表、分库。自动分片技术是根据指定的“片键”自动拆分数据并维护数据请求路由的过程。\n\n* 递增片键--连续 不均匀 写入集中 分流较差\n* 随机片键--不连续 均匀 写入分散 分流较好\n\n### 三个组成部分\n* 片,保存子集数据的容器\n* mongos,MongoDB的路由器进程\n* 配置服务器,分·片集群的配置信息\n### 创建分片\n* --启动配置服务器,可以创建一个或多个\n* --添加片,每个片都应该是副本集\n* --物理服务器,性能、安全和稳定性\n### 管理分片\n```js\n//查询分片\ndb.shards.find();\n//数据库\ndb.databases.find();\n//块\ndb.chunks.find();\n//分片状态\ndb.printShardingStatus();\n//删除片\ndb.runCommand({ removeshard : 'ip:port' });\n```\n","source":"_posts/mongodb-study.md","raw":"title: mongodb从入门到精通\ndate: 2017-05-26 23:21:23\ntags: mongodb\ncategories: 数据库\n---\n** mongodb从入门到精通** <Excerpt in index | 首页摘要>\n    mongodb日常使用的一些知识，增删改查，索引，分片。\n <!-- more -->\n<The rest of contents | 余下全文>\n\n## mongodb学习\n## 1.mongodb特性\n    1）mongo是一个面向文档的数据库，它集合了nosql和sql数据库两方面的特性。\n    2）所有实体都是在首次使用时创建。\n    3）没有严格的事务特性，但是它保证任何一次数据变更都是原子性的。\n    4）也没有固定的数据模型\n    5）mongo以javascript作为命令行执行引擎，所以利用shell进行复杂的计算和查询时会相当的慢。\n    6）mongo本身支持集群和数据分片\n    7）mongo是c++实现的，支持windows mac linux等主流操作系统\n    8）性能优越，速度快\n## 2.mongo常用操作\n### 增删操作\n```js\ndb.user.insert({name:'aaaa',age:30});\ndb.user.save({name:'aaaa',age:30});\ndb.collection.insertOne({});//(3.2新特性)\ndb.collection.deleteOne({},{});//(3.2新特性)\ndb.collection.remove({name:'aaa'});\ndb.collection.remove();//(删除全部)\n```\n### 更新操作\n```js\ndb.users.update({\"name\": \"joe\"}, joe );\n//upsert模式\ndb.users.update({\"name\": \"joe\"}, joe,  true );\n//MULTI模式\ndb.users.update({\"name\": \"joe\"}, joe,  true ，true);\n```\n> update是对文档替换，而不是局部修改默认情况update更新匹配的第一条文档，multi模式更新所有匹配的  \n\n### 查询操作\n普通查询\n```js\ndb.user.find();\ndb.user.find({name:'aaa'});\ndb.user.findOne({name:'aaa'});\n```\n模糊查询\n```js\ndb.UserInfo.find({userName :'/A/'}) //（名称%A%）\ndb.UserInfo.find({userName :'/^A/'}) //(名称A%)\n```\n### 操作符\n1. $lt, $lte,$gt, $gte(<, <=, >, >= ) \t\n2. $all\t数组中的元素是否完全匹配  db.things.find( { a: { $all: [ 2, 3 ] } } );\n3. $exists  可选：true，false  db.things.find( { a : { $exists : true } } );\n4. $mod  取模：a % 10 == 1  db.things.find( { a : { $mod : [ 10 , 1 ] } } );\n5. $ne 取反：即not equals  db.things.find( { x : { $ne : 3 } } );\n6. $in 类似于SQL的IN操作  db.things.find({j:{$in: [2,4,6]}});\n7. $nin $in的反操作，即SQL的  NOT IN  db.things.find({j:{$nin: [2,4,6]}});\n8. $nor $or的反操作，即不匹配(a或b)  db.things.find( { name : \"bob\", $nor : [ { a : 1 },{ b : 2 }]})\n9. $or Or子句，注意$or不能嵌套使用  db.things.find( { name : \"bob\" , $or : [ { a : 1 },{ b : 2 }]})\n10. $size  匹配数组长度  db.things.find( { a : { $size: 1 } } );\n11. $type  匹配子键的数据类型，详情请看  db.things.find( { a : { $type : 2 } } );\n\n### 数组查询\n$size 用来匹配数组长度（即最大下标）  \n// 返回comments包含5个元素的文档   \ndb.posts.find({}, {comments:{‘$size’: 5}});  \n// 使用冗余字段来实现  \ndb.posts.find({}, {‘commentCount’: { ‘$gt’: 5 }});   \n$slice 操作符类似于子键筛选，只不过它筛选的是数组中的项  \n// 仅返回数组中的前5项  \ndb.posts.find({}, {comments:{‘$slice’: 5}});  \n// 仅返回数组中的最后5项  \ndb.posts.find({}, {comments:{‘$slice’: -5}});  \n// 跳过数组中的前20项，返回接下来的10项  \ndb.posts.find({}, {comments:{‘$slice’: [20, 10]}});  \n// 跳过数组中的最后20项，返回接下来的10项  \ndb.posts.find({}, {comments:{‘$slice’: [-20, 10]}});  \nMongoDB 允许在查询中指定数组的下标，以实现更加精确的匹配  \n// 返回comments中第1项的by子键为Abe的所有文档  \ndb.posts.find( { \"comments.0.by\" : \"Abe\" } );   \n## 3.索引的使用\n### 创建索引\n```js\ndb.things.ensureIndex({'j': 1});\n//创建子文档 索引\ndb.things.ensureIndex({'user.Name' : - 1});\n//创建 复合 索引\ndb.things.ensureIndex({\n'j' : 1 ,   //  升序\n'x' : - 1   //  降序\n});\n```\n如果 您的 find 操作只用到了一个键，那么索引方向是无关紧要的  \n\t\t当创建复合索引的时候，一定要谨慎斟酌每个键的排序方向\n\n### 修改索引\n修改索引，只需要重新 运行索引 命令即可  \n如果索引已经存在则会 重建， 不存在的索引会被 添加  \n```js\ndb.things.ensureIndex ({\n\t//原来的索引会 重建\n\t'user.Name ' : - 1 ,\n\t//新增一个升序 索引\n\t'user.Name ' : 1 ,\n\t//为 Age 新建降序 索引\n\t'user.Age ' :  - 1\n\t//打开后台执行\n},{\t'background' :   true});\n//重建索引\ndb.things.reIndex();\n```\n### 删除索引\n```js\n//删除集合中的所有 索引\ndb.things.dropIndexes ();  \n//删除指定键的索引  \ndb.things.dropIndex ({\n\tx :   1 ,\n\ty :   - 1\n});  \n//使用 command 删除指定键的 索引\ndb.runCommand ({\n\tdropIndexes : 'foo ' ,\n\tindex:{ y : 1 }\n});  \n//使用 command 删除所有 索引\ndb.runCommand ({dropIndexes : 'foo ',index: '*'})\n```\n如果是删除集合中所有的文档（remove）则不会影响索引，当有新文档插入时，索引就会重建。\n\n### 唯一索引\n创建唯一索引，同时这也是一个符合唯一索引  \n```js\ndb.things.ensureIndex (\n{\n\t'firstName ' :   1 ,\n\t'lastName ' :   1\n},   {\n//指定为唯一索引\n'unique': true ,\n//删除重复 记录\n'dropDups': true\n});\n```\n### 强制使用索引\n```js\n//强制使用索引 a 和 b\ndb.collection.find({\n\t'a' :   4 ,\n\t'b' :   5 ,\n\t'c' :   6\n}).hint({\n\t'a' :   1 ,\n\t'b' :   1\n});\n//强制不使用任何 索引\ndb.collection.find().hint({\n\t'$natural' :   1\n});\n```\n----------\n索引总结:\n* 索引可以加速查询；\n* 单个索引无需在意其索引方向；\n* 多键索引需要慎重考虑每个索引的方向；\n* 做海量数据更新时应当先卸载所有索引，待数据更新完成后再重建索引；\n* 不要试图为每个键都创建索引，应考虑实际需要，并不是索引越多越好；\n* 唯一索引可以用来消除重复记录；\n* 地理空间索引是没有单位的，其内部实现是基本的勾股定理算法\n\n\n## 4.mongo数据库管理\n### 安全与认证\n1. 默认为无认证，启动用登录 shell ；\n2. 添加账号；\n3. 关闭 shell .关闭 MongoDB ；\n4. 为 MongoDB 增加 — auth 参数；\n5. 重 启 MongoDB ；\n6. 登录 shell ，此时就需要认证了\n\n### 冷备份\n1. 关闭MongoDB引擎\n2. 拷贝数据库文件夹及文件\n3. 恢复时反向操作即可\t\t\n* 优点：可以完全保证数据完整性；\n* 缺点：需要数据库引擎离线 \t\n### 热备份\n1.  保持MongoDB为运行状态\n2. 使用mongodump备份数据\n3. 使用mongorestore恢复数据\n* 优点：数据库引擎无须离线\n* 缺点：不能保证数据完整性，操作时会降低MongoDB性能\n\n### 主从复制备份\n1. 创建主从复制机制\n2. 配置完成后数据会自动同步\n3. 恢复途径很多\n* 优点：可以保持MongoDB处于联机状态，不影响性能\n* 缺点：在数据写入密集的情况下可能无法保证数据完整性\n\n### 修复db.repairDatabase();\n* 修复数据库还可以起到压缩数据的作用；\n* 修复数据库的操作相当耗时，万不得已请不要使用；\n* 建议经常做数据备份；\n## 5.mongo复制(集群)\n1. 主从复制\n选项  \t说明\n--only  作用是限定仅复制指定的某个数据库\n--slavedelay  为复制设置操作延迟，单位为秒\n--fastsync  以主节点的数据快照为基础启动从节点。\n--autoresync  当主从节点数据不一致时，是否自动重新同步\n--oplogSize  设定主节点中的oplog的容量，单位是MB\n\n2. 副本集\n与普通主从复制集群相比，具有自动检测机制\n需要使用—replSet 选项指定副本同伴\n任何时候，副本集当中最多只允许有1个活跃节点\n\n3. 读写分离\n将密集的读取操作分流到从节点上，降低主节点的负载\n默认情况下，从节点是不允许处理\n客户端请求的，需要使用—slaveOkay打开\n不适用于实时性要求非常高的应用\n\n4. 工作原理—— OPLOG\noplog保存在local数据库中，oplog就在其中的\noplog.$main集合内保存。该集合的每个文档都记录了主节点上执行的一个操作，其键定义如下：\n\tts：操作时间戳，占用4字节\n\top：操作类型，占用1字节\n\tns：操作对象的命名空间（或理解为集合全名）\n\to：进一步指定所执行的操作，例如插入\n\n5. 工作原理—— 同步\n\t从节点首次启动时，做完整同步\n\t主节点数据发生变化时，做增量同步\n\t从节点与主节点数据严重不一致时，做完整同步\n\n6. 复制管理—— 诊断\ndb.printReplicationInfo()\n在主节点上使用\n\t返回信息是oplog的大小以及各种操作的耗时. 空间占用等数据\n在从节点上使用\ndb.printSlaveReplicationInfo()\n\t返回信息是从节点的数据源列表. 同步延迟时间等\n\n7. 复制管理—— 变更OPLOG 容量\n在主节点上使用\n\t设定—oplogSize参数\n\t重启MongoDB\n\n8. 复制管理—— 复制认证\n主从节点皆须配置\n\t存储在local.system.users\n\t优先尝试repl用户\n\t主从节点的用户配置必须保持一致\n## 6.MONGODB分片\n### 分片与自动分片\n分片是指将数据拆分，分散到不同的实例上进行负载分流的做法。我们常说的“分表”、“分库”、“分区”等概念都属于分片的实际体现。\n传统分片做法是手工分表、分库。自动分片技术是根据指定的“片键”自动拆分数据并维护数据请求路由的过程。\n\n* 递增片键--连续 不均匀 写入集中 分流较差\n* 随机片键--不连续 均匀 写入分散 分流较好\n\n### 三个组成部分\n* 片,保存子集数据的容器\n* mongos,MongoDB的路由器进程\n* 配置服务器,分·片集群的配置信息\n### 创建分片\n* --启动配置服务器,可以创建一个或多个\n* --添加片,每个片都应该是副本集\n* --物理服务器,性能、安全和稳定性\n### 管理分片\n```js\n//查询分片\ndb.shards.find();\n//数据库\ndb.databases.find();\n//块\ndb.chunks.find();\n//分片状态\ndb.printShardingStatus();\n//删除片\ndb.runCommand({ removeshard : 'ip:port' });\n```\n","slug":"mongodb-study","published":1,"updated":"2017-06-01T09:33:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla6p002c8p9ke55933tg","content":"<p><strong> mongodb从入门到精通</strong> <Excerpt in index | 首页摘要><br>    mongodb日常使用的一些知识，增删改查，索引，分片。<br> <a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"mongodb学习\"><a href=\"#mongodb学习\" class=\"headerlink\" title=\"mongodb学习\"></a>mongodb学习</h2><h2 id=\"1-mongodb特性\"><a href=\"#1-mongodb特性\" class=\"headerlink\" title=\"1.mongodb特性\"></a>1.mongodb特性</h2><pre><code>1）mongo是一个面向文档的数据库，它集合了nosql和sql数据库两方面的特性。\n2）所有实体都是在首次使用时创建。\n3）没有严格的事务特性，但是它保证任何一次数据变更都是原子性的。\n4）也没有固定的数据模型\n5）mongo以javascript作为命令行执行引擎，所以利用shell进行复杂的计算和查询时会相当的慢。\n6）mongo本身支持集群和数据分片\n7）mongo是c++实现的，支持windows mac linux等主流操作系统\n8）性能优越，速度快\n</code></pre><h2 id=\"2-mongo常用操作\"><a href=\"#2-mongo常用操作\" class=\"headerlink\" title=\"2.mongo常用操作\"></a>2.mongo常用操作</h2><h3 id=\"增删操作\"><a href=\"#增删操作\" class=\"headerlink\" title=\"增删操作\"></a>增删操作</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.insert(&#123;name:<span class=\"string\">'aaaa'</span>,age:<span class=\"number\">30</span>&#125;);</div><div class=\"line\">db.user.save(&#123;name:<span class=\"string\">'aaaa'</span>,age:<span class=\"number\">30</span>&#125;);</div><div class=\"line\">db.collection.insertOne(&#123;&#125;);<span class=\"comment\">//(3.2新特性)</span></div><div class=\"line\">db.collection.deleteOne(&#123;&#125;,&#123;&#125;);<span class=\"comment\">//(3.2新特性)</span></div><div class=\"line\">db.collection.remove(&#123;name:<span class=\"string\">'aaa'</span>&#125;);</div><div class=\"line\">db.collection.remove();<span class=\"comment\">//(删除全部)</span></div></pre></td></tr></table></figure>\n<h3 id=\"更新操作\"><a href=\"#更新操作\" class=\"headerlink\" title=\"更新操作\"></a>更新操作</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>&#125;, joe );</div><div class=\"line\"><span class=\"comment\">//upsert模式</span></div><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>&#125;, joe,  <span class=\"literal\">true</span> );</div><div class=\"line\"><span class=\"comment\">//MULTI模式</span></div><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>&#125;, joe,  <span class=\"literal\">true</span> ，<span class=\"literal\">true</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>update是对文档替换，而不是局部修改默认情况update更新匹配的第一条文档，multi模式更新所有匹配的  </p>\n</blockquote>\n<h3 id=\"查询操作\"><a href=\"#查询操作\" class=\"headerlink\" title=\"查询操作\"></a>查询操作</h3><p>普通查询<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find();</div><div class=\"line\">db.user.find(&#123;name:<span class=\"string\">'aaa'</span>&#125;);</div><div class=\"line\">db.user.findOne(&#123;name:<span class=\"string\">'aaa'</span>&#125;);</div></pre></td></tr></table></figure></p>\n<p>模糊查询<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.UserInfo.find(&#123;userName :<span class=\"string\">'/A/'</span>&#125;) <span class=\"comment\">//（名称%A%）</span></div><div class=\"line\">db.UserInfo.find(&#123;userName :<span class=\"string\">'/^A/'</span>&#125;) <span class=\"comment\">//(名称A%)</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h3><ol>\n<li>$lt, $lte,$gt, $gte(&lt;, &lt;=, &gt;, &gt;= )     </li>\n<li>$all    数组中的元素是否完全匹配  db.things.find( { a: { $all: [ 2, 3 ] } } );</li>\n<li>$exists  可选：true，false  db.things.find( { a : { $exists : true } } );</li>\n<li>$mod  取模：a % 10 == 1  db.things.find( { a : { $mod : [ 10 , 1 ] } } );</li>\n<li>$ne 取反：即not equals  db.things.find( { x : { $ne : 3 } } );</li>\n<li>$in 类似于SQL的IN操作  db.things.find({j:{$in: [2,4,6]}});</li>\n<li>$nin $in的反操作，即SQL的  NOT IN  db.things.find({j:{$nin: [2,4,6]}});</li>\n<li>$nor $or的反操作，即不匹配(a或b)  db.things.find( { name : “bob”, $nor : [ { a : 1 },{ b : 2 }]})</li>\n<li>$or Or子句，注意$or不能嵌套使用  db.things.find( { name : “bob” , $or : [ { a : 1 },{ b : 2 }]})</li>\n<li>$size  匹配数组长度  db.things.find( { a : { $size: 1 } } );</li>\n<li>$type  匹配子键的数据类型，详情请看  db.things.find( { a : { $type : 2 } } );</li>\n</ol>\n<h3 id=\"数组查询\"><a href=\"#数组查询\" class=\"headerlink\" title=\"数组查询\"></a>数组查询</h3><p>$size 用来匹配数组长度（即最大下标）<br>// 返回comments包含5个元素的文档<br>db.posts.find({}, {comments:{‘$size’: 5}});<br>// 使用冗余字段来实现<br>db.posts.find({}, {‘commentCount’: { ‘$gt’: 5 }});<br>$slice 操作符类似于子键筛选，只不过它筛选的是数组中的项<br>// 仅返回数组中的前5项<br>db.posts.find({}, {comments:{‘$slice’: 5}});<br>// 仅返回数组中的最后5项<br>db.posts.find({}, {comments:{‘$slice’: -5}});<br>// 跳过数组中的前20项，返回接下来的10项<br>db.posts.find({}, {comments:{‘$slice’: [20, 10]}});<br>// 跳过数组中的最后20项，返回接下来的10项<br>db.posts.find({}, {comments:{‘$slice’: [-20, 10]}});<br>MongoDB 允许在查询中指定数组的下标，以实现更加精确的匹配<br>// 返回comments中第1项的by子键为Abe的所有文档<br>db.posts.find( { “comments.0.by” : “Abe” } );   </p>\n<h2 id=\"3-索引的使用\"><a href=\"#3-索引的使用\" class=\"headerlink\" title=\"3.索引的使用\"></a>3.索引的使用</h2><h3 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.things.ensureIndex(&#123;<span class=\"string\">'j'</span>: <span class=\"number\">1</span>&#125;);</div><div class=\"line\"><span class=\"comment\">//创建子文档 索引</span></div><div class=\"line\">db.things.ensureIndex(&#123;<span class=\"string\">'user.Name'</span> : - <span class=\"number\">1</span>&#125;);</div><div class=\"line\"><span class=\"comment\">//创建 复合 索引</span></div><div class=\"line\">db.things.ensureIndex(&#123;</div><div class=\"line\"><span class=\"string\">'j'</span> : <span class=\"number\">1</span> ,   <span class=\"comment\">//  升序</span></div><div class=\"line\"><span class=\"string\">'x'</span> : - <span class=\"number\">1</span>   <span class=\"comment\">//  降序</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果 您的 find 操作只用到了一个键，那么索引方向是无关紧要的<br>        当创建复合索引的时候，一定要谨慎斟酌每个键的排序方向</p>\n<h3 id=\"修改索引\"><a href=\"#修改索引\" class=\"headerlink\" title=\"修改索引\"></a>修改索引</h3><p>修改索引，只需要重新 运行索引 命令即可<br>如果索引已经存在则会 重建， 不存在的索引会被 添加<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.things.ensureIndex (&#123;</div><div class=\"line\">\t<span class=\"comment\">//原来的索引会 重建</span></div><div class=\"line\">\t<span class=\"string\">'user.Name '</span> : - <span class=\"number\">1</span> ,</div><div class=\"line\">\t<span class=\"comment\">//新增一个升序 索引</span></div><div class=\"line\">\t<span class=\"string\">'user.Name '</span> : <span class=\"number\">1</span> ,</div><div class=\"line\">\t<span class=\"comment\">//为 Age 新建降序 索引</span></div><div class=\"line\">\t<span class=\"string\">'user.Age '</span> :  - <span class=\"number\">1</span></div><div class=\"line\">\t<span class=\"comment\">//打开后台执行</span></div><div class=\"line\">&#125;,&#123;\t<span class=\"string\">'background'</span> :   <span class=\"literal\">true</span>&#125;);</div><div class=\"line\"><span class=\"comment\">//重建索引</span></div><div class=\"line\">db.things.reIndex();</div></pre></td></tr></table></figure></p>\n<h3 id=\"删除索引\"><a href=\"#删除索引\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//删除集合中的所有 索引</span></div><div class=\"line\">db.things.dropIndexes ();  </div><div class=\"line\"><span class=\"comment\">//删除指定键的索引  </span></div><div class=\"line\">db.things.dropIndex (&#123;</div><div class=\"line\">\tx :   <span class=\"number\">1</span> ,</div><div class=\"line\">\ty :   - <span class=\"number\">1</span></div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//使用 command 删除指定键的 索引</span></div><div class=\"line\">db.runCommand (&#123;</div><div class=\"line\">\tdropIndexes : <span class=\"string\">'foo '</span> ,</div><div class=\"line\">\tindex:&#123; y : <span class=\"number\">1</span> &#125;</div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//使用 command 删除所有 索引</span></div><div class=\"line\">db.runCommand (&#123;dropIndexes : <span class=\"string\">'foo '</span>,index: <span class=\"string\">'*'</span>&#125;)</div></pre></td></tr></table></figure>\n<p>如果是删除集合中所有的文档（remove）则不会影响索引，当有新文档插入时，索引就会重建。</p>\n<h3 id=\"唯一索引\"><a href=\"#唯一索引\" class=\"headerlink\" title=\"唯一索引\"></a>唯一索引</h3><p>创建唯一索引，同时这也是一个符合唯一索引<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.things.ensureIndex (</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"string\">'firstName '</span> :   <span class=\"number\">1</span> ,</div><div class=\"line\">\t<span class=\"string\">'lastName '</span> :   <span class=\"number\">1</span></div><div class=\"line\">&#125;,   &#123;</div><div class=\"line\"><span class=\"comment\">//指定为唯一索引</span></div><div class=\"line\"><span class=\"string\">'unique'</span>: <span class=\"literal\">true</span> ,</div><div class=\"line\"><span class=\"comment\">//删除重复 记录</span></div><div class=\"line\"><span class=\"string\">'dropDups'</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"强制使用索引\"><a href=\"#强制使用索引\" class=\"headerlink\" title=\"强制使用索引\"></a>强制使用索引</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//强制使用索引 a 和 b</span></div><div class=\"line\">db.collection.find(&#123;</div><div class=\"line\">\t<span class=\"string\">'a'</span> :   <span class=\"number\">4</span> ,</div><div class=\"line\">\t<span class=\"string\">'b'</span> :   <span class=\"number\">5</span> ,</div><div class=\"line\">\t<span class=\"string\">'c'</span> :   <span class=\"number\">6</span></div><div class=\"line\">&#125;).hint(&#123;</div><div class=\"line\">\t<span class=\"string\">'a'</span> :   <span class=\"number\">1</span> ,</div><div class=\"line\">\t<span class=\"string\">'b'</span> :   <span class=\"number\">1</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//强制不使用任何 索引</span></div><div class=\"line\">db.collection.find().hint(&#123;</div><div class=\"line\">\t<span class=\"string\">'$natural'</span> :   <span class=\"number\">1</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<hr>\n<p>索引总结:</p>\n<ul>\n<li>索引可以加速查询；</li>\n<li>单个索引无需在意其索引方向；</li>\n<li>多键索引需要慎重考虑每个索引的方向；</li>\n<li>做海量数据更新时应当先卸载所有索引，待数据更新完成后再重建索引；</li>\n<li>不要试图为每个键都创建索引，应考虑实际需要，并不是索引越多越好；</li>\n<li>唯一索引可以用来消除重复记录；</li>\n<li>地理空间索引是没有单位的，其内部实现是基本的勾股定理算法</li>\n</ul>\n<h2 id=\"4-mongo数据库管理\"><a href=\"#4-mongo数据库管理\" class=\"headerlink\" title=\"4.mongo数据库管理\"></a>4.mongo数据库管理</h2><h3 id=\"安全与认证\"><a href=\"#安全与认证\" class=\"headerlink\" title=\"安全与认证\"></a>安全与认证</h3><ol>\n<li>默认为无认证，启动用登录 shell ；</li>\n<li>添加账号；</li>\n<li>关闭 shell .关闭 MongoDB ；</li>\n<li>为 MongoDB 增加 — auth 参数；</li>\n<li>重 启 MongoDB ；</li>\n<li>登录 shell ，此时就需要认证了</li>\n</ol>\n<h3 id=\"冷备份\"><a href=\"#冷备份\" class=\"headerlink\" title=\"冷备份\"></a>冷备份</h3><ol>\n<li>关闭MongoDB引擎</li>\n<li>拷贝数据库文件夹及文件</li>\n<li>恢复时反向操作即可        </li>\n</ol>\n<ul>\n<li>优点：可以完全保证数据完整性；</li>\n<li>缺点：需要数据库引擎离线     <h3 id=\"热备份\"><a href=\"#热备份\" class=\"headerlink\" title=\"热备份\"></a>热备份</h3></li>\n</ul>\n<ol>\n<li>保持MongoDB为运行状态</li>\n<li>使用mongodump备份数据</li>\n<li>使用mongorestore恢复数据</li>\n</ol>\n<ul>\n<li>优点：数据库引擎无须离线</li>\n<li>缺点：不能保证数据完整性，操作时会降低MongoDB性能</li>\n</ul>\n<h3 id=\"主从复制备份\"><a href=\"#主从复制备份\" class=\"headerlink\" title=\"主从复制备份\"></a>主从复制备份</h3><ol>\n<li>创建主从复制机制</li>\n<li>配置完成后数据会自动同步</li>\n<li>恢复途径很多</li>\n</ol>\n<ul>\n<li>优点：可以保持MongoDB处于联机状态，不影响性能</li>\n<li>缺点：在数据写入密集的情况下可能无法保证数据完整性</li>\n</ul>\n<h3 id=\"修复db-repairDatabase\"><a href=\"#修复db-repairDatabase\" class=\"headerlink\" title=\"修复db.repairDatabase();\"></a>修复db.repairDatabase();</h3><ul>\n<li>修复数据库还可以起到压缩数据的作用；</li>\n<li>修复数据库的操作相当耗时，万不得已请不要使用；</li>\n<li>建议经常做数据备份；<h2 id=\"5-mongo复制-集群\"><a href=\"#5-mongo复制-集群\" class=\"headerlink\" title=\"5.mongo复制(集群)\"></a>5.mongo复制(集群)</h2></li>\n</ul>\n<ol>\n<li><p>主从复制<br>选项      说明<br>–only  作用是限定仅复制指定的某个数据库<br>–slavedelay  为复制设置操作延迟，单位为秒<br>–fastsync  以主节点的数据快照为基础启动从节点。<br>–autoresync  当主从节点数据不一致时，是否自动重新同步<br>–oplogSize  设定主节点中的oplog的容量，单位是MB</p>\n</li>\n<li><p>副本集<br>与普通主从复制集群相比，具有自动检测机制<br>需要使用—replSet 选项指定副本同伴<br>任何时候，副本集当中最多只允许有1个活跃节点</p>\n</li>\n<li><p>读写分离<br>将密集的读取操作分流到从节点上，降低主节点的负载<br>默认情况下，从节点是不允许处理<br>客户端请求的，需要使用—slaveOkay打开<br>不适用于实时性要求非常高的应用</p>\n</li>\n<li><p>工作原理—— OPLOG<br>oplog保存在local数据库中，oplog就在其中的<br>oplog.$main集合内保存。该集合的每个文档都记录了主节点上执行的一个操作，其键定义如下：<br> ts：操作时间戳，占用4字节<br> op：操作类型，占用1字节<br> ns：操作对象的命名空间（或理解为集合全名）<br> o：进一步指定所执行的操作，例如插入</p>\n</li>\n<li><p>工作原理—— 同步<br> 从节点首次启动时，做完整同步<br> 主节点数据发生变化时，做增量同步<br> 从节点与主节点数据严重不一致时，做完整同步</p>\n</li>\n<li><p>复制管理—— 诊断<br>db.printReplicationInfo()<br>在主节点上使用<br> 返回信息是oplog的大小以及各种操作的耗时. 空间占用等数据<br>在从节点上使用<br>db.printSlaveReplicationInfo()<br> 返回信息是从节点的数据源列表. 同步延迟时间等</p>\n</li>\n<li><p>复制管理—— 变更OPLOG 容量<br>在主节点上使用<br> 设定—oplogSize参数<br> 重启MongoDB</p>\n</li>\n<li><p>复制管理—— 复制认证<br>主从节点皆须配置<br> 存储在local.system.users<br> 优先尝试repl用户<br> 主从节点的用户配置必须保持一致</p>\n<h2 id=\"6-MONGODB分片\"><a href=\"#6-MONGODB分片\" class=\"headerlink\" title=\"6.MONGODB分片\"></a>6.MONGODB分片</h2><h3 id=\"分片与自动分片\"><a href=\"#分片与自动分片\" class=\"headerlink\" title=\"分片与自动分片\"></a>分片与自动分片</h3><p>分片是指将数据拆分，分散到不同的实例上进行负载分流的做法。我们常说的“分表”、“分库”、“分区”等概念都属于分片的实际体现。<br>传统分片做法是手工分表、分库。自动分片技术是根据指定的“片键”自动拆分数据并维护数据请求路由的过程。</p>\n</li>\n</ol>\n<ul>\n<li>递增片键–连续 不均匀 写入集中 分流较差</li>\n<li>随机片键–不连续 均匀 写入分散 分流较好</li>\n</ul>\n<h3 id=\"三个组成部分\"><a href=\"#三个组成部分\" class=\"headerlink\" title=\"三个组成部分\"></a>三个组成部分</h3><ul>\n<li>片,保存子集数据的容器</li>\n<li>mongos,MongoDB的路由器进程</li>\n<li>配置服务器,分·片集群的配置信息<h3 id=\"创建分片\"><a href=\"#创建分片\" class=\"headerlink\" title=\"创建分片\"></a>创建分片</h3></li>\n<li>–启动配置服务器,可以创建一个或多个</li>\n<li>–添加片,每个片都应该是副本集</li>\n<li>–物理服务器,性能、安全和稳定性<h3 id=\"管理分片\"><a href=\"#管理分片\" class=\"headerlink\" title=\"管理分片\"></a>管理分片</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//查询分片</span></div><div class=\"line\">db.shards.find();</div><div class=\"line\"><span class=\"comment\">//数据库</span></div><div class=\"line\">db.databases.find();</div><div class=\"line\"><span class=\"comment\">//块</span></div><div class=\"line\">db.chunks.find();</div><div class=\"line\"><span class=\"comment\">//分片状态</span></div><div class=\"line\">db.printShardingStatus();</div><div class=\"line\"><span class=\"comment\">//删除片</span></div><div class=\"line\">db.runCommand(&#123; removeshard : <span class=\"string\">'ip:port'</span> &#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","excerpt":"<p><strong> mongodb从入门到精通</strong> <Excerpt in index | 首页摘要><br>    mongodb日常使用的一些知识，增删改查，索引，分片。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"mongodb学习\"><a href=\"#mongodb学习\" class=\"headerlink\" title=\"mongodb学习\"></a>mongodb学习</h2><h2 id=\"1-mongodb特性\"><a href=\"#1-mongodb特性\" class=\"headerlink\" title=\"1.mongodb特性\"></a>1.mongodb特性</h2><pre><code>1）mongo是一个面向文档的数据库，它集合了nosql和sql数据库两方面的特性。\n2）所有实体都是在首次使用时创建。\n3）没有严格的事务特性，但是它保证任何一次数据变更都是原子性的。\n4）也没有固定的数据模型\n5）mongo以javascript作为命令行执行引擎，所以利用shell进行复杂的计算和查询时会相当的慢。\n6）mongo本身支持集群和数据分片\n7）mongo是c++实现的，支持windows mac linux等主流操作系统\n8）性能优越，速度快\n</code></pre><h2 id=\"2-mongo常用操作\"><a href=\"#2-mongo常用操作\" class=\"headerlink\" title=\"2.mongo常用操作\"></a>2.mongo常用操作</h2><h3 id=\"增删操作\"><a href=\"#增删操作\" class=\"headerlink\" title=\"增删操作\"></a>增删操作</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.insert(&#123;name:<span class=\"string\">'aaaa'</span>,age:<span class=\"number\">30</span>&#125;);</div><div class=\"line\">db.user.save(&#123;name:<span class=\"string\">'aaaa'</span>,age:<span class=\"number\">30</span>&#125;);</div><div class=\"line\">db.collection.insertOne(&#123;&#125;);<span class=\"comment\">//(3.2新特性)</span></div><div class=\"line\">db.collection.deleteOne(&#123;&#125;,&#123;&#125;);<span class=\"comment\">//(3.2新特性)</span></div><div class=\"line\">db.collection.remove(&#123;name:<span class=\"string\">'aaa'</span>&#125;);</div><div class=\"line\">db.collection.remove();<span class=\"comment\">//(删除全部)</span></div></pre></td></tr></table></figure>\n<h3 id=\"更新操作\"><a href=\"#更新操作\" class=\"headerlink\" title=\"更新操作\"></a>更新操作</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>&#125;, joe );</div><div class=\"line\"><span class=\"comment\">//upsert模式</span></div><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>&#125;, joe,  <span class=\"literal\">true</span> );</div><div class=\"line\"><span class=\"comment\">//MULTI模式</span></div><div class=\"line\">db.users.update(&#123;<span class=\"string\">\"name\"</span>: <span class=\"string\">\"joe\"</span>&#125;, joe,  <span class=\"literal\">true</span> ，<span class=\"literal\">true</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>update是对文档替换，而不是局部修改默认情况update更新匹配的第一条文档，multi模式更新所有匹配的  </p>\n</blockquote>\n<h3 id=\"查询操作\"><a href=\"#查询操作\" class=\"headerlink\" title=\"查询操作\"></a>查询操作</h3><p>普通查询<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.user.find();</div><div class=\"line\">db.user.find(&#123;name:<span class=\"string\">'aaa'</span>&#125;);</div><div class=\"line\">db.user.findOne(&#123;name:<span class=\"string\">'aaa'</span>&#125;);</div></pre></td></tr></table></figure></p>\n<p>模糊查询<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.UserInfo.find(&#123;userName :<span class=\"string\">'/A/'</span>&#125;) <span class=\"comment\">//（名称%A%）</span></div><div class=\"line\">db.UserInfo.find(&#123;userName :<span class=\"string\">'/^A/'</span>&#125;) <span class=\"comment\">//(名称A%)</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h3><ol>\n<li>$lt, $lte,$gt, $gte(&lt;, &lt;=, &gt;, &gt;= )     </li>\n<li>$all    数组中的元素是否完全匹配  db.things.find( { a: { $all: [ 2, 3 ] } } );</li>\n<li>$exists  可选：true，false  db.things.find( { a : { $exists : true } } );</li>\n<li>$mod  取模：a % 10 == 1  db.things.find( { a : { $mod : [ 10 , 1 ] } } );</li>\n<li>$ne 取反：即not equals  db.things.find( { x : { $ne : 3 } } );</li>\n<li>$in 类似于SQL的IN操作  db.things.find({j:{$in: [2,4,6]}});</li>\n<li>$nin $in的反操作，即SQL的  NOT IN  db.things.find({j:{$nin: [2,4,6]}});</li>\n<li>$nor $or的反操作，即不匹配(a或b)  db.things.find( { name : “bob”, $nor : [ { a : 1 },{ b : 2 }]})</li>\n<li>$or Or子句，注意$or不能嵌套使用  db.things.find( { name : “bob” , $or : [ { a : 1 },{ b : 2 }]})</li>\n<li>$size  匹配数组长度  db.things.find( { a : { $size: 1 } } );</li>\n<li>$type  匹配子键的数据类型，详情请看  db.things.find( { a : { $type : 2 } } );</li>\n</ol>\n<h3 id=\"数组查询\"><a href=\"#数组查询\" class=\"headerlink\" title=\"数组查询\"></a>数组查询</h3><p>$size 用来匹配数组长度（即最大下标）<br>// 返回comments包含5个元素的文档<br>db.posts.find({}, {comments:{‘$size’: 5}});<br>// 使用冗余字段来实现<br>db.posts.find({}, {‘commentCount’: { ‘$gt’: 5 }});<br>$slice 操作符类似于子键筛选，只不过它筛选的是数组中的项<br>// 仅返回数组中的前5项<br>db.posts.find({}, {comments:{‘$slice’: 5}});<br>// 仅返回数组中的最后5项<br>db.posts.find({}, {comments:{‘$slice’: -5}});<br>// 跳过数组中的前20项，返回接下来的10项<br>db.posts.find({}, {comments:{‘$slice’: [20, 10]}});<br>// 跳过数组中的最后20项，返回接下来的10项<br>db.posts.find({}, {comments:{‘$slice’: [-20, 10]}});<br>MongoDB 允许在查询中指定数组的下标，以实现更加精确的匹配<br>// 返回comments中第1项的by子键为Abe的所有文档<br>db.posts.find( { “comments.0.by” : “Abe” } );   </p>\n<h2 id=\"3-索引的使用\"><a href=\"#3-索引的使用\" class=\"headerlink\" title=\"3.索引的使用\"></a>3.索引的使用</h2><h3 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.things.ensureIndex(&#123;<span class=\"string\">'j'</span>: <span class=\"number\">1</span>&#125;);</div><div class=\"line\"><span class=\"comment\">//创建子文档 索引</span></div><div class=\"line\">db.things.ensureIndex(&#123;<span class=\"string\">'user.Name'</span> : - <span class=\"number\">1</span>&#125;);</div><div class=\"line\"><span class=\"comment\">//创建 复合 索引</span></div><div class=\"line\">db.things.ensureIndex(&#123;</div><div class=\"line\"><span class=\"string\">'j'</span> : <span class=\"number\">1</span> ,   <span class=\"comment\">//  升序</span></div><div class=\"line\"><span class=\"string\">'x'</span> : - <span class=\"number\">1</span>   <span class=\"comment\">//  降序</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果 您的 find 操作只用到了一个键，那么索引方向是无关紧要的<br>        当创建复合索引的时候，一定要谨慎斟酌每个键的排序方向</p>\n<h3 id=\"修改索引\"><a href=\"#修改索引\" class=\"headerlink\" title=\"修改索引\"></a>修改索引</h3><p>修改索引，只需要重新 运行索引 命令即可<br>如果索引已经存在则会 重建， 不存在的索引会被 添加<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.things.ensureIndex (&#123;</div><div class=\"line\">\t<span class=\"comment\">//原来的索引会 重建</span></div><div class=\"line\">\t<span class=\"string\">'user.Name '</span> : - <span class=\"number\">1</span> ,</div><div class=\"line\">\t<span class=\"comment\">//新增一个升序 索引</span></div><div class=\"line\">\t<span class=\"string\">'user.Name '</span> : <span class=\"number\">1</span> ,</div><div class=\"line\">\t<span class=\"comment\">//为 Age 新建降序 索引</span></div><div class=\"line\">\t<span class=\"string\">'user.Age '</span> :  - <span class=\"number\">1</span></div><div class=\"line\">\t<span class=\"comment\">//打开后台执行</span></div><div class=\"line\">&#125;,&#123;\t<span class=\"string\">'background'</span> :   <span class=\"literal\">true</span>&#125;);</div><div class=\"line\"><span class=\"comment\">//重建索引</span></div><div class=\"line\">db.things.reIndex();</div></pre></td></tr></table></figure></p>\n<h3 id=\"删除索引\"><a href=\"#删除索引\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//删除集合中的所有 索引</span></div><div class=\"line\">db.things.dropIndexes ();  </div><div class=\"line\"><span class=\"comment\">//删除指定键的索引  </span></div><div class=\"line\">db.things.dropIndex (&#123;</div><div class=\"line\">\tx :   <span class=\"number\">1</span> ,</div><div class=\"line\">\ty :   - <span class=\"number\">1</span></div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//使用 command 删除指定键的 索引</span></div><div class=\"line\">db.runCommand (&#123;</div><div class=\"line\">\tdropIndexes : <span class=\"string\">'foo '</span> ,</div><div class=\"line\">\tindex:&#123; y : <span class=\"number\">1</span> &#125;</div><div class=\"line\">&#125;);  </div><div class=\"line\"><span class=\"comment\">//使用 command 删除所有 索引</span></div><div class=\"line\">db.runCommand (&#123;dropIndexes : <span class=\"string\">'foo '</span>,index: <span class=\"string\">'*'</span>&#125;)</div></pre></td></tr></table></figure>\n<p>如果是删除集合中所有的文档（remove）则不会影响索引，当有新文档插入时，索引就会重建。</p>\n<h3 id=\"唯一索引\"><a href=\"#唯一索引\" class=\"headerlink\" title=\"唯一索引\"></a>唯一索引</h3><p>创建唯一索引，同时这也是一个符合唯一索引<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.things.ensureIndex (</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"string\">'firstName '</span> :   <span class=\"number\">1</span> ,</div><div class=\"line\">\t<span class=\"string\">'lastName '</span> :   <span class=\"number\">1</span></div><div class=\"line\">&#125;,   &#123;</div><div class=\"line\"><span class=\"comment\">//指定为唯一索引</span></div><div class=\"line\"><span class=\"string\">'unique'</span>: <span class=\"literal\">true</span> ,</div><div class=\"line\"><span class=\"comment\">//删除重复 记录</span></div><div class=\"line\"><span class=\"string\">'dropDups'</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"强制使用索引\"><a href=\"#强制使用索引\" class=\"headerlink\" title=\"强制使用索引\"></a>强制使用索引</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//强制使用索引 a 和 b</span></div><div class=\"line\">db.collection.find(&#123;</div><div class=\"line\">\t<span class=\"string\">'a'</span> :   <span class=\"number\">4</span> ,</div><div class=\"line\">\t<span class=\"string\">'b'</span> :   <span class=\"number\">5</span> ,</div><div class=\"line\">\t<span class=\"string\">'c'</span> :   <span class=\"number\">6</span></div><div class=\"line\">&#125;).hint(&#123;</div><div class=\"line\">\t<span class=\"string\">'a'</span> :   <span class=\"number\">1</span> ,</div><div class=\"line\">\t<span class=\"string\">'b'</span> :   <span class=\"number\">1</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//强制不使用任何 索引</span></div><div class=\"line\">db.collection.find().hint(&#123;</div><div class=\"line\">\t<span class=\"string\">'$natural'</span> :   <span class=\"number\">1</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<hr>\n<p>索引总结:</p>\n<ul>\n<li>索引可以加速查询；</li>\n<li>单个索引无需在意其索引方向；</li>\n<li>多键索引需要慎重考虑每个索引的方向；</li>\n<li>做海量数据更新时应当先卸载所有索引，待数据更新完成后再重建索引；</li>\n<li>不要试图为每个键都创建索引，应考虑实际需要，并不是索引越多越好；</li>\n<li>唯一索引可以用来消除重复记录；</li>\n<li>地理空间索引是没有单位的，其内部实现是基本的勾股定理算法</li>\n</ul>\n<h2 id=\"4-mongo数据库管理\"><a href=\"#4-mongo数据库管理\" class=\"headerlink\" title=\"4.mongo数据库管理\"></a>4.mongo数据库管理</h2><h3 id=\"安全与认证\"><a href=\"#安全与认证\" class=\"headerlink\" title=\"安全与认证\"></a>安全与认证</h3><ol>\n<li>默认为无认证，启动用登录 shell ；</li>\n<li>添加账号；</li>\n<li>关闭 shell .关闭 MongoDB ；</li>\n<li>为 MongoDB 增加 — auth 参数；</li>\n<li>重 启 MongoDB ；</li>\n<li>登录 shell ，此时就需要认证了</li>\n</ol>\n<h3 id=\"冷备份\"><a href=\"#冷备份\" class=\"headerlink\" title=\"冷备份\"></a>冷备份</h3><ol>\n<li>关闭MongoDB引擎</li>\n<li>拷贝数据库文件夹及文件</li>\n<li>恢复时反向操作即可        </li>\n</ol>\n<ul>\n<li>优点：可以完全保证数据完整性；</li>\n<li>缺点：需要数据库引擎离线     <h3 id=\"热备份\"><a href=\"#热备份\" class=\"headerlink\" title=\"热备份\"></a>热备份</h3></li>\n</ul>\n<ol>\n<li>保持MongoDB为运行状态</li>\n<li>使用mongodump备份数据</li>\n<li>使用mongorestore恢复数据</li>\n</ol>\n<ul>\n<li>优点：数据库引擎无须离线</li>\n<li>缺点：不能保证数据完整性，操作时会降低MongoDB性能</li>\n</ul>\n<h3 id=\"主从复制备份\"><a href=\"#主从复制备份\" class=\"headerlink\" title=\"主从复制备份\"></a>主从复制备份</h3><ol>\n<li>创建主从复制机制</li>\n<li>配置完成后数据会自动同步</li>\n<li>恢复途径很多</li>\n</ol>\n<ul>\n<li>优点：可以保持MongoDB处于联机状态，不影响性能</li>\n<li>缺点：在数据写入密集的情况下可能无法保证数据完整性</li>\n</ul>\n<h3 id=\"修复db-repairDatabase\"><a href=\"#修复db-repairDatabase\" class=\"headerlink\" title=\"修复db.repairDatabase();\"></a>修复db.repairDatabase();</h3><ul>\n<li>修复数据库还可以起到压缩数据的作用；</li>\n<li>修复数据库的操作相当耗时，万不得已请不要使用；</li>\n<li>建议经常做数据备份；<h2 id=\"5-mongo复制-集群\"><a href=\"#5-mongo复制-集群\" class=\"headerlink\" title=\"5.mongo复制(集群)\"></a>5.mongo复制(集群)</h2></li>\n</ul>\n<ol>\n<li><p>主从复制<br>选项      说明<br>–only  作用是限定仅复制指定的某个数据库<br>–slavedelay  为复制设置操作延迟，单位为秒<br>–fastsync  以主节点的数据快照为基础启动从节点。<br>–autoresync  当主从节点数据不一致时，是否自动重新同步<br>–oplogSize  设定主节点中的oplog的容量，单位是MB</p>\n</li>\n<li><p>副本集<br>与普通主从复制集群相比，具有自动检测机制<br>需要使用—replSet 选项指定副本同伴<br>任何时候，副本集当中最多只允许有1个活跃节点</p>\n</li>\n<li><p>读写分离<br>将密集的读取操作分流到从节点上，降低主节点的负载<br>默认情况下，从节点是不允许处理<br>客户端请求的，需要使用—slaveOkay打开<br>不适用于实时性要求非常高的应用</p>\n</li>\n<li><p>工作原理—— OPLOG<br>oplog保存在local数据库中，oplog就在其中的<br>oplog.$main集合内保存。该集合的每个文档都记录了主节点上执行的一个操作，其键定义如下：<br> ts：操作时间戳，占用4字节<br> op：操作类型，占用1字节<br> ns：操作对象的命名空间（或理解为集合全名）<br> o：进一步指定所执行的操作，例如插入</p>\n</li>\n<li><p>工作原理—— 同步<br> 从节点首次启动时，做完整同步<br> 主节点数据发生变化时，做增量同步<br> 从节点与主节点数据严重不一致时，做完整同步</p>\n</li>\n<li><p>复制管理—— 诊断<br>db.printReplicationInfo()<br>在主节点上使用<br> 返回信息是oplog的大小以及各种操作的耗时. 空间占用等数据<br>在从节点上使用<br>db.printSlaveReplicationInfo()<br> 返回信息是从节点的数据源列表. 同步延迟时间等</p>\n</li>\n<li><p>复制管理—— 变更OPLOG 容量<br>在主节点上使用<br> 设定—oplogSize参数<br> 重启MongoDB</p>\n</li>\n<li><p>复制管理—— 复制认证<br>主从节点皆须配置<br> 存储在local.system.users<br> 优先尝试repl用户<br> 主从节点的用户配置必须保持一致</p>\n<h2 id=\"6-MONGODB分片\"><a href=\"#6-MONGODB分片\" class=\"headerlink\" title=\"6.MONGODB分片\"></a>6.MONGODB分片</h2><h3 id=\"分片与自动分片\"><a href=\"#分片与自动分片\" class=\"headerlink\" title=\"分片与自动分片\"></a>分片与自动分片</h3><p>分片是指将数据拆分，分散到不同的实例上进行负载分流的做法。我们常说的“分表”、“分库”、“分区”等概念都属于分片的实际体现。<br>传统分片做法是手工分表、分库。自动分片技术是根据指定的“片键”自动拆分数据并维护数据请求路由的过程。</p>\n</li>\n</ol>\n<ul>\n<li>递增片键–连续 不均匀 写入集中 分流较差</li>\n<li>随机片键–不连续 均匀 写入分散 分流较好</li>\n</ul>\n<h3 id=\"三个组成部分\"><a href=\"#三个组成部分\" class=\"headerlink\" title=\"三个组成部分\"></a>三个组成部分</h3><ul>\n<li>片,保存子集数据的容器</li>\n<li>mongos,MongoDB的路由器进程</li>\n<li>配置服务器,分·片集群的配置信息<h3 id=\"创建分片\"><a href=\"#创建分片\" class=\"headerlink\" title=\"创建分片\"></a>创建分片</h3></li>\n<li>–启动配置服务器,可以创建一个或多个</li>\n<li>–添加片,每个片都应该是副本集</li>\n<li>–物理服务器,性能、安全和稳定性<h3 id=\"管理分片\"><a href=\"#管理分片\" class=\"headerlink\" title=\"管理分片\"></a>管理分片</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//查询分片</span></div><div class=\"line\">db.shards.find();</div><div class=\"line\"><span class=\"comment\">//数据库</span></div><div class=\"line\">db.databases.find();</div><div class=\"line\"><span class=\"comment\">//块</span></div><div class=\"line\">db.chunks.find();</div><div class=\"line\"><span class=\"comment\">//分片状态</span></div><div class=\"line\">db.printShardingStatus();</div><div class=\"line\"><span class=\"comment\">//删除片</span></div><div class=\"line\">db.runCommand(&#123; removeshard : <span class=\"string\">'ip:port'</span> &#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"Mybatis-Generator","date":"2018-01-28T09:30:19.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\nmybatis反向生成器，根据数据库表，自动创建pojo，mapper以及mybatis配置文件，能极大的提高开发效率。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 插件介绍\n本插件fork自[mybatis-generator-gui](http://link),在此基础上加了批量生成表。\n\n## 插件特性\n1. 保存数据库配置\n2. 根据表生成pojo，mapper以及mybatis配置文件\n3. 批量生成\n4. 其它功能（待开发）\n\n## 插件使用\n### 要求\n本工具由于使用了Java 8的众多特性，所以要求JDK <strong>1.8.0.60</strong>以上版本，对于JDK版本还没有升级的童鞋表示歉意。\n\n### 启动本软件\n\n* 方法一: 自助构建\n\n```bash\n    git clone https://github.com/maochunguang/mybatis-generator-gui\n    cd mybatis-generator-gui\n    mvn jfx:jar\n    cd target/jfx/app/\n    java -jar mybatis-generator-gui.jar\n```\n* 方法二: IDE中运行Eclipse or IntelliJ IDEA中启动, 找到`com.zzg.mybatis.generator.MainUI`类并运行就可以了\n\n\n### 文档\n更多详细文档请参考本库的Wiki\n* [Usage](https://github.com/maochunguang/mybatis-generator-gui/wiki)\n\n## 截图参考\n![MainUI](http://o7kalf5h3.bkt.clouddn.com/mybatis.png)\n\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/mybatis-generator.md","raw":"title: mybatis-generator\ndate: 2018-01-28 17:30:19\ntags: mysql\ncategories: 开发工具\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\nmybatis反向生成器，根据数据库表，自动创建pojo，mapper以及mybatis配置文件，能极大的提高开发效率。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 插件介绍\n本插件fork自[mybatis-generator-gui](http://link),在此基础上加了批量生成表。\n\n## 插件特性\n1. 保存数据库配置\n2. 根据表生成pojo，mapper以及mybatis配置文件\n3. 批量生成\n4. 其它功能（待开发）\n\n## 插件使用\n### 要求\n本工具由于使用了Java 8的众多特性，所以要求JDK <strong>1.8.0.60</strong>以上版本，对于JDK版本还没有升级的童鞋表示歉意。\n\n### 启动本软件\n\n* 方法一: 自助构建\n\n```bash\n    git clone https://github.com/maochunguang/mybatis-generator-gui\n    cd mybatis-generator-gui\n    mvn jfx:jar\n    cd target/jfx/app/\n    java -jar mybatis-generator-gui.jar\n```\n* 方法二: IDE中运行Eclipse or IntelliJ IDEA中启动, 找到`com.zzg.mybatis.generator.MainUI`类并运行就可以了\n\n\n### 文档\n更多详细文档请参考本库的Wiki\n* [Usage](https://github.com/maochunguang/mybatis-generator-gui/wiki)\n\n## 截图参考\n![MainUI](http://o7kalf5h3.bkt.clouddn.com/mybatis.png)\n\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"mybatis-generator","published":1,"updated":"2018-01-28T09:40:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla6t002f8p9k8m9dewe2","content":"<p><strong> Mybatis-Generator：</strong> <Excerpt in index | 首页摘要><br>mybatis反向生成器，根据数据库表，自动创建pojo，mapper以及mybatis配置文件，能极大的提高开发效率。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"插件介绍\"><a href=\"#插件介绍\" class=\"headerlink\" title=\"插件介绍\"></a>插件介绍</h2><p>本插件fork自<a href=\"http://link\">mybatis-generator-gui</a>,在此基础上加了批量生成表。</p>\n<h2 id=\"插件特性\"><a href=\"#插件特性\" class=\"headerlink\" title=\"插件特性\"></a>插件特性</h2><ol>\n<li>保存数据库配置</li>\n<li>根据表生成pojo，mapper以及mybatis配置文件</li>\n<li>批量生成</li>\n<li>其它功能（待开发）</li>\n</ol>\n<h2 id=\"插件使用\"><a href=\"#插件使用\" class=\"headerlink\" title=\"插件使用\"></a>插件使用</h2><h3 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h3><p>本工具由于使用了Java 8的众多特性，所以要求JDK <strong>1.8.0.60</strong>以上版本，对于JDK版本还没有升级的童鞋表示歉意。</p>\n<h3 id=\"启动本软件\"><a href=\"#启动本软件\" class=\"headerlink\" title=\"启动本软件\"></a>启动本软件</h3><ul>\n<li>方法一: 自助构建</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/maochunguang/mybatis-generator-gui</div><div class=\"line\"><span class=\"built_in\">cd</span> mybatis-generator-gui</div><div class=\"line\">mvn jfx:jar</div><div class=\"line\"><span class=\"built_in\">cd</span> target/jfx/app/</div><div class=\"line\">java -jar mybatis-generator-gui.jar</div></pre></td></tr></table></figure>\n<ul>\n<li>方法二: IDE中运行Eclipse or IntelliJ IDEA中启动, 找到<code>com.zzg.mybatis.generator.MainUI</code>类并运行就可以了</li>\n</ul>\n<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><p>更多详细文档请参考本库的Wiki</p>\n<ul>\n<li><a href=\"https://github.com/maochunguang/mybatis-generator-gui/wiki\">Usage</a></li>\n</ul>\n<h2 id=\"截图参考\"><a href=\"#截图参考\" class=\"headerlink\" title=\"截图参考\"></a>截图参考</h2><p><img src=\"http://o7kalf5h3.bkt.clouddn.com/mybatis.png\" alt=\"MainUI\"></p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> Mybatis-Generator：</strong> <Excerpt in index | 首页摘要><br>mybatis反向生成器，根据数据库表，自动创建pojo，mapper以及mybatis配置文件，能极大的提高开发效率。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"插件介绍\"><a href=\"#插件介绍\" class=\"headerlink\" title=\"插件介绍\"></a>插件介绍</h2><p>本插件fork自<a href=\"http://link\">mybatis-generator-gui</a>,在此基础上加了批量生成表。</p>\n<h2 id=\"插件特性\"><a href=\"#插件特性\" class=\"headerlink\" title=\"插件特性\"></a>插件特性</h2><ol>\n<li>保存数据库配置</li>\n<li>根据表生成pojo，mapper以及mybatis配置文件</li>\n<li>批量生成</li>\n<li>其它功能（待开发）</li>\n</ol>\n<h2 id=\"插件使用\"><a href=\"#插件使用\" class=\"headerlink\" title=\"插件使用\"></a>插件使用</h2><h3 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h3><p>本工具由于使用了Java 8的众多特性，所以要求JDK <strong>1.8.0.60</strong>以上版本，对于JDK版本还没有升级的童鞋表示歉意。</p>\n<h3 id=\"启动本软件\"><a href=\"#启动本软件\" class=\"headerlink\" title=\"启动本软件\"></a>启动本软件</h3><ul>\n<li>方法一: 自助构建</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/maochunguang/mybatis-generator-gui</div><div class=\"line\"><span class=\"built_in\">cd</span> mybatis-generator-gui</div><div class=\"line\">mvn jfx:jar</div><div class=\"line\"><span class=\"built_in\">cd</span> target/jfx/app/</div><div class=\"line\">java -jar mybatis-generator-gui.jar</div></pre></td></tr></table></figure>\n<ul>\n<li>方法二: IDE中运行Eclipse or IntelliJ IDEA中启动, 找到<code>com.zzg.mybatis.generator.MainUI</code>类并运行就可以了</li>\n</ul>\n<h3 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h3><p>更多详细文档请参考本库的Wiki</p>\n<ul>\n<li><a href=\"https://github.com/maochunguang/mybatis-generator-gui/wiki\">Usage</a></li>\n</ul>\n<h2 id=\"截图参考\"><a href=\"#截图参考\" class=\"headerlink\" title=\"截图参考\"></a>截图参考</h2><p><img src=\"http://o7kalf5h3.bkt.clouddn.com/mybatis.png\" alt=\"MainUI\"></p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"那些年读的书","date":"2017-04-15T06:49:46.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n人生漫漫，不知不觉读了好多书，此贴只记录自己读过哪些书，不做多余的分析和总结。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 读过哪些种类的\n- 编程专业类\n- 小说类\n- 励志类\n\n## 小说\n- 平凡的世界\n- 白鹿原\n- 穆斯林的葬礼\n- 金庸武侠系列\n- 古龙武侠小说\n- 梁羽生武侠小说\n- 余华作品集\n- 雷米小说全集（侦探类）\n\n- 网络小说：\n    - 诛仙，\n    - 盗墓笔记，\n    - 泡沫之夏，\n    - 芈月传，\n\n\n## 编程类\n- java编程思想\n- effective java\n- java并发编程的艺术\n- 代码整洁之道\n- 黑客与画家\n\n- 深入浅出nodejs\n- nodejs实战\n- js高级程序设计\n- survivejs\n- redux和react中文手册\n- 你不知道的javascript\n- 算法javascript实现\n\n- mysql权威指南\n- mongodb权威指南\n- mongodb实战第二版\n- redis入门\n\n## 经管励志\n- 时间管理\n- 一分钟系列\n- 番茄工作法图解\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/mybooks.md","raw":"title: 那些年读的书\ndate: 2017-04-15 14:49:46\ntags: 学习笔记\ncategories: book\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n人生漫漫，不知不觉读了好多书，此贴只记录自己读过哪些书，不做多余的分析和总结。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 读过哪些种类的\n- 编程专业类\n- 小说类\n- 励志类\n\n## 小说\n- 平凡的世界\n- 白鹿原\n- 穆斯林的葬礼\n- 金庸武侠系列\n- 古龙武侠小说\n- 梁羽生武侠小说\n- 余华作品集\n- 雷米小说全集（侦探类）\n\n- 网络小说：\n    - 诛仙，\n    - 盗墓笔记，\n    - 泡沫之夏，\n    - 芈月传，\n\n\n## 编程类\n- java编程思想\n- effective java\n- java并发编程的艺术\n- 代码整洁之道\n- 黑客与画家\n\n- 深入浅出nodejs\n- nodejs实战\n- js高级程序设计\n- survivejs\n- redux和react中文手册\n- 你不知道的javascript\n- 算法javascript实现\n\n- mysql权威指南\n- mongodb权威指南\n- mongodb实战第二版\n- redis入门\n\n## 经管励志\n- 时间管理\n- 一分钟系列\n- 番茄工作法图解\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"mybooks","published":1,"updated":"2017-06-14T02:56:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla6u002j8p9krz3m2pnd","content":"<p><strong> 那些年读的书：</strong> <Excerpt in index | 首页摘要><br>人生漫漫，不知不觉读了好多书，此贴只记录自己读过哪些书，不做多余的分析和总结。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"读过哪些种类的\"><a href=\"#读过哪些种类的\" class=\"headerlink\" title=\"读过哪些种类的\"></a>读过哪些种类的</h2><ul>\n<li>编程专业类</li>\n<li>小说类</li>\n<li>励志类</li>\n</ul>\n<h2 id=\"小说\"><a href=\"#小说\" class=\"headerlink\" title=\"小说\"></a>小说</h2><ul>\n<li>平凡的世界</li>\n<li>白鹿原</li>\n<li>穆斯林的葬礼</li>\n<li>金庸武侠系列</li>\n<li>古龙武侠小说</li>\n<li>梁羽生武侠小说</li>\n<li>余华作品集</li>\n<li><p>雷米小说全集（侦探类）</p>\n</li>\n<li><p>网络小说：</p>\n<ul>\n<li>诛仙，</li>\n<li>盗墓笔记，</li>\n<li>泡沫之夏，</li>\n<li>芈月传，</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"编程类\"><a href=\"#编程类\" class=\"headerlink\" title=\"编程类\"></a>编程类</h2><ul>\n<li>java编程思想</li>\n<li>effective java</li>\n<li>java并发编程的艺术</li>\n<li>代码整洁之道</li>\n<li><p>黑客与画家</p>\n</li>\n<li><p>深入浅出nodejs</p>\n</li>\n<li>nodejs实战</li>\n<li>js高级程序设计</li>\n<li>survivejs</li>\n<li>redux和react中文手册</li>\n<li>你不知道的javascript</li>\n<li><p>算法javascript实现</p>\n</li>\n<li><p>mysql权威指南</p>\n</li>\n<li>mongodb权威指南</li>\n<li>mongodb实战第二版</li>\n<li>redis入门</li>\n</ul>\n<h2 id=\"经管励志\"><a href=\"#经管励志\" class=\"headerlink\" title=\"经管励志\"></a>经管励志</h2><ul>\n<li>时间管理</li>\n<li>一分钟系列</li>\n<li>番茄工作法图解</li>\n</ul>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 那些年读的书：</strong> <Excerpt in index | 首页摘要><br>人生漫漫，不知不觉读了好多书，此贴只记录自己读过哪些书，不做多余的分析和总结。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"读过哪些种类的\"><a href=\"#读过哪些种类的\" class=\"headerlink\" title=\"读过哪些种类的\"></a>读过哪些种类的</h2><ul>\n<li>编程专业类</li>\n<li>小说类</li>\n<li>励志类</li>\n</ul>\n<h2 id=\"小说\"><a href=\"#小说\" class=\"headerlink\" title=\"小说\"></a>小说</h2><ul>\n<li>平凡的世界</li>\n<li>白鹿原</li>\n<li>穆斯林的葬礼</li>\n<li>金庸武侠系列</li>\n<li>古龙武侠小说</li>\n<li>梁羽生武侠小说</li>\n<li>余华作品集</li>\n<li><p>雷米小说全集（侦探类）</p>\n</li>\n<li><p>网络小说：</p>\n<ul>\n<li>诛仙，</li>\n<li>盗墓笔记，</li>\n<li>泡沫之夏，</li>\n<li>芈月传，</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"编程类\"><a href=\"#编程类\" class=\"headerlink\" title=\"编程类\"></a>编程类</h2><ul>\n<li>java编程思想</li>\n<li>effective java</li>\n<li>java并发编程的艺术</li>\n<li>代码整洁之道</li>\n<li><p>黑客与画家</p>\n</li>\n<li><p>深入浅出nodejs</p>\n</li>\n<li>nodejs实战</li>\n<li>js高级程序设计</li>\n<li>survivejs</li>\n<li>redux和react中文手册</li>\n<li>你不知道的javascript</li>\n<li><p>算法javascript实现</p>\n</li>\n<li><p>mysql权威指南</p>\n</li>\n<li>mongodb权威指南</li>\n<li>mongodb实战第二版</li>\n<li>redis入门</li>\n</ul>\n<h2 id=\"经管励志\"><a href=\"#经管励志\" class=\"headerlink\" title=\"经管励志\"></a>经管励志</h2><ul>\n<li>时间管理</li>\n<li>一分钟系列</li>\n<li>番茄工作法图解</li>\n</ul>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Illegal Mix of Collations","date":"2017-06-12T03:00:14.000Z","_content":"** mysql排序字符集问题：** <Excerpt in index | 首页摘要>\nmysql表的每个字段都可以设置单独的排序字符集和文本字符集，如果你创建表的时候不注意，很可能会遇到Illegal mix of collations这个问题。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 问题描述\n用mysql进行两个表的联合查询的时候，出现下面的错误。\n```\nIllegal mix of collations (utf8_unicode_ci,IMPLICIT) and (utf8_general_ci,IMPLICIT) for operation '='\n```\n## 排查过程\n1. 通过google搜索找到原因，这个错误是mysql的排序字符集不一致导致的。\n2. 把联合查询的表使用navicat查看字段的设置，发现了有一个关联字段排序字符集的问题，如图：\n3. 这两个表中openid的排序规则不一致，导致出现问题。\n![user表中opeid](http://o7kalf5h3.bkt.clouddn.com/openid01.png)\n![user_tag表中opeid](http://o7kalf5h3.bkt.clouddn.com/openid02.png)\n\n## 解决方法\n将user表中的字符集和排序规则设置为默认，保持一致即可。\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/mysql-collation.md","raw":"title: Illegal mix of collations\ndate: 2017-06-12 11:00:14\ntags: mysql\ncategories: 数据库\n---\n** mysql排序字符集问题：** <Excerpt in index | 首页摘要>\nmysql表的每个字段都可以设置单独的排序字符集和文本字符集，如果你创建表的时候不注意，很可能会遇到Illegal mix of collations这个问题。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 问题描述\n用mysql进行两个表的联合查询的时候，出现下面的错误。\n```\nIllegal mix of collations (utf8_unicode_ci,IMPLICIT) and (utf8_general_ci,IMPLICIT) for operation '='\n```\n## 排查过程\n1. 通过google搜索找到原因，这个错误是mysql的排序字符集不一致导致的。\n2. 把联合查询的表使用navicat查看字段的设置，发现了有一个关联字段排序字符集的问题，如图：\n3. 这两个表中openid的排序规则不一致，导致出现问题。\n![user表中opeid](http://o7kalf5h3.bkt.clouddn.com/openid01.png)\n![user_tag表中opeid](http://o7kalf5h3.bkt.clouddn.com/openid02.png)\n\n## 解决方法\n将user表中的字符集和排序规则设置为默认，保持一致即可。\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"mysql-collation","published":1,"updated":"2017-06-12T03:34:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla6v002m8p9k4mbs25q4","content":"<p><strong> mysql排序字符集问题：</strong> <Excerpt in index | 首页摘要><br>mysql表的每个字段都可以设置单独的排序字符集和文本字符集，如果你创建表的时候不注意，很可能会遇到Illegal mix of collations这个问题。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>用mysql进行两个表的联合查询的时候，出现下面的错误。<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Illegal mix of collations (utf8_unicode_ci,<span class=\"keyword\">IMPLICIT</span>) and (utf8_general_ci,<span class=\"keyword\">IMPLICIT</span>) for operation <span class=\"string\">'='</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"排查过程\"><a href=\"#排查过程\" class=\"headerlink\" title=\"排查过程\"></a>排查过程</h2><ol>\n<li>通过google搜索找到原因，这个错误是mysql的排序字符集不一致导致的。</li>\n<li>把联合查询的表使用navicat查看字段的设置，发现了有一个关联字段排序字符集的问题，如图：</li>\n<li>这两个表中openid的排序规则不一致，导致出现问题。<br><img src=\"http://o7kalf5h3.bkt.clouddn.com/openid01.png\" alt=\"user表中opeid\"><br><img src=\"http://o7kalf5h3.bkt.clouddn.com/openid02.png\" alt=\"user_tag表中opeid\"></li>\n</ol>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>将user表中的字符集和排序规则设置为默认，保持一致即可。</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> mysql排序字符集问题：</strong> <Excerpt in index | 首页摘要><br>mysql表的每个字段都可以设置单独的排序字符集和文本字符集，如果你创建表的时候不注意，很可能会遇到Illegal mix of collations这个问题。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>用mysql进行两个表的联合查询的时候，出现下面的错误。<br><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Illegal mix of collations (utf8_unicode_ci,<span class=\"keyword\">IMPLICIT</span>) and (utf8_general_ci,<span class=\"keyword\">IMPLICIT</span>) for operation <span class=\"string\">'='</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"排查过程\"><a href=\"#排查过程\" class=\"headerlink\" title=\"排查过程\"></a>排查过程</h2><ol>\n<li>通过google搜索找到原因，这个错误是mysql的排序字符集不一致导致的。</li>\n<li>把联合查询的表使用navicat查看字段的设置，发现了有一个关联字段排序字符集的问题，如图：</li>\n<li>这两个表中openid的排序规则不一致，导致出现问题。<br><img src=\"http://o7kalf5h3.bkt.clouddn.com/openid01.png\" alt=\"user表中opeid\"><br><img src=\"http://o7kalf5h3.bkt.clouddn.com/openid02.png\" alt=\"user_tag表中opeid\"></li>\n</ol>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>将user表中的字符集和排序规则设置为默认，保持一致即可。</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Mysql学习笔记","date":"2016-05-28T14:24:56.000Z","_content":"** mysql学习笔记：** <Excerpt in index | 首页摘要>\n\tmysql学习，基础的增删改查，数据库优化，索引，分片，集群搭建等等。\n<!-- more -->\n<The rest of contents | 余下全文\\>\n \n## mysql的特点\n1. 关系型数据库，免费使用，\n2. 插入式存储引擎，\n3. 性能高，\n\n## 基础的增删改查\n1. ddl语句，数据定义语句\n\t```\n\tcreate database test1;\n\tdrop database test1;\n\tuse test1;\n\tcreate table emp(ename varchar(10),hiredate date,sal decimal(10,2),deptno int(2));\n\tdrop table emp;\n\talter table emp modify ename varchar(20);\n\talter table emp add column age int(3);\n\talter table emp drop column age;\n\talter table emp change age age1 int(4);\n\talter table emp add birth date after ename;\n\talter table emp modify age int(3) first;\n\talter table emp rename emp1;\n\t```\n2. dml语句，数据操纵语句\n\t```\n\tinsert into emp(ename,hiredate,sal,deptno) values('zzx1','2000-10-11',2000,1);\n\tinsert into emp values('lisa','2004-05-09',3000,2);\n\tinsert into dept values(5,'dept5'),(6,'dept6');\n\tupdate emp set sal=4000 where ename='lisa';\n\tupdate emp a,dept b set a.sal=a.sal*b.deptno,b.deptname=a.ename where a.deptno=b.deptno;\n\tdelete from emp where ename='dony';\n\tdelete a,b from emp a,dept b where a.deptno=b.deptno and a.deptno=3;\n\tselect * from emp where ename='lisa';\n\tselect distinct deptno from emp;\n\tselect * from emp order by sal(desc);\n\tselect * from emp order by sal limit 5;\n\tselect * from emp order by sal limit 1,5;ss\n\n\t```\n3. dcl语句，数据控制语句\n\n## sql优化\n1. 尽量使用 prepareStatement(java)，利用预处理功能。\n2. 在进行多条记录的增加、修改、删除时，建议使用批处理功能，批处理的次数以整\n个 SQL 语句不超过相应数据库的 SQL 语句大小的限制为准。\n3. 建议每条 SQL 语句中 in 中的元素个数在 200 以下，如果个数超过时，应拆分为多\n条 SQL 语句。禁止使用 xx in(‘’,’’….) or xx in(‘’,’’,’’)。 ★\n4. 禁止使用 or 超过 200，如 xx =’123’ or xx=’456’。 ★\n5. 尽量不使用外连接。\n6. 禁止使用 not in 语句，建议用 not exist。 ★\n7. 禁止使用 Union, 如果有业务需要，请拆分为两个查询。 ★\n8. 禁止在一条 SQL 语句中使用 3 层以上的嵌套查询，如果有，请考虑使用临时表或\n中间结果集。\n9. 尽量避免在一条 SQL 语句中从>= 4 个表中同时取数， 对于仅是作为过滤条件关联，\n但不涉及取数的表，不参与表个数计算\n10. 查询条件里任何对列的操作都将导致表扫描，所以应尽量将数据库函数、计算表达\n式写在逻辑操作符右边。\n11. 在对 char 类型比较时,建议不要使用 rtrim()函数,应该在程序中将不足的长度补\n齐。\n12. 用多表连接代替 EXISTS 子句。\n13. 如果有多表连接时， 应该有主从之分， 并尽量从一个表取数， 如 select a.col1, a.col2\nfrom a join b on a.col3=b.col4 where b.col5 = ‘a’。\n14. 在使用 Like 时，建议 Like 的一边是字符串，表列在一边出现。\n15. 不允许将 where 子句的条件放到 having 中。\n16. 将更新操作放到事务的最后执行。如\n17. 一个事务需更新多个对象时，需保证更新的顺序一致以避免死锁的发生。如总是先\n更新子表再更新主表，根据存货档案批量更新现存量时，对传入的存货档案 PK 进\n行排序，再做更新处理等。\n18. 禁止随意使用临时表，在临时数据不超过 200 行的情况下禁止使用临时表。\n29. 禁止随意使用 distinct，避免造成不必要的排序。\n\n## 索引优化\n1. 创建索引，删除索引\n```\ncreate index cityname on city(city(10));\ndrop index cityname on city;\n```\n2. 搜索的索引列最好在where的字句或者连接子句\n3. 使用唯一索引\n4. 使用短索引，对于较长的字段，使用其前缀做索引\n5. 不要过度使用索引，索引引起额外的性能开销和维护\n\n## 高级优化措施\n\n## 集群搭建\n","source":"_posts/mysql-study.md","raw":"title: mysql学习笔记\ndate: 2016-05-28 22:24:56\ntags: mysql\ncategories: 数据库\n---\n** mysql学习笔记：** <Excerpt in index | 首页摘要>\n\tmysql学习，基础的增删改查，数据库优化，索引，分片，集群搭建等等。\n<!-- more -->\n<The rest of contents | 余下全文\\>\n \n## mysql的特点\n1. 关系型数据库，免费使用，\n2. 插入式存储引擎，\n3. 性能高，\n\n## 基础的增删改查\n1. ddl语句，数据定义语句\n\t```\n\tcreate database test1;\n\tdrop database test1;\n\tuse test1;\n\tcreate table emp(ename varchar(10),hiredate date,sal decimal(10,2),deptno int(2));\n\tdrop table emp;\n\talter table emp modify ename varchar(20);\n\talter table emp add column age int(3);\n\talter table emp drop column age;\n\talter table emp change age age1 int(4);\n\talter table emp add birth date after ename;\n\talter table emp modify age int(3) first;\n\talter table emp rename emp1;\n\t```\n2. dml语句，数据操纵语句\n\t```\n\tinsert into emp(ename,hiredate,sal,deptno) values('zzx1','2000-10-11',2000,1);\n\tinsert into emp values('lisa','2004-05-09',3000,2);\n\tinsert into dept values(5,'dept5'),(6,'dept6');\n\tupdate emp set sal=4000 where ename='lisa';\n\tupdate emp a,dept b set a.sal=a.sal*b.deptno,b.deptname=a.ename where a.deptno=b.deptno;\n\tdelete from emp where ename='dony';\n\tdelete a,b from emp a,dept b where a.deptno=b.deptno and a.deptno=3;\n\tselect * from emp where ename='lisa';\n\tselect distinct deptno from emp;\n\tselect * from emp order by sal(desc);\n\tselect * from emp order by sal limit 5;\n\tselect * from emp order by sal limit 1,5;ss\n\n\t```\n3. dcl语句，数据控制语句\n\n## sql优化\n1. 尽量使用 prepareStatement(java)，利用预处理功能。\n2. 在进行多条记录的增加、修改、删除时，建议使用批处理功能，批处理的次数以整\n个 SQL 语句不超过相应数据库的 SQL 语句大小的限制为准。\n3. 建议每条 SQL 语句中 in 中的元素个数在 200 以下，如果个数超过时，应拆分为多\n条 SQL 语句。禁止使用 xx in(‘’,’’….) or xx in(‘’,’’,’’)。 ★\n4. 禁止使用 or 超过 200，如 xx =’123’ or xx=’456’。 ★\n5. 尽量不使用外连接。\n6. 禁止使用 not in 语句，建议用 not exist。 ★\n7. 禁止使用 Union, 如果有业务需要，请拆分为两个查询。 ★\n8. 禁止在一条 SQL 语句中使用 3 层以上的嵌套查询，如果有，请考虑使用临时表或\n中间结果集。\n9. 尽量避免在一条 SQL 语句中从>= 4 个表中同时取数， 对于仅是作为过滤条件关联，\n但不涉及取数的表，不参与表个数计算\n10. 查询条件里任何对列的操作都将导致表扫描，所以应尽量将数据库函数、计算表达\n式写在逻辑操作符右边。\n11. 在对 char 类型比较时,建议不要使用 rtrim()函数,应该在程序中将不足的长度补\n齐。\n12. 用多表连接代替 EXISTS 子句。\n13. 如果有多表连接时， 应该有主从之分， 并尽量从一个表取数， 如 select a.col1, a.col2\nfrom a join b on a.col3=b.col4 where b.col5 = ‘a’。\n14. 在使用 Like 时，建议 Like 的一边是字符串，表列在一边出现。\n15. 不允许将 where 子句的条件放到 having 中。\n16. 将更新操作放到事务的最后执行。如\n17. 一个事务需更新多个对象时，需保证更新的顺序一致以避免死锁的发生。如总是先\n更新子表再更新主表，根据存货档案批量更新现存量时，对传入的存货档案 PK 进\n行排序，再做更新处理等。\n18. 禁止随意使用临时表，在临时数据不超过 200 行的情况下禁止使用临时表。\n29. 禁止随意使用 distinct，避免造成不必要的排序。\n\n## 索引优化\n1. 创建索引，删除索引\n```\ncreate index cityname on city(city(10));\ndrop index cityname on city;\n```\n2. 搜索的索引列最好在where的字句或者连接子句\n3. 使用唯一索引\n4. 使用短索引，对于较长的字段，使用其前缀做索引\n5. 不要过度使用索引，索引引起额外的性能开销和维护\n\n## 高级优化措施\n\n## 集群搭建\n","slug":"mysql-study","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla6x002q8p9kg6wev2du","content":"<p><strong> mysql学习笔记：</strong> <Excerpt in index | 首页摘要><br>    mysql学习，基础的增删改查，数据库优化，索引，分片，集群搭建等等。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文\\>\n\n<h2 id=\"mysql的特点\"><a href=\"#mysql的特点\" class=\"headerlink\" title=\"mysql的特点\"></a>mysql的特点</h2><ol>\n<li>关系型数据库，免费使用，</li>\n<li>插入式存储引擎，</li>\n<li>性能高，</li>\n</ol>\n<h2 id=\"基础的增删改查\"><a href=\"#基础的增删改查\" class=\"headerlink\" title=\"基础的增删改查\"></a>基础的增删改查</h2><ol>\n<li><p>ddl语句，数据定义语句</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> test1;</div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">database</span> test1;</div><div class=\"line\"><span class=\"keyword\">use</span> test1;</div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> emp(ename <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>),hiredate <span class=\"built_in\">date</span>,sal <span class=\"built_in\">decimal</span>(<span class=\"number\">10</span>,<span class=\"number\">2</span>),deptno <span class=\"built_in\">int</span>(<span class=\"number\">2</span>));</div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> emp;</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">modify</span> ename <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>);</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">add</span> <span class=\"keyword\">column</span> age <span class=\"built_in\">int</span>(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> age;</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">change</span> age age1 <span class=\"built_in\">int</span>(<span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">add</span> birth <span class=\"built_in\">date</span> <span class=\"keyword\">after</span> ename;</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">modify</span> age <span class=\"built_in\">int</span>(<span class=\"number\">3</span>) <span class=\"keyword\">first</span>;</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">rename</span> emp1;</div></pre></td></tr></table></figure>\n</li>\n<li><p>dml语句，数据操纵语句</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> emp(ename,hiredate,sal,deptno) <span class=\"keyword\">values</span>(<span class=\"string\">'zzx1'</span>,<span class=\"string\">'2000-10-11'</span>,<span class=\"number\">2000</span>,<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> emp <span class=\"keyword\">values</span>(<span class=\"string\">'lisa'</span>,<span class=\"string\">'2004-05-09'</span>,<span class=\"number\">3000</span>,<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">5</span>,<span class=\"string\">'dept5'</span>),(<span class=\"number\">6</span>,<span class=\"string\">'dept6'</span>);</div><div class=\"line\"><span class=\"keyword\">update</span> emp <span class=\"keyword\">set</span> sal=<span class=\"number\">4000</span> <span class=\"keyword\">where</span> ename=<span class=\"string\">'lisa'</span>;</div><div class=\"line\"><span class=\"keyword\">update</span> emp a,dept b <span class=\"keyword\">set</span> a.sal=a.sal*b.deptno,b.deptname=a.ename <span class=\"keyword\">where</span> a.deptno=b.deptno;</div><div class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> ename=<span class=\"string\">'dony'</span>;</div><div class=\"line\"><span class=\"keyword\">delete</span> a,b <span class=\"keyword\">from</span> emp a,dept b <span class=\"keyword\">where</span> a.deptno=b.deptno <span class=\"keyword\">and</span> a.deptno=<span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> ename=<span class=\"string\">'lisa'</span>;</div><div class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> deptno <span class=\"keyword\">from</span> emp;</div><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sal(<span class=\"keyword\">desc</span>);</div><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sal <span class=\"keyword\">limit</span> <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sal <span class=\"keyword\">limit</span> <span class=\"number\">1</span>,<span class=\"number\">5</span>;ss</div></pre></td></tr></table></figure>\n</li>\n<li><p>dcl语句，数据控制语句</p>\n</li>\n</ol>\n<h2 id=\"sql优化\"><a href=\"#sql优化\" class=\"headerlink\" title=\"sql优化\"></a>sql优化</h2><ol>\n<li>尽量使用 prepareStatement(java)，利用预处理功能。</li>\n<li>在进行多条记录的增加、修改、删除时，建议使用批处理功能，批处理的次数以整<br>个 SQL 语句不超过相应数据库的 SQL 语句大小的限制为准。</li>\n<li>建议每条 SQL 语句中 in 中的元素个数在 200 以下，如果个数超过时，应拆分为多<br>条 SQL 语句。禁止使用 xx in(‘’,’’….) or xx in(‘’,’’,’’)。 ★</li>\n<li>禁止使用 or 超过 200，如 xx =’123’ or xx=’456’。 ★</li>\n<li>尽量不使用外连接。</li>\n<li>禁止使用 not in 语句，建议用 not exist。 ★</li>\n<li>禁止使用 Union, 如果有业务需要，请拆分为两个查询。 ★</li>\n<li>禁止在一条 SQL 语句中使用 3 层以上的嵌套查询，如果有，请考虑使用临时表或<br>中间结果集。</li>\n<li>尽量避免在一条 SQL 语句中从&gt;= 4 个表中同时取数， 对于仅是作为过滤条件关联，<br>但不涉及取数的表，不参与表个数计算</li>\n<li>查询条件里任何对列的操作都将导致表扫描，所以应尽量将数据库函数、计算表达<br>式写在逻辑操作符右边。</li>\n<li>在对 char 类型比较时,建议不要使用 rtrim()函数,应该在程序中将不足的长度补<br>齐。</li>\n<li>用多表连接代替 EXISTS 子句。</li>\n<li>如果有多表连接时， 应该有主从之分， 并尽量从一个表取数， 如 select a.col1, a.col2<br>from a join b on a.col3=b.col4 where b.col5 = ‘a’。</li>\n<li>在使用 Like 时，建议 Like 的一边是字符串，表列在一边出现。</li>\n<li>不允许将 where 子句的条件放到 having 中。</li>\n<li>将更新操作放到事务的最后执行。如</li>\n<li>一个事务需更新多个对象时，需保证更新的顺序一致以避免死锁的发生。如总是先<br>更新子表再更新主表，根据存货档案批量更新现存量时，对传入的存货档案 PK 进<br>行排序，再做更新处理等。</li>\n<li>禁止随意使用临时表，在临时数据不超过 200 行的情况下禁止使用临时表。</li>\n<li>禁止随意使用 distinct，避免造成不必要的排序。</li>\n</ol>\n<h2 id=\"索引优化\"><a href=\"#索引优化\" class=\"headerlink\" title=\"索引优化\"></a>索引优化</h2><ol>\n<li><p>创建索引，删除索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">index</span> cityname <span class=\"keyword\">on</span> city(city(<span class=\"number\">10</span>));</div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">index</span> cityname <span class=\"keyword\">on</span> city;</div></pre></td></tr></table></figure>\n</li>\n<li><p>搜索的索引列最好在where的字句或者连接子句</p>\n</li>\n<li>使用唯一索引</li>\n<li>使用短索引，对于较长的字段，使用其前缀做索引</li>\n<li>不要过度使用索引，索引引起额外的性能开销和维护</li>\n</ol>\n<h2 id=\"高级优化措施\"><a href=\"#高级优化措施\" class=\"headerlink\" title=\"高级优化措施\"></a>高级优化措施</h2><h2 id=\"集群搭建\"><a href=\"#集群搭建\" class=\"headerlink\" title=\"集群搭建\"></a>集群搭建</h2>","excerpt":"<p><strong> mysql学习笔记：</strong> <Excerpt in index | 首页摘要><br>    mysql学习，基础的增删改查，数据库优化，索引，分片，集群搭建等等。<br>","more":"</p>\n<The rest of contents | 余下全文\\>\n\n<h2 id=\"mysql的特点\"><a href=\"#mysql的特点\" class=\"headerlink\" title=\"mysql的特点\"></a>mysql的特点</h2><ol>\n<li>关系型数据库，免费使用，</li>\n<li>插入式存储引擎，</li>\n<li>性能高，</li>\n</ol>\n<h2 id=\"基础的增删改查\"><a href=\"#基础的增删改查\" class=\"headerlink\" title=\"基础的增删改查\"></a>基础的增删改查</h2><ol>\n<li><p>ddl语句，数据定义语句</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> test1;</div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">database</span> test1;</div><div class=\"line\"><span class=\"keyword\">use</span> test1;</div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> emp(ename <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>),hiredate <span class=\"built_in\">date</span>,sal <span class=\"built_in\">decimal</span>(<span class=\"number\">10</span>,<span class=\"number\">2</span>),deptno <span class=\"built_in\">int</span>(<span class=\"number\">2</span>));</div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> emp;</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">modify</span> ename <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>);</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">add</span> <span class=\"keyword\">column</span> age <span class=\"built_in\">int</span>(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> age;</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">change</span> age age1 <span class=\"built_in\">int</span>(<span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">add</span> birth <span class=\"built_in\">date</span> <span class=\"keyword\">after</span> ename;</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">modify</span> age <span class=\"built_in\">int</span>(<span class=\"number\">3</span>) <span class=\"keyword\">first</span>;</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">rename</span> emp1;</div></pre></td></tr></table></figure>\n</li>\n<li><p>dml语句，数据操纵语句</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> emp(ename,hiredate,sal,deptno) <span class=\"keyword\">values</span>(<span class=\"string\">'zzx1'</span>,<span class=\"string\">'2000-10-11'</span>,<span class=\"number\">2000</span>,<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> emp <span class=\"keyword\">values</span>(<span class=\"string\">'lisa'</span>,<span class=\"string\">'2004-05-09'</span>,<span class=\"number\">3000</span>,<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">5</span>,<span class=\"string\">'dept5'</span>),(<span class=\"number\">6</span>,<span class=\"string\">'dept6'</span>);</div><div class=\"line\"><span class=\"keyword\">update</span> emp <span class=\"keyword\">set</span> sal=<span class=\"number\">4000</span> <span class=\"keyword\">where</span> ename=<span class=\"string\">'lisa'</span>;</div><div class=\"line\"><span class=\"keyword\">update</span> emp a,dept b <span class=\"keyword\">set</span> a.sal=a.sal*b.deptno,b.deptname=a.ename <span class=\"keyword\">where</span> a.deptno=b.deptno;</div><div class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> ename=<span class=\"string\">'dony'</span>;</div><div class=\"line\"><span class=\"keyword\">delete</span> a,b <span class=\"keyword\">from</span> emp a,dept b <span class=\"keyword\">where</span> a.deptno=b.deptno <span class=\"keyword\">and</span> a.deptno=<span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> ename=<span class=\"string\">'lisa'</span>;</div><div class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> deptno <span class=\"keyword\">from</span> emp;</div><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sal(<span class=\"keyword\">desc</span>);</div><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sal <span class=\"keyword\">limit</span> <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sal <span class=\"keyword\">limit</span> <span class=\"number\">1</span>,<span class=\"number\">5</span>;ss</div></pre></td></tr></table></figure>\n</li>\n<li><p>dcl语句，数据控制语句</p>\n</li>\n</ol>\n<h2 id=\"sql优化\"><a href=\"#sql优化\" class=\"headerlink\" title=\"sql优化\"></a>sql优化</h2><ol>\n<li>尽量使用 prepareStatement(java)，利用预处理功能。</li>\n<li>在进行多条记录的增加、修改、删除时，建议使用批处理功能，批处理的次数以整<br>个 SQL 语句不超过相应数据库的 SQL 语句大小的限制为准。</li>\n<li>建议每条 SQL 语句中 in 中的元素个数在 200 以下，如果个数超过时，应拆分为多<br>条 SQL 语句。禁止使用 xx in(‘’,’’….) or xx in(‘’,’’,’’)。 ★</li>\n<li>禁止使用 or 超过 200，如 xx =’123’ or xx=’456’。 ★</li>\n<li>尽量不使用外连接。</li>\n<li>禁止使用 not in 语句，建议用 not exist。 ★</li>\n<li>禁止使用 Union, 如果有业务需要，请拆分为两个查询。 ★</li>\n<li>禁止在一条 SQL 语句中使用 3 层以上的嵌套查询，如果有，请考虑使用临时表或<br>中间结果集。</li>\n<li>尽量避免在一条 SQL 语句中从&gt;= 4 个表中同时取数， 对于仅是作为过滤条件关联，<br>但不涉及取数的表，不参与表个数计算</li>\n<li>查询条件里任何对列的操作都将导致表扫描，所以应尽量将数据库函数、计算表达<br>式写在逻辑操作符右边。</li>\n<li>在对 char 类型比较时,建议不要使用 rtrim()函数,应该在程序中将不足的长度补<br>齐。</li>\n<li>用多表连接代替 EXISTS 子句。</li>\n<li>如果有多表连接时， 应该有主从之分， 并尽量从一个表取数， 如 select a.col1, a.col2<br>from a join b on a.col3=b.col4 where b.col5 = ‘a’。</li>\n<li>在使用 Like 时，建议 Like 的一边是字符串，表列在一边出现。</li>\n<li>不允许将 where 子句的条件放到 having 中。</li>\n<li>将更新操作放到事务的最后执行。如</li>\n<li>一个事务需更新多个对象时，需保证更新的顺序一致以避免死锁的发生。如总是先<br>更新子表再更新主表，根据存货档案批量更新现存量时，对传入的存货档案 PK 进<br>行排序，再做更新处理等。</li>\n<li>禁止随意使用临时表，在临时数据不超过 200 行的情况下禁止使用临时表。</li>\n<li>禁止随意使用 distinct，避免造成不必要的排序。</li>\n</ol>\n<h2 id=\"索引优化\"><a href=\"#索引优化\" class=\"headerlink\" title=\"索引优化\"></a>索引优化</h2><ol>\n<li><p>创建索引，删除索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">index</span> cityname <span class=\"keyword\">on</span> city(city(<span class=\"number\">10</span>));</div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">index</span> cityname <span class=\"keyword\">on</span> city;</div></pre></td></tr></table></figure>\n</li>\n<li><p>搜索的索引列最好在where的字句或者连接子句</p>\n</li>\n<li>使用唯一索引</li>\n<li>使用短索引，对于较长的字段，使用其前缀做索引</li>\n<li>不要过度使用索引，索引引起额外的性能开销和维护</li>\n</ol>\n<h2 id=\"高级优化措施\"><a href=\"#高级优化措施\" class=\"headerlink\" title=\"高级优化措施\"></a>高级优化措施</h2><h2 id=\"集群搭建\"><a href=\"#集群搭建\" class=\"headerlink\" title=\"集群搭建\"></a>集群搭建</h2>"},{"title":"Mysql优化的常用方法","date":"2016-06-10T23:25:13.000Z","_content":"** mysql优化：** <Excerpt in index | 首页摘要>\n    mysql的优化措施，从sql优化做起\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 优化sql的一般步骤\n1. 通过show status了解各种sql的执行频率\n2. 定位执行效率低的sql语句\n3. 通过explain分析效率低的sql\n4. 通过show profile分析sql\n5. 通过trace分析优化器如何选择执行计划\n6. 确定问题，采取措施优化\n\n## 索引优化措施\n1. mysql中使用索引的典型场景\n    1. 匹配全值，条件所有列都在索引中而且是等值匹配\n    2. 匹配值的范围查找，字段必须在索引中\n    3. 匹配最左前缀，复合索引只会根据最左列进行查找\n    4. 仅仅对索引进行查询，即查询的所有字段都在索引上\n    5. 匹配列前缀，比如like 'ABC%',如果是like '%aaa'就不可以\n    6. 如果列名是索引，使用column is null会使用索引\n\n2. 存在索引但不会使用索引的典型场景\n    1. 以%开头的like查询不能使用b树索引\n    2. 数据类型出现隐式转换不能使用索引\n    3. 复合索引，查询条件不符合最左列原则\n    4. 用or分割的条件，如果前面的条件有索引，而后面的条件没有索引\n\n3. 查看索引使用的情况\n```\nshow status like 'Handler_read%';\n```\n如果Handler_read_rnd_next的值比较高，说明索引不正确或者查询没有使用到索引\n\n## 简单实用的优化方法\n1. 定期检查表和分析表\n分析表语法：\n```\nanalyze table 表名；\n```\n检查表语法：\n```\ncheck table 表名；\n```\n2. 定期优化表\n    - 对于字节大小不固定的字段，数据更新和删除会造成磁盘空间不释放，这时候就行优化表，可以整理磁盘碎片，提高性能\n语法如下：\n```\noptimize table user(表名)；\n```\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/mysql-optimize.md","raw":"title: mysql优化的常用方法\ndate: 2016-06-11 07:25:13\ntags: mysql\ncategories: 数据库\n---\n** mysql优化：** <Excerpt in index | 首页摘要>\n    mysql的优化措施，从sql优化做起\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 优化sql的一般步骤\n1. 通过show status了解各种sql的执行频率\n2. 定位执行效率低的sql语句\n3. 通过explain分析效率低的sql\n4. 通过show profile分析sql\n5. 通过trace分析优化器如何选择执行计划\n6. 确定问题，采取措施优化\n\n## 索引优化措施\n1. mysql中使用索引的典型场景\n    1. 匹配全值，条件所有列都在索引中而且是等值匹配\n    2. 匹配值的范围查找，字段必须在索引中\n    3. 匹配最左前缀，复合索引只会根据最左列进行查找\n    4. 仅仅对索引进行查询，即查询的所有字段都在索引上\n    5. 匹配列前缀，比如like 'ABC%',如果是like '%aaa'就不可以\n    6. 如果列名是索引，使用column is null会使用索引\n\n2. 存在索引但不会使用索引的典型场景\n    1. 以%开头的like查询不能使用b树索引\n    2. 数据类型出现隐式转换不能使用索引\n    3. 复合索引，查询条件不符合最左列原则\n    4. 用or分割的条件，如果前面的条件有索引，而后面的条件没有索引\n\n3. 查看索引使用的情况\n```\nshow status like 'Handler_read%';\n```\n如果Handler_read_rnd_next的值比较高，说明索引不正确或者查询没有使用到索引\n\n## 简单实用的优化方法\n1. 定期检查表和分析表\n分析表语法：\n```\nanalyze table 表名；\n```\n检查表语法：\n```\ncheck table 表名；\n```\n2. 定期优化表\n    - 对于字节大小不固定的字段，数据更新和删除会造成磁盘空间不释放，这时候就行优化表，可以整理磁盘碎片，提高性能\n语法如下：\n```\noptimize table user(表名)；\n```\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"mysql-optimize","published":1,"updated":"2017-07-30T23:59:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla6y002t8p9k56mnpvbp","content":"<p><strong> mysql优化：</strong> <Excerpt in index | 首页摘要><br>    mysql的优化措施，从sql优化做起<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"优化sql的一般步骤\"><a href=\"#优化sql的一般步骤\" class=\"headerlink\" title=\"优化sql的一般步骤\"></a>优化sql的一般步骤</h2><ol>\n<li>通过show status了解各种sql的执行频率</li>\n<li>定位执行效率低的sql语句</li>\n<li>通过explain分析效率低的sql</li>\n<li>通过show profile分析sql</li>\n<li>通过trace分析优化器如何选择执行计划</li>\n<li>确定问题，采取措施优化</li>\n</ol>\n<h2 id=\"索引优化措施\"><a href=\"#索引优化措施\" class=\"headerlink\" title=\"索引优化措施\"></a>索引优化措施</h2><ol>\n<li><p>mysql中使用索引的典型场景</p>\n<ol>\n<li>匹配全值，条件所有列都在索引中而且是等值匹配</li>\n<li>匹配值的范围查找，字段必须在索引中</li>\n<li>匹配最左前缀，复合索引只会根据最左列进行查找</li>\n<li>仅仅对索引进行查询，即查询的所有字段都在索引上</li>\n<li>匹配列前缀，比如like ‘ABC%’,如果是like ‘%aaa’就不可以</li>\n<li>如果列名是索引，使用column is null会使用索引</li>\n</ol>\n</li>\n<li><p>存在索引但不会使用索引的典型场景</p>\n<ol>\n<li>以%开头的like查询不能使用b树索引</li>\n<li>数据类型出现隐式转换不能使用索引</li>\n<li>复合索引，查询条件不符合最左列原则</li>\n<li>用or分割的条件，如果前面的条件有索引，而后面的条件没有索引</li>\n</ol>\n</li>\n<li><p>查看索引使用的情况</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Handler_read%'</span>;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果Handler_read_rnd_next的值比较高，说明索引不正确或者查询没有使用到索引</p>\n<h2 id=\"简单实用的优化方法\"><a href=\"#简单实用的优化方法\" class=\"headerlink\" title=\"简单实用的优化方法\"></a>简单实用的优化方法</h2><ol>\n<li>定期检查表和分析表<br>分析表语法：<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">analyze <span class=\"keyword\">table</span> 表名；</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>检查表语法：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">check <span class=\"keyword\">table</span> 表名；</div></pre></td></tr></table></figure></p>\n<ol>\n<li>定期优化表<ul>\n<li>对于字节大小不固定的字段，数据更新和删除会造成磁盘空间不释放，这时候就行优化表，可以整理磁盘碎片，提高性能<br>语法如下：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">optimize</span> <span class=\"keyword\">table</span> <span class=\"keyword\">user</span>(表名)；</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> mysql优化：</strong> <Excerpt in index | 首页摘要><br>    mysql的优化措施，从sql优化做起<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"优化sql的一般步骤\"><a href=\"#优化sql的一般步骤\" class=\"headerlink\" title=\"优化sql的一般步骤\"></a>优化sql的一般步骤</h2><ol>\n<li>通过show status了解各种sql的执行频率</li>\n<li>定位执行效率低的sql语句</li>\n<li>通过explain分析效率低的sql</li>\n<li>通过show profile分析sql</li>\n<li>通过trace分析优化器如何选择执行计划</li>\n<li>确定问题，采取措施优化</li>\n</ol>\n<h2 id=\"索引优化措施\"><a href=\"#索引优化措施\" class=\"headerlink\" title=\"索引优化措施\"></a>索引优化措施</h2><ol>\n<li><p>mysql中使用索引的典型场景</p>\n<ol>\n<li>匹配全值，条件所有列都在索引中而且是等值匹配</li>\n<li>匹配值的范围查找，字段必须在索引中</li>\n<li>匹配最左前缀，复合索引只会根据最左列进行查找</li>\n<li>仅仅对索引进行查询，即查询的所有字段都在索引上</li>\n<li>匹配列前缀，比如like ‘ABC%’,如果是like ‘%aaa’就不可以</li>\n<li>如果列名是索引，使用column is null会使用索引</li>\n</ol>\n</li>\n<li><p>存在索引但不会使用索引的典型场景</p>\n<ol>\n<li>以%开头的like查询不能使用b树索引</li>\n<li>数据类型出现隐式转换不能使用索引</li>\n<li>复合索引，查询条件不符合最左列原则</li>\n<li>用or分割的条件，如果前面的条件有索引，而后面的条件没有索引</li>\n</ol>\n</li>\n<li><p>查看索引使用的情况</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Handler_read%'</span>;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果Handler_read_rnd_next的值比较高，说明索引不正确或者查询没有使用到索引</p>\n<h2 id=\"简单实用的优化方法\"><a href=\"#简单实用的优化方法\" class=\"headerlink\" title=\"简单实用的优化方法\"></a>简单实用的优化方法</h2><ol>\n<li>定期检查表和分析表<br>分析表语法：<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">analyze <span class=\"keyword\">table</span> 表名；</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>检查表语法：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">check <span class=\"keyword\">table</span> 表名；</div></pre></td></tr></table></figure></p>\n<ol>\n<li>定期优化表<ul>\n<li>对于字节大小不固定的字段，数据更新和删除会造成磁盘空间不释放，这时候就行优化表，可以整理磁盘碎片，提高性能<br>语法如下：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">optimize</span> <span class=\"keyword\">table</span> <span class=\"keyword\">user</span>(表名)；</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Nodejs开发规范","date":"2016-05-23T06:18:02.000Z","_content":"** nodejs开发规范：** <Excerpt in index | 首页摘要>\n    nodejs开发中应当遵循的规范，以及最佳实践\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## node开发需要编程规范吗？\n1. js的灵活性非常大，如果开发人员每个人都按自己的习惯随意编写，js的代码会非常混乱不堪。js程序员需要更强的自律性和规范，才能写出易读性，易维护的代码。\n2. 随着前端mvc的崛起，前端的js代码会更加庞大难以管理，如果没有统一的规范，后期维护会比登天还难。\n\n## 编码规范\n\n1. 缩进\n采用两个空格缩进，在编辑器中设置tab为两个空格\n\n2. 变量声明\n- 用var声明变量\nvar assert = require('assert');\nvar fork = require('child_process').fork;\nvar net = require('net');\n\n错误实例：\nvar assert = require('assert')\n, fork = require('child_process').fork\n, net = require('net')；\n\n- 用字面量声明方式\nvar num = 123;\nvar aaa = {};\nvar arr = [];\nvar isAdmin = true;\n- 避免使用：\nvar obj =new Object();\nvar arr = new Array();\nvar test  =new String(\"\");\nvar size = new Number();\n\n- 不要在for循环等循环里声明var变量\n首先var是函数作用域，在循环声明以后只有等函数声明周期结束这些资源才会释放\n\n\n3. 空格\n在操作符前后需要加上空格,= 、% 、* 、- 、+ 前后都应该加一个空格\n比如：var foo = 'bar' + baz;\n错误实例：var foo='bar'+baz;\n\n4. 单双引号的使用\n在node中尽量使用单引号，\nvar html = '<a href=\"http://cnodejs.org\">CNode</a>';\n 在json中使用双引号\n\n5. 分号\n给表达式结尾加分号，尽管js会自动在行尾加上分号，但是会产生一些误解\n\n## 命名规范\n在编码中，命名是重头戏。好的命名可以使代码赏心悦目，具有良好的维护性。\n\n1. 变量命名\n变量名采用小驼峰命名，单词之间没有任何符号如：\nvar adminUser = {};\nvar callNum = 2134323;\n2. 方法命名\n也是采用小驼峰命名，与变量不同的是采用动词或判断行词汇，如：\nvar getUser = function(){};\nvar isAdmin = function(){};\nvar findUser = function(){};\n\n3. 类命名\n类名采用大驼峰，所有单词首字母大写，如：\nfunction User{}\n\n4. 常量命名\n作为常量，单词所有字母大写，用下划线分割，如：\nvar PINK_COLOR = \"PINK\";\n\n5. 文件命名\n命名文件时，尽量使用下划线分割单词，比如child_process.js和string_decode.js\n\n6. 包名\n在包名中尽量不要包含js和node的字样，应当适当短并且有意义\n\n## 其它要点\n\n1. 作用域\n慎用with和eval（），容易引起作用域混乱\n\n2. 比较操作\n尽量使用===代替==,否则会遇到下面的情况，'0'==0;//true;\n ''==0;//true;\n '0'===''//false;\n\n3. 严格模式\n在node后台中尽量全使用严格模式\n'use strict';\n\n4. 对象和数组遍历\n数组遍历使用普通for循环，避免使用for in对数组遍历，\n对象的遍历使用for in\n\n## 项目中实践\n1. sublime和webstorm都有JSLint,JSHint这样的代码质量工具，在配置文件中制定好模板规范即可\n\n2. 在版本控制工具中设置hook，在precommit的脚本中设置，如果代码不符合标准，就无法提交\n\n##  参考文献\n1. 深入浅出nodejs\n2. js秘密花园\n3. js高级编程\n","source":"_posts/node-develop.md","raw":"title: nodejs开发规范\ndate: 2016-05-23 14:18:02\ntags: node\ncategories: 编程语言\n---\n** nodejs开发规范：** <Excerpt in index | 首页摘要>\n    nodejs开发中应当遵循的规范，以及最佳实践\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## node开发需要编程规范吗？\n1. js的灵活性非常大，如果开发人员每个人都按自己的习惯随意编写，js的代码会非常混乱不堪。js程序员需要更强的自律性和规范，才能写出易读性，易维护的代码。\n2. 随着前端mvc的崛起，前端的js代码会更加庞大难以管理，如果没有统一的规范，后期维护会比登天还难。\n\n## 编码规范\n\n1. 缩进\n采用两个空格缩进，在编辑器中设置tab为两个空格\n\n2. 变量声明\n- 用var声明变量\nvar assert = require('assert');\nvar fork = require('child_process').fork;\nvar net = require('net');\n\n错误实例：\nvar assert = require('assert')\n, fork = require('child_process').fork\n, net = require('net')；\n\n- 用字面量声明方式\nvar num = 123;\nvar aaa = {};\nvar arr = [];\nvar isAdmin = true;\n- 避免使用：\nvar obj =new Object();\nvar arr = new Array();\nvar test  =new String(\"\");\nvar size = new Number();\n\n- 不要在for循环等循环里声明var变量\n首先var是函数作用域，在循环声明以后只有等函数声明周期结束这些资源才会释放\n\n\n3. 空格\n在操作符前后需要加上空格,= 、% 、* 、- 、+ 前后都应该加一个空格\n比如：var foo = 'bar' + baz;\n错误实例：var foo='bar'+baz;\n\n4. 单双引号的使用\n在node中尽量使用单引号，\nvar html = '<a href=\"http://cnodejs.org\">CNode</a>';\n 在json中使用双引号\n\n5. 分号\n给表达式结尾加分号，尽管js会自动在行尾加上分号，但是会产生一些误解\n\n## 命名规范\n在编码中，命名是重头戏。好的命名可以使代码赏心悦目，具有良好的维护性。\n\n1. 变量命名\n变量名采用小驼峰命名，单词之间没有任何符号如：\nvar adminUser = {};\nvar callNum = 2134323;\n2. 方法命名\n也是采用小驼峰命名，与变量不同的是采用动词或判断行词汇，如：\nvar getUser = function(){};\nvar isAdmin = function(){};\nvar findUser = function(){};\n\n3. 类命名\n类名采用大驼峰，所有单词首字母大写，如：\nfunction User{}\n\n4. 常量命名\n作为常量，单词所有字母大写，用下划线分割，如：\nvar PINK_COLOR = \"PINK\";\n\n5. 文件命名\n命名文件时，尽量使用下划线分割单词，比如child_process.js和string_decode.js\n\n6. 包名\n在包名中尽量不要包含js和node的字样，应当适当短并且有意义\n\n## 其它要点\n\n1. 作用域\n慎用with和eval（），容易引起作用域混乱\n\n2. 比较操作\n尽量使用===代替==,否则会遇到下面的情况，'0'==0;//true;\n ''==0;//true;\n '0'===''//false;\n\n3. 严格模式\n在node后台中尽量全使用严格模式\n'use strict';\n\n4. 对象和数组遍历\n数组遍历使用普通for循环，避免使用for in对数组遍历，\n对象的遍历使用for in\n\n## 项目中实践\n1. sublime和webstorm都有JSLint,JSHint这样的代码质量工具，在配置文件中制定好模板规范即可\n\n2. 在版本控制工具中设置hook，在precommit的脚本中设置，如果代码不符合标准，就无法提交\n\n##  参考文献\n1. 深入浅出nodejs\n2. js秘密花园\n3. js高级编程\n","slug":"node-develop","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla70002w8p9khpod2235","content":"<p><strong> nodejs开发规范：</strong> <Excerpt in index | 首页摘要><br>    nodejs开发中应当遵循的规范，以及最佳实践<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"node开发需要编程规范吗？\"><a href=\"#node开发需要编程规范吗？\" class=\"headerlink\" title=\"node开发需要编程规范吗？\"></a>node开发需要编程规范吗？</h2><ol>\n<li>js的灵活性非常大，如果开发人员每个人都按自己的习惯随意编写，js的代码会非常混乱不堪。js程序员需要更强的自律性和规范，才能写出易读性，易维护的代码。</li>\n<li>随着前端mvc的崛起，前端的js代码会更加庞大难以管理，如果没有统一的规范，后期维护会比登天还难。</li>\n</ol>\n<h2 id=\"编码规范\"><a href=\"#编码规范\" class=\"headerlink\" title=\"编码规范\"></a>编码规范</h2><ol>\n<li><p>缩进<br>采用两个空格缩进，在编辑器中设置tab为两个空格</p>\n</li>\n<li><p>变量声明</p>\n</li>\n</ol>\n<ul>\n<li>用var声明变量<br>var assert = require(‘assert’);<br>var fork = require(‘child_process’).fork;<br>var net = require(‘net’);</li>\n</ul>\n<p>错误实例：<br>var assert = require(‘assert’)<br>, fork = require(‘child_process’).fork<br>, net = require(‘net’)；</p>\n<ul>\n<li>用字面量声明方式<br>var num = 123;<br>var aaa = {};<br>var arr = [];<br>var isAdmin = true;</li>\n<li><p>避免使用：<br>var obj =new Object();<br>var arr = new Array();<br>var test  =new String(“”);<br>var size = new Number();</p>\n</li>\n<li><p>不要在for循环等循环里声明var变量<br>首先var是函数作用域，在循环声明以后只有等函数声明周期结束这些资源才会释放</p>\n</li>\n</ul>\n<ol>\n<li><p>空格<br>在操作符前后需要加上空格,= 、% 、* 、- 、+ 前后都应该加一个空格<br>比如：var foo = ‘bar’ + baz;<br>错误实例：var foo=’bar’+baz;</p>\n</li>\n<li><p>单双引号的使用<br>在node中尽量使用单引号，<br>var html = ‘<a href=\"http://cnodejs.org\">CNode</a>‘;<br>在json中使用双引号</p>\n</li>\n<li><p>分号<br>给表达式结尾加分号，尽管js会自动在行尾加上分号，但是会产生一些误解</p>\n</li>\n</ol>\n<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><p>在编码中，命名是重头戏。好的命名可以使代码赏心悦目，具有良好的维护性。</p>\n<ol>\n<li>变量命名<br>变量名采用小驼峰命名，单词之间没有任何符号如：<br>var adminUser = {};<br>var callNum = 2134323;</li>\n<li><p>方法命名<br>也是采用小驼峰命名，与变量不同的是采用动词或判断行词汇，如：<br>var getUser = function(){};<br>var isAdmin = function(){};<br>var findUser = function(){};</p>\n</li>\n<li><p>类命名<br>类名采用大驼峰，所有单词首字母大写，如：<br>function User{}</p>\n</li>\n<li><p>常量命名<br>作为常量，单词所有字母大写，用下划线分割，如：<br>var PINK_COLOR = “PINK”;</p>\n</li>\n<li><p>文件命名<br>命名文件时，尽量使用下划线分割单词，比如child_process.js和string_decode.js</p>\n</li>\n<li><p>包名<br>在包名中尽量不要包含js和node的字样，应当适当短并且有意义</p>\n</li>\n</ol>\n<h2 id=\"其它要点\"><a href=\"#其它要点\" class=\"headerlink\" title=\"其它要点\"></a>其它要点</h2><ol>\n<li><p>作用域<br>慎用with和eval（），容易引起作用域混乱</p>\n</li>\n<li><p>比较操作<br>尽量使用===代替==,否则会遇到下面的情况，’0’==0;//true;<br>‘’==0;//true;<br>‘0’===’’//false;</p>\n</li>\n<li><p>严格模式<br>在node后台中尽量全使用严格模式<br>‘use strict’;</p>\n</li>\n<li><p>对象和数组遍历<br>数组遍历使用普通for循环，避免使用for in对数组遍历，<br>对象的遍历使用for in</p>\n</li>\n</ol>\n<h2 id=\"项目中实践\"><a href=\"#项目中实践\" class=\"headerlink\" title=\"项目中实践\"></a>项目中实践</h2><ol>\n<li><p>sublime和webstorm都有JSLint,JSHint这样的代码质量工具，在配置文件中制定好模板规范即可</p>\n</li>\n<li><p>在版本控制工具中设置hook，在precommit的脚本中设置，如果代码不符合标准，就无法提交</p>\n</li>\n</ol>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li>深入浅出nodejs</li>\n<li>js秘密花园</li>\n<li>js高级编程</li>\n</ol>\n","excerpt":"<p><strong> nodejs开发规范：</strong> <Excerpt in index | 首页摘要><br>    nodejs开发中应当遵循的规范，以及最佳实践<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"node开发需要编程规范吗？\"><a href=\"#node开发需要编程规范吗？\" class=\"headerlink\" title=\"node开发需要编程规范吗？\"></a>node开发需要编程规范吗？</h2><ol>\n<li>js的灵活性非常大，如果开发人员每个人都按自己的习惯随意编写，js的代码会非常混乱不堪。js程序员需要更强的自律性和规范，才能写出易读性，易维护的代码。</li>\n<li>随着前端mvc的崛起，前端的js代码会更加庞大难以管理，如果没有统一的规范，后期维护会比登天还难。</li>\n</ol>\n<h2 id=\"编码规范\"><a href=\"#编码规范\" class=\"headerlink\" title=\"编码规范\"></a>编码规范</h2><ol>\n<li><p>缩进<br>采用两个空格缩进，在编辑器中设置tab为两个空格</p>\n</li>\n<li><p>变量声明</p>\n</li>\n</ol>\n<ul>\n<li>用var声明变量<br>var assert = require(‘assert’);<br>var fork = require(‘child_process’).fork;<br>var net = require(‘net’);</li>\n</ul>\n<p>错误实例：<br>var assert = require(‘assert’)<br>, fork = require(‘child_process’).fork<br>, net = require(‘net’)；</p>\n<ul>\n<li>用字面量声明方式<br>var num = 123;<br>var aaa = {};<br>var arr = [];<br>var isAdmin = true;</li>\n<li><p>避免使用：<br>var obj =new Object();<br>var arr = new Array();<br>var test  =new String(“”);<br>var size = new Number();</p>\n</li>\n<li><p>不要在for循环等循环里声明var变量<br>首先var是函数作用域，在循环声明以后只有等函数声明周期结束这些资源才会释放</p>\n</li>\n</ul>\n<ol>\n<li><p>空格<br>在操作符前后需要加上空格,= 、% 、* 、- 、+ 前后都应该加一个空格<br>比如：var foo = ‘bar’ + baz;<br>错误实例：var foo=’bar’+baz;</p>\n</li>\n<li><p>单双引号的使用<br>在node中尽量使用单引号，<br>var html = ‘<a href=\"http://cnodejs.org\">CNode</a>‘;<br>在json中使用双引号</p>\n</li>\n<li><p>分号<br>给表达式结尾加分号，尽管js会自动在行尾加上分号，但是会产生一些误解</p>\n</li>\n</ol>\n<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><p>在编码中，命名是重头戏。好的命名可以使代码赏心悦目，具有良好的维护性。</p>\n<ol>\n<li>变量命名<br>变量名采用小驼峰命名，单词之间没有任何符号如：<br>var adminUser = {};<br>var callNum = 2134323;</li>\n<li><p>方法命名<br>也是采用小驼峰命名，与变量不同的是采用动词或判断行词汇，如：<br>var getUser = function(){};<br>var isAdmin = function(){};<br>var findUser = function(){};</p>\n</li>\n<li><p>类命名<br>类名采用大驼峰，所有单词首字母大写，如：<br>function User{}</p>\n</li>\n<li><p>常量命名<br>作为常量，单词所有字母大写，用下划线分割，如：<br>var PINK_COLOR = “PINK”;</p>\n</li>\n<li><p>文件命名<br>命名文件时，尽量使用下划线分割单词，比如child_process.js和string_decode.js</p>\n</li>\n<li><p>包名<br>在包名中尽量不要包含js和node的字样，应当适当短并且有意义</p>\n</li>\n</ol>\n<h2 id=\"其它要点\"><a href=\"#其它要点\" class=\"headerlink\" title=\"其它要点\"></a>其它要点</h2><ol>\n<li><p>作用域<br>慎用with和eval（），容易引起作用域混乱</p>\n</li>\n<li><p>比较操作<br>尽量使用===代替==,否则会遇到下面的情况，’0’==0;//true;<br>‘’==0;//true;<br>‘0’===’’//false;</p>\n</li>\n<li><p>严格模式<br>在node后台中尽量全使用严格模式<br>‘use strict’;</p>\n</li>\n<li><p>对象和数组遍历<br>数组遍历使用普通for循环，避免使用for in对数组遍历，<br>对象的遍历使用for in</p>\n</li>\n</ol>\n<h2 id=\"项目中实践\"><a href=\"#项目中实践\" class=\"headerlink\" title=\"项目中实践\"></a>项目中实践</h2><ol>\n<li><p>sublime和webstorm都有JSLint,JSHint这样的代码质量工具，在配置文件中制定好模板规范即可</p>\n</li>\n<li><p>在版本控制工具中设置hook，在precommit的脚本中设置，如果代码不符合标准，就无法提交</p>\n</li>\n</ol>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li>深入浅出nodejs</li>\n<li>js秘密花园</li>\n<li>js高级编程</li>\n</ol>"},{"title":"深入浅出Nodejs笔记","date":"2016-11-11T11:52:23.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n    node学习重点，深入浅出nodejs学习笔记\n<!-- more -->\n<The rest of contents | 余下全文>\n## node简介：\n\t1. 异步IO，适合io密集型的\n\t2. 单线程，通过childnode实现多线程\n\t3. 跨平台，通过electron编写跨平台客户端\n\t4. 上手简单,功能强大\n## node模块\n\t1. node模块分为两类，一是node的内建模块（核心模块），二是用户编写的文件模块\n\t2. 核心模块在node编译时加载到内存，文件模块在运行时动态加载\n\t3. node的每一个文件模块都是一个对象\n\t4. 文件模块需要经过路径分析，文件定位，编译执行3个过程\n\t5. node对引入过的模块都进行缓存，require会优先使用缓存\n## 异步IO\n\t1. node中都是异步的，实现同步的话要通过回调函数或者同步框架\n\t2. 异步的方案：事件发布/事件监听，Promise/Deferred模式,流程控制库\n\t3. 事件监听模式：Node自身的events模块提供了简单的实现，具有addListener/on(). once(). remove\t\tListener(). removeAllListeners()和emit()方法。\n\t```js\n\temitter.on(\"event1\", function (message) {\n\t\tconsole.log(message);\n\t});\n\t// 发布\n\temitter.emit('event1', \"I am message!\");\n\t```\n## 内存控制\n\t1. 在node中内存限制为64位1.4G（32位0.7G）\n\t2. 限制内存的原因：V8做垃圾回收如果以1.5G为例，做一次小的垃圾回收需要50ms,做一次非增量式内存回收耗时1s以上\n\t3. node在启动时可以更改内存大小，--max-old-space-size=或者--max-new-space-size=\n\t4. v8的内存回收机制：内存分代为新生代（生命周期短）和老生代（生命周期长），\n\t5. 堆外内存不受内存限制，如buffer对象的使用\n## 理解buffer\n\n\n## 网络编程\n\t1. tcp服务\n\t\t服务端：\n```js\n\t\tvar net = require('net');\n\t\tvar server = net.createServer(function (socket) {\n\t\tsocket.on('data', function (data) {\n\t\t\tsocket.write(\"你好\");\n\t\t});\n\t\tsocket.on('end', function () {\n\t\t\tconsole.log('断开连接');\n\t\t});\n\t\tsocket.write(\"欢迎光临：\\n\");\n\t\t});\n\t\tserver.listen(8124, function () {\n\t\t\tconsole.log('server bound');\n\t\t});\n```\n\t\t客户端：\n```js\n\t\tvar net = require('net');\n\t\tvar client = net.connect({port: 8124}, function () { //'connect' listener\n\t\t\tconsole.log('client connected');\n\t\t\tclient.write('world!\\r\\n');\n\t\t});\n\t\tclient.on('data', function (data) {\n\t\t\tconsole.log(data.toString());\n\t\t\tclient.end();\n\t\t});\n\t\tclient.on('end', function () {\n\t\t\tconsole.log('client disconnected');\n\t\t});\n```\n\t2. udp服务\n\n```js\n\t\t// 服务端：\n\t\tvar dgram = require(\"dgram\");\n\t\tvar server = dgram.createSocket(\"udp4\");\n\t\tserver.on(\"message\", function (msg, rinfo) {\n\t\t\tconsole.log(\"server got: \" + msg + \" from \" +\n\t\t\trinfo.address + \":\" + rinfo.port);\n\t\t});\n\t\tserver.on(\"listening\", function () {\n\t\tvar address = server.address();\n\t\tconsole.log(\"server listening \" +\n\t\t\taddress.address + \":\" + address.port);\n\t\t});\n\t\tserver.bind(41234);\n\t\t// 客户端：\n\t\tvar dgram = require('dgram');\n\t\tvar message = new Buffer(”nodejs“);\n\t\tvar client = dgram.createSocket(\"udp4\");\n\t\tclient.send(message, 0, message.length, 41234, \"localhost\", function(err, bytes) {\n\t\t\tclient.close();\n\t\t});\n```\n\t3. http服务\n\n```js\n\t\t// 服务端：\n\t\tvar http = require('http');\n\t\thttp.createServer(function (req, res) {\n\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\t\tres.end('Hello World\\n');\n\t\t}).listen(1337, '127.0.0.1');\n\t\tconsole.log('Server running at http://127.0.0.1:1337/');\n\t\t// 客户端：\n\t\tvar options = {\n\t\t\thostname: '127.0.0.1',\n\t\t\tport: 1334,\n\t\t\tpath: '/',\n\t\t\tmethod: 'GET'\n\t\t};\n\t\tvar req = http.request(options, function(res) {\n\t\t\tconsole.log('STATUS: ' + res.statusCode);\n\t\t\tconsole.log('HEADERS: ' + JSON.stringify(res.headers));\n\t\t\tres.setEncoding('utf8');\n\t\t\tres.on('data', function (chunk) {\n\t\t\tconsole.log(chunk);\n\t\t\t});\n\t\t});\n\t\treq.end();\n```\n\t4. websocket服务\n```js\n\t\t// 客户端：\n\t\tvar socket = new WebSocket('ws://127.0.0.1:12010/updates');\n\t\tsocket.onopen = function () {\n\t\t\tsetInterval(function() {\n\t\t\tif (socket.bufferedAmount == 0)\n\t\t\t\tsocket.send(getUpdateData());\n\t\t\t}, 50);\n\t\t};\n\t\tsocket.onmessage = function (event) {\n\t\t\t// TODO：event.data\n\t\t};\n\t\t// <!-- 模拟浏览器： -->\n\n\t\tvar WebSocket = function (url) {\n\t\t// 代码?解析ws://127.0.0.1:12010/updates\n\t\t\tthis.options = parseUrl(url);\n\t\t\tthis.connect();\n\t\t};\n\t\tWebSocket.prototype.onopen = function () {\n\t\t// TODO\n\t\t};\n\t\tWebSocket.prototype.setSocket = function (socket) {\n\t\tthis.socket = socket;\n\t\t};\n\t\tWebSocket.prototype.connect = function () {\n\t\t\tvar this = that;\n\t\t\tvar key = new Buffer(this.options.protocolVersion + '-' + Date.now()).toString('base64');\n\t\t\tvar shasum = crypto.createHash('sha1');\n\t\t\tvar expected = shasum.update(key + '258EAFA5-E914-47DA-95CA-C5AB0DC85B11').digest('base64');\n\t\t\tvar options = {\n\t\t\t\tport: this.options.port, //12010\n\t\t\t\thost: this.options.hostname, // 127.0.0.1\n\t\t\theaders: {\n\t\t\t\t'Connection': 'Upgrade',\n\t\t\t\t'Upgrade': 'websocket',\n\t\t\t\t'Sec-WebSocket-Version': this.options.protocolVersion,\n\t\t\t\t'Sec-WebSocket-Key': key\n\t\t\t}\n\t\t};\n\t\tvar req = http.request(options);\n\t\t\treq.end();\n\t\t\treq.on('upgrade', function(res, socket, upgradeHead) {\n\t\t\t// 连接成功\n\t\t\tthat.setSocket(socket);\n\t\t\t// 触发open事件\n\t\t\tthat.onopen();\n\t\t});\n\t\t};\n```\n\n```js\n\t\t// 服务端响应：\n\t\tvar server = http.createServer(function (req, res) {\n\t\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\t\tres.end('Hello World\\n');\n\t\t});\n\t\tserver.listen(12010);\n\t\t// 在收到upgrade请求之后，告知客户端允许切换协议\n\t\tserver.on('upgrade', function (req, socket, upgradeHead) {\n\t\t\tvar head = new Buffer(upgradeHead.length);\n\t\t\tupgradeHead.copy(head);\n\t\t\tvar key = req.headers['sec-websocket-key'];\n\t\t\tvar shasum = crypto.createHash('sha1');\n\t\t\tkey = shasum.update(key + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\").digest('base64');\n\t\t\tvar headers = [\n\t\t\t\t'HTTP/1.1 101 Switching Protocols',\n\t\t\t\t'Upgrade: websocket',\n\t\t\t\t'Connection: Upgrade',\n\t\t\t\t'Sec-WebSocket-Accept: ' + key,\n\t\t\t\t'Sec-WebSocket-Protocol: ' + protocol\n\t\t\t];\n\t\t\t// 让数据立即发送\n\t\t\tsocket.setNoDelay(true);\n\t\t\tsocket.write(headers.concat('', '').join('\\r\\n'));\n\t\t\t// 建立服务器端WebSocket连接\n\t\t\tvar websocket = new WebSocket();\n\t\t\twebsocket.setSocket(socket);\n\t\t});\n```\n\t\t5. TLS服务（安全方面）\n```js\n\t\t// 服务端：\n\t\tvar tls = require('tls');\n\t\tvar fs = require('fs');\n\t\tvar options = {\n\t\t\tkey: fs.readFileSync('./keys/server.key'),\n\t\t\tcert: fs.readFileSync('./keys/server.crt'),\n\t\t\trequestCert: true,\n\t\t\tca: [ fs.readFileSync('./keys/ca.crt') ]\n\t\t};\n\t\tvar server = tls.createServer(options, function (stream) {\n\t\t\tconsole.log('server connected', stream.authorized ? 'authorized' : 'unauthorized');\n\t\t\tstream.write(\"welcome!\\n\");\n\t\t\tstream.setEncoding('utf8');\n\t\t\tstream.pipe(stream);\n\t\t});\n\t\tserver.listen(8000, function() {\n\t\t\tconsole.log('server bound');\n\t\t});\n```\n\t\t\t// 测试证书是否正常\n\t\t\t`$ openssl s_client -connect 127.0.0.1:8000`\n\n\t\t\t客户端：\n\t\t\t// 创建私钥\n\t\t\t`$ openssl genrsa -out client.key 1024`\n\t\t\t// 生成CSR\n\t\t\t`$ openssl req -new -key client.key -out client.csr`\n\t\t\t// 生成签名证书\n\t\t\t`$ openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in client.csr -out client.crt`\n```js\n\t\t\tvar tls = require('tls');\n\t\t\tvar fs = require('fs');\n\t\t\tvar options = {\n\t\t\t\tkey: fs.readFileSync('./keys/client.key'),\n\t\t\t\tcert: fs.readFileSync('./keys/client.crt'),\n\t\t\t\tca: [ fs.readFileSync('./keys/ca.crt') ]\n\t\t\t};\n\t\t\tvar stream = tls.connect(8000, options, function () {\n\t\t\t\tconsole.log('client connected', stream.authorized ? 'authorized' : 'unauthorized');\n\t\t\t\tprocess.stdin.pipe(stream);\n\t\t\t});\n\t\t\tstream.setEncoding('utf8');\n\t\t\tstream.on('data', function(data) {\n\t\t\t\tconsole.log(data);\n\t\t\t});\n\t\t\tstream.on('end', function() {\n\t\t\t\tserver.close();\n\t\t\t});\n```\n\t\t6. HTTPS服务\n\t\t\t服务端：\n```js\n\t\t\tvar https = require('https');\n\t\t\tvar fs = require('fs');\n\t\t\tvar options = {\n\t\t\t\tkey: fs.readFileSync('./keys/server.key'),\n\t\t\t\tcert: fs.readFileSync('./keys/server.crt')\n\t\t\t};\n\t\t\thttps.createServer(options, function (req, res) {\n\t\t\tres.writeHead(200);\n\t\t\t\tres.end(\"hello world\\n\");\n\t\t\t}).listen(8000);\n\t\t\t```\n\t\t\t客户端：\n```js\n\t\t\tvar https = require('https');\n\t\t\tvar fs = require('fs');\n\t\t\tvar options = {\n\t\t\t\thostname: 'localhost',\n\t\t\t\tport: 8000,\n\t\t\t\tpath: '/',\n\t\t\t\tmethod: 'GET',\n\t\t\t\tkey: fs.readFileSync('./keys/client.key'),\n\t\t\t\tcert: fs.readFileSync('./keys/client.crt'),\n\t\t\t\tca: [fs.readFileSync('./keys/ca.crt')]\n\t\t\t};\n\t\t\toptions.agent = new https.Agent(options);\n\t\t\tvar req = https.request(options, function(res) {\n\t\t\t\tres.setEncoding('utf-8');\n\t\t\t\tres.on('data', function(d) {\n\t\t\t\t\tconsole.log(d);\n\t\t\t\t});\n\t\t\t});\n\t\t\treq.end();\n\t\t\treq.on('error', function(e) {\n\t\t\t\tconsole.log(e);\n\t\t\t});\n```\n## 玩转进程\n\tnode提供了child_process.fork()实现进程的复制\n```js\n\tvar http = require('http');\n\thttp.createServer(function (req, res) {\n\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\tres.end('Hello World\\n');\n\t}).listen(Math.round((1 + Math.random()) * 1000), '127.0.0.1');\n```\n\t运行node worker.js，监听?1000到2000之间的端口。\n\n\t以下是master.js\n```js\n\tvar fork = require('child_process').fork;\n\tvar cpus = require('os').cpus();\n\tfor (var i = 0; i < cpus.length; i++) {\n\t\tfork('./worker.js');\n\t}\n```\n\t这是著名的master-worker模式，主从模式\n\n\t//创建子进程\n\tchild_process模块提供了四个方法创建子进程\n\tspawn()\t\t执行命令\n\texec()\t\t\t执行命令\t\t可设置时间\n\texecFile()\t\t执行文件\t\t可设置时间\n\tfork()\t\t\t执行javascript\n\t后面3中方法都是spawn()的延伸\n\t//实例work.js\n```js\n\tvar cp = require('child_process');\n\tcp.spawn('node', ['worker.js']);\n\tcp.exec('node worker.js', function (err, stdout, stderr) {\n\t// some code\n\t});\n\tcp.execFile('worker.js', function (err, stdout, stderr) {\n\t// some code\n\t});\n\tcp.fork('./worker.js')\n```\n\t//进程间通信\n\t在浏览器中，javascript主线程和UI渲染是一个线程，渲染UI和执行js是互相阻塞的\n\thtml5提出来webworker API，创建工作线程在后台运行\n```js\n\tvar worker = new Worker('worker.js');\n\tworker.onmessage = function (event) {\n\t\tdocument.getElementById('result').textContent = event.data;\n\t};\n```\n\twork.js代码如下\n```js\n\tvar n = 1;\n\tsearch: while (true) {\n\t\tn += 1;\n\t\tfor (var i = 2; i <= Math.sqrt(n); i += 1)\n\t\t\tif (n  i == 0) %\n\t\t\t\tcontinue search;\n\t\t// found a prime\n\t\tpostMessage(n);\n\t}\n```\n\t主线程和工作线程通过onmessage()和postMessage()进行通信，子进程对象由send方法\n\t// parent.js\n```js\n\tvar cp = require('child_process');\n\tvar n = cp.fork(__dirname + '/sub.js');\n\tn.on('message', function (m) {\n\t\tconsole.log('PARENT got message:', m);\n\t});\n\tn.send({hello: 'world'});\n\t// sub.js\n\tprocess.on('message', function (m) {\n\t\tconsole.log('CHILD got message:', m);\n\t});\n\tprocess.send({foo: 'bar'});\n```\n\t//进程间通信原理\n\t实现进程间的技术有：管道，tcp，socket，共享内存，等。\n\t//句柄传递\n\t一个端口只能由一个工作进程监听，解决方案是有主进程监听一个80端口，然后\n\t分发到其他子线程去\n\n```js\n\t// parent.js\n\tvar child = require('child_process').fork('child.js');\n\t// Open up the server object and send the handle\n\tvar server = require('net').createServer();\n\tserver.on('connection', function (socket) {\n\t\tsocket.end('handled by parent\\n');\n\t});\n\tserver.listen(1337, function () {\n\t\tchild.send('server', server);\n\t});\n\t//child.js\n\tprocess.on('message', function (m, server) {\n\t\tif (m === 'server') {\n\t\t\tserver.on('connection', function (socket) {\n\t\t\t\tsocket.end('handled by child\\n');\n\t\t\t});\n\t\t}\n\t});\n\n\t//将服务发送到多个子进程实例\n\t//parent.js\n\tvar cp = require('child_process');\n\tvar child1 = cp.fork('child.js');\n\tvar child2 = cp.fork('child.js');\n\t// Open up the server object and send the handle\n\tvar server = require('net').createServer();\n\tserver.on('connection', function (socket) {\n\t\tsocket.end('handled by parent\\n');\n\t});\n\tserver.listen(1337, function () {\n\t\tchild1.send('server', server);\n\t\tchild2.send('server', server);\n\t});\n\t//child.js\n\tprocess.on('message', function (m, server) {\n\tif (m === 'server') {\n\t\tserver.on('connection', function (socket) {\n\t\t\tsocket.end('handled by child, pid is ' + process.pid + '\\n');\n\t\t});\n\t}\n\t})\n\t//最终版，请求全部由子进程处理，\n\t//parent,js\n\tvar cp = require('child_process');\n\tvar child1 = cp.fork('child.js');\n\tvar child2 = cp.fork('child.js');\n\t// Open up the server object and send the handle\n\tvar server = require('net').createServer();\n\tserver.listen(1337, function () {\n\t\tchild1.send('server', server);\n\t\tchild2.send('server', server);\n\t\tserver.close(); //关闭主线程的服务\n\t});\n\t//child.js\n\tvar http = require('http');\n\tvar server = http.createServer(function (req, res) {\n\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\tres.end('handled by child, pid is ' + process.pid + '\\n');\n\t});\n\tprocess.on('message', function (m, tcp) {\n\t\tif (m === 'server') {\n\t\t\ttcp.on('connection', function (socket) {\n\t\t\t\tserver.emit('connection', socket);\n\t\t\t});\n\t\t}\n\t});\n```\n\t<p>\n\tsend发送的句柄类型：\n\t\tnet.Socket。TCP\n\t\tnet.Server。TCP服务\n\n\t\tnet.Native。C++\n\t\tdgram.Socket。UDP\n\t\tdgram.Native。C++\n\t//进程事件\n\terror：\n\texit：\n\tclose：\n\tdisconnect：\n\t</p>\n```js\n\t//自动重启线程\n\t//master.js\n\tvar fork = require('child_process').fork;\n\tvar cpus = require('os').cpus();\n\tvar server = require('net').createServer();\n\tserver.listen(1337);\n\tvar workers = {};\n\tvar createWorker = function () {\n\tvar worker = fork(__dirname + '/worker.js');\n\t//退出时重新启动新的线程\n\tworker.on('exit', function () {\n\t\tconsole.log('Worker ' + worker.pid + ' exited.');\n\t\tdelete workers[worker.pid];\n\t\tcreateWorker();\n\t});\n\t// 句柄转发\n\tworker.send('server', server);\n\tworkers[worker.pid] = worker;\n\tconsole.log('Create worker. pid: ' + worker.pid);\n\t};\n\tfor (var i = 0; i < cpus.length; i++) {\n\tcreateWorker();\n\t}\n\t// 进程自己退出让所有工作进程退出\n\tprocess.on('exit', function () {\n\t\tfor (var pid in workers) {\n\t\t\tworkers[pid].kill();\n\t\t}\n\t});\n\t//work.js  考虑处理异常\n\tvar http = require('http');\n\tvar server = http.createServer(function (req, res) {\n\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\tres.end('handled by child, pid is ' + process.pid + '\\n');\n\t});\n\tvar worker;\n\tprocess.on('message', function (m, tcp) {\n\t\tif (m === 'server') {\n\t\t\tworker = tcp;\n\t\t\tworker.on('connection', function (socket) {\n\t\t\t\tserver.emit('connection', socket);\n\t\t\t});\n\t\t}\n\t});\n\tprocess.on('uncaughtException', function () {\n\t\tprocess.send({act: 'suicide'});\n\t// 停止接收新的连接\n\t\tworker.close(function () {\n\t// 连接断开后退出进程\n\t\t\tprocess.exit(1);\n\t\t});\n\t});\n```\n\n\n\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/node-notes.md","raw":"title: 深入浅出nodejs笔记\ndate: 2016-11-11 19:52:23\ntags: node\ncategories: 编程语言\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n    node学习重点，深入浅出nodejs学习笔记\n<!-- more -->\n<The rest of contents | 余下全文>\n## node简介：\n\t1. 异步IO，适合io密集型的\n\t2. 单线程，通过childnode实现多线程\n\t3. 跨平台，通过electron编写跨平台客户端\n\t4. 上手简单,功能强大\n## node模块\n\t1. node模块分为两类，一是node的内建模块（核心模块），二是用户编写的文件模块\n\t2. 核心模块在node编译时加载到内存，文件模块在运行时动态加载\n\t3. node的每一个文件模块都是一个对象\n\t4. 文件模块需要经过路径分析，文件定位，编译执行3个过程\n\t5. node对引入过的模块都进行缓存，require会优先使用缓存\n## 异步IO\n\t1. node中都是异步的，实现同步的话要通过回调函数或者同步框架\n\t2. 异步的方案：事件发布/事件监听，Promise/Deferred模式,流程控制库\n\t3. 事件监听模式：Node自身的events模块提供了简单的实现，具有addListener/on(). once(). remove\t\tListener(). removeAllListeners()和emit()方法。\n\t```js\n\temitter.on(\"event1\", function (message) {\n\t\tconsole.log(message);\n\t});\n\t// 发布\n\temitter.emit('event1', \"I am message!\");\n\t```\n## 内存控制\n\t1. 在node中内存限制为64位1.4G（32位0.7G）\n\t2. 限制内存的原因：V8做垃圾回收如果以1.5G为例，做一次小的垃圾回收需要50ms,做一次非增量式内存回收耗时1s以上\n\t3. node在启动时可以更改内存大小，--max-old-space-size=或者--max-new-space-size=\n\t4. v8的内存回收机制：内存分代为新生代（生命周期短）和老生代（生命周期长），\n\t5. 堆外内存不受内存限制，如buffer对象的使用\n## 理解buffer\n\n\n## 网络编程\n\t1. tcp服务\n\t\t服务端：\n```js\n\t\tvar net = require('net');\n\t\tvar server = net.createServer(function (socket) {\n\t\tsocket.on('data', function (data) {\n\t\t\tsocket.write(\"你好\");\n\t\t});\n\t\tsocket.on('end', function () {\n\t\t\tconsole.log('断开连接');\n\t\t});\n\t\tsocket.write(\"欢迎光临：\\n\");\n\t\t});\n\t\tserver.listen(8124, function () {\n\t\t\tconsole.log('server bound');\n\t\t});\n```\n\t\t客户端：\n```js\n\t\tvar net = require('net');\n\t\tvar client = net.connect({port: 8124}, function () { //'connect' listener\n\t\t\tconsole.log('client connected');\n\t\t\tclient.write('world!\\r\\n');\n\t\t});\n\t\tclient.on('data', function (data) {\n\t\t\tconsole.log(data.toString());\n\t\t\tclient.end();\n\t\t});\n\t\tclient.on('end', function () {\n\t\t\tconsole.log('client disconnected');\n\t\t});\n```\n\t2. udp服务\n\n```js\n\t\t// 服务端：\n\t\tvar dgram = require(\"dgram\");\n\t\tvar server = dgram.createSocket(\"udp4\");\n\t\tserver.on(\"message\", function (msg, rinfo) {\n\t\t\tconsole.log(\"server got: \" + msg + \" from \" +\n\t\t\trinfo.address + \":\" + rinfo.port);\n\t\t});\n\t\tserver.on(\"listening\", function () {\n\t\tvar address = server.address();\n\t\tconsole.log(\"server listening \" +\n\t\t\taddress.address + \":\" + address.port);\n\t\t});\n\t\tserver.bind(41234);\n\t\t// 客户端：\n\t\tvar dgram = require('dgram');\n\t\tvar message = new Buffer(”nodejs“);\n\t\tvar client = dgram.createSocket(\"udp4\");\n\t\tclient.send(message, 0, message.length, 41234, \"localhost\", function(err, bytes) {\n\t\t\tclient.close();\n\t\t});\n```\n\t3. http服务\n\n```js\n\t\t// 服务端：\n\t\tvar http = require('http');\n\t\thttp.createServer(function (req, res) {\n\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\t\tres.end('Hello World\\n');\n\t\t}).listen(1337, '127.0.0.1');\n\t\tconsole.log('Server running at http://127.0.0.1:1337/');\n\t\t// 客户端：\n\t\tvar options = {\n\t\t\thostname: '127.0.0.1',\n\t\t\tport: 1334,\n\t\t\tpath: '/',\n\t\t\tmethod: 'GET'\n\t\t};\n\t\tvar req = http.request(options, function(res) {\n\t\t\tconsole.log('STATUS: ' + res.statusCode);\n\t\t\tconsole.log('HEADERS: ' + JSON.stringify(res.headers));\n\t\t\tres.setEncoding('utf8');\n\t\t\tres.on('data', function (chunk) {\n\t\t\tconsole.log(chunk);\n\t\t\t});\n\t\t});\n\t\treq.end();\n```\n\t4. websocket服务\n```js\n\t\t// 客户端：\n\t\tvar socket = new WebSocket('ws://127.0.0.1:12010/updates');\n\t\tsocket.onopen = function () {\n\t\t\tsetInterval(function() {\n\t\t\tif (socket.bufferedAmount == 0)\n\t\t\t\tsocket.send(getUpdateData());\n\t\t\t}, 50);\n\t\t};\n\t\tsocket.onmessage = function (event) {\n\t\t\t// TODO：event.data\n\t\t};\n\t\t// <!-- 模拟浏览器： -->\n\n\t\tvar WebSocket = function (url) {\n\t\t// 代码?解析ws://127.0.0.1:12010/updates\n\t\t\tthis.options = parseUrl(url);\n\t\t\tthis.connect();\n\t\t};\n\t\tWebSocket.prototype.onopen = function () {\n\t\t// TODO\n\t\t};\n\t\tWebSocket.prototype.setSocket = function (socket) {\n\t\tthis.socket = socket;\n\t\t};\n\t\tWebSocket.prototype.connect = function () {\n\t\t\tvar this = that;\n\t\t\tvar key = new Buffer(this.options.protocolVersion + '-' + Date.now()).toString('base64');\n\t\t\tvar shasum = crypto.createHash('sha1');\n\t\t\tvar expected = shasum.update(key + '258EAFA5-E914-47DA-95CA-C5AB0DC85B11').digest('base64');\n\t\t\tvar options = {\n\t\t\t\tport: this.options.port, //12010\n\t\t\t\thost: this.options.hostname, // 127.0.0.1\n\t\t\theaders: {\n\t\t\t\t'Connection': 'Upgrade',\n\t\t\t\t'Upgrade': 'websocket',\n\t\t\t\t'Sec-WebSocket-Version': this.options.protocolVersion,\n\t\t\t\t'Sec-WebSocket-Key': key\n\t\t\t}\n\t\t};\n\t\tvar req = http.request(options);\n\t\t\treq.end();\n\t\t\treq.on('upgrade', function(res, socket, upgradeHead) {\n\t\t\t// 连接成功\n\t\t\tthat.setSocket(socket);\n\t\t\t// 触发open事件\n\t\t\tthat.onopen();\n\t\t});\n\t\t};\n```\n\n```js\n\t\t// 服务端响应：\n\t\tvar server = http.createServer(function (req, res) {\n\t\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\t\tres.end('Hello World\\n');\n\t\t});\n\t\tserver.listen(12010);\n\t\t// 在收到upgrade请求之后，告知客户端允许切换协议\n\t\tserver.on('upgrade', function (req, socket, upgradeHead) {\n\t\t\tvar head = new Buffer(upgradeHead.length);\n\t\t\tupgradeHead.copy(head);\n\t\t\tvar key = req.headers['sec-websocket-key'];\n\t\t\tvar shasum = crypto.createHash('sha1');\n\t\t\tkey = shasum.update(key + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\").digest('base64');\n\t\t\tvar headers = [\n\t\t\t\t'HTTP/1.1 101 Switching Protocols',\n\t\t\t\t'Upgrade: websocket',\n\t\t\t\t'Connection: Upgrade',\n\t\t\t\t'Sec-WebSocket-Accept: ' + key,\n\t\t\t\t'Sec-WebSocket-Protocol: ' + protocol\n\t\t\t];\n\t\t\t// 让数据立即发送\n\t\t\tsocket.setNoDelay(true);\n\t\t\tsocket.write(headers.concat('', '').join('\\r\\n'));\n\t\t\t// 建立服务器端WebSocket连接\n\t\t\tvar websocket = new WebSocket();\n\t\t\twebsocket.setSocket(socket);\n\t\t});\n```\n\t\t5. TLS服务（安全方面）\n```js\n\t\t// 服务端：\n\t\tvar tls = require('tls');\n\t\tvar fs = require('fs');\n\t\tvar options = {\n\t\t\tkey: fs.readFileSync('./keys/server.key'),\n\t\t\tcert: fs.readFileSync('./keys/server.crt'),\n\t\t\trequestCert: true,\n\t\t\tca: [ fs.readFileSync('./keys/ca.crt') ]\n\t\t};\n\t\tvar server = tls.createServer(options, function (stream) {\n\t\t\tconsole.log('server connected', stream.authorized ? 'authorized' : 'unauthorized');\n\t\t\tstream.write(\"welcome!\\n\");\n\t\t\tstream.setEncoding('utf8');\n\t\t\tstream.pipe(stream);\n\t\t});\n\t\tserver.listen(8000, function() {\n\t\t\tconsole.log('server bound');\n\t\t});\n```\n\t\t\t// 测试证书是否正常\n\t\t\t`$ openssl s_client -connect 127.0.0.1:8000`\n\n\t\t\t客户端：\n\t\t\t// 创建私钥\n\t\t\t`$ openssl genrsa -out client.key 1024`\n\t\t\t// 生成CSR\n\t\t\t`$ openssl req -new -key client.key -out client.csr`\n\t\t\t// 生成签名证书\n\t\t\t`$ openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in client.csr -out client.crt`\n```js\n\t\t\tvar tls = require('tls');\n\t\t\tvar fs = require('fs');\n\t\t\tvar options = {\n\t\t\t\tkey: fs.readFileSync('./keys/client.key'),\n\t\t\t\tcert: fs.readFileSync('./keys/client.crt'),\n\t\t\t\tca: [ fs.readFileSync('./keys/ca.crt') ]\n\t\t\t};\n\t\t\tvar stream = tls.connect(8000, options, function () {\n\t\t\t\tconsole.log('client connected', stream.authorized ? 'authorized' : 'unauthorized');\n\t\t\t\tprocess.stdin.pipe(stream);\n\t\t\t});\n\t\t\tstream.setEncoding('utf8');\n\t\t\tstream.on('data', function(data) {\n\t\t\t\tconsole.log(data);\n\t\t\t});\n\t\t\tstream.on('end', function() {\n\t\t\t\tserver.close();\n\t\t\t});\n```\n\t\t6. HTTPS服务\n\t\t\t服务端：\n```js\n\t\t\tvar https = require('https');\n\t\t\tvar fs = require('fs');\n\t\t\tvar options = {\n\t\t\t\tkey: fs.readFileSync('./keys/server.key'),\n\t\t\t\tcert: fs.readFileSync('./keys/server.crt')\n\t\t\t};\n\t\t\thttps.createServer(options, function (req, res) {\n\t\t\tres.writeHead(200);\n\t\t\t\tres.end(\"hello world\\n\");\n\t\t\t}).listen(8000);\n\t\t\t```\n\t\t\t客户端：\n```js\n\t\t\tvar https = require('https');\n\t\t\tvar fs = require('fs');\n\t\t\tvar options = {\n\t\t\t\thostname: 'localhost',\n\t\t\t\tport: 8000,\n\t\t\t\tpath: '/',\n\t\t\t\tmethod: 'GET',\n\t\t\t\tkey: fs.readFileSync('./keys/client.key'),\n\t\t\t\tcert: fs.readFileSync('./keys/client.crt'),\n\t\t\t\tca: [fs.readFileSync('./keys/ca.crt')]\n\t\t\t};\n\t\t\toptions.agent = new https.Agent(options);\n\t\t\tvar req = https.request(options, function(res) {\n\t\t\t\tres.setEncoding('utf-8');\n\t\t\t\tres.on('data', function(d) {\n\t\t\t\t\tconsole.log(d);\n\t\t\t\t});\n\t\t\t});\n\t\t\treq.end();\n\t\t\treq.on('error', function(e) {\n\t\t\t\tconsole.log(e);\n\t\t\t});\n```\n## 玩转进程\n\tnode提供了child_process.fork()实现进程的复制\n```js\n\tvar http = require('http');\n\thttp.createServer(function (req, res) {\n\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\tres.end('Hello World\\n');\n\t}).listen(Math.round((1 + Math.random()) * 1000), '127.0.0.1');\n```\n\t运行node worker.js，监听?1000到2000之间的端口。\n\n\t以下是master.js\n```js\n\tvar fork = require('child_process').fork;\n\tvar cpus = require('os').cpus();\n\tfor (var i = 0; i < cpus.length; i++) {\n\t\tfork('./worker.js');\n\t}\n```\n\t这是著名的master-worker模式，主从模式\n\n\t//创建子进程\n\tchild_process模块提供了四个方法创建子进程\n\tspawn()\t\t执行命令\n\texec()\t\t\t执行命令\t\t可设置时间\n\texecFile()\t\t执行文件\t\t可设置时间\n\tfork()\t\t\t执行javascript\n\t后面3中方法都是spawn()的延伸\n\t//实例work.js\n```js\n\tvar cp = require('child_process');\n\tcp.spawn('node', ['worker.js']);\n\tcp.exec('node worker.js', function (err, stdout, stderr) {\n\t// some code\n\t});\n\tcp.execFile('worker.js', function (err, stdout, stderr) {\n\t// some code\n\t});\n\tcp.fork('./worker.js')\n```\n\t//进程间通信\n\t在浏览器中，javascript主线程和UI渲染是一个线程，渲染UI和执行js是互相阻塞的\n\thtml5提出来webworker API，创建工作线程在后台运行\n```js\n\tvar worker = new Worker('worker.js');\n\tworker.onmessage = function (event) {\n\t\tdocument.getElementById('result').textContent = event.data;\n\t};\n```\n\twork.js代码如下\n```js\n\tvar n = 1;\n\tsearch: while (true) {\n\t\tn += 1;\n\t\tfor (var i = 2; i <= Math.sqrt(n); i += 1)\n\t\t\tif (n  i == 0) %\n\t\t\t\tcontinue search;\n\t\t// found a prime\n\t\tpostMessage(n);\n\t}\n```\n\t主线程和工作线程通过onmessage()和postMessage()进行通信，子进程对象由send方法\n\t// parent.js\n```js\n\tvar cp = require('child_process');\n\tvar n = cp.fork(__dirname + '/sub.js');\n\tn.on('message', function (m) {\n\t\tconsole.log('PARENT got message:', m);\n\t});\n\tn.send({hello: 'world'});\n\t// sub.js\n\tprocess.on('message', function (m) {\n\t\tconsole.log('CHILD got message:', m);\n\t});\n\tprocess.send({foo: 'bar'});\n```\n\t//进程间通信原理\n\t实现进程间的技术有：管道，tcp，socket，共享内存，等。\n\t//句柄传递\n\t一个端口只能由一个工作进程监听，解决方案是有主进程监听一个80端口，然后\n\t分发到其他子线程去\n\n```js\n\t// parent.js\n\tvar child = require('child_process').fork('child.js');\n\t// Open up the server object and send the handle\n\tvar server = require('net').createServer();\n\tserver.on('connection', function (socket) {\n\t\tsocket.end('handled by parent\\n');\n\t});\n\tserver.listen(1337, function () {\n\t\tchild.send('server', server);\n\t});\n\t//child.js\n\tprocess.on('message', function (m, server) {\n\t\tif (m === 'server') {\n\t\t\tserver.on('connection', function (socket) {\n\t\t\t\tsocket.end('handled by child\\n');\n\t\t\t});\n\t\t}\n\t});\n\n\t//将服务发送到多个子进程实例\n\t//parent.js\n\tvar cp = require('child_process');\n\tvar child1 = cp.fork('child.js');\n\tvar child2 = cp.fork('child.js');\n\t// Open up the server object and send the handle\n\tvar server = require('net').createServer();\n\tserver.on('connection', function (socket) {\n\t\tsocket.end('handled by parent\\n');\n\t});\n\tserver.listen(1337, function () {\n\t\tchild1.send('server', server);\n\t\tchild2.send('server', server);\n\t});\n\t//child.js\n\tprocess.on('message', function (m, server) {\n\tif (m === 'server') {\n\t\tserver.on('connection', function (socket) {\n\t\t\tsocket.end('handled by child, pid is ' + process.pid + '\\n');\n\t\t});\n\t}\n\t})\n\t//最终版，请求全部由子进程处理，\n\t//parent,js\n\tvar cp = require('child_process');\n\tvar child1 = cp.fork('child.js');\n\tvar child2 = cp.fork('child.js');\n\t// Open up the server object and send the handle\n\tvar server = require('net').createServer();\n\tserver.listen(1337, function () {\n\t\tchild1.send('server', server);\n\t\tchild2.send('server', server);\n\t\tserver.close(); //关闭主线程的服务\n\t});\n\t//child.js\n\tvar http = require('http');\n\tvar server = http.createServer(function (req, res) {\n\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\tres.end('handled by child, pid is ' + process.pid + '\\n');\n\t});\n\tprocess.on('message', function (m, tcp) {\n\t\tif (m === 'server') {\n\t\t\ttcp.on('connection', function (socket) {\n\t\t\t\tserver.emit('connection', socket);\n\t\t\t});\n\t\t}\n\t});\n```\n\t<p>\n\tsend发送的句柄类型：\n\t\tnet.Socket。TCP\n\t\tnet.Server。TCP服务\n\n\t\tnet.Native。C++\n\t\tdgram.Socket。UDP\n\t\tdgram.Native。C++\n\t//进程事件\n\terror：\n\texit：\n\tclose：\n\tdisconnect：\n\t</p>\n```js\n\t//自动重启线程\n\t//master.js\n\tvar fork = require('child_process').fork;\n\tvar cpus = require('os').cpus();\n\tvar server = require('net').createServer();\n\tserver.listen(1337);\n\tvar workers = {};\n\tvar createWorker = function () {\n\tvar worker = fork(__dirname + '/worker.js');\n\t//退出时重新启动新的线程\n\tworker.on('exit', function () {\n\t\tconsole.log('Worker ' + worker.pid + ' exited.');\n\t\tdelete workers[worker.pid];\n\t\tcreateWorker();\n\t});\n\t// 句柄转发\n\tworker.send('server', server);\n\tworkers[worker.pid] = worker;\n\tconsole.log('Create worker. pid: ' + worker.pid);\n\t};\n\tfor (var i = 0; i < cpus.length; i++) {\n\tcreateWorker();\n\t}\n\t// 进程自己退出让所有工作进程退出\n\tprocess.on('exit', function () {\n\t\tfor (var pid in workers) {\n\t\t\tworkers[pid].kill();\n\t\t}\n\t});\n\t//work.js  考虑处理异常\n\tvar http = require('http');\n\tvar server = http.createServer(function (req, res) {\n\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\tres.end('handled by child, pid is ' + process.pid + '\\n');\n\t});\n\tvar worker;\n\tprocess.on('message', function (m, tcp) {\n\t\tif (m === 'server') {\n\t\t\tworker = tcp;\n\t\t\tworker.on('connection', function (socket) {\n\t\t\t\tserver.emit('connection', socket);\n\t\t\t});\n\t\t}\n\t});\n\tprocess.on('uncaughtException', function () {\n\t\tprocess.send({act: 'suicide'});\n\t// 停止接收新的连接\n\t\tworker.close(function () {\n\t// 连接断开后退出进程\n\t\t\tprocess.exit(1);\n\t\t});\n\t});\n```\n\n\n\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"node-notes","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla7100308p9ku1xm1tyo","content":"<p><strong> 深入浅出Nodejs笔记：</strong> <Excerpt in index | 首页摘要><br>    node学习重点，深入浅出nodejs学习笔记<br><a id=\"more\"></a></p>\n<p><The rest of contents | 余下全文></p>\n<h2 id=\"node简介：\"><a href=\"#node简介：\" class=\"headerlink\" title=\"node简介：\"></a>node简介：</h2><pre><code>1. 异步IO，适合io密集型的\n2. 单线程，通过childnode实现多线程\n3. 跨平台，通过electron编写跨平台客户端\n4. 上手简单,功能强大\n</code></pre><h2 id=\"node模块\"><a href=\"#node模块\" class=\"headerlink\" title=\"node模块\"></a>node模块</h2><pre><code>1. node模块分为两类，一是node的内建模块（核心模块），二是用户编写的文件模块\n2. 核心模块在node编译时加载到内存，文件模块在运行时动态加载\n3. node的每一个文件模块都是一个对象\n4. 文件模块需要经过路径分析，文件定位，编译执行3个过程\n5. node对引入过的模块都进行缓存，require会优先使用缓存\n</code></pre><h2 id=\"异步IO\"><a href=\"#异步IO\" class=\"headerlink\" title=\"异步IO\"></a>异步IO</h2><pre><code>1. node中都是异步的，实现同步的话要通过回调函数或者同步框架\n2. 异步的方案：事件发布/事件监听，Promise/Deferred模式,流程控制库\n3. 事件监听模式：Node自身的events模块提供了简单的实现，具有addListener/on(). once(). remove        Listener(). removeAllListeners()和emit()方法。\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">emitter.on(<span class=\"string\">\"event1\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">message</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(message);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 发布</span></div><div class=\"line\">emitter.emit(<span class=\"string\">'event1'</span>, <span class=\"string\">\"I am message!\"</span>);</div></pre></td></tr></table></figure>\n</code></pre><h2 id=\"内存控制\"><a href=\"#内存控制\" class=\"headerlink\" title=\"内存控制\"></a>内存控制</h2><pre><code>1. 在node中内存限制为64位1.4G（32位0.7G）\n2. 限制内存的原因：V8做垃圾回收如果以1.5G为例，做一次小的垃圾回收需要50ms,做一次非增量式内存回收耗时1s以上\n3. node在启动时可以更改内存大小，--max-old-space-size=或者--max-new-space-size=\n4. v8的内存回收机制：内存分代为新生代（生命周期短）和老生代（生命周期长），\n5. 堆外内存不受内存限制，如buffer对象的使用\n</code></pre><h2 id=\"理解buffer\"><a href=\"#理解buffer\" class=\"headerlink\" title=\"理解buffer\"></a>理解buffer</h2><h2 id=\"网络编程\"><a href=\"#网络编程\" class=\"headerlink\" title=\"网络编程\"></a>网络编程</h2><pre><code>1. tcp服务\n    服务端：\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = net.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">socket.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">\tsocket.write(<span class=\"string\">\"你好\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">socket.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'断开连接'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">socket.write(<span class=\"string\">\"欢迎光临：\\n\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">8124</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'server bound'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>客户端：\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> client = net.connect(&#123;port: <span class=\"number\">8124</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//'connect' listener</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'client connected'</span>);</div><div class=\"line\">\tclient.write(<span class=\"string\">'world!\\r\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">client.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(data.toString());</div><div class=\"line\">\tclient.end();</div><div class=\"line\">&#125;);</div><div class=\"line\">client.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'client disconnected'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>2. udp服务\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 服务端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> dgram = <span class=\"built_in\">require</span>(<span class=\"string\">\"dgram\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = dgram.createSocket(<span class=\"string\">\"udp4\"</span>);</div><div class=\"line\">server.on(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg, rinfo</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"server got: \"</span> + msg + <span class=\"string\">\" from \"</span> +</div><div class=\"line\">\trinfo.address + <span class=\"string\">\":\"</span> + rinfo.port);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.on(<span class=\"string\">\"listening\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">var</span> address = server.address();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"server listening \"</span> +</div><div class=\"line\">\taddress.address + <span class=\"string\">\":\"</span> + address.port);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.bind(<span class=\"number\">41234</span>);</div><div class=\"line\"><span class=\"comment\">// 客户端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> dgram = <span class=\"built_in\">require</span>(<span class=\"string\">'dgram'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"keyword\">new</span> Buffer(”nodejs“);</div><div class=\"line\"><span class=\"keyword\">var</span> client = dgram.createSocket(<span class=\"string\">\"udp4\"</span>);</div><div class=\"line\">client.send(message, <span class=\"number\">0</span>, message.length, <span class=\"number\">41234</span>, <span class=\"string\">\"localhost\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, bytes</span>) </span>&#123;</div><div class=\"line\">\tclient.close();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>3. http服务\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 服务端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'Hello World\\n'</span>);</div><div class=\"line\">&#125;).listen(<span class=\"number\">1337</span>, <span class=\"string\">'127.0.0.1'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Server running at http://127.0.0.1:1337/'</span>);</div><div class=\"line\"><span class=\"comment\">// 客户端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\thostname: <span class=\"string\">'127.0.0.1'</span>,</div><div class=\"line\">\tport: <span class=\"number\">1334</span>,</div><div class=\"line\">\tpath: <span class=\"string\">'/'</span>,</div><div class=\"line\">\tmethod: <span class=\"string\">'GET'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> req = http.request(options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'STATUS: '</span> + res.statusCode);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'HEADERS: '</span> + <span class=\"built_in\">JSON</span>.stringify(res.headers));</div><div class=\"line\">\tres.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">\tres.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">chunk</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(chunk);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">req.end();</div></pre></td></tr></table></figure>\n<pre><code>4. websocket服务\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 客户端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> socket = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">'ws://127.0.0.1:12010/updates'</span>);</div><div class=\"line\">socket.onopen = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tsetInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (socket.bufferedAmount == <span class=\"number\">0</span>)</div><div class=\"line\">\t\tsocket.send(getUpdateData());</div><div class=\"line\">\t&#125;, <span class=\"number\">50</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">socket.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// TODO：event.data</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// &lt;!-- 模拟浏览器： --&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> WebSocket = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// 代码?解析ws://127.0.0.1:12010/updates</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.options = parseUrl(url);</div><div class=\"line\">\t<span class=\"keyword\">this</span>.connect();</div><div class=\"line\">&#125;;</div><div class=\"line\">WebSocket.prototype.onopen = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// TODO</span></div><div class=\"line\">&#125;;</div><div class=\"line\">WebSocket.prototype.setSocket = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">this</span>.socket = socket;</div><div class=\"line\">&#125;;</div><div class=\"line\">WebSocket.prototype.connect = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> <span class=\"keyword\">this</span> = that;</div><div class=\"line\">\t<span class=\"keyword\">var</span> key = <span class=\"keyword\">new</span> Buffer(<span class=\"keyword\">this</span>.options.protocolVersion + <span class=\"string\">'-'</span> + <span class=\"built_in\">Date</span>.now()).toString(<span class=\"string\">'base64'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> shasum = crypto.createHash(<span class=\"string\">'sha1'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> expected = shasum.update(key + <span class=\"string\">'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'</span>).digest(<span class=\"string\">'base64'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\t\tport: <span class=\"keyword\">this</span>.options.port, <span class=\"comment\">//12010</span></div><div class=\"line\">\t\thost: <span class=\"keyword\">this</span>.options.hostname, <span class=\"comment\">// 127.0.0.1</span></div><div class=\"line\">\theaders: &#123;</div><div class=\"line\">\t\t<span class=\"string\">'Connection'</span>: <span class=\"string\">'Upgrade'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'Upgrade'</span>: <span class=\"string\">'websocket'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'Sec-WebSocket-Version'</span>: <span class=\"keyword\">this</span>.options.protocolVersion,</div><div class=\"line\">\t\t<span class=\"string\">'Sec-WebSocket-Key'</span>: key</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> req = http.request(options);</div><div class=\"line\">\treq.end();</div><div class=\"line\">\treq.on(<span class=\"string\">'upgrade'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res, socket, upgradeHead</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 连接成功</span></div><div class=\"line\">\tthat.setSocket(socket);</div><div class=\"line\">\t<span class=\"comment\">// 触发open事件</span></div><div class=\"line\">\tthat.onopen();</div><div class=\"line\">&#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 服务端响应：</span></div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">\tres.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'Hello World\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">12010</span>);</div><div class=\"line\"><span class=\"comment\">// 在收到upgrade请求之后，告知客户端允许切换协议</span></div><div class=\"line\">server.on(<span class=\"string\">'upgrade'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, socket, upgradeHead</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> head = <span class=\"keyword\">new</span> Buffer(upgradeHead.length);</div><div class=\"line\">\tupgradeHead.copy(head);</div><div class=\"line\">\t<span class=\"keyword\">var</span> key = req.headers[<span class=\"string\">'sec-websocket-key'</span>];</div><div class=\"line\">\t<span class=\"keyword\">var</span> shasum = crypto.createHash(<span class=\"string\">'sha1'</span>);</div><div class=\"line\">\tkey = shasum.update(key + <span class=\"string\">\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"</span>).digest(<span class=\"string\">'base64'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> headers = [</div><div class=\"line\">\t\t<span class=\"string\">'HTTP/1.1 101 Switching Protocols'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'Upgrade: websocket'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'Connection: Upgrade'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'Sec-WebSocket-Accept: '</span> + key,</div><div class=\"line\">\t\t<span class=\"string\">'Sec-WebSocket-Protocol: '</span> + protocol</div><div class=\"line\">\t];</div><div class=\"line\">\t<span class=\"comment\">// 让数据立即发送</span></div><div class=\"line\">\tsocket.setNoDelay(<span class=\"literal\">true</span>);</div><div class=\"line\">\tsocket.write(headers.concat(<span class=\"string\">''</span>, <span class=\"string\">''</span>).join(<span class=\"string\">'\\r\\n'</span>));</div><div class=\"line\">\t<span class=\"comment\">// 建立服务器端WebSocket连接</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> websocket = <span class=\"keyword\">new</span> WebSocket();</div><div class=\"line\">\twebsocket.setSocket(socket);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>5. TLS服务（安全方面）\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 服务端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> tls = <span class=\"built_in\">require</span>(<span class=\"string\">'tls'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\tkey: fs.readFileSync(<span class=\"string\">'./keys/server.key'</span>),</div><div class=\"line\">\tcert: fs.readFileSync(<span class=\"string\">'./keys/server.crt'</span>),</div><div class=\"line\">\trequestCert: <span class=\"literal\">true</span>,</div><div class=\"line\">\tca: [ fs.readFileSync(<span class=\"string\">'./keys/ca.crt'</span>) ]</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> server = tls.createServer(options, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stream</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'server connected'</span>, stream.authorized ? <span class=\"string\">'authorized'</span> : <span class=\"string\">'unauthorized'</span>);</div><div class=\"line\">\tstream.write(<span class=\"string\">\"welcome!\\n\"</span>);</div><div class=\"line\">\tstream.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">\tstream.pipe(stream);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">8000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'server bound'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>// 测试证书是否正常\n`$ openssl s_client -connect 127.0.0.1:8000`\n\n客户端：\n// 创建私钥\n`$ openssl genrsa -out client.key 1024`\n// 生成CSR\n`$ openssl req -new -key client.key -out client.csr`\n// 生成签名证书\n`$ openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in client.csr -out client.crt`\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tls = <span class=\"built_in\">require</span>(<span class=\"string\">'tls'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\tkey: fs.readFileSync(<span class=\"string\">'./keys/client.key'</span>),</div><div class=\"line\">\tcert: fs.readFileSync(<span class=\"string\">'./keys/client.crt'</span>),</div><div class=\"line\">\tca: [ fs.readFileSync(<span class=\"string\">'./keys/ca.crt'</span>) ]</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> stream = tls.connect(<span class=\"number\">8000</span>, options, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'client connected'</span>, stream.authorized ? <span class=\"string\">'authorized'</span> : <span class=\"string\">'unauthorized'</span>);</div><div class=\"line\">\tprocess.stdin.pipe(stream);</div><div class=\"line\">&#125;);</div><div class=\"line\">stream.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">stream.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;);</div><div class=\"line\">stream.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tserver.close();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>6. HTTPS服务\n    服务端：\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\tkey: fs.readFileSync(<span class=\"string\">'./keys/server.key'</span>),</div><div class=\"line\">\tcert: fs.readFileSync(<span class=\"string\">'./keys/server.crt'</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\">https.createServer(options, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">res.writeHead(<span class=\"number\">200</span>);</div><div class=\"line\">\tres.end(<span class=\"string\">\"hello world\\n\"</span>);</div><div class=\"line\">&#125;).listen(<span class=\"number\">8000</span>);</div></pre></td></tr></table></figure>\n<pre><code>客户端：\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\thostname: <span class=\"string\">'localhost'</span>,</div><div class=\"line\">\tport: <span class=\"number\">8000</span>,</div><div class=\"line\">\tpath: <span class=\"string\">'/'</span>,</div><div class=\"line\">\tmethod: <span class=\"string\">'GET'</span>,</div><div class=\"line\">\tkey: fs.readFileSync(<span class=\"string\">'./keys/client.key'</span>),</div><div class=\"line\">\tcert: fs.readFileSync(<span class=\"string\">'./keys/client.crt'</span>),</div><div class=\"line\">\tca: [fs.readFileSync(<span class=\"string\">'./keys/ca.crt'</span>)]</div><div class=\"line\">&#125;;</div><div class=\"line\">options.agent = <span class=\"keyword\">new</span> https.Agent(options);</div><div class=\"line\"><span class=\"keyword\">var</span> req = https.request(options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">\tres.setEncoding(<span class=\"string\">'utf-8'</span>);</div><div class=\"line\">\tres.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(d);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">req.end();</div><div class=\"line\">req.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(e);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"玩转进程\"><a href=\"#玩转进程\" class=\"headerlink\" title=\"玩转进程\"></a>玩转进程</h2><pre><code>node提供了child_process.fork()实现进程的复制\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">\tres.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'Hello World\\n'</span>);</div><div class=\"line\">&#125;).listen(<span class=\"built_in\">Math</span>.round((<span class=\"number\">1</span> + <span class=\"built_in\">Math</span>.random()) * <span class=\"number\">1000</span>), <span class=\"string\">'127.0.0.1'</span>);</div></pre></td></tr></table></figure>\n<pre><code>运行node worker.js，监听?1000到2000之间的端口。\n\n以下是master.js\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fork = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).fork;</div><div class=\"line\"><span class=\"keyword\">var</span> cpus = <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>).cpus();</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; cpus.length; i++) &#123;</div><div class=\"line\">\tfork(<span class=\"string\">'./worker.js'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>这是著名的master-worker模式，主从模式\n\n//创建子进程\nchild_process模块提供了四个方法创建子进程\nspawn()        执行命令\nexec()            执行命令        可设置时间\nexecFile()        执行文件        可设置时间\nfork()            执行javascript\n后面3中方法都是spawn()的延伸\n//实例work.js\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cp = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\">cp.spawn(<span class=\"string\">'node'</span>, [<span class=\"string\">'worker.js'</span>]);</div><div class=\"line\">cp.exec(<span class=\"string\">'node worker.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, stdout, stderr</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// some code</span></div><div class=\"line\">&#125;);</div><div class=\"line\">cp.execFile(<span class=\"string\">'worker.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, stdout, stderr</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// some code</span></div><div class=\"line\">&#125;);</div><div class=\"line\">cp.fork(<span class=\"string\">'./worker.js'</span>)</div></pre></td></tr></table></figure>\n<pre><code>//进程间通信\n在浏览器中，javascript主线程和UI渲染是一个线程，渲染UI和执行js是互相阻塞的\nhtml5提出来webworker API，创建工作线程在后台运行\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'worker.js'</span>);</div><div class=\"line\">worker.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'result'</span>).textContent = event.data;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<pre><code>work.js代码如下\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">1</span>;</div><div class=\"line\">search: <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">\tn += <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"built_in\">Math</span>.sqrt(n); i += <span class=\"number\">1</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n  i == <span class=\"number\">0</span>) %</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span> search;</div><div class=\"line\">\t<span class=\"comment\">// found a prime</span></div><div class=\"line\">\tpostMessage(n);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>主线程和工作线程通过onmessage()和postMessage()进行通信，子进程对象由send方法\n// parent.js\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cp = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> n = cp.fork(__dirname + <span class=\"string\">'/sub.js'</span>);</div><div class=\"line\">n.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'PARENT got message:'</span>, m);</div><div class=\"line\">&#125;);</div><div class=\"line\">n.send(&#123;hello: <span class=\"string\">'world'</span>&#125;);</div><div class=\"line\"><span class=\"comment\">// sub.js</span></div><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'CHILD got message:'</span>, m);</div><div class=\"line\">&#125;);</div><div class=\"line\">process.send(&#123;foo: <span class=\"string\">'bar'</span>&#125;);</div></pre></td></tr></table></figure>\n<pre><code>//进程间通信原理\n实现进程间的技术有：管道，tcp，socket，共享内存，等。\n//句柄传递\n一个端口只能由一个工作进程监听，解决方案是有主进程监听一个80端口，然后\n分发到其他子线程去\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// parent.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).fork(<span class=\"string\">'child.js'</span>);</div><div class=\"line\"><span class=\"comment\">// Open up the server object and send the handle</span></div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>).createServer();</div><div class=\"line\">server.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\tsocket.end(<span class=\"string\">'handled by parent\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">1337</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tchild.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//child.js</span></div><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m, server</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (m === <span class=\"string\">'server'</span>) &#123;</div><div class=\"line\">\t\tserver.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\t\t\tsocket.end(<span class=\"string\">'handled by child\\n'</span>);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将服务发送到多个子进程实例</span></div><div class=\"line\"><span class=\"comment\">//parent.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> cp = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> child1 = cp.fork(<span class=\"string\">'child.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> child2 = cp.fork(<span class=\"string\">'child.js'</span>);</div><div class=\"line\"><span class=\"comment\">// Open up the server object and send the handle</span></div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>).createServer();</div><div class=\"line\">server.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\tsocket.end(<span class=\"string\">'handled by parent\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">1337</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tchild1.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">\tchild2.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//child.js</span></div><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m, server</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">if</span> (m === <span class=\"string\">'server'</span>) &#123;</div><div class=\"line\">\tserver.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\t\tsocket.end(<span class=\"string\">'handled by child, pid is '</span> + process.pid + <span class=\"string\">'\\n'</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//最终版，请求全部由子进程处理，</span></div><div class=\"line\"><span class=\"comment\">//parent,js</span></div><div class=\"line\"><span class=\"keyword\">var</span> cp = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> child1 = cp.fork(<span class=\"string\">'child.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> child2 = cp.fork(<span class=\"string\">'child.js'</span>);</div><div class=\"line\"><span class=\"comment\">// Open up the server object and send the handle</span></div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>).createServer();</div><div class=\"line\">server.listen(<span class=\"number\">1337</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tchild1.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">\tchild2.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">\tserver.close(); <span class=\"comment\">//关闭主线程的服务</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//child.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">\tres.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'handled by child, pid is '</span> + process.pid + <span class=\"string\">'\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m, tcp</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (m === <span class=\"string\">'server'</span>) &#123;</div><div class=\"line\">\t\ttcp.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\t\t\tserver.emit(<span class=\"string\">'connection'</span>, socket);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>&lt;p&gt;\nsend发送的句柄类型：\n    net.Socket。TCP\n    net.Server。TCP服务\n\n    net.Native。C++\n    dgram.Socket。UDP\n    dgram.Native。C++\n//进程事件\nerror：\nexit：\nclose：\ndisconnect：\n&lt;/p&gt;\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//自动重启线程</span></div><div class=\"line\"><span class=\"comment\">//master.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> fork = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).fork;</div><div class=\"line\"><span class=\"keyword\">var</span> cpus = <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>).cpus();</div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>).createServer();</div><div class=\"line\">server.listen(<span class=\"number\">1337</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> workers = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> createWorker = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">var</span> worker = fork(__dirname + <span class=\"string\">'/worker.js'</span>);</div><div class=\"line\"><span class=\"comment\">//退出时重新启动新的线程</span></div><div class=\"line\">worker.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Worker '</span> + worker.pid + <span class=\"string\">' exited.'</span>);</div><div class=\"line\">\t<span class=\"keyword\">delete</span> workers[worker.pid];</div><div class=\"line\">\tcreateWorker();</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 句柄转发</span></div><div class=\"line\">worker.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">workers[worker.pid] = worker;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Create worker. pid: '</span> + worker.pid);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; cpus.length; i++) &#123;</div><div class=\"line\">createWorker();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 进程自己退出让所有工作进程退出</span></div><div class=\"line\">process.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> pid <span class=\"keyword\">in</span> workers) &#123;</div><div class=\"line\">\t\tworkers[pid].kill();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//work.js  考虑处理异常</span></div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">\tres.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'handled by child, pid is '</span> + process.pid + <span class=\"string\">'\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> worker;</div><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m, tcp</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (m === <span class=\"string\">'server'</span>) &#123;</div><div class=\"line\">\t\tworker = tcp;</div><div class=\"line\">\t\tworker.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\t\t\tserver.emit(<span class=\"string\">'connection'</span>, socket);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">process.on(<span class=\"string\">'uncaughtException'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tprocess.send(&#123;act: <span class=\"string\">'suicide'</span>&#125;);</div><div class=\"line\"><span class=\"comment\">// 停止接收新的连接</span></div><div class=\"line\">\tworker.close(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// 连接断开后退出进程</span></div><div class=\"line\">\t\tprocess.exit(<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 深入浅出Nodejs笔记：</strong> <Excerpt in index | 首页摘要><br>    node学习重点，深入浅出nodejs学习笔记<br>","more":"</p>\n<p><The rest of contents | 余下全文></p>\n<h2 id=\"node简介：\"><a href=\"#node简介：\" class=\"headerlink\" title=\"node简介：\"></a>node简介：</h2><pre><code>1. 异步IO，适合io密集型的\n2. 单线程，通过childnode实现多线程\n3. 跨平台，通过electron编写跨平台客户端\n4. 上手简单,功能强大\n</code></pre><h2 id=\"node模块\"><a href=\"#node模块\" class=\"headerlink\" title=\"node模块\"></a>node模块</h2><pre><code>1. node模块分为两类，一是node的内建模块（核心模块），二是用户编写的文件模块\n2. 核心模块在node编译时加载到内存，文件模块在运行时动态加载\n3. node的每一个文件模块都是一个对象\n4. 文件模块需要经过路径分析，文件定位，编译执行3个过程\n5. node对引入过的模块都进行缓存，require会优先使用缓存\n</code></pre><h2 id=\"异步IO\"><a href=\"#异步IO\" class=\"headerlink\" title=\"异步IO\"></a>异步IO</h2><pre><code>1. node中都是异步的，实现同步的话要通过回调函数或者同步框架\n2. 异步的方案：事件发布/事件监听，Promise/Deferred模式,流程控制库\n3. 事件监听模式：Node自身的events模块提供了简单的实现，具有addListener/on(). once(). remove        Listener(). removeAllListeners()和emit()方法。\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">emitter.on(<span class=\"string\">\"event1\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">message</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(message);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 发布</span></div><div class=\"line\">emitter.emit(<span class=\"string\">'event1'</span>, <span class=\"string\">\"I am message!\"</span>);</div></pre></td></tr></table></figure>\n</code></pre><h2 id=\"内存控制\"><a href=\"#内存控制\" class=\"headerlink\" title=\"内存控制\"></a>内存控制</h2><pre><code>1. 在node中内存限制为64位1.4G（32位0.7G）\n2. 限制内存的原因：V8做垃圾回收如果以1.5G为例，做一次小的垃圾回收需要50ms,做一次非增量式内存回收耗时1s以上\n3. node在启动时可以更改内存大小，--max-old-space-size=或者--max-new-space-size=\n4. v8的内存回收机制：内存分代为新生代（生命周期短）和老生代（生命周期长），\n5. 堆外内存不受内存限制，如buffer对象的使用\n</code></pre><h2 id=\"理解buffer\"><a href=\"#理解buffer\" class=\"headerlink\" title=\"理解buffer\"></a>理解buffer</h2><h2 id=\"网络编程\"><a href=\"#网络编程\" class=\"headerlink\" title=\"网络编程\"></a>网络编程</h2><pre><code>1. tcp服务\n    服务端：\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = net.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">socket.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">\tsocket.write(<span class=\"string\">\"你好\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">socket.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'断开连接'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">socket.write(<span class=\"string\">\"欢迎光临：\\n\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">8124</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'server bound'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>客户端：\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> client = net.connect(&#123;port: <span class=\"number\">8124</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//'connect' listener</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'client connected'</span>);</div><div class=\"line\">\tclient.write(<span class=\"string\">'world!\\r\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">client.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(data.toString());</div><div class=\"line\">\tclient.end();</div><div class=\"line\">&#125;);</div><div class=\"line\">client.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'client disconnected'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>2. udp服务\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 服务端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> dgram = <span class=\"built_in\">require</span>(<span class=\"string\">\"dgram\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = dgram.createSocket(<span class=\"string\">\"udp4\"</span>);</div><div class=\"line\">server.on(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg, rinfo</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"server got: \"</span> + msg + <span class=\"string\">\" from \"</span> +</div><div class=\"line\">\trinfo.address + <span class=\"string\">\":\"</span> + rinfo.port);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.on(<span class=\"string\">\"listening\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">var</span> address = server.address();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"server listening \"</span> +</div><div class=\"line\">\taddress.address + <span class=\"string\">\":\"</span> + address.port);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.bind(<span class=\"number\">41234</span>);</div><div class=\"line\"><span class=\"comment\">// 客户端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> dgram = <span class=\"built_in\">require</span>(<span class=\"string\">'dgram'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"keyword\">new</span> Buffer(”nodejs“);</div><div class=\"line\"><span class=\"keyword\">var</span> client = dgram.createSocket(<span class=\"string\">\"udp4\"</span>);</div><div class=\"line\">client.send(message, <span class=\"number\">0</span>, message.length, <span class=\"number\">41234</span>, <span class=\"string\">\"localhost\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, bytes</span>) </span>&#123;</div><div class=\"line\">\tclient.close();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>3. http服务\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 服务端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'Hello World\\n'</span>);</div><div class=\"line\">&#125;).listen(<span class=\"number\">1337</span>, <span class=\"string\">'127.0.0.1'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Server running at http://127.0.0.1:1337/'</span>);</div><div class=\"line\"><span class=\"comment\">// 客户端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\thostname: <span class=\"string\">'127.0.0.1'</span>,</div><div class=\"line\">\tport: <span class=\"number\">1334</span>,</div><div class=\"line\">\tpath: <span class=\"string\">'/'</span>,</div><div class=\"line\">\tmethod: <span class=\"string\">'GET'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> req = http.request(options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'STATUS: '</span> + res.statusCode);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'HEADERS: '</span> + <span class=\"built_in\">JSON</span>.stringify(res.headers));</div><div class=\"line\">\tres.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">\tres.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">chunk</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(chunk);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">req.end();</div></pre></td></tr></table></figure>\n<pre><code>4. websocket服务\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 客户端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> socket = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">'ws://127.0.0.1:12010/updates'</span>);</div><div class=\"line\">socket.onopen = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tsetInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (socket.bufferedAmount == <span class=\"number\">0</span>)</div><div class=\"line\">\t\tsocket.send(getUpdateData());</div><div class=\"line\">\t&#125;, <span class=\"number\">50</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">socket.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// TODO：event.data</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// &lt;!-- 模拟浏览器： --&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> WebSocket = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// 代码?解析ws://127.0.0.1:12010/updates</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.options = parseUrl(url);</div><div class=\"line\">\t<span class=\"keyword\">this</span>.connect();</div><div class=\"line\">&#125;;</div><div class=\"line\">WebSocket.prototype.onopen = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// TODO</span></div><div class=\"line\">&#125;;</div><div class=\"line\">WebSocket.prototype.setSocket = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">this</span>.socket = socket;</div><div class=\"line\">&#125;;</div><div class=\"line\">WebSocket.prototype.connect = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> <span class=\"keyword\">this</span> = that;</div><div class=\"line\">\t<span class=\"keyword\">var</span> key = <span class=\"keyword\">new</span> Buffer(<span class=\"keyword\">this</span>.options.protocolVersion + <span class=\"string\">'-'</span> + <span class=\"built_in\">Date</span>.now()).toString(<span class=\"string\">'base64'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> shasum = crypto.createHash(<span class=\"string\">'sha1'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> expected = shasum.update(key + <span class=\"string\">'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'</span>).digest(<span class=\"string\">'base64'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\t\tport: <span class=\"keyword\">this</span>.options.port, <span class=\"comment\">//12010</span></div><div class=\"line\">\t\thost: <span class=\"keyword\">this</span>.options.hostname, <span class=\"comment\">// 127.0.0.1</span></div><div class=\"line\">\theaders: &#123;</div><div class=\"line\">\t\t<span class=\"string\">'Connection'</span>: <span class=\"string\">'Upgrade'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'Upgrade'</span>: <span class=\"string\">'websocket'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'Sec-WebSocket-Version'</span>: <span class=\"keyword\">this</span>.options.protocolVersion,</div><div class=\"line\">\t\t<span class=\"string\">'Sec-WebSocket-Key'</span>: key</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> req = http.request(options);</div><div class=\"line\">\treq.end();</div><div class=\"line\">\treq.on(<span class=\"string\">'upgrade'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res, socket, upgradeHead</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 连接成功</span></div><div class=\"line\">\tthat.setSocket(socket);</div><div class=\"line\">\t<span class=\"comment\">// 触发open事件</span></div><div class=\"line\">\tthat.onopen();</div><div class=\"line\">&#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 服务端响应：</span></div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">\tres.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'Hello World\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">12010</span>);</div><div class=\"line\"><span class=\"comment\">// 在收到upgrade请求之后，告知客户端允许切换协议</span></div><div class=\"line\">server.on(<span class=\"string\">'upgrade'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, socket, upgradeHead</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> head = <span class=\"keyword\">new</span> Buffer(upgradeHead.length);</div><div class=\"line\">\tupgradeHead.copy(head);</div><div class=\"line\">\t<span class=\"keyword\">var</span> key = req.headers[<span class=\"string\">'sec-websocket-key'</span>];</div><div class=\"line\">\t<span class=\"keyword\">var</span> shasum = crypto.createHash(<span class=\"string\">'sha1'</span>);</div><div class=\"line\">\tkey = shasum.update(key + <span class=\"string\">\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"</span>).digest(<span class=\"string\">'base64'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> headers = [</div><div class=\"line\">\t\t<span class=\"string\">'HTTP/1.1 101 Switching Protocols'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'Upgrade: websocket'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'Connection: Upgrade'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'Sec-WebSocket-Accept: '</span> + key,</div><div class=\"line\">\t\t<span class=\"string\">'Sec-WebSocket-Protocol: '</span> + protocol</div><div class=\"line\">\t];</div><div class=\"line\">\t<span class=\"comment\">// 让数据立即发送</span></div><div class=\"line\">\tsocket.setNoDelay(<span class=\"literal\">true</span>);</div><div class=\"line\">\tsocket.write(headers.concat(<span class=\"string\">''</span>, <span class=\"string\">''</span>).join(<span class=\"string\">'\\r\\n'</span>));</div><div class=\"line\">\t<span class=\"comment\">// 建立服务器端WebSocket连接</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> websocket = <span class=\"keyword\">new</span> WebSocket();</div><div class=\"line\">\twebsocket.setSocket(socket);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>5. TLS服务（安全方面）\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 服务端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> tls = <span class=\"built_in\">require</span>(<span class=\"string\">'tls'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\tkey: fs.readFileSync(<span class=\"string\">'./keys/server.key'</span>),</div><div class=\"line\">\tcert: fs.readFileSync(<span class=\"string\">'./keys/server.crt'</span>),</div><div class=\"line\">\trequestCert: <span class=\"literal\">true</span>,</div><div class=\"line\">\tca: [ fs.readFileSync(<span class=\"string\">'./keys/ca.crt'</span>) ]</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> server = tls.createServer(options, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stream</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'server connected'</span>, stream.authorized ? <span class=\"string\">'authorized'</span> : <span class=\"string\">'unauthorized'</span>);</div><div class=\"line\">\tstream.write(<span class=\"string\">\"welcome!\\n\"</span>);</div><div class=\"line\">\tstream.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">\tstream.pipe(stream);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">8000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'server bound'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>// 测试证书是否正常\n`$ openssl s_client -connect 127.0.0.1:8000`\n\n客户端：\n// 创建私钥\n`$ openssl genrsa -out client.key 1024`\n// 生成CSR\n`$ openssl req -new -key client.key -out client.csr`\n// 生成签名证书\n`$ openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in client.csr -out client.crt`\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tls = <span class=\"built_in\">require</span>(<span class=\"string\">'tls'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\tkey: fs.readFileSync(<span class=\"string\">'./keys/client.key'</span>),</div><div class=\"line\">\tcert: fs.readFileSync(<span class=\"string\">'./keys/client.crt'</span>),</div><div class=\"line\">\tca: [ fs.readFileSync(<span class=\"string\">'./keys/ca.crt'</span>) ]</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> stream = tls.connect(<span class=\"number\">8000</span>, options, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'client connected'</span>, stream.authorized ? <span class=\"string\">'authorized'</span> : <span class=\"string\">'unauthorized'</span>);</div><div class=\"line\">\tprocess.stdin.pipe(stream);</div><div class=\"line\">&#125;);</div><div class=\"line\">stream.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">stream.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;);</div><div class=\"line\">stream.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tserver.close();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>6. HTTPS服务\n    服务端：\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\tkey: fs.readFileSync(<span class=\"string\">'./keys/server.key'</span>),</div><div class=\"line\">\tcert: fs.readFileSync(<span class=\"string\">'./keys/server.crt'</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\">https.createServer(options, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">res.writeHead(<span class=\"number\">200</span>);</div><div class=\"line\">\tres.end(<span class=\"string\">\"hello world\\n\"</span>);</div><div class=\"line\">&#125;).listen(<span class=\"number\">8000</span>);</div></pre></td></tr></table></figure>\n<pre><code>客户端：\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\thostname: <span class=\"string\">'localhost'</span>,</div><div class=\"line\">\tport: <span class=\"number\">8000</span>,</div><div class=\"line\">\tpath: <span class=\"string\">'/'</span>,</div><div class=\"line\">\tmethod: <span class=\"string\">'GET'</span>,</div><div class=\"line\">\tkey: fs.readFileSync(<span class=\"string\">'./keys/client.key'</span>),</div><div class=\"line\">\tcert: fs.readFileSync(<span class=\"string\">'./keys/client.crt'</span>),</div><div class=\"line\">\tca: [fs.readFileSync(<span class=\"string\">'./keys/ca.crt'</span>)]</div><div class=\"line\">&#125;;</div><div class=\"line\">options.agent = <span class=\"keyword\">new</span> https.Agent(options);</div><div class=\"line\"><span class=\"keyword\">var</span> req = https.request(options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">\tres.setEncoding(<span class=\"string\">'utf-8'</span>);</div><div class=\"line\">\tres.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(d);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">req.end();</div><div class=\"line\">req.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(e);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"玩转进程\"><a href=\"#玩转进程\" class=\"headerlink\" title=\"玩转进程\"></a>玩转进程</h2><pre><code>node提供了child_process.fork()实现进程的复制\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">\tres.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'Hello World\\n'</span>);</div><div class=\"line\">&#125;).listen(<span class=\"built_in\">Math</span>.round((<span class=\"number\">1</span> + <span class=\"built_in\">Math</span>.random()) * <span class=\"number\">1000</span>), <span class=\"string\">'127.0.0.1'</span>);</div></pre></td></tr></table></figure>\n<pre><code>运行node worker.js，监听?1000到2000之间的端口。\n\n以下是master.js\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fork = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).fork;</div><div class=\"line\"><span class=\"keyword\">var</span> cpus = <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>).cpus();</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; cpus.length; i++) &#123;</div><div class=\"line\">\tfork(<span class=\"string\">'./worker.js'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>这是著名的master-worker模式，主从模式\n\n//创建子进程\nchild_process模块提供了四个方法创建子进程\nspawn()        执行命令\nexec()            执行命令        可设置时间\nexecFile()        执行文件        可设置时间\nfork()            执行javascript\n后面3中方法都是spawn()的延伸\n//实例work.js\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cp = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\">cp.spawn(<span class=\"string\">'node'</span>, [<span class=\"string\">'worker.js'</span>]);</div><div class=\"line\">cp.exec(<span class=\"string\">'node worker.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, stdout, stderr</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// some code</span></div><div class=\"line\">&#125;);</div><div class=\"line\">cp.execFile(<span class=\"string\">'worker.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, stdout, stderr</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// some code</span></div><div class=\"line\">&#125;);</div><div class=\"line\">cp.fork(<span class=\"string\">'./worker.js'</span>)</div></pre></td></tr></table></figure>\n<pre><code>//进程间通信\n在浏览器中，javascript主线程和UI渲染是一个线程，渲染UI和执行js是互相阻塞的\nhtml5提出来webworker API，创建工作线程在后台运行\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'worker.js'</span>);</div><div class=\"line\">worker.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'result'</span>).textContent = event.data;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<pre><code>work.js代码如下\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">1</span>;</div><div class=\"line\">search: <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">\tn += <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"built_in\">Math</span>.sqrt(n); i += <span class=\"number\">1</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n  i == <span class=\"number\">0</span>) %</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span> search;</div><div class=\"line\">\t<span class=\"comment\">// found a prime</span></div><div class=\"line\">\tpostMessage(n);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>主线程和工作线程通过onmessage()和postMessage()进行通信，子进程对象由send方法\n// parent.js\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cp = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> n = cp.fork(__dirname + <span class=\"string\">'/sub.js'</span>);</div><div class=\"line\">n.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'PARENT got message:'</span>, m);</div><div class=\"line\">&#125;);</div><div class=\"line\">n.send(&#123;hello: <span class=\"string\">'world'</span>&#125;);</div><div class=\"line\"><span class=\"comment\">// sub.js</span></div><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'CHILD got message:'</span>, m);</div><div class=\"line\">&#125;);</div><div class=\"line\">process.send(&#123;foo: <span class=\"string\">'bar'</span>&#125;);</div></pre></td></tr></table></figure>\n<pre><code>//进程间通信原理\n实现进程间的技术有：管道，tcp，socket，共享内存，等。\n//句柄传递\n一个端口只能由一个工作进程监听，解决方案是有主进程监听一个80端口，然后\n分发到其他子线程去\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// parent.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).fork(<span class=\"string\">'child.js'</span>);</div><div class=\"line\"><span class=\"comment\">// Open up the server object and send the handle</span></div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>).createServer();</div><div class=\"line\">server.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\tsocket.end(<span class=\"string\">'handled by parent\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">1337</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tchild.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//child.js</span></div><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m, server</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (m === <span class=\"string\">'server'</span>) &#123;</div><div class=\"line\">\t\tserver.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\t\t\tsocket.end(<span class=\"string\">'handled by child\\n'</span>);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将服务发送到多个子进程实例</span></div><div class=\"line\"><span class=\"comment\">//parent.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> cp = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> child1 = cp.fork(<span class=\"string\">'child.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> child2 = cp.fork(<span class=\"string\">'child.js'</span>);</div><div class=\"line\"><span class=\"comment\">// Open up the server object and send the handle</span></div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>).createServer();</div><div class=\"line\">server.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\tsocket.end(<span class=\"string\">'handled by parent\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">1337</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tchild1.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">\tchild2.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//child.js</span></div><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m, server</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">if</span> (m === <span class=\"string\">'server'</span>) &#123;</div><div class=\"line\">\tserver.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\t\tsocket.end(<span class=\"string\">'handled by child, pid is '</span> + process.pid + <span class=\"string\">'\\n'</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//最终版，请求全部由子进程处理，</span></div><div class=\"line\"><span class=\"comment\">//parent,js</span></div><div class=\"line\"><span class=\"keyword\">var</span> cp = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> child1 = cp.fork(<span class=\"string\">'child.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> child2 = cp.fork(<span class=\"string\">'child.js'</span>);</div><div class=\"line\"><span class=\"comment\">// Open up the server object and send the handle</span></div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>).createServer();</div><div class=\"line\">server.listen(<span class=\"number\">1337</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tchild1.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">\tchild2.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">\tserver.close(); <span class=\"comment\">//关闭主线程的服务</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//child.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">\tres.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'handled by child, pid is '</span> + process.pid + <span class=\"string\">'\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m, tcp</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (m === <span class=\"string\">'server'</span>) &#123;</div><div class=\"line\">\t\ttcp.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\t\t\tserver.emit(<span class=\"string\">'connection'</span>, socket);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>&lt;p&gt;\nsend发送的句柄类型：\n    net.Socket。TCP\n    net.Server。TCP服务\n\n    net.Native。C++\n    dgram.Socket。UDP\n    dgram.Native。C++\n//进程事件\nerror：\nexit：\nclose：\ndisconnect：\n&lt;/p&gt;\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//自动重启线程</span></div><div class=\"line\"><span class=\"comment\">//master.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> fork = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).fork;</div><div class=\"line\"><span class=\"keyword\">var</span> cpus = <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>).cpus();</div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>).createServer();</div><div class=\"line\">server.listen(<span class=\"number\">1337</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> workers = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> createWorker = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">var</span> worker = fork(__dirname + <span class=\"string\">'/worker.js'</span>);</div><div class=\"line\"><span class=\"comment\">//退出时重新启动新的线程</span></div><div class=\"line\">worker.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Worker '</span> + worker.pid + <span class=\"string\">' exited.'</span>);</div><div class=\"line\">\t<span class=\"keyword\">delete</span> workers[worker.pid];</div><div class=\"line\">\tcreateWorker();</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 句柄转发</span></div><div class=\"line\">worker.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">workers[worker.pid] = worker;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Create worker. pid: '</span> + worker.pid);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; cpus.length; i++) &#123;</div><div class=\"line\">createWorker();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 进程自己退出让所有工作进程退出</span></div><div class=\"line\">process.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> pid <span class=\"keyword\">in</span> workers) &#123;</div><div class=\"line\">\t\tworkers[pid].kill();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//work.js  考虑处理异常</span></div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">\tres.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'handled by child, pid is '</span> + process.pid + <span class=\"string\">'\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> worker;</div><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m, tcp</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (m === <span class=\"string\">'server'</span>) &#123;</div><div class=\"line\">\t\tworker = tcp;</div><div class=\"line\">\t\tworker.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\t\t\tserver.emit(<span class=\"string\">'connection'</span>, socket);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">process.on(<span class=\"string\">'uncaughtException'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tprocess.send(&#123;act: <span class=\"string\">'suicide'</span>&#125;);</div><div class=\"line\"><span class=\"comment\">// 停止接收新的连接</span></div><div class=\"line\">\tworker.close(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// 连接断开后退出进程</span></div><div class=\"line\">\t\tprocess.exit(<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Node学习","date":"2015-12-19T10:58:56.000Z","_content":"** node学习： ** <Excerpt in index | 首页摘要>\n    nodejs学习的方法，进阶路线\n <!-- more -->\n<The rest of contents | 余下全文>\n\n## 一 学习内容\n1. node的常用模块,buffer,fs,http,net等.\n2. node常用框架express,mongoose,koa,mocha,should\n3. 部署上线,pm2,grunt,\n\n## 二 学习要点\n1. 了解node的特性和语法\n2. 编写扩展node模块\n3. 用异步的思想编程\n4. 常用框架的使用\n5. 回调的解决方案(promise)\n\n## 三 入门实战\n1. 参照nodejs实战上的微博系统,使用express4.x+ mongoose实现\n2. 使用socket.io实现一个简单的即时聊天的系统\n3. 使用mongoose+express+node开发一个论坛系统\n4. 使用koa+mongoose做一个简单的cms或者权限系统\n\n## 四 学习方法\n * 建议有基础的直接开始入门实战,在练习中熟悉node的api,做完一个项目再去看书\n * 不要一直看书,没什么效果的,实战永远是最有效的\n","source":"_posts/node-study.md","raw":"title: node学习\ndate: 2015-12-19 18:58:56\ntags: node\ncategories: 编程语言\n---\n** node学习： ** <Excerpt in index | 首页摘要>\n    nodejs学习的方法，进阶路线\n <!-- more -->\n<The rest of contents | 余下全文>\n\n## 一 学习内容\n1. node的常用模块,buffer,fs,http,net等.\n2. node常用框架express,mongoose,koa,mocha,should\n3. 部署上线,pm2,grunt,\n\n## 二 学习要点\n1. 了解node的特性和语法\n2. 编写扩展node模块\n3. 用异步的思想编程\n4. 常用框架的使用\n5. 回调的解决方案(promise)\n\n## 三 入门实战\n1. 参照nodejs实战上的微博系统,使用express4.x+ mongoose实现\n2. 使用socket.io实现一个简单的即时聊天的系统\n3. 使用mongoose+express+node开发一个论坛系统\n4. 使用koa+mongoose做一个简单的cms或者权限系统\n\n## 四 学习方法\n * 建议有基础的直接开始入门实战,在练习中熟悉node的api,做完一个项目再去看书\n * 不要一直看书,没什么效果的,实战永远是最有效的\n","slug":"node-study","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla7200348p9kvi4q8inc","content":"<p><strong> node学习： </strong> <Excerpt in index | 首页摘要><br>    nodejs学习的方法，进阶路线<br> <a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"一-学习内容\"><a href=\"#一-学习内容\" class=\"headerlink\" title=\"一 学习内容\"></a>一 学习内容</h2><ol>\n<li>node的常用模块,buffer,fs,http,net等.</li>\n<li>node常用框架express,mongoose,koa,mocha,should</li>\n<li>部署上线,pm2,grunt,</li>\n</ol>\n<h2 id=\"二-学习要点\"><a href=\"#二-学习要点\" class=\"headerlink\" title=\"二 学习要点\"></a>二 学习要点</h2><ol>\n<li>了解node的特性和语法</li>\n<li>编写扩展node模块</li>\n<li>用异步的思想编程</li>\n<li>常用框架的使用</li>\n<li>回调的解决方案(promise)</li>\n</ol>\n<h2 id=\"三-入门实战\"><a href=\"#三-入门实战\" class=\"headerlink\" title=\"三 入门实战\"></a>三 入门实战</h2><ol>\n<li>参照nodejs实战上的微博系统,使用express4.x+ mongoose实现</li>\n<li>使用socket.io实现一个简单的即时聊天的系统</li>\n<li>使用mongoose+express+node开发一个论坛系统</li>\n<li>使用koa+mongoose做一个简单的cms或者权限系统</li>\n</ol>\n<h2 id=\"四-学习方法\"><a href=\"#四-学习方法\" class=\"headerlink\" title=\"四 学习方法\"></a>四 学习方法</h2><ul>\n<li>建议有基础的直接开始入门实战,在练习中熟悉node的api,做完一个项目再去看书</li>\n<li>不要一直看书,没什么效果的,实战永远是最有效的</li>\n</ul>\n","excerpt":"<p><strong> node学习： </strong> <Excerpt in index | 首页摘要><br>    nodejs学习的方法，进阶路线<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"一-学习内容\"><a href=\"#一-学习内容\" class=\"headerlink\" title=\"一 学习内容\"></a>一 学习内容</h2><ol>\n<li>node的常用模块,buffer,fs,http,net等.</li>\n<li>node常用框架express,mongoose,koa,mocha,should</li>\n<li>部署上线,pm2,grunt,</li>\n</ol>\n<h2 id=\"二-学习要点\"><a href=\"#二-学习要点\" class=\"headerlink\" title=\"二 学习要点\"></a>二 学习要点</h2><ol>\n<li>了解node的特性和语法</li>\n<li>编写扩展node模块</li>\n<li>用异步的思想编程</li>\n<li>常用框架的使用</li>\n<li>回调的解决方案(promise)</li>\n</ol>\n<h2 id=\"三-入门实战\"><a href=\"#三-入门实战\" class=\"headerlink\" title=\"三 入门实战\"></a>三 入门实战</h2><ol>\n<li>参照nodejs实战上的微博系统,使用express4.x+ mongoose实现</li>\n<li>使用socket.io实现一个简单的即时聊天的系统</li>\n<li>使用mongoose+express+node开发一个论坛系统</li>\n<li>使用koa+mongoose做一个简单的cms或者权限系统</li>\n</ol>\n<h2 id=\"四-学习方法\"><a href=\"#四-学习方法\" class=\"headerlink\" title=\"四 学习方法\"></a>四 学习方法</h2><ul>\n<li>建议有基础的直接开始入门实战,在练习中熟悉node的api,做完一个项目再去看书</li>\n<li>不要一直看书,没什么效果的,实战永远是最有效的</li>\n</ul>"},{"title":"阿拉伯数字转汉字写法","date":"2017-07-29T14:25:27.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n找工作时看到“某团”的题目，把一个int的数字转为汉字的读法，比如123，转成一百二十三，限时20分钟。如果二十分钟做不出来，简历就不要投了。说实话，20分钟能调通的人真的不多，感觉某团还是装逼成分太多！\n<!-- more -->\n<The rest of contents | 余下全文>\n## 题目要求\n用java实现，把int的数字转为汉字读音，比如123，转成一百二十三，10020转为一万零二十\n\n## 思路分析\n中文计数的特点，以万为小节，万以内的都是以“十百千”为权位单独计数，比如一千百，一千千都是非法的。\n而“十百千”这样的权位可以与“万”，“亿”进行搭配，二十亿，五千万等等。\n\n## 中文数字的零\n中文的零的使用总结起来有三个规则，\n* 以10000为小节，结尾是0，不使用零，比如1020\n* 以10000为小节，小节内两个非0数字之间需要零\n* 小节的千位是0，若小节前无其他数字，不用零，否者用零\n\n## 完整代码（参考算法的乐趣第四章）\n\n```java\npublic class NumberTransfer {\n    public final String[] chnNumChar = new String[]{\"零\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\", \"七\", \"八\", \"九\"};\n    public final String[] chnUnitSection = new String[]{\"\", \"万\", \"亿\", \"万亿\"};\n    public final String[] chnUnitChar = new String[]{\"\", \"十\", \"百\", \"千\"};\n\n    @Test\n    public void testNumberToChinese() {\n        int[] nums = new int[]{304, 4006, 4000, 10003, 10030, 21010011, 101101101};\n        for (int i = 0; i < nums.length; i++) {\n            System.out.println(numberToChinese(nums[i]));\n        }\n    }\n\n    public String numberToChinese(int num) {\n        String strIns;\n        String chnStr = \"\";\n        int unitPos = 0;\n        boolean needZero = false;\n        if (num == 0)\n            return \"零\";\n        while (num > 0) {\n            strIns = \"\";\n            int section = num % 10000;\n            if (needZero) {\n                chnStr = chnNumChar[0] + chnStr;\n            }\n            // 添加节权（万，亿）\n            strIns += (section != 0) ? chnUnitSection[unitPos] : chnUnitSection[0];\n            chnStr = strIns + chnStr;\n            // 以万为单位，求万以内的权位\n            chnStr = sectionToChinese(section, chnStr);\n            needZero = (section < 1000) && (section > 0);\n            num = num / 10000;\n            unitPos++;\n        }\n        return chnStr;\n    }\n\n    private String sectionToChinese(int section, String chnStr) {\n        String strIns;\n        int unitPos = 0;\n        boolean zero = true;\n        while (section > 0) {\n            int v = section % 10;\n            if (v == 0) {\n                if (section == 0 || !zero) {\n                    zero = true;// zero确保不会出现多个零\n                    chnStr = chnNumChar[v] + chnStr;\n                }\n            } else {\n                zero = false;\n                strIns = chnNumChar[v]; // 此位置对应等中文数字\n                strIns += chnUnitChar[unitPos];// 此位置对应的权位\n                chnStr = strIns + chnStr;\n            }\n            unitPos++;\n            section = section / 10;\n        }\n        return chnStr;\n    }\n}\n```\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/num2Chinese.md","raw":"title: 阿拉伯数字转汉字写法\ndate: 2017-07-29 22:25:27\ntags: 算法\ncategories: algorithm\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n找工作时看到“某团”的题目，把一个int的数字转为汉字的读法，比如123，转成一百二十三，限时20分钟。如果二十分钟做不出来，简历就不要投了。说实话，20分钟能调通的人真的不多，感觉某团还是装逼成分太多！\n<!-- more -->\n<The rest of contents | 余下全文>\n## 题目要求\n用java实现，把int的数字转为汉字读音，比如123，转成一百二十三，10020转为一万零二十\n\n## 思路分析\n中文计数的特点，以万为小节，万以内的都是以“十百千”为权位单独计数，比如一千百，一千千都是非法的。\n而“十百千”这样的权位可以与“万”，“亿”进行搭配，二十亿，五千万等等。\n\n## 中文数字的零\n中文的零的使用总结起来有三个规则，\n* 以10000为小节，结尾是0，不使用零，比如1020\n* 以10000为小节，小节内两个非0数字之间需要零\n* 小节的千位是0，若小节前无其他数字，不用零，否者用零\n\n## 完整代码（参考算法的乐趣第四章）\n\n```java\npublic class NumberTransfer {\n    public final String[] chnNumChar = new String[]{\"零\", \"一\", \"二\", \"三\", \"四\", \"五\", \"六\", \"七\", \"八\", \"九\"};\n    public final String[] chnUnitSection = new String[]{\"\", \"万\", \"亿\", \"万亿\"};\n    public final String[] chnUnitChar = new String[]{\"\", \"十\", \"百\", \"千\"};\n\n    @Test\n    public void testNumberToChinese() {\n        int[] nums = new int[]{304, 4006, 4000, 10003, 10030, 21010011, 101101101};\n        for (int i = 0; i < nums.length; i++) {\n            System.out.println(numberToChinese(nums[i]));\n        }\n    }\n\n    public String numberToChinese(int num) {\n        String strIns;\n        String chnStr = \"\";\n        int unitPos = 0;\n        boolean needZero = false;\n        if (num == 0)\n            return \"零\";\n        while (num > 0) {\n            strIns = \"\";\n            int section = num % 10000;\n            if (needZero) {\n                chnStr = chnNumChar[0] + chnStr;\n            }\n            // 添加节权（万，亿）\n            strIns += (section != 0) ? chnUnitSection[unitPos] : chnUnitSection[0];\n            chnStr = strIns + chnStr;\n            // 以万为单位，求万以内的权位\n            chnStr = sectionToChinese(section, chnStr);\n            needZero = (section < 1000) && (section > 0);\n            num = num / 10000;\n            unitPos++;\n        }\n        return chnStr;\n    }\n\n    private String sectionToChinese(int section, String chnStr) {\n        String strIns;\n        int unitPos = 0;\n        boolean zero = true;\n        while (section > 0) {\n            int v = section % 10;\n            if (v == 0) {\n                if (section == 0 || !zero) {\n                    zero = true;// zero确保不会出现多个零\n                    chnStr = chnNumChar[v] + chnStr;\n                }\n            } else {\n                zero = false;\n                strIns = chnNumChar[v]; // 此位置对应等中文数字\n                strIns += chnUnitChar[unitPos];// 此位置对应的权位\n                chnStr = strIns + chnStr;\n            }\n            unitPos++;\n            section = section / 10;\n        }\n        return chnStr;\n    }\n}\n```\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"num2Chinese","published":1,"updated":"2017-07-29T14:50:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla7600388p9ksl6cedz0","content":"<p><strong> 阿拉伯数字转汉字写法：</strong> <Excerpt in index | 首页摘要><br>找工作时看到“某团”的题目，把一个int的数字转为汉字的读法，比如123，转成一百二十三，限时20分钟。如果二十分钟做不出来，简历就不要投了。说实话，20分钟能调通的人真的不多，感觉某团还是装逼成分太多！<br><a id=\"more\"></a></p>\n<p><The rest of contents | 余下全文></p>\n<h2 id=\"题目要求\"><a href=\"#题目要求\" class=\"headerlink\" title=\"题目要求\"></a>题目要求</h2><p>用java实现，把int的数字转为汉字读音，比如123，转成一百二十三，10020转为一万零二十</p>\n<h2 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h2><p>中文计数的特点，以万为小节，万以内的都是以“十百千”为权位单独计数，比如一千百，一千千都是非法的。<br>而“十百千”这样的权位可以与“万”，“亿”进行搭配，二十亿，五千万等等。</p>\n<h2 id=\"中文数字的零\"><a href=\"#中文数字的零\" class=\"headerlink\" title=\"中文数字的零\"></a>中文数字的零</h2><p>中文的零的使用总结起来有三个规则，</p>\n<ul>\n<li>以10000为小节，结尾是0，不使用零，比如1020</li>\n<li>以10000为小节，小节内两个非0数字之间需要零</li>\n<li>小节的千位是0，若小节前无其他数字，不用零，否者用零</li>\n</ul>\n<h2 id=\"完整代码（参考算法的乐趣第四章）\"><a href=\"#完整代码（参考算法的乐趣第四章）\" class=\"headerlink\" title=\"完整代码（参考算法的乐趣第四章）\"></a>完整代码（参考算法的乐趣第四章）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumberTransfer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String[] chnNumChar = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"零\"</span>, <span class=\"string\">\"一\"</span>, <span class=\"string\">\"二\"</span>, <span class=\"string\">\"三\"</span>, <span class=\"string\">\"四\"</span>, <span class=\"string\">\"五\"</span>, <span class=\"string\">\"六\"</span>, <span class=\"string\">\"七\"</span>, <span class=\"string\">\"八\"</span>, <span class=\"string\">\"九\"</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String[] chnUnitSection = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"\"</span>, <span class=\"string\">\"万\"</span>, <span class=\"string\">\"亿\"</span>, <span class=\"string\">\"万亿\"</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String[] chnUnitChar = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"\"</span>, <span class=\"string\">\"十\"</span>, <span class=\"string\">\"百\"</span>, <span class=\"string\">\"千\"</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testNumberToChinese</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span>[] nums = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">304</span>, <span class=\"number\">4006</span>, <span class=\"number\">4000</span>, <span class=\"number\">10003</span>, <span class=\"number\">10030</span>, <span class=\"number\">21010011</span>, <span class=\"number\">101101101</span>&#125;;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</div><div class=\"line\">            System.out.println(numberToChinese(nums[i]));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">numberToChinese</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">        String strIns;</div><div class=\"line\">        String chnStr = <span class=\"string\">\"\"</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> unitPos = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> needZero = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (num == <span class=\"number\">0</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"零\"</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (num &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            strIns = <span class=\"string\">\"\"</span>;</div><div class=\"line\">            <span class=\"keyword\">int</span> section = num % <span class=\"number\">10000</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (needZero) &#123;</div><div class=\"line\">                chnStr = chnNumChar[<span class=\"number\">0</span>] + chnStr;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">// 添加节权（万，亿）</span></div><div class=\"line\">            strIns += (section != <span class=\"number\">0</span>) ? chnUnitSection[unitPos] : chnUnitSection[<span class=\"number\">0</span>];</div><div class=\"line\">            chnStr = strIns + chnStr;</div><div class=\"line\">            <span class=\"comment\">// 以万为单位，求万以内的权位</span></div><div class=\"line\">            chnStr = sectionToChinese(section, chnStr);</div><div class=\"line\">            needZero = (section &lt; <span class=\"number\">1000</span>) &amp;&amp; (section &gt; <span class=\"number\">0</span>);</div><div class=\"line\">            num = num / <span class=\"number\">10000</span>;</div><div class=\"line\">            unitPos++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> chnStr;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">sectionToChinese</span><span class=\"params\">(<span class=\"keyword\">int</span> section, String chnStr)</span> </span>&#123;</div><div class=\"line\">        String strIns;</div><div class=\"line\">        <span class=\"keyword\">int</span> unitPos = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> zero = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (section &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> v = section % <span class=\"number\">10</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (v == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (section == <span class=\"number\">0</span> || !zero) &#123;</div><div class=\"line\">                    zero = <span class=\"keyword\">true</span>;<span class=\"comment\">// zero确保不会出现多个零</span></div><div class=\"line\">                    chnStr = chnNumChar[v] + chnStr;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                zero = <span class=\"keyword\">false</span>;</div><div class=\"line\">                strIns = chnNumChar[v]; <span class=\"comment\">// 此位置对应等中文数字</span></div><div class=\"line\">                strIns += chnUnitChar[unitPos];<span class=\"comment\">// 此位置对应的权位</span></div><div class=\"line\">                chnStr = strIns + chnStr;</div><div class=\"line\">            &#125;</div><div class=\"line\">            unitPos++;</div><div class=\"line\">            section = section / <span class=\"number\">10</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> chnStr;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 阿拉伯数字转汉字写法：</strong> <Excerpt in index | 首页摘要><br>找工作时看到“某团”的题目，把一个int的数字转为汉字的读法，比如123，转成一百二十三，限时20分钟。如果二十分钟做不出来，简历就不要投了。说实话，20分钟能调通的人真的不多，感觉某团还是装逼成分太多！<br>","more":"</p>\n<p><The rest of contents | 余下全文></p>\n<h2 id=\"题目要求\"><a href=\"#题目要求\" class=\"headerlink\" title=\"题目要求\"></a>题目要求</h2><p>用java实现，把int的数字转为汉字读音，比如123，转成一百二十三，10020转为一万零二十</p>\n<h2 id=\"思路分析\"><a href=\"#思路分析\" class=\"headerlink\" title=\"思路分析\"></a>思路分析</h2><p>中文计数的特点，以万为小节，万以内的都是以“十百千”为权位单独计数，比如一千百，一千千都是非法的。<br>而“十百千”这样的权位可以与“万”，“亿”进行搭配，二十亿，五千万等等。</p>\n<h2 id=\"中文数字的零\"><a href=\"#中文数字的零\" class=\"headerlink\" title=\"中文数字的零\"></a>中文数字的零</h2><p>中文的零的使用总结起来有三个规则，</p>\n<ul>\n<li>以10000为小节，结尾是0，不使用零，比如1020</li>\n<li>以10000为小节，小节内两个非0数字之间需要零</li>\n<li>小节的千位是0，若小节前无其他数字，不用零，否者用零</li>\n</ul>\n<h2 id=\"完整代码（参考算法的乐趣第四章）\"><a href=\"#完整代码（参考算法的乐趣第四章）\" class=\"headerlink\" title=\"完整代码（参考算法的乐趣第四章）\"></a>完整代码（参考算法的乐趣第四章）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumberTransfer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String[] chnNumChar = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"零\"</span>, <span class=\"string\">\"一\"</span>, <span class=\"string\">\"二\"</span>, <span class=\"string\">\"三\"</span>, <span class=\"string\">\"四\"</span>, <span class=\"string\">\"五\"</span>, <span class=\"string\">\"六\"</span>, <span class=\"string\">\"七\"</span>, <span class=\"string\">\"八\"</span>, <span class=\"string\">\"九\"</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String[] chnUnitSection = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"\"</span>, <span class=\"string\">\"万\"</span>, <span class=\"string\">\"亿\"</span>, <span class=\"string\">\"万亿\"</span>&#125;;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String[] chnUnitChar = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"\"</span>, <span class=\"string\">\"十\"</span>, <span class=\"string\">\"百\"</span>, <span class=\"string\">\"千\"</span>&#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testNumberToChinese</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span>[] nums = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">304</span>, <span class=\"number\">4006</span>, <span class=\"number\">4000</span>, <span class=\"number\">10003</span>, <span class=\"number\">10030</span>, <span class=\"number\">21010011</span>, <span class=\"number\">101101101</span>&#125;;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</div><div class=\"line\">            System.out.println(numberToChinese(nums[i]));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">numberToChinese</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</div><div class=\"line\">        String strIns;</div><div class=\"line\">        String chnStr = <span class=\"string\">\"\"</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> unitPos = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> needZero = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (num == <span class=\"number\">0</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"零\"</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (num &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            strIns = <span class=\"string\">\"\"</span>;</div><div class=\"line\">            <span class=\"keyword\">int</span> section = num % <span class=\"number\">10000</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (needZero) &#123;</div><div class=\"line\">                chnStr = chnNumChar[<span class=\"number\">0</span>] + chnStr;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">// 添加节权（万，亿）</span></div><div class=\"line\">            strIns += (section != <span class=\"number\">0</span>) ? chnUnitSection[unitPos] : chnUnitSection[<span class=\"number\">0</span>];</div><div class=\"line\">            chnStr = strIns + chnStr;</div><div class=\"line\">            <span class=\"comment\">// 以万为单位，求万以内的权位</span></div><div class=\"line\">            chnStr = sectionToChinese(section, chnStr);</div><div class=\"line\">            needZero = (section &lt; <span class=\"number\">1000</span>) &amp;&amp; (section &gt; <span class=\"number\">0</span>);</div><div class=\"line\">            num = num / <span class=\"number\">10000</span>;</div><div class=\"line\">            unitPos++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> chnStr;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">sectionToChinese</span><span class=\"params\">(<span class=\"keyword\">int</span> section, String chnStr)</span> </span>&#123;</div><div class=\"line\">        String strIns;</div><div class=\"line\">        <span class=\"keyword\">int</span> unitPos = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> zero = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (section &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> v = section % <span class=\"number\">10</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (v == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (section == <span class=\"number\">0</span> || !zero) &#123;</div><div class=\"line\">                    zero = <span class=\"keyword\">true</span>;<span class=\"comment\">// zero确保不会出现多个零</span></div><div class=\"line\">                    chnStr = chnNumChar[v] + chnStr;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                zero = <span class=\"keyword\">false</span>;</div><div class=\"line\">                strIns = chnNumChar[v]; <span class=\"comment\">// 此位置对应等中文数字</span></div><div class=\"line\">                strIns += chnUnitChar[unitPos];<span class=\"comment\">// 此位置对应的权位</span></div><div class=\"line\">                chnStr = strIns + chnStr;</div><div class=\"line\">            &#125;</div><div class=\"line\">            unitPos++;</div><div class=\"line\">            section = section / <span class=\"number\">10</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> chnStr;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Npm使用详解","date":"2016-11-17T12:05:56.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n    npm所有的常用知识都在这里，没错，所有的！！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## node版本控制\n1. 使用nvm进行版本控制\n```\n<!-- unix -->\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash\n<!-- windows -->\nhttps://github.com/coreybutler/nvm-windows需要自己下载\n<!-- 安装node -->\nnvm install v4.4\n<!-- 选择默认版本 -->\nnvm alias default v4.4\n```\n2. 镜像管理,使用cnpm进行加速\n```\n<!-- 使用cnpm命令 -->\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n<!-- 使用npm别名 -->\nalias cnpm=\"npm --registry=https://registry.npm.taobao.org \\\n--cache=$HOME/.npm/.cache/cnpm \\\n--disturl=https://npm.taobao.org/dist \\\n--userconfig=$HOME/.cnpmrc\"\n```\n3. 修改nvm镜像地址进行下载加速\n```\nexport NVM_NODEJS_ORG_MIRROR=https://nodejs.org/dist\nnvm install node\n\nNVM_NODEJS_ORG_MIRROR=https://nodejs.org/dist nvm install 4.2\n```\n\n## 常用命令\n1. 安装命令,\n```\nnpm install;\nnpm install --save-dev;\nnpm install -g;\nnpm uninstall name;\n```\n2. npm命令\nnpm可以运行package.json的script命令\n```\n<!-- 集成命令 -->\nnpm start\nnpm restart\nnpm test\nnpm stop\nnpm init（初始化项目时使用）\nnpm publish(发布模块需要使用)\nnpm update\nnpm search\nnpm list\nnpm view moduleName(查看模块依赖)\n<!-- script命令 ,在script中定义好-->\nnpm run build\nnpm run dev\n```\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/npm-detail.md","raw":"title: npm使用详解\ndate: 2016-11-17 20:05:56\ntags: node\ncategories: 编程语言\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n    npm所有的常用知识都在这里，没错，所有的！！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## node版本控制\n1. 使用nvm进行版本控制\n```\n<!-- unix -->\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash\n<!-- windows -->\nhttps://github.com/coreybutler/nvm-windows需要自己下载\n<!-- 安装node -->\nnvm install v4.4\n<!-- 选择默认版本 -->\nnvm alias default v4.4\n```\n2. 镜像管理,使用cnpm进行加速\n```\n<!-- 使用cnpm命令 -->\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n<!-- 使用npm别名 -->\nalias cnpm=\"npm --registry=https://registry.npm.taobao.org \\\n--cache=$HOME/.npm/.cache/cnpm \\\n--disturl=https://npm.taobao.org/dist \\\n--userconfig=$HOME/.cnpmrc\"\n```\n3. 修改nvm镜像地址进行下载加速\n```\nexport NVM_NODEJS_ORG_MIRROR=https://nodejs.org/dist\nnvm install node\n\nNVM_NODEJS_ORG_MIRROR=https://nodejs.org/dist nvm install 4.2\n```\n\n## 常用命令\n1. 安装命令,\n```\nnpm install;\nnpm install --save-dev;\nnpm install -g;\nnpm uninstall name;\n```\n2. npm命令\nnpm可以运行package.json的script命令\n```\n<!-- 集成命令 -->\nnpm start\nnpm restart\nnpm test\nnpm stop\nnpm init（初始化项目时使用）\nnpm publish(发布模块需要使用)\nnpm update\nnpm search\nnpm list\nnpm view moduleName(查看模块依赖)\n<!-- script命令 ,在script中定义好-->\nnpm run build\nnpm run dev\n```\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"npm-detail","published":1,"updated":"2016-11-27T07:18:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla78003c8p9kc961w0i1","content":"<p><strong> Npm使用详解：</strong> <Excerpt in index | 首页摘要><br>    npm所有的常用知识都在这里，没错，所有的！！<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"node版本控制\"><a href=\"#node版本控制\" class=\"headerlink\" title=\"node版本控制\"></a>node版本控制</h2><ol>\n<li><p>使用nvm进行版本控制</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- unix --&gt;</span></div><div class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</div><div class=\"line\"><span class=\"comment\">&lt;!-- windows --&gt;</span></div><div class=\"line\">https://github.com/coreybutler/nvm-windows需要自己下载</div><div class=\"line\"><span class=\"comment\">&lt;!-- 安装node --&gt;</span></div><div class=\"line\">nvm install v4.4</div><div class=\"line\"><span class=\"comment\">&lt;!-- 选择默认版本 --&gt;</span></div><div class=\"line\">nvm alias default v4.4</div></pre></td></tr></table></figure>\n</li>\n<li><p>镜像管理,使用cnpm进行加速</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 使用cnpm命令 --&gt;</span></div><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class=\"line\"><span class=\"comment\">&lt;!-- 使用npm别名 --&gt;</span></div><div class=\"line\">alias cnpm=\"npm --registry=https://registry.npm.taobao.org \\</div><div class=\"line\">--cache=$HOME/.npm/.cache/cnpm \\</div><div class=\"line\">--disturl=https://npm.taobao.org/dist \\</div><div class=\"line\">--userconfig=$HOME/.cnpmrc\"</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改nvm镜像地址进行下载加速</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">export <span class=\"attr\">NVM_NODEJS_ORG_MIRROR=</span>https://nodejs.org/dist</div><div class=\"line\">nvm install <span class=\"keyword\">node</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">NVM_NODEJS_ORG_MIRROR</span>=https://nodejs.org/dist nvm install <span class=\"number\">4.2</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ol>\n<li><p>安装命令,</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span>;</div><div class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save-dev;</span></div><div class=\"line\">npm <span class=\"keyword\">install</span> -g;</div><div class=\"line\">npm <span class=\"keyword\">uninstall</span> <span class=\"keyword\">name</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>npm命令<br>npm可以运行package.json的script命令</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 集成命令 --&gt;</span></div><div class=\"line\">npm start</div><div class=\"line\">npm restart</div><div class=\"line\">npm test</div><div class=\"line\">npm stop</div><div class=\"line\">npm init（初始化项目时使用）</div><div class=\"line\">npm publish(发布模块需要使用)</div><div class=\"line\">npm update</div><div class=\"line\">npm search</div><div class=\"line\">npm list</div><div class=\"line\">npm view moduleName(查看模块依赖)</div><div class=\"line\"><span class=\"comment\">&lt;!-- script命令 ,在script中定义好--&gt;</span></div><div class=\"line\">npm run build</div><div class=\"line\">npm run dev</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> Npm使用详解：</strong> <Excerpt in index | 首页摘要><br>    npm所有的常用知识都在这里，没错，所有的！！<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"node版本控制\"><a href=\"#node版本控制\" class=\"headerlink\" title=\"node版本控制\"></a>node版本控制</h2><ol>\n<li><p>使用nvm进行版本控制</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- unix --&gt;</span></div><div class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</div><div class=\"line\"><span class=\"comment\">&lt;!-- windows --&gt;</span></div><div class=\"line\">https://github.com/coreybutler/nvm-windows需要自己下载</div><div class=\"line\"><span class=\"comment\">&lt;!-- 安装node --&gt;</span></div><div class=\"line\">nvm install v4.4</div><div class=\"line\"><span class=\"comment\">&lt;!-- 选择默认版本 --&gt;</span></div><div class=\"line\">nvm alias default v4.4</div></pre></td></tr></table></figure>\n</li>\n<li><p>镜像管理,使用cnpm进行加速</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 使用cnpm命令 --&gt;</span></div><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class=\"line\"><span class=\"comment\">&lt;!-- 使用npm别名 --&gt;</span></div><div class=\"line\">alias cnpm=\"npm --registry=https://registry.npm.taobao.org \\</div><div class=\"line\">--cache=$HOME/.npm/.cache/cnpm \\</div><div class=\"line\">--disturl=https://npm.taobao.org/dist \\</div><div class=\"line\">--userconfig=$HOME/.cnpmrc\"</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改nvm镜像地址进行下载加速</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">export <span class=\"attr\">NVM_NODEJS_ORG_MIRROR=</span>https://nodejs.org/dist</div><div class=\"line\">nvm install <span class=\"keyword\">node</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">NVM_NODEJS_ORG_MIRROR</span>=https://nodejs.org/dist nvm install <span class=\"number\">4.2</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ol>\n<li><p>安装命令,</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span>;</div><div class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save-dev;</span></div><div class=\"line\">npm <span class=\"keyword\">install</span> -g;</div><div class=\"line\">npm <span class=\"keyword\">uninstall</span> <span class=\"keyword\">name</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>npm命令<br>npm可以运行package.json的script命令</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 集成命令 --&gt;</span></div><div class=\"line\">npm start</div><div class=\"line\">npm restart</div><div class=\"line\">npm test</div><div class=\"line\">npm stop</div><div class=\"line\">npm init（初始化项目时使用）</div><div class=\"line\">npm publish(发布模块需要使用)</div><div class=\"line\">npm update</div><div class=\"line\">npm search</div><div class=\"line\">npm list</div><div class=\"line\">npm view moduleName(查看模块依赖)</div><div class=\"line\"><span class=\"comment\">&lt;!-- script命令 ,在script中定义好--&gt;</span></div><div class=\"line\">npm run build</div><div class=\"line\">npm run dev</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Redis后台启动详细配置","date":"2017-05-15T14:58:07.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n  redis启动的时候有多种模式，后台启动，集群启动等等。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 说明\n在开发中一般都是在命令行中直接运行`redis-server`,但是这样命令行关闭，服务就停止了。\n如果要在后台运行redis服务，需要制定配置文件。这里以**ubuntu14**为例子\n\n## 准备配置文件\n查看‘/etc/redis/redis.conf’,没有可以创建一个，或者下载一个，配置文件位置没有要求\n\n## 修改配置文件\n把daemonize设置为yes，\n然后`redis-server /etc/redis/redis.conf`启动服务，\n\n## 查看服务\n`ps -ef|grep redis-server`查看是否有redis进程存在\n\n## 更多配置，在conf文件有说明\n```\n# 是否以后台daemon方式运行，默认是 no，一般我们会改为 yes\ndaemonize no\npidfile /var/run/redis.pid\n# 只允许本机访问\nbind 127.0.0.1\n# 端口设置\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 0\nloglevel notice\n# 日志文件\nlogfile \"\"\n# 开启数据库的数量，Redis 是有数据库概念的，默认是 16 个，数字从 0 ~ 15\ndatabases 16\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir ./\nslave-serve-stale-data yes\nslave-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\n# 密码设置，需要设置密码打开\nrequirepass 123455\nslave-priority 100\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\nlua-time-limit 5000\nslowlog-log-slower-than 10000\nslowlog-max-len 128\nlatency-monitor-threshold 0\nnotify-keyspace-events \"\"\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-entries 512\nlist-max-ziplist-value 64\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\nhll-sparse-max-bytes 3000\nactiverehashing yes\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit slave 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\nhz 10\naof-rewrite-incremental-fsync yes\n```\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/redis-config.md","raw":"title: redis后台启动详细配置\ndate: 2017-05-15 22:58:07\ntags: redis\ncategories: 数据库\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n  redis启动的时候有多种模式，后台启动，集群启动等等。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 说明\n在开发中一般都是在命令行中直接运行`redis-server`,但是这样命令行关闭，服务就停止了。\n如果要在后台运行redis服务，需要制定配置文件。这里以**ubuntu14**为例子\n\n## 准备配置文件\n查看‘/etc/redis/redis.conf’,没有可以创建一个，或者下载一个，配置文件位置没有要求\n\n## 修改配置文件\n把daemonize设置为yes，\n然后`redis-server /etc/redis/redis.conf`启动服务，\n\n## 查看服务\n`ps -ef|grep redis-server`查看是否有redis进程存在\n\n## 更多配置，在conf文件有说明\n```\n# 是否以后台daemon方式运行，默认是 no，一般我们会改为 yes\ndaemonize no\npidfile /var/run/redis.pid\n# 只允许本机访问\nbind 127.0.0.1\n# 端口设置\nport 6379\ntcp-backlog 511\ntimeout 0\ntcp-keepalive 0\nloglevel notice\n# 日志文件\nlogfile \"\"\n# 开启数据库的数量，Redis 是有数据库概念的，默认是 16 个，数字从 0 ~ 15\ndatabases 16\nsave 900 1\nsave 300 10\nsave 60 10000\nstop-writes-on-bgsave-error yes\nrdbcompression yes\nrdbchecksum yes\ndbfilename dump.rdb\ndir ./\nslave-serve-stale-data yes\nslave-read-only yes\nrepl-diskless-sync no\nrepl-diskless-sync-delay 5\nrepl-disable-tcp-nodelay no\n# 密码设置，需要设置密码打开\nrequirepass 123455\nslave-priority 100\nappendonly no\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\naof-load-truncated yes\nlua-time-limit 5000\nslowlog-log-slower-than 10000\nslowlog-max-len 128\nlatency-monitor-threshold 0\nnotify-keyspace-events \"\"\nhash-max-ziplist-entries 512\nhash-max-ziplist-value 64\nlist-max-ziplist-entries 512\nlist-max-ziplist-value 64\nset-max-intset-entries 512\nzset-max-ziplist-entries 128\nzset-max-ziplist-value 64\nhll-sparse-max-bytes 3000\nactiverehashing yes\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit slave 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\nhz 10\naof-rewrite-incremental-fsync yes\n```\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"redis-config","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla79003g8p9kz2pn7gfa","content":"<p><strong> Redis后台启动详细配置：</strong> <Excerpt in index | 首页摘要><br>  redis启动的时候有多种模式，后台启动，集群启动等等。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>在开发中一般都是在命令行中直接运行<code>redis-server</code>,但是这样命令行关闭，服务就停止了。<br>如果要在后台运行redis服务，需要制定配置文件。这里以<strong>ubuntu14</strong>为例子</p>\n<h2 id=\"准备配置文件\"><a href=\"#准备配置文件\" class=\"headerlink\" title=\"准备配置文件\"></a>准备配置文件</h2><p>查看‘/etc/redis/redis.conf’,没有可以创建一个，或者下载一个，配置文件位置没有要求</p>\n<h2 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h2><p>把daemonize设置为yes，<br>然后<code>redis-server /etc/redis/redis.conf</code>启动服务，</p>\n<h2 id=\"查看服务\"><a href=\"#查看服务\" class=\"headerlink\" title=\"查看服务\"></a>查看服务</h2><p><code>ps -ef|grep redis-server</code>查看是否有redis进程存在</p>\n<h2 id=\"更多配置，在conf文件有说明\"><a href=\"#更多配置，在conf文件有说明\" class=\"headerlink\" title=\"更多配置，在conf文件有说明\"></a>更多配置，在conf文件有说明</h2><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 是否以后台daemon方式运行，默认是 no，一般我们会改为 yes</div><div class=\"line\">daemonize no</div><div class=\"line\">pidfile /var/run/redis.pid</div><div class=\"line\"># 只允许本机访问</div><div class=\"line\">bind <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></div><div class=\"line\"># 端口设置</div><div class=\"line\">port <span class=\"number\">6379</span></div><div class=\"line\">tcp-backlog <span class=\"number\">511</span></div><div class=\"line\">timeout <span class=\"number\">0</span></div><div class=\"line\">tcp-keepalive <span class=\"number\">0</span></div><div class=\"line\">loglevel notice</div><div class=\"line\"># 日志文件</div><div class=\"line\">logfile <span class=\"string\">\"\"</span></div><div class=\"line\"># 开启数据库的数量，Redis 是有数据库概念的，默认是 <span class=\"number\">16</span> 个，数字从 <span class=\"number\">0</span> ~ <span class=\"number\">15</span></div><div class=\"line\">databases <span class=\"number\">16</span></div><div class=\"line\">save <span class=\"number\">900</span> <span class=\"number\">1</span></div><div class=\"line\">save <span class=\"number\">300</span> <span class=\"number\">10</span></div><div class=\"line\">save <span class=\"number\">60</span> <span class=\"number\">10000</span></div><div class=\"line\">stop-writes-on-bgsave-error yes</div><div class=\"line\">rdbcompression yes</div><div class=\"line\">rdbchecksum yes</div><div class=\"line\">dbfilename dump.rdb</div><div class=\"line\">dir ./</div><div class=\"line\">slave-serve-stale-data yes</div><div class=\"line\">slave-read-only yes</div><div class=\"line\">repl-diskless-sync no</div><div class=\"line\">repl-diskless-sync-delay <span class=\"number\">5</span></div><div class=\"line\">repl-disable-tcp-nodelay no</div><div class=\"line\"># 密码设置，需要设置密码打开</div><div class=\"line\">requirepass <span class=\"number\">123455</span></div><div class=\"line\">slave-priority <span class=\"number\">100</span></div><div class=\"line\">appendonly no</div><div class=\"line\">appendfilename <span class=\"string\">\"appendonly.aof\"</span></div><div class=\"line\">appendfsync everysec</div><div class=\"line\">no-appendfsync-on-rewrite no</div><div class=\"line\">auto-aof-rewrite-percentage <span class=\"number\">100</span></div><div class=\"line\">auto-aof-rewrite-min-size <span class=\"number\">64</span>mb</div><div class=\"line\">aof-load-truncated yes</div><div class=\"line\">lua-time-limit <span class=\"number\">5000</span></div><div class=\"line\">slowlog-log-slower-than <span class=\"number\">10000</span></div><div class=\"line\">slowlog-max-len <span class=\"number\">128</span></div><div class=\"line\">latency-monitor-threshold <span class=\"number\">0</span></div><div class=\"line\">notify-keyspace-events <span class=\"string\">\"\"</span></div><div class=\"line\">hash-max-ziplist-entries <span class=\"number\">512</span></div><div class=\"line\">hash-max-ziplist-value <span class=\"number\">64</span></div><div class=\"line\"><span class=\"type\">list</span>-max-ziplist-entries <span class=\"number\">512</span></div><div class=\"line\"><span class=\"type\">list</span>-max-ziplist-value <span class=\"number\">64</span></div><div class=\"line\">set-max-intset-entries <span class=\"number\">512</span></div><div class=\"line\">zset-max-ziplist-entries <span class=\"number\">128</span></div><div class=\"line\">zset-max-ziplist-value <span class=\"number\">64</span></div><div class=\"line\">hll-sparse-max-bytes <span class=\"number\">3000</span></div><div class=\"line\">activerehashing yes</div><div class=\"line\">client-output-buffer-limit normal <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span></div><div class=\"line\">client-output-buffer-limit slave <span class=\"number\">256</span>mb <span class=\"number\">64</span>mb <span class=\"number\">60</span></div><div class=\"line\">client-output-buffer-limit pubsub <span class=\"number\">32</span>mb <span class=\"number\">8</span>mb <span class=\"number\">60</span></div><div class=\"line\">hz <span class=\"number\">10</span></div><div class=\"line\">aof-rewrite-incremental-fsync yes</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> Redis后台启动详细配置：</strong> <Excerpt in index | 首页摘要><br>  redis启动的时候有多种模式，后台启动，集群启动等等。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>在开发中一般都是在命令行中直接运行<code>redis-server</code>,但是这样命令行关闭，服务就停止了。<br>如果要在后台运行redis服务，需要制定配置文件。这里以<strong>ubuntu14</strong>为例子</p>\n<h2 id=\"准备配置文件\"><a href=\"#准备配置文件\" class=\"headerlink\" title=\"准备配置文件\"></a>准备配置文件</h2><p>查看‘/etc/redis/redis.conf’,没有可以创建一个，或者下载一个，配置文件位置没有要求</p>\n<h2 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h2><p>把daemonize设置为yes，<br>然后<code>redis-server /etc/redis/redis.conf</code>启动服务，</p>\n<h2 id=\"查看服务\"><a href=\"#查看服务\" class=\"headerlink\" title=\"查看服务\"></a>查看服务</h2><p><code>ps -ef|grep redis-server</code>查看是否有redis进程存在</p>\n<h2 id=\"更多配置，在conf文件有说明\"><a href=\"#更多配置，在conf文件有说明\" class=\"headerlink\" title=\"更多配置，在conf文件有说明\"></a>更多配置，在conf文件有说明</h2><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"># 是否以后台daemon方式运行，默认是 no，一般我们会改为 yes</div><div class=\"line\">daemonize no</div><div class=\"line\">pidfile /var/run/redis.pid</div><div class=\"line\"># 只允许本机访问</div><div class=\"line\">bind <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></div><div class=\"line\"># 端口设置</div><div class=\"line\">port <span class=\"number\">6379</span></div><div class=\"line\">tcp-backlog <span class=\"number\">511</span></div><div class=\"line\">timeout <span class=\"number\">0</span></div><div class=\"line\">tcp-keepalive <span class=\"number\">0</span></div><div class=\"line\">loglevel notice</div><div class=\"line\"># 日志文件</div><div class=\"line\">logfile <span class=\"string\">\"\"</span></div><div class=\"line\"># 开启数据库的数量，Redis 是有数据库概念的，默认是 <span class=\"number\">16</span> 个，数字从 <span class=\"number\">0</span> ~ <span class=\"number\">15</span></div><div class=\"line\">databases <span class=\"number\">16</span></div><div class=\"line\">save <span class=\"number\">900</span> <span class=\"number\">1</span></div><div class=\"line\">save <span class=\"number\">300</span> <span class=\"number\">10</span></div><div class=\"line\">save <span class=\"number\">60</span> <span class=\"number\">10000</span></div><div class=\"line\">stop-writes-on-bgsave-error yes</div><div class=\"line\">rdbcompression yes</div><div class=\"line\">rdbchecksum yes</div><div class=\"line\">dbfilename dump.rdb</div><div class=\"line\">dir ./</div><div class=\"line\">slave-serve-stale-data yes</div><div class=\"line\">slave-read-only yes</div><div class=\"line\">repl-diskless-sync no</div><div class=\"line\">repl-diskless-sync-delay <span class=\"number\">5</span></div><div class=\"line\">repl-disable-tcp-nodelay no</div><div class=\"line\"># 密码设置，需要设置密码打开</div><div class=\"line\">requirepass <span class=\"number\">123455</span></div><div class=\"line\">slave-priority <span class=\"number\">100</span></div><div class=\"line\">appendonly no</div><div class=\"line\">appendfilename <span class=\"string\">\"appendonly.aof\"</span></div><div class=\"line\">appendfsync everysec</div><div class=\"line\">no-appendfsync-on-rewrite no</div><div class=\"line\">auto-aof-rewrite-percentage <span class=\"number\">100</span></div><div class=\"line\">auto-aof-rewrite-min-size <span class=\"number\">64</span>mb</div><div class=\"line\">aof-load-truncated yes</div><div class=\"line\">lua-time-limit <span class=\"number\">5000</span></div><div class=\"line\">slowlog-log-slower-than <span class=\"number\">10000</span></div><div class=\"line\">slowlog-max-len <span class=\"number\">128</span></div><div class=\"line\">latency-monitor-threshold <span class=\"number\">0</span></div><div class=\"line\">notify-keyspace-events <span class=\"string\">\"\"</span></div><div class=\"line\">hash-max-ziplist-entries <span class=\"number\">512</span></div><div class=\"line\">hash-max-ziplist-value <span class=\"number\">64</span></div><div class=\"line\"><span class=\"type\">list</span>-max-ziplist-entries <span class=\"number\">512</span></div><div class=\"line\"><span class=\"type\">list</span>-max-ziplist-value <span class=\"number\">64</span></div><div class=\"line\">set-max-intset-entries <span class=\"number\">512</span></div><div class=\"line\">zset-max-ziplist-entries <span class=\"number\">128</span></div><div class=\"line\">zset-max-ziplist-value <span class=\"number\">64</span></div><div class=\"line\">hll-sparse-max-bytes <span class=\"number\">3000</span></div><div class=\"line\">activerehashing yes</div><div class=\"line\">client-output-buffer-limit normal <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">0</span></div><div class=\"line\">client-output-buffer-limit slave <span class=\"number\">256</span>mb <span class=\"number\">64</span>mb <span class=\"number\">60</span></div><div class=\"line\">client-output-buffer-limit pubsub <span class=\"number\">32</span>mb <span class=\"number\">8</span>mb <span class=\"number\">60</span></div><div class=\"line\">hz <span class=\"number\">10</span></div><div class=\"line\">aof-rewrite-incremental-fsync yes</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Redis学习笔记","date":"2016-05-23T00:25:57.000Z","_content":"** redis学习笔记：** <Excerpt in index | 首页摘要>\n    redis数据库的基本操作，增删改查\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## keys\nredis本质上是一个key-value数据库\n1. 设置：set key value\n2. 获取：get key\n3. 判断存在：exists key\n4. 删除：del key\t\tdel  test:fan:age\n5. 重命名：rename  oldkey newkey\t\t\n6. 数量：dbsize  返回数据\n7. 获取所有key（通配符）：`Keys test:*:age`\n`Keys test:?:age`\n8. 清空：flushdb\tflushall\n9. 设置有效时间：expire test:fan:age 30\n10. 查询有效时间：ttl test:fan:age\n\n## String类型\n1. 设置：\n\tset key value\n\tsetnx ky value(nx是not exist)\n\tmset key1 value1 keyN valueN\n\tmsetnx key1 value1 keyN valueN\n2. 获取：\n\tget\t\t\t不存在返回nil\n\tgetset\t\t设置key的值，并返回key的旧值，不存在返回nil\n\tmget\t\t\n3. 自增减：\n\tincr key   对key的值进行++操作，返回新的值\n\tdecr key\n\tincrby key integer\t\t对key加上一个数值\n\tdecrby key integer\n4. 截取：\n\tsubstr key indexStart indexEnd \t\t\t下标从0开始\n5. 追加：\n\tappend key value\n\n## list类型\nredis的list其实就是一个每个元素都是string 的双向链表，所以push和pop的时间复杂度都是O（1）\n1. 添加\n\tlpush key string \t\t在头部添加\n\trpush key string\t\t在尾部添加\n2. 修改\n\tlset key index value  修改指定下标的key的值\n3. 删除\n\tlpop key \t从头部返回删除\n\trpop key  从尾部\n\tlrem key count value  删除count个相同的value，count为0删除全部\n\tblpop key ...keyN timeout\n\tbrpop 从尾部删除\n4. 获取\n\tlrange key indexStart indexEnd\n5. 数量\n\tllen key\t\t返回key对应的list长度\n6. 截取\n\tltrim key start end\n7. 转移\n\trpoplpush key1 key2\t从key1尾部移到key2头部\n\n## set集合\nredis的set就是String的无序集合，通过hashtable实现\n1. 添加\n\tsadd key member\n2. 删除\n\tsrem key member\t\t移除指定的元素\n\tspop key \t\t\t\t\t删除并返回一个随机的\n3. 获取\n\tsmembers key\t\t\t返回所有\n\tsrandmember\t\t\t随机取一个不删除\n4. 判断存在\n\tsismember key member\n5. 数量\n\tscard key \t\t\t\t\t返回元素个数\n6. 转移\n\tsmove srckey dstkey member\n7. 取交集\n\tsinter key1 key2 keyN\n\tsinterstore dstkey key1 keyN\t\t将交集存在dstkey\n8. 取并集\n\tsunion key1 key2 keyN\n\tsunionstore dstkey key1 keyN\t将并集存在dstkey\n9. 取差集\n\tsdiff key1 key2 keyN\n\tsdiffstore dstkey key1 keyN\t\t将差集存在dstkey\n\n## 有序set类型\n和set一样，不同的是每个元素关联一个double类型的score，根据score排序，sorted set的实现由skip list和hashtable\n1. 添加\n\tzadd key score member\n2. 删除\n\tzrem key member\n\tzremrangebyrank key min max\n\tzremrangebyscore key min max \t删除集合score在给定区间的元素\n3. 获取\n\tzrange key start end\n\tzrevrange\tkey start end\t\t\t按score的逆序\n\tzrangebyscore key min max\t\t\n4. 判断存在\n\tzrank key member\t\t返回下标\n\tzrerank key member\t\t返回逆序的下标\n5. 数量\n\tzcard key\t\t\t\t\t\t总数\n\tzcount key min max \t\t区间的数量\n6. 修改\n\tzincrby key incr member\t增加member的score值并排序\n\n## hash类型\nredis的hash是一个string类型的field和value的映射表，hash特别适合存储对象，\n1. 设置：\n\thset key field value\n\thmset key field1 value1 field2 value2\n2. 获取：\n\thget key field\n\thmget key field1 field2\n3. 判断存在\n\thexists key field\n4. 删除\n\thdel key field\n5. 查找\n\thkeys key\t\t\t返回所有 field\n\thvals key\t\t\t返回所有的value\n\thgetall key\t\t返回所有field和value\n6. 数量\n\thlen key\n7. 值加减\n\thincrby key field integer\t将指定的hash field加上定值\n","source":"_posts/redis-study.md","raw":"title: redis学习笔记\ndate: 2016-05-23 08:25:57\ntags: redis\ncategories: 数据库\n---\n** redis学习笔记：** <Excerpt in index | 首页摘要>\n    redis数据库的基本操作，增删改查\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## keys\nredis本质上是一个key-value数据库\n1. 设置：set key value\n2. 获取：get key\n3. 判断存在：exists key\n4. 删除：del key\t\tdel  test:fan:age\n5. 重命名：rename  oldkey newkey\t\t\n6. 数量：dbsize  返回数据\n7. 获取所有key（通配符）：`Keys test:*:age`\n`Keys test:?:age`\n8. 清空：flushdb\tflushall\n9. 设置有效时间：expire test:fan:age 30\n10. 查询有效时间：ttl test:fan:age\n\n## String类型\n1. 设置：\n\tset key value\n\tsetnx ky value(nx是not exist)\n\tmset key1 value1 keyN valueN\n\tmsetnx key1 value1 keyN valueN\n2. 获取：\n\tget\t\t\t不存在返回nil\n\tgetset\t\t设置key的值，并返回key的旧值，不存在返回nil\n\tmget\t\t\n3. 自增减：\n\tincr key   对key的值进行++操作，返回新的值\n\tdecr key\n\tincrby key integer\t\t对key加上一个数值\n\tdecrby key integer\n4. 截取：\n\tsubstr key indexStart indexEnd \t\t\t下标从0开始\n5. 追加：\n\tappend key value\n\n## list类型\nredis的list其实就是一个每个元素都是string 的双向链表，所以push和pop的时间复杂度都是O（1）\n1. 添加\n\tlpush key string \t\t在头部添加\n\trpush key string\t\t在尾部添加\n2. 修改\n\tlset key index value  修改指定下标的key的值\n3. 删除\n\tlpop key \t从头部返回删除\n\trpop key  从尾部\n\tlrem key count value  删除count个相同的value，count为0删除全部\n\tblpop key ...keyN timeout\n\tbrpop 从尾部删除\n4. 获取\n\tlrange key indexStart indexEnd\n5. 数量\n\tllen key\t\t返回key对应的list长度\n6. 截取\n\tltrim key start end\n7. 转移\n\trpoplpush key1 key2\t从key1尾部移到key2头部\n\n## set集合\nredis的set就是String的无序集合，通过hashtable实现\n1. 添加\n\tsadd key member\n2. 删除\n\tsrem key member\t\t移除指定的元素\n\tspop key \t\t\t\t\t删除并返回一个随机的\n3. 获取\n\tsmembers key\t\t\t返回所有\n\tsrandmember\t\t\t随机取一个不删除\n4. 判断存在\n\tsismember key member\n5. 数量\n\tscard key \t\t\t\t\t返回元素个数\n6. 转移\n\tsmove srckey dstkey member\n7. 取交集\n\tsinter key1 key2 keyN\n\tsinterstore dstkey key1 keyN\t\t将交集存在dstkey\n8. 取并集\n\tsunion key1 key2 keyN\n\tsunionstore dstkey key1 keyN\t将并集存在dstkey\n9. 取差集\n\tsdiff key1 key2 keyN\n\tsdiffstore dstkey key1 keyN\t\t将差集存在dstkey\n\n## 有序set类型\n和set一样，不同的是每个元素关联一个double类型的score，根据score排序，sorted set的实现由skip list和hashtable\n1. 添加\n\tzadd key score member\n2. 删除\n\tzrem key member\n\tzremrangebyrank key min max\n\tzremrangebyscore key min max \t删除集合score在给定区间的元素\n3. 获取\n\tzrange key start end\n\tzrevrange\tkey start end\t\t\t按score的逆序\n\tzrangebyscore key min max\t\t\n4. 判断存在\n\tzrank key member\t\t返回下标\n\tzrerank key member\t\t返回逆序的下标\n5. 数量\n\tzcard key\t\t\t\t\t\t总数\n\tzcount key min max \t\t区间的数量\n6. 修改\n\tzincrby key incr member\t增加member的score值并排序\n\n## hash类型\nredis的hash是一个string类型的field和value的映射表，hash特别适合存储对象，\n1. 设置：\n\thset key field value\n\thmset key field1 value1 field2 value2\n2. 获取：\n\thget key field\n\thmget key field1 field2\n3. 判断存在\n\thexists key field\n4. 删除\n\thdel key field\n5. 查找\n\thkeys key\t\t\t返回所有 field\n\thvals key\t\t\t返回所有的value\n\thgetall key\t\t返回所有field和value\n6. 数量\n\thlen key\n7. 值加减\n\thincrby key field integer\t将指定的hash field加上定值\n","slug":"redis-study","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla7b003k8p9ko4unyuff","content":"<p><strong> redis学习笔记：</strong> <Excerpt in index | 首页摘要><br>    redis数据库的基本操作，增删改查<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys\"></a>keys</h2><p>redis本质上是一个key-value数据库</p>\n<ol>\n<li>设置：set key value</li>\n<li>获取：get key</li>\n<li>判断存在：exists key</li>\n<li>删除：del key        del  test:fan:age</li>\n<li>重命名：rename  oldkey newkey        </li>\n<li>数量：dbsize  返回数据</li>\n<li>获取所有key（通配符）：<code>Keys test:*:age</code><br><code>Keys test:?:age</code></li>\n<li>清空：flushdb    flushall</li>\n<li>设置有效时间：expire test:fan:age 30</li>\n<li>查询有效时间：ttl test:fan:age</li>\n</ol>\n<h2 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h2><ol>\n<li>设置：<br> set key value<br> setnx ky value(nx是not exist)<br> mset key1 value1 keyN valueN<br> msetnx key1 value1 keyN valueN</li>\n<li>获取：<br> get            不存在返回nil<br> getset        设置key的值，并返回key的旧值，不存在返回nil<br> mget        </li>\n<li>自增减：<br> incr key   对key的值进行++操作，返回新的值<br> decr key<br> incrby key integer        对key加上一个数值<br> decrby key integer</li>\n<li>截取：<br> substr key indexStart indexEnd             下标从0开始</li>\n<li>追加：<br> append key value</li>\n</ol>\n<h2 id=\"list类型\"><a href=\"#list类型\" class=\"headerlink\" title=\"list类型\"></a>list类型</h2><p>redis的list其实就是一个每个元素都是string 的双向链表，所以push和pop的时间复杂度都是O（1）</p>\n<ol>\n<li>添加<br> lpush key string         在头部添加<br> rpush key string        在尾部添加</li>\n<li>修改<br> lset key index value  修改指定下标的key的值</li>\n<li>删除<br> lpop key     从头部返回删除<br> rpop key  从尾部<br> lrem key count value  删除count个相同的value，count为0删除全部<br> blpop key …keyN timeout<br> brpop 从尾部删除</li>\n<li>获取<br> lrange key indexStart indexEnd</li>\n<li>数量<br> llen key        返回key对应的list长度</li>\n<li>截取<br> ltrim key start end</li>\n<li>转移<br> rpoplpush key1 key2    从key1尾部移到key2头部</li>\n</ol>\n<h2 id=\"set集合\"><a href=\"#set集合\" class=\"headerlink\" title=\"set集合\"></a>set集合</h2><p>redis的set就是String的无序集合，通过hashtable实现</p>\n<ol>\n<li>添加<br> sadd key member</li>\n<li>删除<br> srem key member        移除指定的元素<br> spop key                     删除并返回一个随机的</li>\n<li>获取<br> smembers key            返回所有<br> srandmember            随机取一个不删除</li>\n<li>判断存在<br> sismember key member</li>\n<li>数量<br> scard key                     返回元素个数</li>\n<li>转移<br> smove srckey dstkey member</li>\n<li>取交集<br> sinter key1 key2 keyN<br> sinterstore dstkey key1 keyN        将交集存在dstkey</li>\n<li>取并集<br> sunion key1 key2 keyN<br> sunionstore dstkey key1 keyN    将并集存在dstkey</li>\n<li>取差集<br> sdiff key1 key2 keyN<br> sdiffstore dstkey key1 keyN        将差集存在dstkey</li>\n</ol>\n<h2 id=\"有序set类型\"><a href=\"#有序set类型\" class=\"headerlink\" title=\"有序set类型\"></a>有序set类型</h2><p>和set一样，不同的是每个元素关联一个double类型的score，根据score排序，sorted set的实现由skip list和hashtable</p>\n<ol>\n<li>添加<br> zadd key score member</li>\n<li>删除<br> zrem key member<br> zremrangebyrank key min max<br> zremrangebyscore key min max     删除集合score在给定区间的元素</li>\n<li>获取<br> zrange key start end<br> zrevrange    key start end            按score的逆序<br> zrangebyscore key min max        </li>\n<li>判断存在<br> zrank key member        返回下标<br> zrerank key member        返回逆序的下标</li>\n<li>数量<br> zcard key                        总数<br> zcount key min max         区间的数量</li>\n<li>修改<br> zincrby key incr member    增加member的score值并排序</li>\n</ol>\n<h2 id=\"hash类型\"><a href=\"#hash类型\" class=\"headerlink\" title=\"hash类型\"></a>hash类型</h2><p>redis的hash是一个string类型的field和value的映射表，hash特别适合存储对象，</p>\n<ol>\n<li>设置：<br> hset key field value<br> hmset key field1 value1 field2 value2</li>\n<li>获取：<br> hget key field<br> hmget key field1 field2</li>\n<li>判断存在<br> hexists key field</li>\n<li>删除<br> hdel key field</li>\n<li>查找<br> hkeys key            返回所有 field<br> hvals key            返回所有的value<br> hgetall key        返回所有field和value</li>\n<li>数量<br> hlen key</li>\n<li>值加减<br> hincrby key field integer    将指定的hash field加上定值</li>\n</ol>\n","excerpt":"<p><strong> redis学习笔记：</strong> <Excerpt in index | 首页摘要><br>    redis数据库的基本操作，增删改查<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys\"></a>keys</h2><p>redis本质上是一个key-value数据库</p>\n<ol>\n<li>设置：set key value</li>\n<li>获取：get key</li>\n<li>判断存在：exists key</li>\n<li>删除：del key        del  test:fan:age</li>\n<li>重命名：rename  oldkey newkey        </li>\n<li>数量：dbsize  返回数据</li>\n<li>获取所有key（通配符）：<code>Keys test:*:age</code><br><code>Keys test:?:age</code></li>\n<li>清空：flushdb    flushall</li>\n<li>设置有效时间：expire test:fan:age 30</li>\n<li>查询有效时间：ttl test:fan:age</li>\n</ol>\n<h2 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h2><ol>\n<li>设置：<br> set key value<br> setnx ky value(nx是not exist)<br> mset key1 value1 keyN valueN<br> msetnx key1 value1 keyN valueN</li>\n<li>获取：<br> get            不存在返回nil<br> getset        设置key的值，并返回key的旧值，不存在返回nil<br> mget        </li>\n<li>自增减：<br> incr key   对key的值进行++操作，返回新的值<br> decr key<br> incrby key integer        对key加上一个数值<br> decrby key integer</li>\n<li>截取：<br> substr key indexStart indexEnd             下标从0开始</li>\n<li>追加：<br> append key value</li>\n</ol>\n<h2 id=\"list类型\"><a href=\"#list类型\" class=\"headerlink\" title=\"list类型\"></a>list类型</h2><p>redis的list其实就是一个每个元素都是string 的双向链表，所以push和pop的时间复杂度都是O（1）</p>\n<ol>\n<li>添加<br> lpush key string         在头部添加<br> rpush key string        在尾部添加</li>\n<li>修改<br> lset key index value  修改指定下标的key的值</li>\n<li>删除<br> lpop key     从头部返回删除<br> rpop key  从尾部<br> lrem key count value  删除count个相同的value，count为0删除全部<br> blpop key …keyN timeout<br> brpop 从尾部删除</li>\n<li>获取<br> lrange key indexStart indexEnd</li>\n<li>数量<br> llen key        返回key对应的list长度</li>\n<li>截取<br> ltrim key start end</li>\n<li>转移<br> rpoplpush key1 key2    从key1尾部移到key2头部</li>\n</ol>\n<h2 id=\"set集合\"><a href=\"#set集合\" class=\"headerlink\" title=\"set集合\"></a>set集合</h2><p>redis的set就是String的无序集合，通过hashtable实现</p>\n<ol>\n<li>添加<br> sadd key member</li>\n<li>删除<br> srem key member        移除指定的元素<br> spop key                     删除并返回一个随机的</li>\n<li>获取<br> smembers key            返回所有<br> srandmember            随机取一个不删除</li>\n<li>判断存在<br> sismember key member</li>\n<li>数量<br> scard key                     返回元素个数</li>\n<li>转移<br> smove srckey dstkey member</li>\n<li>取交集<br> sinter key1 key2 keyN<br> sinterstore dstkey key1 keyN        将交集存在dstkey</li>\n<li>取并集<br> sunion key1 key2 keyN<br> sunionstore dstkey key1 keyN    将并集存在dstkey</li>\n<li>取差集<br> sdiff key1 key2 keyN<br> sdiffstore dstkey key1 keyN        将差集存在dstkey</li>\n</ol>\n<h2 id=\"有序set类型\"><a href=\"#有序set类型\" class=\"headerlink\" title=\"有序set类型\"></a>有序set类型</h2><p>和set一样，不同的是每个元素关联一个double类型的score，根据score排序，sorted set的实现由skip list和hashtable</p>\n<ol>\n<li>添加<br> zadd key score member</li>\n<li>删除<br> zrem key member<br> zremrangebyrank key min max<br> zremrangebyscore key min max     删除集合score在给定区间的元素</li>\n<li>获取<br> zrange key start end<br> zrevrange    key start end            按score的逆序<br> zrangebyscore key min max        </li>\n<li>判断存在<br> zrank key member        返回下标<br> zrerank key member        返回逆序的下标</li>\n<li>数量<br> zcard key                        总数<br> zcount key min max         区间的数量</li>\n<li>修改<br> zincrby key incr member    增加member的score值并排序</li>\n</ol>\n<h2 id=\"hash类型\"><a href=\"#hash类型\" class=\"headerlink\" title=\"hash类型\"></a>hash类型</h2><p>redis的hash是一个string类型的field和value的映射表，hash特别适合存储对象，</p>\n<ol>\n<li>设置：<br> hset key field value<br> hmset key field1 value1 field2 value2</li>\n<li>获取：<br> hget key field<br> hmget key field1 field2</li>\n<li>判断存在<br> hexists key field</li>\n<li>删除<br> hdel key field</li>\n<li>查找<br> hkeys key            返回所有 field<br> hvals key            返回所有的value<br> hgetall key        返回所有field和value</li>\n<li>数量<br> hlen key</li>\n<li>值加减<br> hincrby key field integer    将指定的hash field加上定值</li>\n</ol>"},{"title":"Ubuntu服务器详细配置","date":"2016-11-28T12:36:03.000Z","_content":"** ubuntu服务器私人定制：** <Excerpt in index | 首页摘要>\n把ubuntu服务器打造成自己的个性服务器，装逼必备！！！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n##　说明\n**此教程针对Ubuntu14,其他版本仅作参考**\n\n##　用户密码管理\n`sudo passwd root`\n1. 添加一个用户组并指定id为1002\n`sudo groupadd －g 1002 www`\n2. 添加一个用户到www组并指定id为1003\n`sudo useradd wyx -g 1002 -u 1003 -m`\n\n3. 修改用户的密码\n`sudo passwd wyx`\n4. 删除一个用户\n`sudo userdel wyx`\n\n5. 为该用户添加sudo权限\n\n```bash\nsudo usermod -a -G adm wyx\nsudo usermod -a -G sudo wyx\n```\n\n6. 查看所有用户和用户组：\n```bash\ncat /etc/passwd\ncat /etc/group\n```\n## 安装nodejs\n1. 安装nvm`curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash`\n2. 安装node`nvm install v4.4.4`,安装`nvm install v6.9.1`\n3. 设置默认的node版本`nvm alias default v4.4.4`\n4. 安装npm3  `npm install -g npm@3`\n5. 设置淘宝的cnpm源  `npm install -g cnpm --registry=https://registry.npm.taobao.org`\n6. 验证安装`node -v,npm -v,cnpm -v`\n## 安装node常用包\n1. 安装pm2`cnpm install -g pm2`\n2. 安装hexo博客`cnpm install -g hexo-cli`\n3. 安装同步插件rsync`cnpm install -g rsync`\n\n## 安装docker\n1. apt安装\n\n```bash\nsudo apt-get update\nsudo apt-get install -y docker.io\nsudo ln -sf /usr/bin/docker.io /usr/local/bin/docker\nsudo sed -i '$acomplete -F _docker docker' /etc/bash_completion.d/docker.io\n```\n\n2. 源码安装最新版本\n\n```bash\nsudo apt-get install apt-transport-https\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9\nsudo bash -c \"echo deb https://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list\"\nsudo apt-get update\nsudo apt-get install lxc-docker\n```\n\n3. 验证安装版本\n` docker -v`\n\n## 安装nginx\n`sudo apt-get install nginx`\n启动和配置nginx\n## 安装redis\n`sudo apt-get install redis-server`\n启动和配置文件:\n## 安装mongodb\n1. 安装3.0\n\n```bash\napt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\necho \"deb http://repo.mongodb.org/apt/debian wheezy/mongodb-org/3.0 main\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list\napt-get update  \napt-get install mongodb-org\n```\n\n2. 安装3.2最新版\n\n```bash\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927\necho \"deb http://repo.mongodb.org/apt/ubuntu \"$(lsb_release -sc)\"/mongodb-org/3.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb.list\nsudo apt-get update\nsudo apt-get install mongodb-org\n```\n\n3. 制定版本\n`apt-get install mongodb-org=3.2.0 mongodb-org-server=3.2.0 mongodb-org-shell=3.2.0 mongodb-org-mongos=3.2.0 mongodb-org-tools=3.2.0`\n\n4. 启动服务\n\n```bash\nsudo service mongod start\nsudo service mongod stop\n```\n\n5. 验证安装\n`mongod --version`\n\n配置\n\n## 安装jdk\n安装jdk1.7`sudo apt-get install openjdk-7-jdk`\n源码安装\n\n```bash\nsudo mkdir /usr/lib/jvm\nsudo tar zxvf jdk-7u21-linux-i586.tar.gz -C /usr/lib/jvm\ncd /usr/lib/jvm\nsudo mv jdk1.7.0_21 java\n\nsudo vim ~/.bashrc\n\nexport JAVA_HOME=/usr/lib/jvm/java\nexport JRE_HOME=${JAVA_HOME}/jre  \nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  \nexport PATH=${JAVA_HOME}/bin:$PATH  \n```\n## 安装mysql\n实用ubuntu自带的工具下载\n`sudo apt-get install mysql-server`\n\n## 环境变量\n常见的方法有两种。\n\n1. 在用户主目录下有一个 .bashrc 文件，可以在此文件中加入 PATH 的设置如下： \n`export PATH=”$PATH:/your path1/:/your path2/…..” `\n\n2. 在 /etc/profile中增加\n```bash\nPATH=\"$PATH:/home/zhengb66/bin\" \nexport PATH\n``` \n\n## 开机自启动\n1. 方法一，编辑rc.loacl脚本\nUbuntu开机之后会执行/etc/rc.local文件中的脚本，\n所以我们可以直接在/etc/rc.local中添加启动脚本。\n当然要添加到语句：exit 0 前面才行。代码如下:\n`sudo vi /etc/rc.local`\n然后在 exit 0 前面添加好脚本代码。\n\n2. 方法二，添加一个Ubuntu的开机启动服务。\n如果要添加为开机启动执行的脚本文件，\n可先将脚本复制或者软连接到/etc/init.d/目录下，\n然后用：update-rc.d xxx defaults NN命令(NN为启动顺序)，\n将脚本添加到初始化执行的队列中去。\n注意如果脚本需要用到网络，则NN需设置一个比较大的数字，如99。\n1) 将你的启动脚本复制到 /etc/init.d目录下\n 以下假设你的脚本文件名为 test。\n2) 设置脚本文件的权限\n\n代码如下:\n`sudo chmod 755 /etc/init.d/test`\n3) 执行如下命令将脚本放到启动脚本中去：\n代码如下:\n`cd /etc/init.d`  `sudo update-rc.d test defaults 95`\n 注：其中数字95是脚本启动的顺序号，按照自己的需要相应修改即可。在你有多个启动脚本，而它们之间又有先后启动的依赖关系时你就知道这个数字的具体作用了。该命令的输出信息参考如下：\n卸载启动脚本的方法：\n代码如下:\n`cd /etc/init.d`\n`sudo update-rc.d -f test remove`\n\n## 定时任务\n在Ubuntu下，cron是被默认安装并启动的。通过查看/etc/crontab\n推荐使用crontab -e命令添加自定义的任务（编辑的是/var/spool/cron下对应用户的cron文件，在/var/spool/cron下的crontab文件 不可以直接创建或者直接修改，crontab文件是通过crontab命令得到的）。\n`crontab -e`\n\n1. 直接执行命令行\n每2分钟打印一个字符串“Hello World”，保存至文件/home/laigw/cron/HelloWorld.txt中，cron 格式如下：\n`*/2 * * * * echo “Hello World.” >> /home/HelloWorld.txt`\n\n2. shell 文件\n每3分钟调用一次 /home/laigw/cron/test.sh 文件，cron 格式如下：\n`*/3 * * * * /home/laigw/cron/test.sh`\n## ftp和rsync配置\n\n## 持续集成环境\n1. jenkens配置\n2. gitlab配置\n3. git服务器\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/server-config.md","raw":"title: ubuntu服务器详细配置\ndate: 2016-11-28 20:36:03\ntags: linux\ncategories: 开发工具\n---\n** ubuntu服务器私人定制：** <Excerpt in index | 首页摘要>\n把ubuntu服务器打造成自己的个性服务器，装逼必备！！！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n##　说明\n**此教程针对Ubuntu14,其他版本仅作参考**\n\n##　用户密码管理\n`sudo passwd root`\n1. 添加一个用户组并指定id为1002\n`sudo groupadd －g 1002 www`\n2. 添加一个用户到www组并指定id为1003\n`sudo useradd wyx -g 1002 -u 1003 -m`\n\n3. 修改用户的密码\n`sudo passwd wyx`\n4. 删除一个用户\n`sudo userdel wyx`\n\n5. 为该用户添加sudo权限\n\n```bash\nsudo usermod -a -G adm wyx\nsudo usermod -a -G sudo wyx\n```\n\n6. 查看所有用户和用户组：\n```bash\ncat /etc/passwd\ncat /etc/group\n```\n## 安装nodejs\n1. 安装nvm`curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash`\n2. 安装node`nvm install v4.4.4`,安装`nvm install v6.9.1`\n3. 设置默认的node版本`nvm alias default v4.4.4`\n4. 安装npm3  `npm install -g npm@3`\n5. 设置淘宝的cnpm源  `npm install -g cnpm --registry=https://registry.npm.taobao.org`\n6. 验证安装`node -v,npm -v,cnpm -v`\n## 安装node常用包\n1. 安装pm2`cnpm install -g pm2`\n2. 安装hexo博客`cnpm install -g hexo-cli`\n3. 安装同步插件rsync`cnpm install -g rsync`\n\n## 安装docker\n1. apt安装\n\n```bash\nsudo apt-get update\nsudo apt-get install -y docker.io\nsudo ln -sf /usr/bin/docker.io /usr/local/bin/docker\nsudo sed -i '$acomplete -F _docker docker' /etc/bash_completion.d/docker.io\n```\n\n2. 源码安装最新版本\n\n```bash\nsudo apt-get install apt-transport-https\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9\nsudo bash -c \"echo deb https://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list\"\nsudo apt-get update\nsudo apt-get install lxc-docker\n```\n\n3. 验证安装版本\n` docker -v`\n\n## 安装nginx\n`sudo apt-get install nginx`\n启动和配置nginx\n## 安装redis\n`sudo apt-get install redis-server`\n启动和配置文件:\n## 安装mongodb\n1. 安装3.0\n\n```bash\napt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\necho \"deb http://repo.mongodb.org/apt/debian wheezy/mongodb-org/3.0 main\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list\napt-get update  \napt-get install mongodb-org\n```\n\n2. 安装3.2最新版\n\n```bash\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927\necho \"deb http://repo.mongodb.org/apt/ubuntu \"$(lsb_release -sc)\"/mongodb-org/3.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb.list\nsudo apt-get update\nsudo apt-get install mongodb-org\n```\n\n3. 制定版本\n`apt-get install mongodb-org=3.2.0 mongodb-org-server=3.2.0 mongodb-org-shell=3.2.0 mongodb-org-mongos=3.2.0 mongodb-org-tools=3.2.0`\n\n4. 启动服务\n\n```bash\nsudo service mongod start\nsudo service mongod stop\n```\n\n5. 验证安装\n`mongod --version`\n\n配置\n\n## 安装jdk\n安装jdk1.7`sudo apt-get install openjdk-7-jdk`\n源码安装\n\n```bash\nsudo mkdir /usr/lib/jvm\nsudo tar zxvf jdk-7u21-linux-i586.tar.gz -C /usr/lib/jvm\ncd /usr/lib/jvm\nsudo mv jdk1.7.0_21 java\n\nsudo vim ~/.bashrc\n\nexport JAVA_HOME=/usr/lib/jvm/java\nexport JRE_HOME=${JAVA_HOME}/jre  \nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  \nexport PATH=${JAVA_HOME}/bin:$PATH  \n```\n## 安装mysql\n实用ubuntu自带的工具下载\n`sudo apt-get install mysql-server`\n\n## 环境变量\n常见的方法有两种。\n\n1. 在用户主目录下有一个 .bashrc 文件，可以在此文件中加入 PATH 的设置如下： \n`export PATH=”$PATH:/your path1/:/your path2/…..” `\n\n2. 在 /etc/profile中增加\n```bash\nPATH=\"$PATH:/home/zhengb66/bin\" \nexport PATH\n``` \n\n## 开机自启动\n1. 方法一，编辑rc.loacl脚本\nUbuntu开机之后会执行/etc/rc.local文件中的脚本，\n所以我们可以直接在/etc/rc.local中添加启动脚本。\n当然要添加到语句：exit 0 前面才行。代码如下:\n`sudo vi /etc/rc.local`\n然后在 exit 0 前面添加好脚本代码。\n\n2. 方法二，添加一个Ubuntu的开机启动服务。\n如果要添加为开机启动执行的脚本文件，\n可先将脚本复制或者软连接到/etc/init.d/目录下，\n然后用：update-rc.d xxx defaults NN命令(NN为启动顺序)，\n将脚本添加到初始化执行的队列中去。\n注意如果脚本需要用到网络，则NN需设置一个比较大的数字，如99。\n1) 将你的启动脚本复制到 /etc/init.d目录下\n 以下假设你的脚本文件名为 test。\n2) 设置脚本文件的权限\n\n代码如下:\n`sudo chmod 755 /etc/init.d/test`\n3) 执行如下命令将脚本放到启动脚本中去：\n代码如下:\n`cd /etc/init.d`  `sudo update-rc.d test defaults 95`\n 注：其中数字95是脚本启动的顺序号，按照自己的需要相应修改即可。在你有多个启动脚本，而它们之间又有先后启动的依赖关系时你就知道这个数字的具体作用了。该命令的输出信息参考如下：\n卸载启动脚本的方法：\n代码如下:\n`cd /etc/init.d`\n`sudo update-rc.d -f test remove`\n\n## 定时任务\n在Ubuntu下，cron是被默认安装并启动的。通过查看/etc/crontab\n推荐使用crontab -e命令添加自定义的任务（编辑的是/var/spool/cron下对应用户的cron文件，在/var/spool/cron下的crontab文件 不可以直接创建或者直接修改，crontab文件是通过crontab命令得到的）。\n`crontab -e`\n\n1. 直接执行命令行\n每2分钟打印一个字符串“Hello World”，保存至文件/home/laigw/cron/HelloWorld.txt中，cron 格式如下：\n`*/2 * * * * echo “Hello World.” >> /home/HelloWorld.txt`\n\n2. shell 文件\n每3分钟调用一次 /home/laigw/cron/test.sh 文件，cron 格式如下：\n`*/3 * * * * /home/laigw/cron/test.sh`\n## ftp和rsync配置\n\n## 持续集成环境\n1. jenkens配置\n2. gitlab配置\n3. git服务器\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"server-config","published":1,"updated":"2017-06-14T02:41:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla7e003o8p9kjpg1lwr9","content":"<p><strong> ubuntu服务器私人定制：</strong> <Excerpt in index | 首页摘要><br>把ubuntu服务器打造成自己的个性服务器，装逼必备！！！<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<p>##　说明<br><strong>此教程针对Ubuntu14,其他版本仅作参考</strong></p>\n<p>##　用户密码管理<br><code>sudo passwd root</code></p>\n<ol>\n<li>添加一个用户组并指定id为1002<br><code>sudo groupadd －g 1002 www</code></li>\n<li><p>添加一个用户到www组并指定id为1003<br><code>sudo useradd wyx -g 1002 -u 1003 -m</code></p>\n</li>\n<li><p>修改用户的密码<br><code>sudo passwd wyx</code></p>\n</li>\n<li><p>删除一个用户<br><code>sudo userdel wyx</code></p>\n</li>\n<li><p>为该用户添加sudo权限</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo usermod <span class=\"_\">-a</span> -G adm wyx</div><div class=\"line\">sudo usermod <span class=\"_\">-a</span> -G sudo wyx</div></pre></td></tr></table></figure>\n<ol>\n<li>查看所有用户和用户组：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/passwd</div><div class=\"line\">cat /etc/group</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h2><ol>\n<li>安装nvm<code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</code></li>\n<li>安装node<code>nvm install v4.4.4</code>,安装<code>nvm install v6.9.1</code></li>\n<li>设置默认的node版本<code>nvm alias default v4.4.4</code></li>\n<li>安装npm3  <code>npm install -g npm@3</code></li>\n<li>设置淘宝的cnpm源  <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li>\n<li>验证安装<code>node -v,npm -v,cnpm -v</code><h2 id=\"安装node常用包\"><a href=\"#安装node常用包\" class=\"headerlink\" title=\"安装node常用包\"></a>安装node常用包</h2></li>\n<li>安装pm2<code>cnpm install -g pm2</code></li>\n<li>安装hexo博客<code>cnpm install -g hexo-cli</code></li>\n<li>安装同步插件rsync<code>cnpm install -g rsync</code></li>\n</ol>\n<h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><ol>\n<li>apt安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install -y docker.io</div><div class=\"line\">sudo ln -sf /usr/bin/docker.io /usr/<span class=\"built_in\">local</span>/bin/docker</div><div class=\"line\">sudo sed -i <span class=\"string\">'$acomplete -F _docker docker'</span> /etc/bash_completion.d/docker.io</div></pre></td></tr></table></figure>\n<ol>\n<li>源码安装最新版本</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install apt-transport-https</div><div class=\"line\">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9</div><div class=\"line\">sudo bash -c <span class=\"string\">\"echo deb https://get.docker.io/ubuntu docker main &gt; /etc/apt/sources.list.d/docker.list\"</span></div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install lxc-docker</div></pre></td></tr></table></figure>\n<ol>\n<li>验证安装版本<br><code>docker -v</code></li>\n</ol>\n<h2 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h2><p><code>sudo apt-get install nginx</code><br>启动和配置nginx</p>\n<h2 id=\"安装redis\"><a href=\"#安装redis\" class=\"headerlink\" title=\"安装redis\"></a>安装redis</h2><p><code>sudo apt-get install redis-server</code><br>启动和配置文件:</p>\n<h2 id=\"安装mongodb\"><a href=\"#安装mongodb\" class=\"headerlink\" title=\"安装mongodb\"></a>安装mongodb</h2><ol>\n<li>安装3.0</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb http://repo.mongodb.org/apt/debian wheezy/mongodb-org/3.0 main\"</span> | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list</div><div class=\"line\">apt-get update  </div><div class=\"line\">apt-get install mongodb-org</div></pre></td></tr></table></figure>\n<ol>\n<li>安装3.2最新版</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb http://repo.mongodb.org/apt/ubuntu \"</span>$(lsb_release -sc)<span class=\"string\">\"/mongodb-org/3.2 multiverse\"</span> | sudo tee /etc/apt/sources.list.d/mongodb.list</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install mongodb-org</div></pre></td></tr></table></figure>\n<ol>\n<li><p>制定版本<br><code>apt-get install mongodb-org=3.2.0 mongodb-org-server=3.2.0 mongodb-org-shell=3.2.0 mongodb-org-mongos=3.2.0 mongodb-org-tools=3.2.0</code></p>\n</li>\n<li><p>启动服务</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo service mongod start</div><div class=\"line\">sudo service mongod stop</div></pre></td></tr></table></figure>\n<ol>\n<li>验证安装<br><code>mongod --version</code></li>\n</ol>\n<p>配置</p>\n<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><p>安装jdk1.7<code>sudo apt-get install openjdk-7-jdk</code><br>源码安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mkdir /usr/lib/jvm</div><div class=\"line\">sudo tar zxvf jdk-7u21-linux-i586.tar.gz -C /usr/lib/jvm</div><div class=\"line\"><span class=\"built_in\">cd</span> /usr/lib/jvm</div><div class=\"line\">sudo mv jdk1.7.0_21 java</div><div class=\"line\"></div><div class=\"line\">sudo vim ~/.bashrc</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/lib/jvm/java</div><div class=\"line\"><span class=\"built_in\">export</span> JRE_HOME=<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/jre  </div><div class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/lib:<span class=\"variable\">$&#123;JRE_HOME&#125;</span>/lib  </div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/bin:<span class=\"variable\">$PATH</span></div></pre></td></tr></table></figure>\n<h2 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h2><p>实用ubuntu自带的工具下载<br><code>sudo apt-get install mysql-server</code></p>\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><p>常见的方法有两种。</p>\n<ol>\n<li><p>在用户主目录下有一个 .bashrc 文件，可以在此文件中加入 PATH 的设置如下：<br><code>export PATH=”$PATH:/your path1/:/your path2/…..”</code></p>\n</li>\n<li><p>在 /etc/profile中增加</p>\n<pre><code class=\"bash\">PATH=<span class=\"string\">\"<span class=\"variable\">$PATH</span>:/home/zhengb66/bin\"</span> \n<span class=\"built_in\">export</span> PATH\n</code></pre>\n</li>\n</ol>\n<h2 id=\"开机自启动\"><a href=\"#开机自启动\" class=\"headerlink\" title=\"开机自启动\"></a>开机自启动</h2><ol>\n<li><p>方法一，编辑rc.loacl脚本<br>Ubuntu开机之后会执行/etc/rc.local文件中的脚本，<br>所以我们可以直接在/etc/rc.local中添加启动脚本。<br>当然要添加到语句：exit 0 前面才行。代码如下:<br><code>sudo vi /etc/rc.local</code><br>然后在 exit 0 前面添加好脚本代码。</p>\n</li>\n<li><p>方法二，添加一个Ubuntu的开机启动服务。<br>如果要添加为开机启动执行的脚本文件，<br>可先将脚本复制或者软连接到/etc/init.d/目录下，<br>然后用：update-rc.d xxx defaults NN命令(NN为启动顺序)，<br>将脚本添加到初始化执行的队列中去。<br>注意如果脚本需要用到网络，则NN需设置一个比较大的数字，如99。<br>1) 将你的启动脚本复制到 /etc/init.d目录下<br>以下假设你的脚本文件名为 test。<br>2) 设置脚本文件的权限</p>\n</li>\n</ol>\n<p>代码如下:<br><code>sudo chmod 755 /etc/init.d/test</code><br>3) 执行如下命令将脚本放到启动脚本中去：<br>代码如下:<br><code>cd /etc/init.d</code>  <code>sudo update-rc.d test defaults 95</code><br> 注：其中数字95是脚本启动的顺序号，按照自己的需要相应修改即可。在你有多个启动脚本，而它们之间又有先后启动的依赖关系时你就知道这个数字的具体作用了。该命令的输出信息参考如下：<br>卸载启动脚本的方法：<br>代码如下:<br><code>cd /etc/init.d</code><br><code>sudo update-rc.d -f test remove</code></p>\n<h2 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h2><p>在Ubuntu下，cron是被默认安装并启动的。通过查看/etc/crontab<br>推荐使用crontab -e命令添加自定义的任务（编辑的是/var/spool/cron下对应用户的cron文件，在/var/spool/cron下的crontab文件 不可以直接创建或者直接修改，crontab文件是通过crontab命令得到的）。<br><code>crontab -e</code></p>\n<ol>\n<li><p>直接执行命令行<br>每2分钟打印一个字符串“Hello World”，保存至文件/home/laigw/cron/HelloWorld.txt中，cron 格式如下：<br><code>*/2 * * * * echo “Hello World.” &gt;&gt; /home/HelloWorld.txt</code></p>\n</li>\n<li><p>shell 文件<br>每3分钟调用一次 /home/laigw/cron/test.sh 文件，cron 格式如下：<br><code>*/3 * * * * /home/laigw/cron/test.sh</code></p>\n<h2 id=\"ftp和rsync配置\"><a href=\"#ftp和rsync配置\" class=\"headerlink\" title=\"ftp和rsync配置\"></a>ftp和rsync配置</h2></li>\n</ol>\n<h2 id=\"持续集成环境\"><a href=\"#持续集成环境\" class=\"headerlink\" title=\"持续集成环境\"></a>持续集成环境</h2><ol>\n<li>jenkens配置</li>\n<li>gitlab配置</li>\n<li>git服务器</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> ubuntu服务器私人定制：</strong> <Excerpt in index | 首页摘要><br>把ubuntu服务器打造成自己的个性服务器，装逼必备！！！<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<p>##　说明<br><strong>此教程针对Ubuntu14,其他版本仅作参考</strong></p>\n<p>##　用户密码管理<br><code>sudo passwd root</code></p>\n<ol>\n<li>添加一个用户组并指定id为1002<br><code>sudo groupadd －g 1002 www</code></li>\n<li><p>添加一个用户到www组并指定id为1003<br><code>sudo useradd wyx -g 1002 -u 1003 -m</code></p>\n</li>\n<li><p>修改用户的密码<br><code>sudo passwd wyx</code></p>\n</li>\n<li><p>删除一个用户<br><code>sudo userdel wyx</code></p>\n</li>\n<li><p>为该用户添加sudo权限</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo usermod <span class=\"_\">-a</span> -G adm wyx</div><div class=\"line\">sudo usermod <span class=\"_\">-a</span> -G sudo wyx</div></pre></td></tr></table></figure>\n<ol>\n<li>查看所有用户和用户组：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/passwd</div><div class=\"line\">cat /etc/group</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h2><ol>\n<li>安装nvm<code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</code></li>\n<li>安装node<code>nvm install v4.4.4</code>,安装<code>nvm install v6.9.1</code></li>\n<li>设置默认的node版本<code>nvm alias default v4.4.4</code></li>\n<li>安装npm3  <code>npm install -g npm@3</code></li>\n<li>设置淘宝的cnpm源  <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li>\n<li>验证安装<code>node -v,npm -v,cnpm -v</code><h2 id=\"安装node常用包\"><a href=\"#安装node常用包\" class=\"headerlink\" title=\"安装node常用包\"></a>安装node常用包</h2></li>\n<li>安装pm2<code>cnpm install -g pm2</code></li>\n<li>安装hexo博客<code>cnpm install -g hexo-cli</code></li>\n<li>安装同步插件rsync<code>cnpm install -g rsync</code></li>\n</ol>\n<h2 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h2><ol>\n<li>apt安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install -y docker.io</div><div class=\"line\">sudo ln -sf /usr/bin/docker.io /usr/<span class=\"built_in\">local</span>/bin/docker</div><div class=\"line\">sudo sed -i <span class=\"string\">'$acomplete -F _docker docker'</span> /etc/bash_completion.d/docker.io</div></pre></td></tr></table></figure>\n<ol>\n<li>源码安装最新版本</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install apt-transport-https</div><div class=\"line\">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9</div><div class=\"line\">sudo bash -c <span class=\"string\">\"echo deb https://get.docker.io/ubuntu docker main &gt; /etc/apt/sources.list.d/docker.list\"</span></div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install lxc-docker</div></pre></td></tr></table></figure>\n<ol>\n<li>验证安装版本<br><code>docker -v</code></li>\n</ol>\n<h2 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h2><p><code>sudo apt-get install nginx</code><br>启动和配置nginx</p>\n<h2 id=\"安装redis\"><a href=\"#安装redis\" class=\"headerlink\" title=\"安装redis\"></a>安装redis</h2><p><code>sudo apt-get install redis-server</code><br>启动和配置文件:</p>\n<h2 id=\"安装mongodb\"><a href=\"#安装mongodb\" class=\"headerlink\" title=\"安装mongodb\"></a>安装mongodb</h2><ol>\n<li>安装3.0</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb http://repo.mongodb.org/apt/debian wheezy/mongodb-org/3.0 main\"</span> | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list</div><div class=\"line\">apt-get update  </div><div class=\"line\">apt-get install mongodb-org</div></pre></td></tr></table></figure>\n<ol>\n<li>安装3.2最新版</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb http://repo.mongodb.org/apt/ubuntu \"</span>$(lsb_release -sc)<span class=\"string\">\"/mongodb-org/3.2 multiverse\"</span> | sudo tee /etc/apt/sources.list.d/mongodb.list</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install mongodb-org</div></pre></td></tr></table></figure>\n<ol>\n<li><p>制定版本<br><code>apt-get install mongodb-org=3.2.0 mongodb-org-server=3.2.0 mongodb-org-shell=3.2.0 mongodb-org-mongos=3.2.0 mongodb-org-tools=3.2.0</code></p>\n</li>\n<li><p>启动服务</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo service mongod start</div><div class=\"line\">sudo service mongod stop</div></pre></td></tr></table></figure>\n<ol>\n<li>验证安装<br><code>mongod --version</code></li>\n</ol>\n<p>配置</p>\n<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2><p>安装jdk1.7<code>sudo apt-get install openjdk-7-jdk</code><br>源码安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mkdir /usr/lib/jvm</div><div class=\"line\">sudo tar zxvf jdk-7u21-linux-i586.tar.gz -C /usr/lib/jvm</div><div class=\"line\"><span class=\"built_in\">cd</span> /usr/lib/jvm</div><div class=\"line\">sudo mv jdk1.7.0_21 java</div><div class=\"line\"></div><div class=\"line\">sudo vim ~/.bashrc</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/lib/jvm/java</div><div class=\"line\"><span class=\"built_in\">export</span> JRE_HOME=<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/jre  </div><div class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/lib:<span class=\"variable\">$&#123;JRE_HOME&#125;</span>/lib  </div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/bin:<span class=\"variable\">$PATH</span></div></pre></td></tr></table></figure>\n<h2 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h2><p>实用ubuntu自带的工具下载<br><code>sudo apt-get install mysql-server</code></p>\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><p>常见的方法有两种。</p>\n<ol>\n<li><p>在用户主目录下有一个 .bashrc 文件，可以在此文件中加入 PATH 的设置如下：<br><code>export PATH=”$PATH:/your path1/:/your path2/…..”</code></p>\n</li>\n<li><p>在 /etc/profile中增加</p>\n<pre><code class=\"bash\">PATH=<span class=\"string\">\"<span class=\"variable\">$PATH</span>:/home/zhengb66/bin\"</span> \n<span class=\"built_in\">export</span> PATH\n</code></pre>\n</li>\n</ol>\n<h2 id=\"开机自启动\"><a href=\"#开机自启动\" class=\"headerlink\" title=\"开机自启动\"></a>开机自启动</h2><ol>\n<li><p>方法一，编辑rc.loacl脚本<br>Ubuntu开机之后会执行/etc/rc.local文件中的脚本，<br>所以我们可以直接在/etc/rc.local中添加启动脚本。<br>当然要添加到语句：exit 0 前面才行。代码如下:<br><code>sudo vi /etc/rc.local</code><br>然后在 exit 0 前面添加好脚本代码。</p>\n</li>\n<li><p>方法二，添加一个Ubuntu的开机启动服务。<br>如果要添加为开机启动执行的脚本文件，<br>可先将脚本复制或者软连接到/etc/init.d/目录下，<br>然后用：update-rc.d xxx defaults NN命令(NN为启动顺序)，<br>将脚本添加到初始化执行的队列中去。<br>注意如果脚本需要用到网络，则NN需设置一个比较大的数字，如99。<br>1) 将你的启动脚本复制到 /etc/init.d目录下<br>以下假设你的脚本文件名为 test。<br>2) 设置脚本文件的权限</p>\n</li>\n</ol>\n<p>代码如下:<br><code>sudo chmod 755 /etc/init.d/test</code><br>3) 执行如下命令将脚本放到启动脚本中去：<br>代码如下:<br><code>cd /etc/init.d</code>  <code>sudo update-rc.d test defaults 95</code><br> 注：其中数字95是脚本启动的顺序号，按照自己的需要相应修改即可。在你有多个启动脚本，而它们之间又有先后启动的依赖关系时你就知道这个数字的具体作用了。该命令的输出信息参考如下：<br>卸载启动脚本的方法：<br>代码如下:<br><code>cd /etc/init.d</code><br><code>sudo update-rc.d -f test remove</code></p>\n<h2 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h2><p>在Ubuntu下，cron是被默认安装并启动的。通过查看/etc/crontab<br>推荐使用crontab -e命令添加自定义的任务（编辑的是/var/spool/cron下对应用户的cron文件，在/var/spool/cron下的crontab文件 不可以直接创建或者直接修改，crontab文件是通过crontab命令得到的）。<br><code>crontab -e</code></p>\n<ol>\n<li><p>直接执行命令行<br>每2分钟打印一个字符串“Hello World”，保存至文件/home/laigw/cron/HelloWorld.txt中，cron 格式如下：<br><code>*/2 * * * * echo “Hello World.” &gt;&gt; /home/HelloWorld.txt</code></p>\n</li>\n<li><p>shell 文件<br>每3分钟调用一次 /home/laigw/cron/test.sh 文件，cron 格式如下：<br><code>*/3 * * * * /home/laigw/cron/test.sh</code></p>\n<h2 id=\"ftp和rsync配置\"><a href=\"#ftp和rsync配置\" class=\"headerlink\" title=\"ftp和rsync配置\"></a>ftp和rsync配置</h2></li>\n</ol>\n<h2 id=\"持续集成环境\"><a href=\"#持续集成环境\" class=\"headerlink\" title=\"持续集成环境\"></a>持续集成环境</h2><ol>\n<li>jenkens配置</li>\n<li>gitlab配置</li>\n<li>git服务器</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"常用排序算法学习","date":"2016-07-08T14:39:24.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n    程序员各种排序算法，算法的实现和分析\n <!-- more -->\n<The rest of contents | 余下全文>\n\n## 排序算法的分类\n1. 排序分内排序和外排序。\n2. 内排序:指在排序期间数据对象全部存放在内存的排序。\n3. 外排序:指在排序期间全部对象个数太多,不能同时存放在内存,必须根据排序过程的要求,不断在内、外存之间移动的排序。\n4. 内排序的方法有许多种,按所用策略不同,可归纳为五类:插入排序、选择排序、交换排序、归并排序、分配排序和计数排序。\n5. 插入排序主要包括直接插入排序，折半插入排序和希尔排序两种;\n6. 选择排序主要包括直接选择排序和堆排序;\n7. 交换排序主要包括冒泡排序和快速排序;\n8. 归并排序主要包括二路归并(常用的归并排序)和自然归并。\n9. 分配排序主要包括箱排序和基数排序\n\n\n## 冒泡排序\n- 冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，是不用交换的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法\n```js\n// js代码\nfunction sort(arr) {\nif (arr.length == 0) {\n    return [];\n}\nvar length = arr.length;\nfor (var i = 0; i < length; i++) {\n        for (var j = 0; j < length - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                var temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n                console.log(arr);\n            }\n        }\n    }\n}\n\n```\n\n\n## 快速排序\n- 快速排序是对冒泡排序的一种改进。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列.\n- 时间复杂度：O（n*lgn）最坏：O（n^2）空间复杂度：O（n*lgn）\n\n```js\n// js递归实现\nfunction quickSort(arr) {\n    if (arr.length == 0) {\n        return [];\n    }\n    var left = [];\n    var right = [];\n    var pivot = arr[0];\n    for (var i = 1; i < arr.length; i++) {\n        if (arr[i] < pivot) {\n            left.push(arr[i]);\n        } else {\n            right.push(arr[i]);\n        }\n    }\n    return quickSort(left).concat(pivot, quickSort(right));\n}\nvar a = [];\nfor (var i = 0; i < 10; ++i) {\n    a[i] = Math.floor((Math.random() * 100) + 1);\n}\nconsole.log(a);\nconsole.log(quickSort(a));\n```\n## 直接插入排序  \n- 直接插入排序(straight insertion sort)的作法是：每次从无序表中取出第一个元素，把它插入到有序表的合适位置，使有序表仍然有序.\n\n```js\nfunction insertionSort(arr) {\n    var temp, inner;\n    for (var outer = 1; outer <= arr.length - 1; ++outer) {\n        temp = arr[outer];\n        inner = outer;\n        while (inner > 0 && (arr[inner - 1] >= temp)) {\n            arr[inner] = arr[inner - 1];\n            --inner;\n        }\n        arr[inner] = temp;\n    }\n    return arr;\n}\nvar a = [];\nfor (var i = 0; i < 10; ++i) {\n    a[i] = Math.floor((Math.random() * 100) + 1);\n}\nconsole.log(a);\nconsole.log(insertionSort(a));\n```\n\n## 折半插入排序\n- 折半插入排序算法的具体操作为：在将一个新元素插入已排好序的数组的过程中，寻找插入点时，将待插入区域的首元素设置为a[low],末元素设置为 a[high]，则轮比较时将待插入元素与a[m],其中m=(low+high)/2相比较,如果比参考元素小，则选择a[low]到a[m-1]为新 的插入区域(即high=m-1)，否则选择a[m+1]到a[high]为新的插入区域（即low=m+1），如此直至low<=high不成 立，即将此位置之后所有元素后移一位，并将新元素插入a[high+1]\n\n\n## 希尔排序\n- 先取一个小于n的整数d1作为第一个增量，把文件的全部记录分成d1个组。所有距离为dl的倍数的记录放在同一个组中。先在各组内进行直接插入 排序；然后，取第二个增量d2<d1重复上述的分组和排序，直至所取的增量dt=1(dt<dt-l<…<d2<d1)， 即所有记录放在同一组中进行直接插入排序为止。\n- 该方法实质上是一种分组插入方法。插入排序（Insertion Sort）的一个重要的特点是，如果原始数据的大部分元素已经排序，那么插入排序的速度很快（因为需要移动的元素很少）。从这个事实我们可以想到，如果原 始数据只有很少元素，那么排序的速度也很快。－－希尔排序就是基于这两点对插入排序作出了改进。\n\n\n## 直接选择排序\n- 直接选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第n个 元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么 交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。时间复杂度是O(n^2)\n\n\n## 堆排序\n- 我们知道堆的结构是节点i的孩子为2*i和2*i+1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n/2开始和其子节点共3个值选择最大(大顶堆)或者最小(小顶堆),这3个元素之间的选择当然不会破坏稳定性。但当为n /2-1, n/2-2, ...1这些个父节点选择元素时，就会破坏稳定性。有可能第n/2个父节点交换把后面一个元素交换过去了，而第n/2-1个父节点把后面一个相同的元素没 有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。\n\n\n\n## 二路归并排序\n- 归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素(认为直接有序)或者2个序列(1次比较和交换),然后把各个有序的段序列合并成一个有 序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定 性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结 果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。\n","source":"_posts/sort-study.md","raw":"title: 常用排序算法学习\ndate: 2016-07-08 22:39:24\ntags: 算法\ncategories: algorithm\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n    程序员各种排序算法，算法的实现和分析\n <!-- more -->\n<The rest of contents | 余下全文>\n\n## 排序算法的分类\n1. 排序分内排序和外排序。\n2. 内排序:指在排序期间数据对象全部存放在内存的排序。\n3. 外排序:指在排序期间全部对象个数太多,不能同时存放在内存,必须根据排序过程的要求,不断在内、外存之间移动的排序。\n4. 内排序的方法有许多种,按所用策略不同,可归纳为五类:插入排序、选择排序、交换排序、归并排序、分配排序和计数排序。\n5. 插入排序主要包括直接插入排序，折半插入排序和希尔排序两种;\n6. 选择排序主要包括直接选择排序和堆排序;\n7. 交换排序主要包括冒泡排序和快速排序;\n8. 归并排序主要包括二路归并(常用的归并排序)和自然归并。\n9. 分配排序主要包括箱排序和基数排序\n\n\n## 冒泡排序\n- 冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，是不用交换的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法\n```js\n// js代码\nfunction sort(arr) {\nif (arr.length == 0) {\n    return [];\n}\nvar length = arr.length;\nfor (var i = 0; i < length; i++) {\n        for (var j = 0; j < length - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                var temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n                console.log(arr);\n            }\n        }\n    }\n}\n\n```\n\n\n## 快速排序\n- 快速排序是对冒泡排序的一种改进。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列.\n- 时间复杂度：O（n*lgn）最坏：O（n^2）空间复杂度：O（n*lgn）\n\n```js\n// js递归实现\nfunction quickSort(arr) {\n    if (arr.length == 0) {\n        return [];\n    }\n    var left = [];\n    var right = [];\n    var pivot = arr[0];\n    for (var i = 1; i < arr.length; i++) {\n        if (arr[i] < pivot) {\n            left.push(arr[i]);\n        } else {\n            right.push(arr[i]);\n        }\n    }\n    return quickSort(left).concat(pivot, quickSort(right));\n}\nvar a = [];\nfor (var i = 0; i < 10; ++i) {\n    a[i] = Math.floor((Math.random() * 100) + 1);\n}\nconsole.log(a);\nconsole.log(quickSort(a));\n```\n## 直接插入排序  \n- 直接插入排序(straight insertion sort)的作法是：每次从无序表中取出第一个元素，把它插入到有序表的合适位置，使有序表仍然有序.\n\n```js\nfunction insertionSort(arr) {\n    var temp, inner;\n    for (var outer = 1; outer <= arr.length - 1; ++outer) {\n        temp = arr[outer];\n        inner = outer;\n        while (inner > 0 && (arr[inner - 1] >= temp)) {\n            arr[inner] = arr[inner - 1];\n            --inner;\n        }\n        arr[inner] = temp;\n    }\n    return arr;\n}\nvar a = [];\nfor (var i = 0; i < 10; ++i) {\n    a[i] = Math.floor((Math.random() * 100) + 1);\n}\nconsole.log(a);\nconsole.log(insertionSort(a));\n```\n\n## 折半插入排序\n- 折半插入排序算法的具体操作为：在将一个新元素插入已排好序的数组的过程中，寻找插入点时，将待插入区域的首元素设置为a[low],末元素设置为 a[high]，则轮比较时将待插入元素与a[m],其中m=(low+high)/2相比较,如果比参考元素小，则选择a[low]到a[m-1]为新 的插入区域(即high=m-1)，否则选择a[m+1]到a[high]为新的插入区域（即low=m+1），如此直至low<=high不成 立，即将此位置之后所有元素后移一位，并将新元素插入a[high+1]\n\n\n## 希尔排序\n- 先取一个小于n的整数d1作为第一个增量，把文件的全部记录分成d1个组。所有距离为dl的倍数的记录放在同一个组中。先在各组内进行直接插入 排序；然后，取第二个增量d2<d1重复上述的分组和排序，直至所取的增量dt=1(dt<dt-l<…<d2<d1)， 即所有记录放在同一组中进行直接插入排序为止。\n- 该方法实质上是一种分组插入方法。插入排序（Insertion Sort）的一个重要的特点是，如果原始数据的大部分元素已经排序，那么插入排序的速度很快（因为需要移动的元素很少）。从这个事实我们可以想到，如果原 始数据只有很少元素，那么排序的速度也很快。－－希尔排序就是基于这两点对插入排序作出了改进。\n\n\n## 直接选择排序\n- 直接选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第n个 元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么 交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。时间复杂度是O(n^2)\n\n\n## 堆排序\n- 我们知道堆的结构是节点i的孩子为2*i和2*i+1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n/2开始和其子节点共3个值选择最大(大顶堆)或者最小(小顶堆),这3个元素之间的选择当然不会破坏稳定性。但当为n /2-1, n/2-2, ...1这些个父节点选择元素时，就会破坏稳定性。有可能第n/2个父节点交换把后面一个元素交换过去了，而第n/2-1个父节点把后面一个相同的元素没 有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。\n\n\n\n## 二路归并排序\n- 归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素(认为直接有序)或者2个序列(1次比较和交换),然后把各个有序的段序列合并成一个有 序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定 性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结 果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。\n","slug":"sort-study","published":1,"updated":"2017-07-30T14:41:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla7g003s8p9ka0l7tx10","content":"<p><strong> 常用排序算法学习：</strong> <Excerpt in index | 首页摘要><br>    程序员各种排序算法，算法的实现和分析<br> <a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"排序算法的分类\"><a href=\"#排序算法的分类\" class=\"headerlink\" title=\"排序算法的分类\"></a>排序算法的分类</h2><ol>\n<li>排序分内排序和外排序。</li>\n<li>内排序:指在排序期间数据对象全部存放在内存的排序。</li>\n<li>外排序:指在排序期间全部对象个数太多,不能同时存放在内存,必须根据排序过程的要求,不断在内、外存之间移动的排序。</li>\n<li>内排序的方法有许多种,按所用策略不同,可归纳为五类:插入排序、选择排序、交换排序、归并排序、分配排序和计数排序。</li>\n<li>插入排序主要包括直接插入排序，折半插入排序和希尔排序两种;</li>\n<li>选择排序主要包括直接选择排序和堆排序;</li>\n<li>交换排序主要包括冒泡排序和快速排序;</li>\n<li>归并排序主要包括二路归并(常用的归并排序)和自然归并。</li>\n<li>分配排序主要包括箱排序和基数排序</li>\n</ol>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><ul>\n<li>冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，是不用交换的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// js代码</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">if</span> (arr.length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> length = arr.length;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; length - i - <span class=\"number\">1</span>; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> temp = arr[j];</div><div class=\"line\">                arr[j] = arr[j + <span class=\"number\">1</span>];</div><div class=\"line\">                arr[j + <span class=\"number\">1</span>] = temp;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(arr);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><ul>\n<li>快速排序是对冒泡排序的一种改进。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列.</li>\n<li>时间复杂度：O（n<em>lgn）最坏：O（n^2）空间复杂度：O（n</em>lgn）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// js递归实现</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (arr.length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> left = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> right = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> pivot = arr[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &lt; pivot) &#123;</div><div class=\"line\">            left.push(arr[i]);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            right.push(arr[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> quickSort(left).concat(pivot, quickSort(right));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;</div><div class=\"line\">    a[i] = <span class=\"built_in\">Math</span>.floor((<span class=\"built_in\">Math</span>.random() * <span class=\"number\">100</span>) + <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(quickSort(a));</div></pre></td></tr></table></figure>\n<h2 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h2><ul>\n<li>直接插入排序(straight insertion sort)的作法是：每次从无序表中取出第一个元素，把它插入到有序表的合适位置，使有序表仍然有序.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> temp, inner;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> outer = <span class=\"number\">1</span>; outer &lt;= arr.length - <span class=\"number\">1</span>; ++outer) &#123;</div><div class=\"line\">        temp = arr[outer];</div><div class=\"line\">        inner = outer;</div><div class=\"line\">        <span class=\"keyword\">while</span> (inner &gt; <span class=\"number\">0</span> &amp;&amp; (arr[inner - <span class=\"number\">1</span>] &gt;= temp)) &#123;</div><div class=\"line\">            arr[inner] = arr[inner - <span class=\"number\">1</span>];</div><div class=\"line\">            --inner;</div><div class=\"line\">        &#125;</div><div class=\"line\">        arr[inner] = temp;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;</div><div class=\"line\">    a[i] = <span class=\"built_in\">Math</span>.floor((<span class=\"built_in\">Math</span>.random() * <span class=\"number\">100</span>) + <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(insertionSort(a));</div></pre></td></tr></table></figure>\n<h2 id=\"折半插入排序\"><a href=\"#折半插入排序\" class=\"headerlink\" title=\"折半插入排序\"></a>折半插入排序</h2><ul>\n<li>折半插入排序算法的具体操作为：在将一个新元素插入已排好序的数组的过程中，寻找插入点时，将待插入区域的首元素设置为a[low],末元素设置为 a[high]，则轮比较时将待插入元素与a[m],其中m=(low+high)/2相比较,如果比参考元素小，则选择a[low]到a[m-1]为新 的插入区域(即high=m-1)，否则选择a[m+1]到a[high]为新的插入区域（即low=m+1），如此直至low&lt;=high不成 立，即将此位置之后所有元素后移一位，并将新元素插入a[high+1]</li>\n</ul>\n<h2 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h2><ul>\n<li>先取一个小于n的整数d1作为第一个增量，把文件的全部记录分成d1个组。所有距离为dl的倍数的记录放在同一个组中。先在各组内进行直接插入 排序；然后，取第二个增量d2&lt;d1重复上述的分组和排序，直至所取的增量dt=1(dt&lt;dt-l&lt;…&lt;d2&lt;d1)， 即所有记录放在同一组中进行直接插入排序为止。</li>\n<li>该方法实质上是一种分组插入方法。插入排序（Insertion Sort）的一个重要的特点是，如果原始数据的大部分元素已经排序，那么插入排序的速度很快（因为需要移动的元素很少）。从这个事实我们可以想到，如果原 始数据只有很少元素，那么排序的速度也很快。－－希尔排序就是基于这两点对插入排序作出了改进。</li>\n</ul>\n<h2 id=\"直接选择排序\"><a href=\"#直接选择排序\" class=\"headerlink\" title=\"直接选择排序\"></a>直接选择排序</h2><ul>\n<li>直接选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第n个 元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么 交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。时间复杂度是O(n^2)</li>\n</ul>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><ul>\n<li>我们知道堆的结构是节点i的孩子为2<em>i和2</em>i+1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n/2开始和其子节点共3个值选择最大(大顶堆)或者最小(小顶堆),这3个元素之间的选择当然不会破坏稳定性。但当为n /2-1, n/2-2, …1这些个父节点选择元素时，就会破坏稳定性。有可能第n/2个父节点交换把后面一个元素交换过去了，而第n/2-1个父节点把后面一个相同的元素没 有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。</li>\n</ul>\n<h2 id=\"二路归并排序\"><a href=\"#二路归并排序\" class=\"headerlink\" title=\"二路归并排序\"></a>二路归并排序</h2><ul>\n<li>归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素(认为直接有序)或者2个序列(1次比较和交换),然后把各个有序的段序列合并成一个有 序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定 性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结 果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。</li>\n</ul>\n","excerpt":"<p><strong> 常用排序算法学习：</strong> <Excerpt in index | 首页摘要><br>    程序员各种排序算法，算法的实现和分析<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"排序算法的分类\"><a href=\"#排序算法的分类\" class=\"headerlink\" title=\"排序算法的分类\"></a>排序算法的分类</h2><ol>\n<li>排序分内排序和外排序。</li>\n<li>内排序:指在排序期间数据对象全部存放在内存的排序。</li>\n<li>外排序:指在排序期间全部对象个数太多,不能同时存放在内存,必须根据排序过程的要求,不断在内、外存之间移动的排序。</li>\n<li>内排序的方法有许多种,按所用策略不同,可归纳为五类:插入排序、选择排序、交换排序、归并排序、分配排序和计数排序。</li>\n<li>插入排序主要包括直接插入排序，折半插入排序和希尔排序两种;</li>\n<li>选择排序主要包括直接选择排序和堆排序;</li>\n<li>交换排序主要包括冒泡排序和快速排序;</li>\n<li>归并排序主要包括二路归并(常用的归并排序)和自然归并。</li>\n<li>分配排序主要包括箱排序和基数排序</li>\n</ol>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><ul>\n<li>冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，是不用交换的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// js代码</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">if</span> (arr.length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> length = arr.length;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; length - i - <span class=\"number\">1</span>; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> temp = arr[j];</div><div class=\"line\">                arr[j] = arr[j + <span class=\"number\">1</span>];</div><div class=\"line\">                arr[j + <span class=\"number\">1</span>] = temp;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(arr);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><ul>\n<li>快速排序是对冒泡排序的一种改进。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列.</li>\n<li>时间复杂度：O（n<em>lgn）最坏：O（n^2）空间复杂度：O（n</em>lgn）</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// js递归实现</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (arr.length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> left = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> right = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> pivot = arr[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &lt; pivot) &#123;</div><div class=\"line\">            left.push(arr[i]);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            right.push(arr[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> quickSort(left).concat(pivot, quickSort(right));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;</div><div class=\"line\">    a[i] = <span class=\"built_in\">Math</span>.floor((<span class=\"built_in\">Math</span>.random() * <span class=\"number\">100</span>) + <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(quickSort(a));</div></pre></td></tr></table></figure>\n<h2 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h2><ul>\n<li>直接插入排序(straight insertion sort)的作法是：每次从无序表中取出第一个元素，把它插入到有序表的合适位置，使有序表仍然有序.</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> temp, inner;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> outer = <span class=\"number\">1</span>; outer &lt;= arr.length - <span class=\"number\">1</span>; ++outer) &#123;</div><div class=\"line\">        temp = arr[outer];</div><div class=\"line\">        inner = outer;</div><div class=\"line\">        <span class=\"keyword\">while</span> (inner &gt; <span class=\"number\">0</span> &amp;&amp; (arr[inner - <span class=\"number\">1</span>] &gt;= temp)) &#123;</div><div class=\"line\">            arr[inner] = arr[inner - <span class=\"number\">1</span>];</div><div class=\"line\">            --inner;</div><div class=\"line\">        &#125;</div><div class=\"line\">        arr[inner] = temp;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;</div><div class=\"line\">    a[i] = <span class=\"built_in\">Math</span>.floor((<span class=\"built_in\">Math</span>.random() * <span class=\"number\">100</span>) + <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(insertionSort(a));</div></pre></td></tr></table></figure>\n<h2 id=\"折半插入排序\"><a href=\"#折半插入排序\" class=\"headerlink\" title=\"折半插入排序\"></a>折半插入排序</h2><ul>\n<li>折半插入排序算法的具体操作为：在将一个新元素插入已排好序的数组的过程中，寻找插入点时，将待插入区域的首元素设置为a[low],末元素设置为 a[high]，则轮比较时将待插入元素与a[m],其中m=(low+high)/2相比较,如果比参考元素小，则选择a[low]到a[m-1]为新 的插入区域(即high=m-1)，否则选择a[m+1]到a[high]为新的插入区域（即low=m+1），如此直至low&lt;=high不成 立，即将此位置之后所有元素后移一位，并将新元素插入a[high+1]</li>\n</ul>\n<h2 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h2><ul>\n<li>先取一个小于n的整数d1作为第一个增量，把文件的全部记录分成d1个组。所有距离为dl的倍数的记录放在同一个组中。先在各组内进行直接插入 排序；然后，取第二个增量d2&lt;d1重复上述的分组和排序，直至所取的增量dt=1(dt&lt;dt-l&lt;…&lt;d2&lt;d1)， 即所有记录放在同一组中进行直接插入排序为止。</li>\n<li>该方法实质上是一种分组插入方法。插入排序（Insertion Sort）的一个重要的特点是，如果原始数据的大部分元素已经排序，那么插入排序的速度很快（因为需要移动的元素很少）。从这个事实我们可以想到，如果原 始数据只有很少元素，那么排序的速度也很快。－－希尔排序就是基于这两点对插入排序作出了改进。</li>\n</ul>\n<h2 id=\"直接选择排序\"><a href=\"#直接选择排序\" class=\"headerlink\" title=\"直接选择排序\"></a>直接选择排序</h2><ul>\n<li>直接选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第n个 元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么 交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。时间复杂度是O(n^2)</li>\n</ul>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><ul>\n<li>我们知道堆的结构是节点i的孩子为2<em>i和2</em>i+1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n/2开始和其子节点共3个值选择最大(大顶堆)或者最小(小顶堆),这3个元素之间的选择当然不会破坏稳定性。但当为n /2-1, n/2-2, …1这些个父节点选择元素时，就会破坏稳定性。有可能第n/2个父节点交换把后面一个元素交换过去了，而第n/2-1个父节点把后面一个相同的元素没 有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。</li>\n</ul>\n<h2 id=\"二路归并排序\"><a href=\"#二路归并排序\" class=\"headerlink\" title=\"二路归并排序\"></a>二路归并排序</h2><ul>\n<li>归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素(认为直接有序)或者2个序列(1次比较和交换),然后把各个有序的段序列合并成一个有 序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定 性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结 果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。</li>\n</ul>"},{"title":"用koa2.x写下载漫画的爬虫","date":"2017-05-13T23:15:38.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n使用koa2.x的async ，await解决异步问题，写一个下载漫画的爬虫，代码里有惊喜和福利哦！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 项目搭建\n1. 安装nodejs>7.6,安装koa-generator\n2. 直接`koa2 spider`,生成项目\n3. 安装request,request-promise,cheerio,mkdirp\n4. npm install安装依赖\n\n## 思路\n图片或者漫画爬虫的思路很简单，首先观察url的规律，把url按规律加入到下载任务，其实就是请求获得html内容，然后对html进行解析，找到下载的图片url（一般都是img标签的src属性值），把url放到数组保存，使用async await控制所有的任务，直到把所有的图片下载完。\n\n## 难点\n但是nodejs本身上异步的，如果你直接在for循环里去下载，肯定是不行的，必须控制好异步的执行上关键。\n爬虫简单，处理好异步难。这里我使用的es7中async，await配合promise解决异步问题，还可以使用async模块，eventproxy，等等异步控制模块来解决。\n\n## 核心代码,spider.js\n```js\nconst fs = require('fs');\nconst request = require(\"request-promise\");\nconst cheerio = require(\"cheerio\");\nconst mkdirp = require('mkdirp');\nconst config = require('../config');\nexports.download = async function(ctx, next) {\n    const dir = 'images';\n    // 图片链接地址\n    let links = [];\n    // 创建目录\n    mkdirp(dir);\n    var urls = [];\n    let tasks = [];\n    let downloadTask = [];\n    let url = config.url;\n    for (var i = 1; i <= config.size; i++) {\n        let link = url + '_' + i + '.html';\n        if (i == 1) {\n            link = url + '.html';\n        }\n        tasks.push(getResLink(i, link))\n    }\n    links = await Promise.all(tasks)\n    console.log('links==========', links.length);\n\n    for (var i = 0; i < links.length; i++) {\n        let item = links[i];\n        let index = item.split('___')[0];\n        let src = item.split('___')[1];\n        downloadTask.push(downloadImg(src, dir, index + links[i].substr(-4, 4)));\n    }\n    await Promise.all(downloadTask);\n}\n\nasync function downloadImg(url, dir, filename) {\n    console.log('download begin---', url);\n    request.get(url).pipe(fs.createWriteStream(dir + \"/\" + filename)).on('close', function() {\n        console.log('download success', url);\n    });\n}\nasync function getResLink(index, url) {\n    const body = await request(url);\n    let urls = [];\n    var $ = cheerio.load(body);\n    $(config.rule).each(function() {\n        var src = $(this).attr('src');\n        urls.push(src);\n    });\n    return index + '___' + urls[0];\n}\n```\n## 基础配置\n由于爬虫的复杂性基于不同的网站，不同的任务很不一样，这里只是把几个常用的变量抽取到了config.js。\n```js\nmodule.exports = {\n    //初始url\n    url: 'http://www.xieet.com/meinv/230',\n    size: 10,\n    // 选中图片img标签的选择器\n    rule: '.imgbox a img'\n};\n```\n\n## 运行代码\n1. 下载我上传的代码[koa-spider](https://github.com/maochunguang/koa-spider)\n2. npm install,npm start即可运行\n\n## 总结\n其实无论是写爬虫还是些其他程序，使用nodejs很大一部分都是要处理异步，要学好nodejs必须学好异步处理。\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/spider-koa2.md","raw":"title: 用koa2.x写下载漫画的爬虫\ndate: 2017-05-14 07:15:38\ntags: nodejs\ncategories: 学习笔记\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n使用koa2.x的async ，await解决异步问题，写一个下载漫画的爬虫，代码里有惊喜和福利哦！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 项目搭建\n1. 安装nodejs>7.6,安装koa-generator\n2. 直接`koa2 spider`,生成项目\n3. 安装request,request-promise,cheerio,mkdirp\n4. npm install安装依赖\n\n## 思路\n图片或者漫画爬虫的思路很简单，首先观察url的规律，把url按规律加入到下载任务，其实就是请求获得html内容，然后对html进行解析，找到下载的图片url（一般都是img标签的src属性值），把url放到数组保存，使用async await控制所有的任务，直到把所有的图片下载完。\n\n## 难点\n但是nodejs本身上异步的，如果你直接在for循环里去下载，肯定是不行的，必须控制好异步的执行上关键。\n爬虫简单，处理好异步难。这里我使用的es7中async，await配合promise解决异步问题，还可以使用async模块，eventproxy，等等异步控制模块来解决。\n\n## 核心代码,spider.js\n```js\nconst fs = require('fs');\nconst request = require(\"request-promise\");\nconst cheerio = require(\"cheerio\");\nconst mkdirp = require('mkdirp');\nconst config = require('../config');\nexports.download = async function(ctx, next) {\n    const dir = 'images';\n    // 图片链接地址\n    let links = [];\n    // 创建目录\n    mkdirp(dir);\n    var urls = [];\n    let tasks = [];\n    let downloadTask = [];\n    let url = config.url;\n    for (var i = 1; i <= config.size; i++) {\n        let link = url + '_' + i + '.html';\n        if (i == 1) {\n            link = url + '.html';\n        }\n        tasks.push(getResLink(i, link))\n    }\n    links = await Promise.all(tasks)\n    console.log('links==========', links.length);\n\n    for (var i = 0; i < links.length; i++) {\n        let item = links[i];\n        let index = item.split('___')[0];\n        let src = item.split('___')[1];\n        downloadTask.push(downloadImg(src, dir, index + links[i].substr(-4, 4)));\n    }\n    await Promise.all(downloadTask);\n}\n\nasync function downloadImg(url, dir, filename) {\n    console.log('download begin---', url);\n    request.get(url).pipe(fs.createWriteStream(dir + \"/\" + filename)).on('close', function() {\n        console.log('download success', url);\n    });\n}\nasync function getResLink(index, url) {\n    const body = await request(url);\n    let urls = [];\n    var $ = cheerio.load(body);\n    $(config.rule).each(function() {\n        var src = $(this).attr('src');\n        urls.push(src);\n    });\n    return index + '___' + urls[0];\n}\n```\n## 基础配置\n由于爬虫的复杂性基于不同的网站，不同的任务很不一样，这里只是把几个常用的变量抽取到了config.js。\n```js\nmodule.exports = {\n    //初始url\n    url: 'http://www.xieet.com/meinv/230',\n    size: 10,\n    // 选中图片img标签的选择器\n    rule: '.imgbox a img'\n};\n```\n\n## 运行代码\n1. 下载我上传的代码[koa-spider](https://github.com/maochunguang/koa-spider)\n2. npm install,npm start即可运行\n\n## 总结\n其实无论是写爬虫还是些其他程序，使用nodejs很大一部分都是要处理异步，要学好nodejs必须学好异步处理。\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"spider-koa2","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla7i003w8p9kqdnyy5w4","content":"<p><strong> 用koa2.x写下载漫画的爬虫：</strong> <Excerpt in index | 首页摘要><br>使用koa2.x的async ，await解决异步问题，写一个下载漫画的爬虫，代码里有惊喜和福利哦！<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h2><ol>\n<li>安装nodejs&gt;7.6,安装koa-generator</li>\n<li>直接<code>koa2 spider</code>,生成项目</li>\n<li>安装request,request-promise,cheerio,mkdirp</li>\n<li>npm install安装依赖</li>\n</ol>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>图片或者漫画爬虫的思路很简单，首先观察url的规律，把url按规律加入到下载任务，其实就是请求获得html内容，然后对html进行解析，找到下载的图片url（一般都是img标签的src属性值），把url放到数组保存，使用async await控制所有的任务，直到把所有的图片下载完。</p>\n<h2 id=\"难点\"><a href=\"#难点\" class=\"headerlink\" title=\"难点\"></a>难点</h2><p>但是nodejs本身上异步的，如果你直接在for循环里去下载，肯定是不行的，必须控制好异步的执行上关键。<br>爬虫简单，处理好异步难。这里我使用的es7中async，await配合promise解决异步问题，还可以使用async模块，eventproxy，等等异步控制模块来解决。</p>\n<h2 id=\"核心代码-spider-js\"><a href=\"#核心代码-spider-js\" class=\"headerlink\" title=\"核心代码,spider.js\"></a>核心代码,spider.js</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">\"request-promise\"</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">\"cheerio\"</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> mkdirp = <span class=\"built_in\">require</span>(<span class=\"string\">'mkdirp'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>);</div><div class=\"line\">exports.download = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> dir = <span class=\"string\">'images'</span>;</div><div class=\"line\">    <span class=\"comment\">// 图片链接地址</span></div><div class=\"line\">    <span class=\"keyword\">let</span> links = [];</div><div class=\"line\">    <span class=\"comment\">// 创建目录</span></div><div class=\"line\">    mkdirp(dir);</div><div class=\"line\">    <span class=\"keyword\">var</span> urls = [];</div><div class=\"line\">    <span class=\"keyword\">let</span> tasks = [];</div><div class=\"line\">    <span class=\"keyword\">let</span> downloadTask = [];</div><div class=\"line\">    <span class=\"keyword\">let</span> url = config.url;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= config.size; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> link = url + <span class=\"string\">'_'</span> + i + <span class=\"string\">'.html'</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            link = url + <span class=\"string\">'.html'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        tasks.push(getResLink(i, link))</div><div class=\"line\">    &#125;</div><div class=\"line\">    links = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(tasks)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'links=========='</span>, links.length);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; links.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> item = links[i];</div><div class=\"line\">        <span class=\"keyword\">let</span> index = item.split(<span class=\"string\">'___'</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">let</span> src = item.split(<span class=\"string\">'___'</span>)[<span class=\"number\">1</span>];</div><div class=\"line\">        downloadTask.push(downloadImg(src, dir, index + links[i].substr(<span class=\"number\">-4</span>, <span class=\"number\">4</span>)));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(downloadTask);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadImg</span>(<span class=\"params\">url, dir, filename</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'download begin---'</span>, url);</div><div class=\"line\">    request.get(url).pipe(fs.createWriteStream(dir + <span class=\"string\">\"/\"</span> + filename)).on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'download success'</span>, url);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResLink</span>(<span class=\"params\">index, url</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> body = <span class=\"keyword\">await</span> request(url);</div><div class=\"line\">    <span class=\"keyword\">let</span> urls = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> $ = cheerio.load(body);</div><div class=\"line\">    $(config.rule).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> src = $(<span class=\"keyword\">this</span>).attr(<span class=\"string\">'src'</span>);</div><div class=\"line\">        urls.push(src);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> index + <span class=\"string\">'___'</span> + urls[<span class=\"number\">0</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"基础配置\"><a href=\"#基础配置\" class=\"headerlink\" title=\"基础配置\"></a>基础配置</h2><p>由于爬虫的复杂性基于不同的网站，不同的任务很不一样，这里只是把几个常用的变量抽取到了config.js。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"comment\">//初始url</span></div><div class=\"line\">    url: <span class=\"string\">'http://www.xieet.com/meinv/230'</span>,</div><div class=\"line\">    size: <span class=\"number\">10</span>,</div><div class=\"line\">    <span class=\"comment\">// 选中图片img标签的选择器</span></div><div class=\"line\">    rule: <span class=\"string\">'.imgbox a img'</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"运行代码\"><a href=\"#运行代码\" class=\"headerlink\" title=\"运行代码\"></a>运行代码</h2><ol>\n<li>下载我上传的代码<a href=\"https://github.com/maochunguang/koa-spider\">koa-spider</a></li>\n<li>npm install,npm start即可运行</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>其实无论是写爬虫还是些其他程序，使用nodejs很大一部分都是要处理异步，要学好nodejs必须学好异步处理。</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 用koa2.x写下载漫画的爬虫：</strong> <Excerpt in index | 首页摘要><br>使用koa2.x的async ，await解决异步问题，写一个下载漫画的爬虫，代码里有惊喜和福利哦！<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h2><ol>\n<li>安装nodejs&gt;7.6,安装koa-generator</li>\n<li>直接<code>koa2 spider</code>,生成项目</li>\n<li>安装request,request-promise,cheerio,mkdirp</li>\n<li>npm install安装依赖</li>\n</ol>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>图片或者漫画爬虫的思路很简单，首先观察url的规律，把url按规律加入到下载任务，其实就是请求获得html内容，然后对html进行解析，找到下载的图片url（一般都是img标签的src属性值），把url放到数组保存，使用async await控制所有的任务，直到把所有的图片下载完。</p>\n<h2 id=\"难点\"><a href=\"#难点\" class=\"headerlink\" title=\"难点\"></a>难点</h2><p>但是nodejs本身上异步的，如果你直接在for循环里去下载，肯定是不行的，必须控制好异步的执行上关键。<br>爬虫简单，处理好异步难。这里我使用的es7中async，await配合promise解决异步问题，还可以使用async模块，eventproxy，等等异步控制模块来解决。</p>\n<h2 id=\"核心代码-spider-js\"><a href=\"#核心代码-spider-js\" class=\"headerlink\" title=\"核心代码,spider.js\"></a>核心代码,spider.js</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">\"request-promise\"</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> cheerio = <span class=\"built_in\">require</span>(<span class=\"string\">\"cheerio\"</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> mkdirp = <span class=\"built_in\">require</span>(<span class=\"string\">'mkdirp'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'../config'</span>);</div><div class=\"line\">exports.download = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> dir = <span class=\"string\">'images'</span>;</div><div class=\"line\">    <span class=\"comment\">// 图片链接地址</span></div><div class=\"line\">    <span class=\"keyword\">let</span> links = [];</div><div class=\"line\">    <span class=\"comment\">// 创建目录</span></div><div class=\"line\">    mkdirp(dir);</div><div class=\"line\">    <span class=\"keyword\">var</span> urls = [];</div><div class=\"line\">    <span class=\"keyword\">let</span> tasks = [];</div><div class=\"line\">    <span class=\"keyword\">let</span> downloadTask = [];</div><div class=\"line\">    <span class=\"keyword\">let</span> url = config.url;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= config.size; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> link = url + <span class=\"string\">'_'</span> + i + <span class=\"string\">'.html'</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            link = url + <span class=\"string\">'.html'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        tasks.push(getResLink(i, link))</div><div class=\"line\">    &#125;</div><div class=\"line\">    links = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(tasks)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'links=========='</span>, links.length);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; links.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> item = links[i];</div><div class=\"line\">        <span class=\"keyword\">let</span> index = item.split(<span class=\"string\">'___'</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">        <span class=\"keyword\">let</span> src = item.split(<span class=\"string\">'___'</span>)[<span class=\"number\">1</span>];</div><div class=\"line\">        downloadTask.push(downloadImg(src, dir, index + links[i].substr(<span class=\"number\">-4</span>, <span class=\"number\">4</span>)));</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(downloadTask);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadImg</span>(<span class=\"params\">url, dir, filename</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'download begin---'</span>, url);</div><div class=\"line\">    request.get(url).pipe(fs.createWriteStream(dir + <span class=\"string\">\"/\"</span> + filename)).on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'download success'</span>, url);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResLink</span>(<span class=\"params\">index, url</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> body = <span class=\"keyword\">await</span> request(url);</div><div class=\"line\">    <span class=\"keyword\">let</span> urls = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> $ = cheerio.load(body);</div><div class=\"line\">    $(config.rule).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> src = $(<span class=\"keyword\">this</span>).attr(<span class=\"string\">'src'</span>);</div><div class=\"line\">        urls.push(src);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> index + <span class=\"string\">'___'</span> + urls[<span class=\"number\">0</span>];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"基础配置\"><a href=\"#基础配置\" class=\"headerlink\" title=\"基础配置\"></a>基础配置</h2><p>由于爬虫的复杂性基于不同的网站，不同的任务很不一样，这里只是把几个常用的变量抽取到了config.js。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"comment\">//初始url</span></div><div class=\"line\">    url: <span class=\"string\">'http://www.xieet.com/meinv/230'</span>,</div><div class=\"line\">    size: <span class=\"number\">10</span>,</div><div class=\"line\">    <span class=\"comment\">// 选中图片img标签的选择器</span></div><div class=\"line\">    rule: <span class=\"string\">'.imgbox a img'</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"运行代码\"><a href=\"#运行代码\" class=\"headerlink\" title=\"运行代码\"></a>运行代码</h2><ol>\n<li>下载我上传的代码<a href=\"https://github.com/maochunguang/koa-spider\">koa-spider</a></li>\n<li>npm install,npm start即可运行</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>其实无论是写爬虫还是些其他程序，使用nodejs很大一部分都是要处理异步，要学好nodejs必须学好异步处理。</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Sprigmvc项目转为springboot","date":"2018-02-06T14:12:55.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n是否有老掉牙的springmvc项目，想转成springboot项目，看这个文章就对了。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 说明\n* 如果你的项目连maven项目都不是，请自行转为maven项目，在按照本教程进行。\n* 本教程适用于spring+springmvc+mybatis+shiro的maven项目。\n\n## 1.修改pom文件依赖\n1. 删除之前的spring依赖，添加springboot依赖\n```xml\n<parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n</parent>\n<dependencies>\n       <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n\n            <!-- 这个是剔除掉自带的 tomcat部署的-->\n            <exclusions>\n                <exclusion>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-starter-tomcat</artifactId>\n                </exclusion>\n            </exclusions>\n\n        </dependency>\n        <!-- tomcat容器部署 -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-tomcat</artifactId>\n            <!--<scope>compile</scope>-->\n        </dependency>\n        <dependency>\n            <groupId>org.mybatis.spring.boot</groupId>\n            <artifactId>mybatis-spring-boot-starter</artifactId>\n            <version>1.3.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <!-- 支持 @ConfigurationProperties 注解 -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-configuration-processor</artifactId>\n            <optional>true</optional>\n        </dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.tomcat.embed</groupId>\n\t\t\t<artifactId>tomcat-embed-jasper</artifactId>\n\t\t</dependency>\n</dependencies>\n```\n2. 添加springboot构建插件\n```xml\n<plugins>\n    <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <configuration>\n            <source>1.7</source>\n            <target>1.7</target>\n        </configuration>\n    </plugin>\n    <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <executions>\n            <execution>\n                <goals>\n                    <goal>repackage</goal>\n                </goals>\n            </execution>\n        </executions>\n    </plugin>\n</plugins>\n```\n## 2.添加application启动文件\n注意，如果Application在controller，service，dao的上一层包里，无需配置`@ComponentScan`,\n否则，需要指明要扫描的包。\n```java\n@SpringBootApplication\n//@ComponentScan({\"com.cms.controller\",\"com.cms.service\",\"com.cms.dao\"})\npublic class Application extends SpringBootServletInitializer {\n\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n        return application.sources(Application.class);\n    }\n\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```\n## 3.添加springboot配置文件\n1. 在resources下面添加application.properties文件\n2. 添加基本配置\n```\n#默认前缀\nserver.contextPath=/\n# 指定环境\nspring.profiles.active=local\n# jsp配置\nspring.mvc.view.prefix=/WEB-INF/jsp/\nspring.mvc.view.suffix=.jsp\n#log配置文件\nlogging.config=classpath:logback-cms.xml\n#log路径\nlogging.path=/Users/mac/work-tommy/cms-springboot/logs/\n#数据源\nspring.datasource.name=adminDataSource\nspring.datasource.driverClassName = com.mysql.jdbc.Driver\nspring.datasource.url = jdbc:mysql://localhost:3306/mycms?useUnicode=true&autoReconnect=true&characterEncoding=utf-8\nspring.datasource.username = root\nspring.datasource.password = 123456\n```\n## 4.使用@Configuration注入配置\n1. 注入mybatis配置,分页插件请自主选择\n```java\n@Configuration\n@MapperScan(basePackages = \"com.kuwo.dao\",sqlSessionTemplateRef  = \"adminSqlSessionTemplate\")\npublic class AdminDataSourceConfig {\n\n    @Bean(name = \"adminDataSource\")\n    @ConfigurationProperties(prefix = \"spring.datasource\")\n    @Primary\n    public DataSource adminDataSource() {\n        return DataSourceBuilder.create().build();\n    }\n\n    @Bean(name = \"adminSqlSessionFactory\")\n    @Primary\n    public SqlSessionFactory adminSqlSessionFactory(@Qualifier(\"adminDataSource\") DataSource dataSource) throws Exception {\n        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();\n        bean.setDataSource(dataSource);\n        //分页插件\n//        PageHelper pageHelper = new PageHelper();\n        PagePlugin pagePlugin = new PagePlugin();\n//        Properties props = new Properties();\n//        props.setProperty(\"reasonable\", \"true\");\n//        props.setProperty(\"supportMethodsArguments\", \"true\");\n//        props.setProperty(\"returnPageInfo\", \"check\");\n//        props.setProperty(\"params\", \"count=countSql\");\n//        pageHelper.setProperties(props);\n        //添加插件\n        bean.setPlugins(new Interceptor[]{pagePlugin});\n        // 添加mybatis配置文件\n        bean.setConfigLocation(new DefaultResourceLoader().getResource(\"classpath:mybatis/mybatis-config.xml\"));\n        // 添加mybatis映射文件\n        bean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(\"classpath:mybatis/system/*.xml\"));\n        return bean.getObject();\n    }\n\n    @Bean(name = \"adminTransactionManager\")\n    @Primary\n    public DataSourceTransactionManager adminTransactionManager(@Qualifier(\"adminDataSource\") DataSource dataSource) {\n        return new DataSourceTransactionManager(dataSource);\n    }\n\n    @Bean(name = \"adminSqlSessionTemplate\")\n    @Primary\n    public SqlSessionTemplate adminSqlSessionTemplate(@Qualifier(\"adminSqlSessionFactory\") SqlSessionFactory sqlSessionFactory) throws Exception {\n        return new SqlSessionTemplate(sqlSessionFactory);\n    }\n}\n```\n\n2. 添加Interceptor配置,注意addInterceptor的顺序，不要搞乱了\n```java\n@Configuration\npublic class InterceptorConfiguration extends WebMvcConfigurerAdapter{\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new LoginHandlerInterceptor());\n    }\n}\n```\n3. 添加shiro配置文件\n    * 注意：本来使用redis做session缓存，但是和shiro集成发现一个问题，user对象存储以后，从shiro中获取后，无法进行类型转换，所以暂时放弃了redis做session缓存。\n\n```java\n@Configuration\npublic class ShiroConfiguration {\n    @Value(\"${spring.redis.host}\")\n    private String host;\n\n    @Value(\"${spring.redis.port}\")\n    private int port;\n\n    @Value(\"${spring.redis.timeout}\")\n    private int timeout;\n    @Bean\n    public static LifecycleBeanPostProcessor getLifecycleBeanPostProcessor() {\n        return new LifecycleBeanPostProcessor();\n    }\n\n    /**\n     * ShiroFilterFactoryBean 处理拦截资源文件问题。\n     * 注意：单独一个ShiroFilterFactoryBean配置是或报错的，因为在\n     * 初始化ShiroFilterFactoryBean的时候需要注入：SecurityManager\n     *\n     Filter Chain定义说明\n     1、一个URL可以配置多个Filter，使用逗号分隔\n     2、当设置多个过滤器时，全部验证通过，才视为通过\n     3、部分过滤器可指定参数，如perms，roles\n     *\n     */\n    @Bean\n    public ShiroFilterFactoryBean shiroFilter(SecurityManager securityManager){\n        System.out.println(\"ShiroConfiguration.shirFilter()\");\n        ShiroFilterFactoryBean shiroFilterFactoryBean  = new ShiroFilterFactoryBean();\n\n        // 必须设置 SecurityManager\n        shiroFilterFactoryBean.setSecurityManager(securityManager);\n        // 如果不设置默认会自动寻找Web工程根目录下的\"/login.jsp\"页面\n        shiroFilterFactoryBean.setLoginUrl(\"/login_toLogin\");\n        // 登录成功后要跳转的链接\n        shiroFilterFactoryBean.setSuccessUrl(\"/usersPage\");\n        //未授权界面;\n        shiroFilterFactoryBean.setUnauthorizedUrl(\"/403\");\n        //拦截器.\n        Map<String,String> filterChainDefinitionMap = new LinkedHashMap<>();\n\n        //配置退出 过滤器,其中的具体的退出代码Shiro已经替我们实现了\n        filterChainDefinitionMap.put(\"/logout\", \"logout\");\n        filterChainDefinitionMap.put(\"/login_toLogin\", \"anon\");\n        filterChainDefinitionMap.put(\"/login_login\", \"anon\");\n        filterChainDefinitionMap.put(\"/static/login/**\",\"anon\");\n        filterChainDefinitionMap.put(\"/static/js/**\",\"anon\");\n        filterChainDefinitionMap.put(\"/uploadFiles/uploadImgs/**\",\"anon\");\n        filterChainDefinitionMap.put(\"/code.do\",\"anon\");\n        filterChainDefinitionMap.put(\"/font-awesome/**\",\"anon\");\n        //<!-- 过滤链定义，从上向下顺序执行，一般将 /**放在最为下边 -->:这是一个坑呢，一不小心代码就不好使了;\n        //<!-- authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问-->\n\n        filterChainDefinitionMap.put(\"/**\", \"authc\");\n\n\n        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);\n        return shiroFilterFactoryBean;\n    }\n\n\n    @Bean\n    public SecurityManager securityManager(){\n        DefaultWebSecurityManager securityManager =  new DefaultWebSecurityManager();\n        //设置realm.\n        securityManager.setRealm(myShiroRealm());\n        // 自定义缓存实现 使用redis\n        //securityManager.setCacheManager(cacheManager());\n        // 自定义session管理 使用redis\n        securityManager.setSessionManager(sessionManager());\n        return securityManager;\n    }\n\n    @Bean\n    public ShiroRealm myShiroRealm(){\n        ShiroRealm myShiroRealm = new ShiroRealm();\n//        myShiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());\n        return myShiroRealm;\n    }\n\n}\n    /**\n     *  开启shiro aop注解支持.\n     *  使用代理方式;所以需要开启代码支持;\n     * @param securityManager\n     * @return\n     */\n    @Bean\n    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager){\n        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = new AuthorizationAttributeSourceAdvisor();\n        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);\n        return authorizationAttributeSourceAdvisor;\n    }\n\n    /**\n     * 配置shiro redisManager\n     * 使用的是shiro-redis开源插件\n     * @return\n     */\n    public RedisManager redisManager() {\n        RedisManager redisManager = new RedisManager();\n        redisManager.setHost(host);\n        redisManager.setPort(port);\n        redisManager.setExpire(1800);\n        redisManager.setTimeout(timeout);\n        // redisManager.setPassword(password);\n        return redisManager;\n    }\n\n    /**\n     * cacheManager 缓存 redis实现\n     * 使用的是shiro-redis开源插件\n     * @return\n     */\n    public RedisCacheManager cacheManager() {\n        RedisCacheManager redisCacheManager = new RedisCacheManager();\n        redisCacheManager.setRedisManager(redisManager());\n        return redisCacheManager;\n    }\n\n    /**\n     * RedisSessionDAO shiro sessionDao层的实现 通过redis\n     * 使用的是shiro-redis开源插件\n     */\n    @Bean\n    public RedisSessionDAO redisSessionDAO() {\n        RedisSessionDAO redisSessionDAO = new RedisSessionDAO();\n        redisSessionDAO.setRedisManager(redisManager());\n        return redisSessionDAO;\n    }\n\n    @Bean\n    public DefaultWebSessionManager sessionManager() {\n        DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();\n//        sessionManager.setSessionDAO(redisSessionDAO());\n        return sessionManager;\n    }\n\n}\n```\n\n## 总结\n搞了一天时间把项目转成springboot，查阅各种资料，希望这篇文章能够为你带来帮助。\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/sprigmvc2boot.md","raw":"title: sprigmvc项目转为springboot\ndate: 2018-02-06 22:12:55\ntags: java\ncategories: 项目实战\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n是否有老掉牙的springmvc项目，想转成springboot项目，看这个文章就对了。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 说明\n* 如果你的项目连maven项目都不是，请自行转为maven项目，在按照本教程进行。\n* 本教程适用于spring+springmvc+mybatis+shiro的maven项目。\n\n## 1.修改pom文件依赖\n1. 删除之前的spring依赖，添加springboot依赖\n```xml\n<parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.5.9.RELEASE</version>\n</parent>\n<dependencies>\n       <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n\n            <!-- 这个是剔除掉自带的 tomcat部署的-->\n            <exclusions>\n                <exclusion>\n                    <groupId>org.springframework.boot</groupId>\n                    <artifactId>spring-boot-starter-tomcat</artifactId>\n                </exclusion>\n            </exclusions>\n\n        </dependency>\n        <!-- tomcat容器部署 -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-tomcat</artifactId>\n            <!--<scope>compile</scope>-->\n        </dependency>\n        <dependency>\n            <groupId>org.mybatis.spring.boot</groupId>\n            <artifactId>mybatis-spring-boot-starter</artifactId>\n            <version>1.3.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <!-- 支持 @ConfigurationProperties 注解 -->\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-configuration-processor</artifactId>\n            <optional>true</optional>\n        </dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.apache.tomcat.embed</groupId>\n\t\t\t<artifactId>tomcat-embed-jasper</artifactId>\n\t\t</dependency>\n</dependencies>\n```\n2. 添加springboot构建插件\n```xml\n<plugins>\n    <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <configuration>\n            <source>1.7</source>\n            <target>1.7</target>\n        </configuration>\n    </plugin>\n    <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n        <version>1.5.9.RELEASE</version>\n        <executions>\n            <execution>\n                <goals>\n                    <goal>repackage</goal>\n                </goals>\n            </execution>\n        </executions>\n    </plugin>\n</plugins>\n```\n## 2.添加application启动文件\n注意，如果Application在controller，service，dao的上一层包里，无需配置`@ComponentScan`,\n否则，需要指明要扫描的包。\n```java\n@SpringBootApplication\n//@ComponentScan({\"com.cms.controller\",\"com.cms.service\",\"com.cms.dao\"})\npublic class Application extends SpringBootServletInitializer {\n\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n        return application.sources(Application.class);\n    }\n\n    public static void main(String[] args) throws Exception {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```\n## 3.添加springboot配置文件\n1. 在resources下面添加application.properties文件\n2. 添加基本配置\n```\n#默认前缀\nserver.contextPath=/\n# 指定环境\nspring.profiles.active=local\n# jsp配置\nspring.mvc.view.prefix=/WEB-INF/jsp/\nspring.mvc.view.suffix=.jsp\n#log配置文件\nlogging.config=classpath:logback-cms.xml\n#log路径\nlogging.path=/Users/mac/work-tommy/cms-springboot/logs/\n#数据源\nspring.datasource.name=adminDataSource\nspring.datasource.driverClassName = com.mysql.jdbc.Driver\nspring.datasource.url = jdbc:mysql://localhost:3306/mycms?useUnicode=true&autoReconnect=true&characterEncoding=utf-8\nspring.datasource.username = root\nspring.datasource.password = 123456\n```\n## 4.使用@Configuration注入配置\n1. 注入mybatis配置,分页插件请自主选择\n```java\n@Configuration\n@MapperScan(basePackages = \"com.kuwo.dao\",sqlSessionTemplateRef  = \"adminSqlSessionTemplate\")\npublic class AdminDataSourceConfig {\n\n    @Bean(name = \"adminDataSource\")\n    @ConfigurationProperties(prefix = \"spring.datasource\")\n    @Primary\n    public DataSource adminDataSource() {\n        return DataSourceBuilder.create().build();\n    }\n\n    @Bean(name = \"adminSqlSessionFactory\")\n    @Primary\n    public SqlSessionFactory adminSqlSessionFactory(@Qualifier(\"adminDataSource\") DataSource dataSource) throws Exception {\n        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();\n        bean.setDataSource(dataSource);\n        //分页插件\n//        PageHelper pageHelper = new PageHelper();\n        PagePlugin pagePlugin = new PagePlugin();\n//        Properties props = new Properties();\n//        props.setProperty(\"reasonable\", \"true\");\n//        props.setProperty(\"supportMethodsArguments\", \"true\");\n//        props.setProperty(\"returnPageInfo\", \"check\");\n//        props.setProperty(\"params\", \"count=countSql\");\n//        pageHelper.setProperties(props);\n        //添加插件\n        bean.setPlugins(new Interceptor[]{pagePlugin});\n        // 添加mybatis配置文件\n        bean.setConfigLocation(new DefaultResourceLoader().getResource(\"classpath:mybatis/mybatis-config.xml\"));\n        // 添加mybatis映射文件\n        bean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(\"classpath:mybatis/system/*.xml\"));\n        return bean.getObject();\n    }\n\n    @Bean(name = \"adminTransactionManager\")\n    @Primary\n    public DataSourceTransactionManager adminTransactionManager(@Qualifier(\"adminDataSource\") DataSource dataSource) {\n        return new DataSourceTransactionManager(dataSource);\n    }\n\n    @Bean(name = \"adminSqlSessionTemplate\")\n    @Primary\n    public SqlSessionTemplate adminSqlSessionTemplate(@Qualifier(\"adminSqlSessionFactory\") SqlSessionFactory sqlSessionFactory) throws Exception {\n        return new SqlSessionTemplate(sqlSessionFactory);\n    }\n}\n```\n\n2. 添加Interceptor配置,注意addInterceptor的顺序，不要搞乱了\n```java\n@Configuration\npublic class InterceptorConfiguration extends WebMvcConfigurerAdapter{\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new LoginHandlerInterceptor());\n    }\n}\n```\n3. 添加shiro配置文件\n    * 注意：本来使用redis做session缓存，但是和shiro集成发现一个问题，user对象存储以后，从shiro中获取后，无法进行类型转换，所以暂时放弃了redis做session缓存。\n\n```java\n@Configuration\npublic class ShiroConfiguration {\n    @Value(\"${spring.redis.host}\")\n    private String host;\n\n    @Value(\"${spring.redis.port}\")\n    private int port;\n\n    @Value(\"${spring.redis.timeout}\")\n    private int timeout;\n    @Bean\n    public static LifecycleBeanPostProcessor getLifecycleBeanPostProcessor() {\n        return new LifecycleBeanPostProcessor();\n    }\n\n    /**\n     * ShiroFilterFactoryBean 处理拦截资源文件问题。\n     * 注意：单独一个ShiroFilterFactoryBean配置是或报错的，因为在\n     * 初始化ShiroFilterFactoryBean的时候需要注入：SecurityManager\n     *\n     Filter Chain定义说明\n     1、一个URL可以配置多个Filter，使用逗号分隔\n     2、当设置多个过滤器时，全部验证通过，才视为通过\n     3、部分过滤器可指定参数，如perms，roles\n     *\n     */\n    @Bean\n    public ShiroFilterFactoryBean shiroFilter(SecurityManager securityManager){\n        System.out.println(\"ShiroConfiguration.shirFilter()\");\n        ShiroFilterFactoryBean shiroFilterFactoryBean  = new ShiroFilterFactoryBean();\n\n        // 必须设置 SecurityManager\n        shiroFilterFactoryBean.setSecurityManager(securityManager);\n        // 如果不设置默认会自动寻找Web工程根目录下的\"/login.jsp\"页面\n        shiroFilterFactoryBean.setLoginUrl(\"/login_toLogin\");\n        // 登录成功后要跳转的链接\n        shiroFilterFactoryBean.setSuccessUrl(\"/usersPage\");\n        //未授权界面;\n        shiroFilterFactoryBean.setUnauthorizedUrl(\"/403\");\n        //拦截器.\n        Map<String,String> filterChainDefinitionMap = new LinkedHashMap<>();\n\n        //配置退出 过滤器,其中的具体的退出代码Shiro已经替我们实现了\n        filterChainDefinitionMap.put(\"/logout\", \"logout\");\n        filterChainDefinitionMap.put(\"/login_toLogin\", \"anon\");\n        filterChainDefinitionMap.put(\"/login_login\", \"anon\");\n        filterChainDefinitionMap.put(\"/static/login/**\",\"anon\");\n        filterChainDefinitionMap.put(\"/static/js/**\",\"anon\");\n        filterChainDefinitionMap.put(\"/uploadFiles/uploadImgs/**\",\"anon\");\n        filterChainDefinitionMap.put(\"/code.do\",\"anon\");\n        filterChainDefinitionMap.put(\"/font-awesome/**\",\"anon\");\n        //<!-- 过滤链定义，从上向下顺序执行，一般将 /**放在最为下边 -->:这是一个坑呢，一不小心代码就不好使了;\n        //<!-- authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问-->\n\n        filterChainDefinitionMap.put(\"/**\", \"authc\");\n\n\n        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);\n        return shiroFilterFactoryBean;\n    }\n\n\n    @Bean\n    public SecurityManager securityManager(){\n        DefaultWebSecurityManager securityManager =  new DefaultWebSecurityManager();\n        //设置realm.\n        securityManager.setRealm(myShiroRealm());\n        // 自定义缓存实现 使用redis\n        //securityManager.setCacheManager(cacheManager());\n        // 自定义session管理 使用redis\n        securityManager.setSessionManager(sessionManager());\n        return securityManager;\n    }\n\n    @Bean\n    public ShiroRealm myShiroRealm(){\n        ShiroRealm myShiroRealm = new ShiroRealm();\n//        myShiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());\n        return myShiroRealm;\n    }\n\n}\n    /**\n     *  开启shiro aop注解支持.\n     *  使用代理方式;所以需要开启代码支持;\n     * @param securityManager\n     * @return\n     */\n    @Bean\n    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager){\n        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = new AuthorizationAttributeSourceAdvisor();\n        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);\n        return authorizationAttributeSourceAdvisor;\n    }\n\n    /**\n     * 配置shiro redisManager\n     * 使用的是shiro-redis开源插件\n     * @return\n     */\n    public RedisManager redisManager() {\n        RedisManager redisManager = new RedisManager();\n        redisManager.setHost(host);\n        redisManager.setPort(port);\n        redisManager.setExpire(1800);\n        redisManager.setTimeout(timeout);\n        // redisManager.setPassword(password);\n        return redisManager;\n    }\n\n    /**\n     * cacheManager 缓存 redis实现\n     * 使用的是shiro-redis开源插件\n     * @return\n     */\n    public RedisCacheManager cacheManager() {\n        RedisCacheManager redisCacheManager = new RedisCacheManager();\n        redisCacheManager.setRedisManager(redisManager());\n        return redisCacheManager;\n    }\n\n    /**\n     * RedisSessionDAO shiro sessionDao层的实现 通过redis\n     * 使用的是shiro-redis开源插件\n     */\n    @Bean\n    public RedisSessionDAO redisSessionDAO() {\n        RedisSessionDAO redisSessionDAO = new RedisSessionDAO();\n        redisSessionDAO.setRedisManager(redisManager());\n        return redisSessionDAO;\n    }\n\n    @Bean\n    public DefaultWebSessionManager sessionManager() {\n        DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();\n//        sessionManager.setSessionDAO(redisSessionDAO());\n        return sessionManager;\n    }\n\n}\n```\n\n## 总结\n搞了一天时间把项目转成springboot，查阅各种资料，希望这篇文章能够为你带来帮助。\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"sprigmvc2boot","published":1,"updated":"2018-02-06T15:00:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla7l003z8p9k4hvrb4n3","content":"<p><strong> Sprigmvc项目转为springboot：</strong> <Excerpt in index | 首页摘要><br>是否有老掉牙的springmvc项目，想转成springboot项目，看这个文章就对了。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><ul>\n<li>如果你的项目连maven项目都不是，请自行转为maven项目，在按照本教程进行。</li>\n<li>本教程适用于spring+springmvc+mybatis+shiro的maven项目。</li>\n</ul>\n<h2 id=\"1-修改pom文件依赖\"><a href=\"#1-修改pom文件依赖\" class=\"headerlink\" title=\"1.修改pom文件依赖\"></a>1.修改pom文件依赖</h2><ol>\n<li><p>删除之前的spring依赖，添加springboot依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">&lt;!-- 这个是剔除掉自带的 tomcat部署的--&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- tomcat容器部署 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"comment\">&lt;!--&lt;scope&gt;compile&lt;/scope&gt;--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 支持 @ConfigurationProperties 注解 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tomcat.embed<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tomcat-embed-jasper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>添加springboot构建插件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>repackage<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"2-添加application启动文件\"><a href=\"#2-添加application启动文件\" class=\"headerlink\" title=\"2.添加application启动文件\"></a>2.添加application启动文件</h2><p>注意，如果Application在controller，service，dao的上一层包里，无需配置<code>@ComponentScan</code>,<br>否则，需要指明要扫描的包。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SpringBootApplication</span></div><div class=\"line\"><span class=\"comment\">//@ComponentScan(&#123;\"com.cms.controller\",\"com.cms.service\",\"com.cms.dao\"&#125;)</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpringBootServletInitializer</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> SpringApplicationBuilder <span class=\"title\">configure</span><span class=\"params\">(SpringApplicationBuilder application)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> application.sources(Application.class);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        SpringApplication.run(Application.class, args);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-添加springboot配置文件\"><a href=\"#3-添加springboot配置文件\" class=\"headerlink\" title=\"3.添加springboot配置文件\"></a>3.添加springboot配置文件</h2><ol>\n<li>在resources下面添加application.properties文件</li>\n<li>添加基本配置<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#默认前缀</span></div><div class=\"line\">server.<span class=\"attr\">contextPath=/</span></div><div class=\"line\"><span class=\"comment\"># 指定环境</span></div><div class=\"line\">spring.profiles.<span class=\"attr\">active=local</span></div><div class=\"line\"><span class=\"comment\"># jsp配置</span></div><div class=\"line\">spring.mvc.view.<span class=\"attr\">prefix=/WEB-INF/jsp/</span></div><div class=\"line\">spring.mvc.view.<span class=\"attr\">suffix=.jsp</span></div><div class=\"line\"><span class=\"comment\">#log配置文件</span></div><div class=\"line\">logging.<span class=\"attr\">config=classpath:logback-cms.xml</span></div><div class=\"line\"><span class=\"comment\">#log路径</span></div><div class=\"line\">logging.<span class=\"attr\">path=/Users/mac/work-tommy/cms-springboot/logs/</span></div><div class=\"line\"><span class=\"comment\">#数据源</span></div><div class=\"line\">spring.datasource.<span class=\"attr\">name=adminDataSource</span></div><div class=\"line\">spring.datasource.<span class=\"attr\">driverClassName</span> = com.mysql.jdbc.Driver</div><div class=\"line\">spring.datasource.<span class=\"attr\">url</span> = jdbc:mysql://localhost:<span class=\"number\">3306</span>/mycms?<span class=\"attr\">useUnicode=true&amp;autoReconnect=true&amp;characterEncoding=utf-8</span></div><div class=\"line\">spring.datasource.<span class=\"attr\">username</span> = root</div><div class=\"line\">spring.datasource.<span class=\"attr\">password</span> = <span class=\"number\">123456</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"4-使用-Configuration注入配置\"><a href=\"#4-使用-Configuration注入配置\" class=\"headerlink\" title=\"4.使用@Configuration注入配置\"></a>4.使用@Configuration注入配置</h2><ol>\n<li><p>注入mybatis配置,分页插件请自主选择</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@MapperScan</span>(basePackages = <span class=\"string\">\"com.kuwo.dao\"</span>,sqlSessionTemplateRef  = <span class=\"string\">\"adminSqlSessionTemplate\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminDataSourceConfig</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"adminDataSource\"</span>)</div><div class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.datasource\"</span>)</div><div class=\"line\">    <span class=\"meta\">@Primary</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">adminDataSource</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> DataSourceBuilder.create().build();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"adminSqlSessionFactory\"</span>)</div><div class=\"line\">    <span class=\"meta\">@Primary</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">adminSqlSessionFactory</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"adminDataSource\"</span>)</span> DataSource dataSource) <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        SqlSessionFactoryBean bean = <span class=\"keyword\">new</span> SqlSessionFactoryBean();</div><div class=\"line\">        bean.setDataSource(dataSource);</div><div class=\"line\">        <span class=\"comment\">//分页插件</span></div><div class=\"line\"><span class=\"comment\">//        PageHelper pageHelper = new PageHelper();</span></div><div class=\"line\">        PagePlugin pagePlugin = <span class=\"keyword\">new</span> PagePlugin();</div><div class=\"line\"><span class=\"comment\">//        Properties props = new Properties();</span></div><div class=\"line\"><span class=\"comment\">//        props.setProperty(\"reasonable\", \"true\");</span></div><div class=\"line\"><span class=\"comment\">//        props.setProperty(\"supportMethodsArguments\", \"true\");</span></div><div class=\"line\"><span class=\"comment\">//        props.setProperty(\"returnPageInfo\", \"check\");</span></div><div class=\"line\"><span class=\"comment\">//        props.setProperty(\"params\", \"count=countSql\");</span></div><div class=\"line\"><span class=\"comment\">//        pageHelper.setProperties(props);</span></div><div class=\"line\">        <span class=\"comment\">//添加插件</span></div><div class=\"line\">        bean.setPlugins(<span class=\"keyword\">new</span> Interceptor[]&#123;pagePlugin&#125;);</div><div class=\"line\">        <span class=\"comment\">// 添加mybatis配置文件</span></div><div class=\"line\">        bean.setConfigLocation(<span class=\"keyword\">new</span> DefaultResourceLoader().getResource(<span class=\"string\">\"classpath:mybatis/mybatis-config.xml\"</span>));</div><div class=\"line\">        <span class=\"comment\">// 添加mybatis映射文件</span></div><div class=\"line\">        bean.setMapperLocations(<span class=\"keyword\">new</span> PathMatchingResourcePatternResolver().getResources(<span class=\"string\">\"classpath:mybatis/system/*.xml\"</span>));</div><div class=\"line\">        <span class=\"keyword\">return</span> bean.getObject();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"adminTransactionManager\"</span>)</div><div class=\"line\">    <span class=\"meta\">@Primary</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceTransactionManager <span class=\"title\">adminTransactionManager</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"adminDataSource\"</span>)</span> DataSource dataSource) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(dataSource);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"adminSqlSessionTemplate\"</span>)</div><div class=\"line\">    <span class=\"meta\">@Primary</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionTemplate <span class=\"title\">adminSqlSessionTemplate</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"adminSqlSessionFactory\"</span>)</span> SqlSessionFactory sqlSessionFactory) <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SqlSessionTemplate(sqlSessionFactory);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加Interceptor配置,注意addInterceptor的顺序，不要搞乱了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterceptorConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span></span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</div><div class=\"line\">        registry.addInterceptor(<span class=\"keyword\">new</span> LoginHandlerInterceptor());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加shiro配置文件</p>\n<ul>\n<li>注意：本来使用redis做session缓存，但是和shiro集成发现一个问题，user对象存储以后，从shiro中获取后，无法进行类型转换，所以暂时放弃了redis做session缓存。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShiroConfiguration</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;spring.redis.host&#125;\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String host;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;spring.redis.port&#125;\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;spring.redis.timeout&#125;\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> timeout;</div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LifecycleBeanPostProcessor <span class=\"title\">getLifecycleBeanPostProcessor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LifecycleBeanPostProcessor();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * ShiroFilterFactoryBean 处理拦截资源文件问题。</div><div class=\"line\">     * 注意：单独一个ShiroFilterFactoryBean配置是或报错的，因为在</div><div class=\"line\">     * 初始化ShiroFilterFactoryBean的时候需要注入：SecurityManager</div><div class=\"line\">     *</div><div class=\"line\">     Filter Chain定义说明</div><div class=\"line\">     1、一个URL可以配置多个Filter，使用逗号分隔</div><div class=\"line\">     2、当设置多个过滤器时，全部验证通过，才视为通过</div><div class=\"line\">     3、部分过滤器可指定参数，如perms，roles</div><div class=\"line\">     *</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ShiroFilterFactoryBean <span class=\"title\">shiroFilter</span><span class=\"params\">(SecurityManager securityManager)</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"ShiroConfiguration.shirFilter()\"</span>);</div><div class=\"line\">        ShiroFilterFactoryBean shiroFilterFactoryBean  = <span class=\"keyword\">new</span> ShiroFilterFactoryBean();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 必须设置 SecurityManager</span></div><div class=\"line\">        shiroFilterFactoryBean.setSecurityManager(securityManager);</div><div class=\"line\">        <span class=\"comment\">// 如果不设置默认会自动寻找Web工程根目录下的\"/login.jsp\"页面</span></div><div class=\"line\">        shiroFilterFactoryBean.setLoginUrl(<span class=\"string\">\"/login_toLogin\"</span>);</div><div class=\"line\">        <span class=\"comment\">// 登录成功后要跳转的链接</span></div><div class=\"line\">        shiroFilterFactoryBean.setSuccessUrl(<span class=\"string\">\"/usersPage\"</span>);</div><div class=\"line\">        <span class=\"comment\">//未授权界面;</span></div><div class=\"line\">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class=\"string\">\"/403\"</span>);</div><div class=\"line\">        <span class=\"comment\">//拦截器.</span></div><div class=\"line\">        Map&lt;String,String&gt; filterChainDefinitionMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//配置退出 过滤器,其中的具体的退出代码Shiro已经替我们实现了</span></div><div class=\"line\">        filterChainDefinitionMap.put(<span class=\"string\">\"/logout\"</span>, <span class=\"string\">\"logout\"</span>);</div><div class=\"line\">        filterChainDefinitionMap.put(<span class=\"string\">\"/login_toLogin\"</span>, <span class=\"string\">\"anon\"</span>);</div><div class=\"line\">        filterChainDefinitionMap.put(<span class=\"string\">\"/login_login\"</span>, <span class=\"string\">\"anon\"</span>);</div><div class=\"line\">        filterChainDefinitionMap.put(<span class=\"string\">\"/static/login/**\"</span>,<span class=\"string\">\"anon\"</span>);</div><div class=\"line\">        filterChainDefinitionMap.put(<span class=\"string\">\"/static/js/**\"</span>,<span class=\"string\">\"anon\"</span>);</div><div class=\"line\">        filterChainDefinitionMap.put(<span class=\"string\">\"/uploadFiles/uploadImgs/**\"</span>,<span class=\"string\">\"anon\"</span>);</div><div class=\"line\">        filterChainDefinitionMap.put(<span class=\"string\">\"/code.do\"</span>,<span class=\"string\">\"anon\"</span>);</div><div class=\"line\">        filterChainDefinitionMap.put(<span class=\"string\">\"/font-awesome/**\"</span>,<span class=\"string\">\"anon\"</span>);</div><div class=\"line\">        <span class=\"comment\">//&lt;!-- 过滤链定义，从上向下顺序执行，一般将 /**放在最为下边 --&gt;:这是一个坑呢，一不小心代码就不好使了;</span></div><div class=\"line\">        <span class=\"comment\">//&lt;!-- authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问--&gt;</span></div><div class=\"line\"></div><div class=\"line\">        filterChainDefinitionMap.put(<span class=\"string\">\"/**\"</span>, <span class=\"string\">\"authc\"</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</div><div class=\"line\">        <span class=\"keyword\">return</span> shiroFilterFactoryBean;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SecurityManager <span class=\"title\">securityManager</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        DefaultWebSecurityManager securityManager =  <span class=\"keyword\">new</span> DefaultWebSecurityManager();</div><div class=\"line\">        <span class=\"comment\">//设置realm.</span></div><div class=\"line\">        securityManager.setRealm(myShiroRealm());</div><div class=\"line\">        <span class=\"comment\">// 自定义缓存实现 使用redis</span></div><div class=\"line\">        <span class=\"comment\">//securityManager.setCacheManager(cacheManager());</span></div><div class=\"line\">        <span class=\"comment\">// 自定义session管理 使用redis</span></div><div class=\"line\">        securityManager.setSessionManager(sessionManager());</div><div class=\"line\">        <span class=\"keyword\">return</span> securityManager;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ShiroRealm <span class=\"title\">myShiroRealm</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        ShiroRealm myShiroRealm = <span class=\"keyword\">new</span> ShiroRealm();</div><div class=\"line\"><span class=\"comment\">//        myShiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());</span></div><div class=\"line\">        <span class=\"keyword\">return</span> myShiroRealm;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     *  开启shiro aop注解支持.</div><div class=\"line\">     *  使用代理方式;所以需要开启代码支持;</div><div class=\"line\">     * <span class=\"doctag\">@param</span> securityManager</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AuthorizationAttributeSourceAdvisor <span class=\"title\">authorizationAttributeSourceAdvisor</span><span class=\"params\">(SecurityManager securityManager)</span></span>&#123;</div><div class=\"line\">        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class=\"keyword\">new</span> AuthorizationAttributeSourceAdvisor();</div><div class=\"line\">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);</div><div class=\"line\">        <span class=\"keyword\">return</span> authorizationAttributeSourceAdvisor;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 配置shiro redisManager</div><div class=\"line\">     * 使用的是shiro-redis开源插件</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisManager <span class=\"title\">redisManager</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        RedisManager redisManager = <span class=\"keyword\">new</span> RedisManager();</div><div class=\"line\">        redisManager.setHost(host);</div><div class=\"line\">        redisManager.setPort(port);</div><div class=\"line\">        redisManager.setExpire(<span class=\"number\">1800</span>);</div><div class=\"line\">        redisManager.setTimeout(timeout);</div><div class=\"line\">        <span class=\"comment\">// redisManager.setPassword(password);</span></div><div class=\"line\">        <span class=\"keyword\">return</span> redisManager;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * cacheManager 缓存 redis实现</div><div class=\"line\">     * 使用的是shiro-redis开源插件</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisCacheManager <span class=\"title\">cacheManager</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        RedisCacheManager redisCacheManager = <span class=\"keyword\">new</span> RedisCacheManager();</div><div class=\"line\">        redisCacheManager.setRedisManager(redisManager());</div><div class=\"line\">        <span class=\"keyword\">return</span> redisCacheManager;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * RedisSessionDAO shiro sessionDao层的实现 通过redis</div><div class=\"line\">     * 使用的是shiro-redis开源插件</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisSessionDAO <span class=\"title\">redisSessionDAO</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        RedisSessionDAO redisSessionDAO = <span class=\"keyword\">new</span> RedisSessionDAO();</div><div class=\"line\">        redisSessionDAO.setRedisManager(redisManager());</div><div class=\"line\">        <span class=\"keyword\">return</span> redisSessionDAO;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DefaultWebSessionManager <span class=\"title\">sessionManager</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        DefaultWebSessionManager sessionManager = <span class=\"keyword\">new</span> DefaultWebSessionManager();</div><div class=\"line\"><span class=\"comment\">//        sessionManager.setSessionDAO(redisSessionDAO());</span></div><div class=\"line\">        <span class=\"keyword\">return</span> sessionManager;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>搞了一天时间把项目转成springboot，查阅各种资料，希望这篇文章能够为你带来帮助。</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> Sprigmvc项目转为springboot：</strong> <Excerpt in index | 首页摘要><br>是否有老掉牙的springmvc项目，想转成springboot项目，看这个文章就对了。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><ul>\n<li>如果你的项目连maven项目都不是，请自行转为maven项目，在按照本教程进行。</li>\n<li>本教程适用于spring+springmvc+mybatis+shiro的maven项目。</li>\n</ul>\n<h2 id=\"1-修改pom文件依赖\"><a href=\"#1-修改pom文件依赖\" class=\"headerlink\" title=\"1.修改pom文件依赖\"></a>1.修改pom文件依赖</h2><ol>\n<li><p>删除之前的spring依赖，添加springboot依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">&lt;!-- 这个是剔除掉自带的 tomcat部署的--&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- tomcat容器部署 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"comment\">&lt;!--&lt;scope&gt;compile&lt;/scope&gt;--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 支持 @ConfigurationProperties 注解 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.tomcat.embed<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tomcat-embed-jasper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>添加springboot构建插件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.5.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>repackage<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"2-添加application启动文件\"><a href=\"#2-添加application启动文件\" class=\"headerlink\" title=\"2.添加application启动文件\"></a>2.添加application启动文件</h2><p>注意，如果Application在controller，service，dao的上一层包里，无需配置<code>@ComponentScan</code>,<br>否则，需要指明要扫描的包。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SpringBootApplication</span></div><div class=\"line\"><span class=\"comment\">//@ComponentScan(&#123;\"com.cms.controller\",\"com.cms.service\",\"com.cms.dao\"&#125;)</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpringBootServletInitializer</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> SpringApplicationBuilder <span class=\"title\">configure</span><span class=\"params\">(SpringApplicationBuilder application)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> application.sources(Application.class);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        SpringApplication.run(Application.class, args);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"3-添加springboot配置文件\"><a href=\"#3-添加springboot配置文件\" class=\"headerlink\" title=\"3.添加springboot配置文件\"></a>3.添加springboot配置文件</h2><ol>\n<li>在resources下面添加application.properties文件</li>\n<li>添加基本配置<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#默认前缀</span></div><div class=\"line\">server.<span class=\"attr\">contextPath=/</span></div><div class=\"line\"><span class=\"comment\"># 指定环境</span></div><div class=\"line\">spring.profiles.<span class=\"attr\">active=local</span></div><div class=\"line\"><span class=\"comment\"># jsp配置</span></div><div class=\"line\">spring.mvc.view.<span class=\"attr\">prefix=/WEB-INF/jsp/</span></div><div class=\"line\">spring.mvc.view.<span class=\"attr\">suffix=.jsp</span></div><div class=\"line\"><span class=\"comment\">#log配置文件</span></div><div class=\"line\">logging.<span class=\"attr\">config=classpath:logback-cms.xml</span></div><div class=\"line\"><span class=\"comment\">#log路径</span></div><div class=\"line\">logging.<span class=\"attr\">path=/Users/mac/work-tommy/cms-springboot/logs/</span></div><div class=\"line\"><span class=\"comment\">#数据源</span></div><div class=\"line\">spring.datasource.<span class=\"attr\">name=adminDataSource</span></div><div class=\"line\">spring.datasource.<span class=\"attr\">driverClassName</span> = com.mysql.jdbc.Driver</div><div class=\"line\">spring.datasource.<span class=\"attr\">url</span> = jdbc:mysql://localhost:<span class=\"number\">3306</span>/mycms?<span class=\"attr\">useUnicode=true&amp;autoReconnect=true&amp;characterEncoding=utf-8</span></div><div class=\"line\">spring.datasource.<span class=\"attr\">username</span> = root</div><div class=\"line\">spring.datasource.<span class=\"attr\">password</span> = <span class=\"number\">123456</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"4-使用-Configuration注入配置\"><a href=\"#4-使用-Configuration注入配置\" class=\"headerlink\" title=\"4.使用@Configuration注入配置\"></a>4.使用@Configuration注入配置</h2><ol>\n<li><p>注入mybatis配置,分页插件请自主选择</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"meta\">@MapperScan</span>(basePackages = <span class=\"string\">\"com.kuwo.dao\"</span>,sqlSessionTemplateRef  = <span class=\"string\">\"adminSqlSessionTemplate\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminDataSourceConfig</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"adminDataSource\"</span>)</div><div class=\"line\">    <span class=\"meta\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"spring.datasource\"</span>)</div><div class=\"line\">    <span class=\"meta\">@Primary</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">adminDataSource</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> DataSourceBuilder.create().build();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"adminSqlSessionFactory\"</span>)</div><div class=\"line\">    <span class=\"meta\">@Primary</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title\">adminSqlSessionFactory</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"adminDataSource\"</span>)</span> DataSource dataSource) <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        SqlSessionFactoryBean bean = <span class=\"keyword\">new</span> SqlSessionFactoryBean();</div><div class=\"line\">        bean.setDataSource(dataSource);</div><div class=\"line\">        <span class=\"comment\">//分页插件</span></div><div class=\"line\"><span class=\"comment\">//        PageHelper pageHelper = new PageHelper();</span></div><div class=\"line\">        PagePlugin pagePlugin = <span class=\"keyword\">new</span> PagePlugin();</div><div class=\"line\"><span class=\"comment\">//        Properties props = new Properties();</span></div><div class=\"line\"><span class=\"comment\">//        props.setProperty(\"reasonable\", \"true\");</span></div><div class=\"line\"><span class=\"comment\">//        props.setProperty(\"supportMethodsArguments\", \"true\");</span></div><div class=\"line\"><span class=\"comment\">//        props.setProperty(\"returnPageInfo\", \"check\");</span></div><div class=\"line\"><span class=\"comment\">//        props.setProperty(\"params\", \"count=countSql\");</span></div><div class=\"line\"><span class=\"comment\">//        pageHelper.setProperties(props);</span></div><div class=\"line\">        <span class=\"comment\">//添加插件</span></div><div class=\"line\">        bean.setPlugins(<span class=\"keyword\">new</span> Interceptor[]&#123;pagePlugin&#125;);</div><div class=\"line\">        <span class=\"comment\">// 添加mybatis配置文件</span></div><div class=\"line\">        bean.setConfigLocation(<span class=\"keyword\">new</span> DefaultResourceLoader().getResource(<span class=\"string\">\"classpath:mybatis/mybatis-config.xml\"</span>));</div><div class=\"line\">        <span class=\"comment\">// 添加mybatis映射文件</span></div><div class=\"line\">        bean.setMapperLocations(<span class=\"keyword\">new</span> PathMatchingResourcePatternResolver().getResources(<span class=\"string\">\"classpath:mybatis/system/*.xml\"</span>));</div><div class=\"line\">        <span class=\"keyword\">return</span> bean.getObject();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"adminTransactionManager\"</span>)</div><div class=\"line\">    <span class=\"meta\">@Primary</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DataSourceTransactionManager <span class=\"title\">adminTransactionManager</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"adminDataSource\"</span>)</span> DataSource dataSource) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DataSourceTransactionManager(dataSource);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span>(name = <span class=\"string\">\"adminSqlSessionTemplate\"</span>)</div><div class=\"line\">    <span class=\"meta\">@Primary</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SqlSessionTemplate <span class=\"title\">adminSqlSessionTemplate</span><span class=\"params\">(@Qualifier(<span class=\"string\">\"adminSqlSessionFactory\"</span>)</span> SqlSessionFactory sqlSessionFactory) <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SqlSessionTemplate(sqlSessionFactory);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加Interceptor配置,注意addInterceptor的顺序，不要搞乱了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterceptorConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span></span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> </span>&#123;</div><div class=\"line\">        registry.addInterceptor(<span class=\"keyword\">new</span> LoginHandlerInterceptor());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加shiro配置文件</p>\n<ul>\n<li>注意：本来使用redis做session缓存，但是和shiro集成发现一个问题，user对象存储以后，从shiro中获取后，无法进行类型转换，所以暂时放弃了redis做session缓存。</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShiroConfiguration</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;spring.redis.host&#125;\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> String host;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;spring.redis.port&#125;\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> port;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Value</span>(<span class=\"string\">\"$&#123;spring.redis.timeout&#125;\"</span>)</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> timeout;</div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LifecycleBeanPostProcessor <span class=\"title\">getLifecycleBeanPostProcessor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LifecycleBeanPostProcessor();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * ShiroFilterFactoryBean 处理拦截资源文件问题。</div><div class=\"line\">     * 注意：单独一个ShiroFilterFactoryBean配置是或报错的，因为在</div><div class=\"line\">     * 初始化ShiroFilterFactoryBean的时候需要注入：SecurityManager</div><div class=\"line\">     *</div><div class=\"line\">     Filter Chain定义说明</div><div class=\"line\">     1、一个URL可以配置多个Filter，使用逗号分隔</div><div class=\"line\">     2、当设置多个过滤器时，全部验证通过，才视为通过</div><div class=\"line\">     3、部分过滤器可指定参数，如perms，roles</div><div class=\"line\">     *</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ShiroFilterFactoryBean <span class=\"title\">shiroFilter</span><span class=\"params\">(SecurityManager securityManager)</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"ShiroConfiguration.shirFilter()\"</span>);</div><div class=\"line\">        ShiroFilterFactoryBean shiroFilterFactoryBean  = <span class=\"keyword\">new</span> ShiroFilterFactoryBean();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 必须设置 SecurityManager</span></div><div class=\"line\">        shiroFilterFactoryBean.setSecurityManager(securityManager);</div><div class=\"line\">        <span class=\"comment\">// 如果不设置默认会自动寻找Web工程根目录下的\"/login.jsp\"页面</span></div><div class=\"line\">        shiroFilterFactoryBean.setLoginUrl(<span class=\"string\">\"/login_toLogin\"</span>);</div><div class=\"line\">        <span class=\"comment\">// 登录成功后要跳转的链接</span></div><div class=\"line\">        shiroFilterFactoryBean.setSuccessUrl(<span class=\"string\">\"/usersPage\"</span>);</div><div class=\"line\">        <span class=\"comment\">//未授权界面;</span></div><div class=\"line\">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class=\"string\">\"/403\"</span>);</div><div class=\"line\">        <span class=\"comment\">//拦截器.</span></div><div class=\"line\">        Map&lt;String,String&gt; filterChainDefinitionMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//配置退出 过滤器,其中的具体的退出代码Shiro已经替我们实现了</span></div><div class=\"line\">        filterChainDefinitionMap.put(<span class=\"string\">\"/logout\"</span>, <span class=\"string\">\"logout\"</span>);</div><div class=\"line\">        filterChainDefinitionMap.put(<span class=\"string\">\"/login_toLogin\"</span>, <span class=\"string\">\"anon\"</span>);</div><div class=\"line\">        filterChainDefinitionMap.put(<span class=\"string\">\"/login_login\"</span>, <span class=\"string\">\"anon\"</span>);</div><div class=\"line\">        filterChainDefinitionMap.put(<span class=\"string\">\"/static/login/**\"</span>,<span class=\"string\">\"anon\"</span>);</div><div class=\"line\">        filterChainDefinitionMap.put(<span class=\"string\">\"/static/js/**\"</span>,<span class=\"string\">\"anon\"</span>);</div><div class=\"line\">        filterChainDefinitionMap.put(<span class=\"string\">\"/uploadFiles/uploadImgs/**\"</span>,<span class=\"string\">\"anon\"</span>);</div><div class=\"line\">        filterChainDefinitionMap.put(<span class=\"string\">\"/code.do\"</span>,<span class=\"string\">\"anon\"</span>);</div><div class=\"line\">        filterChainDefinitionMap.put(<span class=\"string\">\"/font-awesome/**\"</span>,<span class=\"string\">\"anon\"</span>);</div><div class=\"line\">        <span class=\"comment\">//&lt;!-- 过滤链定义，从上向下顺序执行，一般将 /**放在最为下边 --&gt;:这是一个坑呢，一不小心代码就不好使了;</span></div><div class=\"line\">        <span class=\"comment\">//&lt;!-- authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问--&gt;</span></div><div class=\"line\"></div><div class=\"line\">        filterChainDefinitionMap.put(<span class=\"string\">\"/**\"</span>, <span class=\"string\">\"authc\"</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</div><div class=\"line\">        <span class=\"keyword\">return</span> shiroFilterFactoryBean;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> SecurityManager <span class=\"title\">securityManager</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        DefaultWebSecurityManager securityManager =  <span class=\"keyword\">new</span> DefaultWebSecurityManager();</div><div class=\"line\">        <span class=\"comment\">//设置realm.</span></div><div class=\"line\">        securityManager.setRealm(myShiroRealm());</div><div class=\"line\">        <span class=\"comment\">// 自定义缓存实现 使用redis</span></div><div class=\"line\">        <span class=\"comment\">//securityManager.setCacheManager(cacheManager());</span></div><div class=\"line\">        <span class=\"comment\">// 自定义session管理 使用redis</span></div><div class=\"line\">        securityManager.setSessionManager(sessionManager());</div><div class=\"line\">        <span class=\"keyword\">return</span> securityManager;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ShiroRealm <span class=\"title\">myShiroRealm</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        ShiroRealm myShiroRealm = <span class=\"keyword\">new</span> ShiroRealm();</div><div class=\"line\"><span class=\"comment\">//        myShiroRealm.setCredentialsMatcher(hashedCredentialsMatcher());</span></div><div class=\"line\">        <span class=\"keyword\">return</span> myShiroRealm;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     *  开启shiro aop注解支持.</div><div class=\"line\">     *  使用代理方式;所以需要开启代码支持;</div><div class=\"line\">     * <span class=\"doctag\">@param</span> securityManager</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AuthorizationAttributeSourceAdvisor <span class=\"title\">authorizationAttributeSourceAdvisor</span><span class=\"params\">(SecurityManager securityManager)</span></span>&#123;</div><div class=\"line\">        AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class=\"keyword\">new</span> AuthorizationAttributeSourceAdvisor();</div><div class=\"line\">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);</div><div class=\"line\">        <span class=\"keyword\">return</span> authorizationAttributeSourceAdvisor;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 配置shiro redisManager</div><div class=\"line\">     * 使用的是shiro-redis开源插件</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisManager <span class=\"title\">redisManager</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        RedisManager redisManager = <span class=\"keyword\">new</span> RedisManager();</div><div class=\"line\">        redisManager.setHost(host);</div><div class=\"line\">        redisManager.setPort(port);</div><div class=\"line\">        redisManager.setExpire(<span class=\"number\">1800</span>);</div><div class=\"line\">        redisManager.setTimeout(timeout);</div><div class=\"line\">        <span class=\"comment\">// redisManager.setPassword(password);</span></div><div class=\"line\">        <span class=\"keyword\">return</span> redisManager;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * cacheManager 缓存 redis实现</div><div class=\"line\">     * 使用的是shiro-redis开源插件</div><div class=\"line\">     * <span class=\"doctag\">@return</span></div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisCacheManager <span class=\"title\">cacheManager</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        RedisCacheManager redisCacheManager = <span class=\"keyword\">new</span> RedisCacheManager();</div><div class=\"line\">        redisCacheManager.setRedisManager(redisManager());</div><div class=\"line\">        <span class=\"keyword\">return</span> redisCacheManager;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * RedisSessionDAO shiro sessionDao层的实现 通过redis</div><div class=\"line\">     * 使用的是shiro-redis开源插件</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RedisSessionDAO <span class=\"title\">redisSessionDAO</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        RedisSessionDAO redisSessionDAO = <span class=\"keyword\">new</span> RedisSessionDAO();</div><div class=\"line\">        redisSessionDAO.setRedisManager(redisManager());</div><div class=\"line\">        <span class=\"keyword\">return</span> redisSessionDAO;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DefaultWebSessionManager <span class=\"title\">sessionManager</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        DefaultWebSessionManager sessionManager = <span class=\"keyword\">new</span> DefaultWebSessionManager();</div><div class=\"line\"><span class=\"comment\">//        sessionManager.setSessionDAO(redisSessionDAO());</span></div><div class=\"line\">        <span class=\"keyword\">return</span> sessionManager;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>搞了一天时间把项目转成springboot，查阅各种资料，希望这篇文章能够为你带来帮助。</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"制定学习目标和计划","date":"2016-05-06T02:20:45.000Z","_content":"** 制定学习目标和计划：** <Excerpt in index | 首页摘要>\n\t近期的学习目标和学习重点,提高自己的能力\n <!-- more -->\n<The rest of contents | 余下全文>\n\n## 找到自己的兴趣\n- 自己主动学习一定要基于自己的兴趣,不要看什么框架流行,什么语言火,就去学,学的不温不火,然后放弃.\n- 一定看自己的兴趣,比如你对色彩,对布局,对特效比较痴迷,那你去css3,html5做出特酷的效果,肯定能让你肯定自己,\n收获知识和自信.\n- 没有兴趣的时候,可以适当的多接触一些东西,在最短的时间多接触一些领域,让自己的心去做选择,\n\n## 制定目标\n1. 为什么要制定目标?\n- 制定目标是对自己学习能力的检验,同时也是提高学习效率的关键,而不是自己没有目的的瞎看,\n2. 如何制定目标?\n- 结合自身的能力,定制比自己能力稍高的目标,这样自己通过一定程度的努力可以实现目标.这样自己的能力能一次一次提高.\n\n## 及时反馈\n- 古人说的好,吾日三省吾身,对待学习目标也是一样,要时不时的看自己的目标完成的如何,进度如何,是不是需要调整,不能闷着头蛮干,方向错了,再多的努力也是白搭了.\n\n## 总结\n- 我在刚开始学编程的时候,每天都给自己定制了目标,一天完成多少课时,完成多少练习,都是按量完成,在最初的几个月收到了立竿见影的效果,让我也在短短三个月的时间学会了java,所以,目标的制定对于结果的影响是非常大.\n","source":"_posts/study-goals.md","raw":"title: 制定学习目标和计划\ndate: 2016-05-06 10:20:45\ntags: others\ncategories: 个人随笔\n---\n** 制定学习目标和计划：** <Excerpt in index | 首页摘要>\n\t近期的学习目标和学习重点,提高自己的能力\n <!-- more -->\n<The rest of contents | 余下全文>\n\n## 找到自己的兴趣\n- 自己主动学习一定要基于自己的兴趣,不要看什么框架流行,什么语言火,就去学,学的不温不火,然后放弃.\n- 一定看自己的兴趣,比如你对色彩,对布局,对特效比较痴迷,那你去css3,html5做出特酷的效果,肯定能让你肯定自己,\n收获知识和自信.\n- 没有兴趣的时候,可以适当的多接触一些东西,在最短的时间多接触一些领域,让自己的心去做选择,\n\n## 制定目标\n1. 为什么要制定目标?\n- 制定目标是对自己学习能力的检验,同时也是提高学习效率的关键,而不是自己没有目的的瞎看,\n2. 如何制定目标?\n- 结合自身的能力,定制比自己能力稍高的目标,这样自己通过一定程度的努力可以实现目标.这样自己的能力能一次一次提高.\n\n## 及时反馈\n- 古人说的好,吾日三省吾身,对待学习目标也是一样,要时不时的看自己的目标完成的如何,进度如何,是不是需要调整,不能闷着头蛮干,方向错了,再多的努力也是白搭了.\n\n## 总结\n- 我在刚开始学编程的时候,每天都给自己定制了目标,一天完成多少课时,完成多少练习,都是按量完成,在最初的几个月收到了立竿见影的效果,让我也在短短三个月的时间学会了java,所以,目标的制定对于结果的影响是非常大.\n","slug":"study-goals","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla7n00448p9k749mn2om","content":"<p><strong> 制定学习目标和计划：</strong> <Excerpt in index | 首页摘要><br>    近期的学习目标和学习重点,提高自己的能力<br> <a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"找到自己的兴趣\"><a href=\"#找到自己的兴趣\" class=\"headerlink\" title=\"找到自己的兴趣\"></a>找到自己的兴趣</h2><ul>\n<li>自己主动学习一定要基于自己的兴趣,不要看什么框架流行,什么语言火,就去学,学的不温不火,然后放弃.</li>\n<li>一定看自己的兴趣,比如你对色彩,对布局,对特效比较痴迷,那你去css3,html5做出特酷的效果,肯定能让你肯定自己,<br>收获知识和自信.</li>\n<li>没有兴趣的时候,可以适当的多接触一些东西,在最短的时间多接触一些领域,让自己的心去做选择,</li>\n</ul>\n<h2 id=\"制定目标\"><a href=\"#制定目标\" class=\"headerlink\" title=\"制定目标\"></a>制定目标</h2><ol>\n<li>为什么要制定目标?</li>\n</ol>\n<ul>\n<li>制定目标是对自己学习能力的检验,同时也是提高学习效率的关键,而不是自己没有目的的瞎看,</li>\n</ul>\n<ol>\n<li>如何制定目标?</li>\n</ol>\n<ul>\n<li>结合自身的能力,定制比自己能力稍高的目标,这样自己通过一定程度的努力可以实现目标.这样自己的能力能一次一次提高.</li>\n</ul>\n<h2 id=\"及时反馈\"><a href=\"#及时反馈\" class=\"headerlink\" title=\"及时反馈\"></a>及时反馈</h2><ul>\n<li>古人说的好,吾日三省吾身,对待学习目标也是一样,要时不时的看自己的目标完成的如何,进度如何,是不是需要调整,不能闷着头蛮干,方向错了,再多的努力也是白搭了.</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>我在刚开始学编程的时候,每天都给自己定制了目标,一天完成多少课时,完成多少练习,都是按量完成,在最初的几个月收到了立竿见影的效果,让我也在短短三个月的时间学会了java,所以,目标的制定对于结果的影响是非常大.</li>\n</ul>\n","excerpt":"<p><strong> 制定学习目标和计划：</strong> <Excerpt in index | 首页摘要><br>    近期的学习目标和学习重点,提高自己的能力<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"找到自己的兴趣\"><a href=\"#找到自己的兴趣\" class=\"headerlink\" title=\"找到自己的兴趣\"></a>找到自己的兴趣</h2><ul>\n<li>自己主动学习一定要基于自己的兴趣,不要看什么框架流行,什么语言火,就去学,学的不温不火,然后放弃.</li>\n<li>一定看自己的兴趣,比如你对色彩,对布局,对特效比较痴迷,那你去css3,html5做出特酷的效果,肯定能让你肯定自己,<br>收获知识和自信.</li>\n<li>没有兴趣的时候,可以适当的多接触一些东西,在最短的时间多接触一些领域,让自己的心去做选择,</li>\n</ul>\n<h2 id=\"制定目标\"><a href=\"#制定目标\" class=\"headerlink\" title=\"制定目标\"></a>制定目标</h2><ol>\n<li>为什么要制定目标?</li>\n</ol>\n<ul>\n<li>制定目标是对自己学习能力的检验,同时也是提高学习效率的关键,而不是自己没有目的的瞎看,</li>\n</ul>\n<ol>\n<li>如何制定目标?</li>\n</ol>\n<ul>\n<li>结合自身的能力,定制比自己能力稍高的目标,这样自己通过一定程度的努力可以实现目标.这样自己的能力能一次一次提高.</li>\n</ul>\n<h2 id=\"及时反馈\"><a href=\"#及时反馈\" class=\"headerlink\" title=\"及时反馈\"></a>及时反馈</h2><ul>\n<li>古人说的好,吾日三省吾身,对待学习目标也是一样,要时不时的看自己的目标完成的如何,进度如何,是不是需要调整,不能闷着头蛮干,方向错了,再多的努力也是白搭了.</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>我在刚开始学编程的时候,每天都给自己定制了目标,一天完成多少课时,完成多少练习,都是按量完成,在最初的几个月收到了立竿见影的效果,让我也在短短三个月的时间学会了java,所以,目标的制定对于结果的影响是非常大.</li>\n</ul>"},{"title":"学习计划-30天突破算法","date":"2017-10-18T11:47:55.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n作为一个非专业出身的程序员，一直对算法的学习赶紧断断续续，终于下定决心对算法做一次详细总结。30天时间把程序员常用算法逐一突破。这次计划更是对自己的一次挑战，希望自己能坚持到最后！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 学习排序算法的意义\n1. 学会比较算法的性能的方法\n2. 相关的排序能解决类似的问题\n3. 排序算法很多时候是解决问题的第一步\n\n### 排序算法\n1. 快速排序\n2. 插入排序\n3. 希尔排序\n4. 归并排序\n5. 选择排序\n6. 冒泡排序\n7. 堆排序\n8. 桶排序\n9. 排序算法比较\n\n### 树\n1. 二叉树高度和二叉树的遍历\n2. 红黑树\n3. b树\n\n### 查找算法\n1. 二分查找\n2. 二叉查找树\n3. 平衡查找树\n4. 散列表\n\n### 算法思想\n1. 递归（普通递归，尾递归）\n2. 动态规划\n3. 贪婪算法\n4. 分治法\n\n### 图的算法\n1. 深度优先\n2. 广度优先\n3. 最小生成树\n4. 最短路径 \n\n### 字符串算法\n1. 字符串查找\n2. 单词查找树\n3. 子字符串查找\n\n### 典型算法分析\n1. 拓扑排序\n2. 关键路径排序\n3. 遗传算法\n4. RSA算法\n\n\n## 英语技术文档阅读突破\n1. 熟悉常用技术词汇\n2. 阅读常见的技术文档（官网文档看一遍）\n3. 记住常用的词汇\n4. 阅读英文技术书籍\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/study-plan.md","raw":"title: 学习计划-30天突破算法\ndate: 2017-10-18 19:47:55\ntags: algorithm\ncategories: 算法\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n作为一个非专业出身的程序员，一直对算法的学习赶紧断断续续，终于下定决心对算法做一次详细总结。30天时间把程序员常用算法逐一突破。这次计划更是对自己的一次挑战，希望自己能坚持到最后！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 学习排序算法的意义\n1. 学会比较算法的性能的方法\n2. 相关的排序能解决类似的问题\n3. 排序算法很多时候是解决问题的第一步\n\n### 排序算法\n1. 快速排序\n2. 插入排序\n3. 希尔排序\n4. 归并排序\n5. 选择排序\n6. 冒泡排序\n7. 堆排序\n8. 桶排序\n9. 排序算法比较\n\n### 树\n1. 二叉树高度和二叉树的遍历\n2. 红黑树\n3. b树\n\n### 查找算法\n1. 二分查找\n2. 二叉查找树\n3. 平衡查找树\n4. 散列表\n\n### 算法思想\n1. 递归（普通递归，尾递归）\n2. 动态规划\n3. 贪婪算法\n4. 分治法\n\n### 图的算法\n1. 深度优先\n2. 广度优先\n3. 最小生成树\n4. 最短路径 \n\n### 字符串算法\n1. 字符串查找\n2. 单词查找树\n3. 子字符串查找\n\n### 典型算法分析\n1. 拓扑排序\n2. 关键路径排序\n3. 遗传算法\n4. RSA算法\n\n\n## 英语技术文档阅读突破\n1. 熟悉常用技术词汇\n2. 阅读常见的技术文档（官网文档看一遍）\n3. 记住常用的词汇\n4. 阅读英文技术书籍\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"study-plan","published":1,"updated":"2017-10-30T13:47:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla7p00478p9kgrrsraqs","content":"<p><strong> 学习计划-30天突破算法：</strong> <Excerpt in index | 首页摘要><br>作为一个非专业出身的程序员，一直对算法的学习赶紧断断续续，终于下定决心对算法做一次详细总结。30天时间把程序员常用算法逐一突破。这次计划更是对自己的一次挑战，希望自己能坚持到最后！<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"学习排序算法的意义\"><a href=\"#学习排序算法的意义\" class=\"headerlink\" title=\"学习排序算法的意义\"></a>学习排序算法的意义</h2><ol>\n<li>学会比较算法的性能的方法</li>\n<li>相关的排序能解决类似的问题</li>\n<li>排序算法很多时候是解决问题的第一步</li>\n</ol>\n<h3 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h3><ol>\n<li>快速排序</li>\n<li>插入排序</li>\n<li>希尔排序</li>\n<li>归并排序</li>\n<li>选择排序</li>\n<li>冒泡排序</li>\n<li>堆排序</li>\n<li>桶排序</li>\n<li>排序算法比较</li>\n</ol>\n<h3 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h3><ol>\n<li>二叉树高度和二叉树的遍历</li>\n<li>红黑树</li>\n<li>b树</li>\n</ol>\n<h3 id=\"查找算法\"><a href=\"#查找算法\" class=\"headerlink\" title=\"查找算法\"></a>查找算法</h3><ol>\n<li>二分查找</li>\n<li>二叉查找树</li>\n<li>平衡查找树</li>\n<li>散列表</li>\n</ol>\n<h3 id=\"算法思想\"><a href=\"#算法思想\" class=\"headerlink\" title=\"算法思想\"></a>算法思想</h3><ol>\n<li>递归（普通递归，尾递归）</li>\n<li>动态规划</li>\n<li>贪婪算法</li>\n<li>分治法</li>\n</ol>\n<h3 id=\"图的算法\"><a href=\"#图的算法\" class=\"headerlink\" title=\"图的算法\"></a>图的算法</h3><ol>\n<li>深度优先</li>\n<li>广度优先</li>\n<li>最小生成树</li>\n<li>最短路径 </li>\n</ol>\n<h3 id=\"字符串算法\"><a href=\"#字符串算法\" class=\"headerlink\" title=\"字符串算法\"></a>字符串算法</h3><ol>\n<li>字符串查找</li>\n<li>单词查找树</li>\n<li>子字符串查找</li>\n</ol>\n<h3 id=\"典型算法分析\"><a href=\"#典型算法分析\" class=\"headerlink\" title=\"典型算法分析\"></a>典型算法分析</h3><ol>\n<li>拓扑排序</li>\n<li>关键路径排序</li>\n<li>遗传算法</li>\n<li>RSA算法</li>\n</ol>\n<h2 id=\"英语技术文档阅读突破\"><a href=\"#英语技术文档阅读突破\" class=\"headerlink\" title=\"英语技术文档阅读突破\"></a>英语技术文档阅读突破</h2><ol>\n<li>熟悉常用技术词汇</li>\n<li>阅读常见的技术文档（官网文档看一遍）</li>\n<li>记住常用的词汇</li>\n<li>阅读英文技术书籍</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 学习计划-30天突破算法：</strong> <Excerpt in index | 首页摘要><br>作为一个非专业出身的程序员，一直对算法的学习赶紧断断续续，终于下定决心对算法做一次详细总结。30天时间把程序员常用算法逐一突破。这次计划更是对自己的一次挑战，希望自己能坚持到最后！<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"学习排序算法的意义\"><a href=\"#学习排序算法的意义\" class=\"headerlink\" title=\"学习排序算法的意义\"></a>学习排序算法的意义</h2><ol>\n<li>学会比较算法的性能的方法</li>\n<li>相关的排序能解决类似的问题</li>\n<li>排序算法很多时候是解决问题的第一步</li>\n</ol>\n<h3 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h3><ol>\n<li>快速排序</li>\n<li>插入排序</li>\n<li>希尔排序</li>\n<li>归并排序</li>\n<li>选择排序</li>\n<li>冒泡排序</li>\n<li>堆排序</li>\n<li>桶排序</li>\n<li>排序算法比较</li>\n</ol>\n<h3 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h3><ol>\n<li>二叉树高度和二叉树的遍历</li>\n<li>红黑树</li>\n<li>b树</li>\n</ol>\n<h3 id=\"查找算法\"><a href=\"#查找算法\" class=\"headerlink\" title=\"查找算法\"></a>查找算法</h3><ol>\n<li>二分查找</li>\n<li>二叉查找树</li>\n<li>平衡查找树</li>\n<li>散列表</li>\n</ol>\n<h3 id=\"算法思想\"><a href=\"#算法思想\" class=\"headerlink\" title=\"算法思想\"></a>算法思想</h3><ol>\n<li>递归（普通递归，尾递归）</li>\n<li>动态规划</li>\n<li>贪婪算法</li>\n<li>分治法</li>\n</ol>\n<h3 id=\"图的算法\"><a href=\"#图的算法\" class=\"headerlink\" title=\"图的算法\"></a>图的算法</h3><ol>\n<li>深度优先</li>\n<li>广度优先</li>\n<li>最小生成树</li>\n<li>最短路径 </li>\n</ol>\n<h3 id=\"字符串算法\"><a href=\"#字符串算法\" class=\"headerlink\" title=\"字符串算法\"></a>字符串算法</h3><ol>\n<li>字符串查找</li>\n<li>单词查找树</li>\n<li>子字符串查找</li>\n</ol>\n<h3 id=\"典型算法分析\"><a href=\"#典型算法分析\" class=\"headerlink\" title=\"典型算法分析\"></a>典型算法分析</h3><ol>\n<li>拓扑排序</li>\n<li>关键路径排序</li>\n<li>遗传算法</li>\n<li>RSA算法</li>\n</ol>\n<h2 id=\"英语技术文档阅读突破\"><a href=\"#英语技术文档阅读突破\" class=\"headerlink\" title=\"英语技术文档阅读突破\"></a>英语技术文档阅读突破</h2><ol>\n<li>熟悉常用技术词汇</li>\n<li>阅读常见的技术文档（官网文档看一遍）</li>\n<li>记住常用的词汇</li>\n<li>阅读英文技术书籍</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"突破算法第一天-快速排序","date":"2017-10-20T15:46:59.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n30天突破算法是我给自己定的一个学习计划，希望在这30天，每天都能完成计划。第一天学习最重要的快速排序。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 30天突破算法\n算法种类不计其数，说30天突破只是给自己定的学习计划。目的是通过30天的记录熟悉常见的算法，提高自己的算法能力。对以后的工作来说也是打下夯实的基础。\n\n## 快速排序的原理\n快速排序也是分治法思想的一种实现，他的思路是使数组中的每个元素与基准值（Pivot，通常是数组的首个值，A[0]）比较，数组中比基准值小的放在基准值的左边，形成左部；大的放在右边，形成右部；接下来将左部和右部分别递归地执行上面的过程：选基准值，小的放在左边，大的放在右边。重复此过程，直到排序结束。步骤如下：\n* 1.找基准值，设Pivot = a[0] \n* 2.分区（Partition）：比基准值小的放左边，大的放右边，基准值(Pivot)放左部与右部的之间。\n* 3.进行左部（a[0] - a[pivot-1]）的递归，以及右部（a[pivot+1] - a[n-1]）的递归，重复上述步骤。\n\n![快速排序原理图](http://o7kalf5h3.bkt.clouddn.com/quicksort.jpg)\n\n## 快速排序java实现（递归版）\n```java\npublic class QuickSort {\n    public static void main(String[] args) {\n        int[] a={49,38,65,97,76,13,27,49,78,34,12,64,1,8};\n        System.out.println(\"排序之前：\");\n        for (int i = 0; i < a.length; i++) {\n            System.out.print(a[i]+\" \");\n        }\n        //快速排序\n        quick(a);\n        System.out.println();\n        System.out.println(\"排序之后：\");\n        for (int i = 0; i < a.length; i++) {\n            System.out.print(a[i]+\" \");\n        }\n    }\n\n    private static void quick(int[] a) {\n        if(a.length>0){\n            quickSort(a,0,a.length-1);\n        }\n    }\n\n    private static void quickSort(int[] a, int low, int high) {\n        if(low<high){ //如果不加这个判断递归会无法退出导致堆栈溢出异常\n            int middle = getMiddle(a,low,high);\n            quickSort(a, 0, middle-1);\n            quickSort(a, middle+1, high);\n        }\n    }\n\n    private static int getMiddle(int[] a, int low, int high) {\n        int temp = a[low];//基准元素\n        while(low<high){\n            //找到比基准元素小的元素位置\n            while(low<high && a[high]>=temp){\n                high--;\n            }\n            a[low] = a[high]; \n            while(low<high && a[low]<=temp){\n                low++;\n            }\n            a[high] = a[low];\n        }\n        a[low] = temp;\n        return low;\n    }\n}\n```\n\n## 快速排序三向切分法（改进的实现）\n```java\n    private static void quick3Sort(int[] a, int low, int high) {\n        if (low >= high) return;\n        int lt = low, gt = high;\n        int temp = a[low];\n        int i = low;\n        while (i <= gt) {\n            if (a[i] < temp) swap(a, lt++, i++);\n            else if (a[i] > temp) swap(a, i, gt--);\n            else i++;\n        }\n        quick3Sort(a, low, lt - 1);\n        quick3Sort(a, gt + 1, high);\n    }\n\n    private static void swap(int[] a, int i, int j) {\n        int swap = a[i];\n        a[i] = a[j];\n        a[j] = swap;\n    }\n```\n\n## 快速排序的复杂度\n时间复杂度 nlogn,排序方法中平均性能最好的。但若初始序列按关键码有序或基本有序时，快排序反而蜕化为冒泡排序。快速排序是一个不稳定的排序方法。\n\n## 改进方法\n1. 当数组比较小的时候，快速排序比插入排序慢，这个时候用插入排序替换比较好。\n2. 通常以“三者取中法”来选取基准记录，即将排序区间的两个端点与中点三个记录关键码居中的调整为支点记录\n\n## 适用场景\n- 普通的无序集合排序，使用快速排序。 \n- 包含很多重复元素的集合排序，使用三向切分的快速排序。\n- 基本有序的集合使用归并排序。\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/suanfa-1.md","raw":"title: 突破算法第一天-快速排序\ndate: 2017-10-20 23:46:59\ntags: 算法\ncategories: algorithm\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n30天突破算法是我给自己定的一个学习计划，希望在这30天，每天都能完成计划。第一天学习最重要的快速排序。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 30天突破算法\n算法种类不计其数，说30天突破只是给自己定的学习计划。目的是通过30天的记录熟悉常见的算法，提高自己的算法能力。对以后的工作来说也是打下夯实的基础。\n\n## 快速排序的原理\n快速排序也是分治法思想的一种实现，他的思路是使数组中的每个元素与基准值（Pivot，通常是数组的首个值，A[0]）比较，数组中比基准值小的放在基准值的左边，形成左部；大的放在右边，形成右部；接下来将左部和右部分别递归地执行上面的过程：选基准值，小的放在左边，大的放在右边。重复此过程，直到排序结束。步骤如下：\n* 1.找基准值，设Pivot = a[0] \n* 2.分区（Partition）：比基准值小的放左边，大的放右边，基准值(Pivot)放左部与右部的之间。\n* 3.进行左部（a[0] - a[pivot-1]）的递归，以及右部（a[pivot+1] - a[n-1]）的递归，重复上述步骤。\n\n![快速排序原理图](http://o7kalf5h3.bkt.clouddn.com/quicksort.jpg)\n\n## 快速排序java实现（递归版）\n```java\npublic class QuickSort {\n    public static void main(String[] args) {\n        int[] a={49,38,65,97,76,13,27,49,78,34,12,64,1,8};\n        System.out.println(\"排序之前：\");\n        for (int i = 0; i < a.length; i++) {\n            System.out.print(a[i]+\" \");\n        }\n        //快速排序\n        quick(a);\n        System.out.println();\n        System.out.println(\"排序之后：\");\n        for (int i = 0; i < a.length; i++) {\n            System.out.print(a[i]+\" \");\n        }\n    }\n\n    private static void quick(int[] a) {\n        if(a.length>0){\n            quickSort(a,0,a.length-1);\n        }\n    }\n\n    private static void quickSort(int[] a, int low, int high) {\n        if(low<high){ //如果不加这个判断递归会无法退出导致堆栈溢出异常\n            int middle = getMiddle(a,low,high);\n            quickSort(a, 0, middle-1);\n            quickSort(a, middle+1, high);\n        }\n    }\n\n    private static int getMiddle(int[] a, int low, int high) {\n        int temp = a[low];//基准元素\n        while(low<high){\n            //找到比基准元素小的元素位置\n            while(low<high && a[high]>=temp){\n                high--;\n            }\n            a[low] = a[high]; \n            while(low<high && a[low]<=temp){\n                low++;\n            }\n            a[high] = a[low];\n        }\n        a[low] = temp;\n        return low;\n    }\n}\n```\n\n## 快速排序三向切分法（改进的实现）\n```java\n    private static void quick3Sort(int[] a, int low, int high) {\n        if (low >= high) return;\n        int lt = low, gt = high;\n        int temp = a[low];\n        int i = low;\n        while (i <= gt) {\n            if (a[i] < temp) swap(a, lt++, i++);\n            else if (a[i] > temp) swap(a, i, gt--);\n            else i++;\n        }\n        quick3Sort(a, low, lt - 1);\n        quick3Sort(a, gt + 1, high);\n    }\n\n    private static void swap(int[] a, int i, int j) {\n        int swap = a[i];\n        a[i] = a[j];\n        a[j] = swap;\n    }\n```\n\n## 快速排序的复杂度\n时间复杂度 nlogn,排序方法中平均性能最好的。但若初始序列按关键码有序或基本有序时，快排序反而蜕化为冒泡排序。快速排序是一个不稳定的排序方法。\n\n## 改进方法\n1. 当数组比较小的时候，快速排序比插入排序慢，这个时候用插入排序替换比较好。\n2. 通常以“三者取中法”来选取基准记录，即将排序区间的两个端点与中点三个记录关键码居中的调整为支点记录\n\n## 适用场景\n- 普通的无序集合排序，使用快速排序。 \n- 包含很多重复元素的集合排序，使用三向切分的快速排序。\n- 基本有序的集合使用归并排序。\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"suanfa-1","published":1,"updated":"2017-10-22T16:24:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla7r004c8p9kg4fd8j2n","content":"<p><strong> 突破算法第一天-快速排序：</strong> <Excerpt in index | 首页摘要><br>30天突破算法是我给自己定的一个学习计划，希望在这30天，每天都能完成计划。第一天学习最重要的快速排序。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"30天突破算法\"><a href=\"#30天突破算法\" class=\"headerlink\" title=\"30天突破算法\"></a>30天突破算法</h2><p>算法种类不计其数，说30天突破只是给自己定的学习计划。目的是通过30天的记录熟悉常见的算法，提高自己的算法能力。对以后的工作来说也是打下夯实的基础。</p>\n<h2 id=\"快速排序的原理\"><a href=\"#快速排序的原理\" class=\"headerlink\" title=\"快速排序的原理\"></a>快速排序的原理</h2><p>快速排序也是分治法思想的一种实现，他的思路是使数组中的每个元素与基准值（Pivot，通常是数组的首个值，A[0]）比较，数组中比基准值小的放在基准值的左边，形成左部；大的放在右边，形成右部；接下来将左部和右部分别递归地执行上面的过程：选基准值，小的放在左边，大的放在右边。重复此过程，直到排序结束。步骤如下：</p>\n<ul>\n<li>1.找基准值，设Pivot = a[0] </li>\n<li>2.分区（Partition）：比基准值小的放左边，大的放右边，基准值(Pivot)放左部与右部的之间。</li>\n<li>3.进行左部（a[0] - a[pivot-1]）的递归，以及右部（a[pivot+1] - a[n-1]）的递归，重复上述步骤。</li>\n</ul>\n<p><img src=\"http://o7kalf5h3.bkt.clouddn.com/quicksort.jpg\" alt=\"快速排序原理图\"></p>\n<h2 id=\"快速排序java实现（递归版）\"><a href=\"#快速排序java实现（递归版）\" class=\"headerlink\" title=\"快速排序java实现（递归版）\"></a>快速排序java实现（递归版）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span>[] a=&#123;<span class=\"number\">49</span>,<span class=\"number\">38</span>,<span class=\"number\">65</span>,<span class=\"number\">97</span>,<span class=\"number\">76</span>,<span class=\"number\">13</span>,<span class=\"number\">27</span>,<span class=\"number\">49</span>,<span class=\"number\">78</span>,<span class=\"number\">34</span>,<span class=\"number\">12</span>,<span class=\"number\">64</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>&#125;;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"排序之前：\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</div><div class=\"line\">            System.out.print(a[i]+<span class=\"string\">\" \"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//快速排序</span></div><div class=\"line\">        quick(a);</div><div class=\"line\">        System.out.println();</div><div class=\"line\">        System.out.println(<span class=\"string\">\"排序之后：\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</div><div class=\"line\">            System.out.print(a[i]+<span class=\"string\">\" \"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quick</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(a.length&gt;<span class=\"number\">0</span>)&#123;</div><div class=\"line\">            quickSort(a,<span class=\"number\">0</span>,a.length-<span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(low&lt;high)&#123; <span class=\"comment\">//如果不加这个判断递归会无法退出导致堆栈溢出异常</span></div><div class=\"line\">            <span class=\"keyword\">int</span> middle = getMiddle(a,low,high);</div><div class=\"line\">            quickSort(a, <span class=\"number\">0</span>, middle-<span class=\"number\">1</span>);</div><div class=\"line\">            quickSort(a, middle+<span class=\"number\">1</span>, high);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getMiddle</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> temp = a[low];<span class=\"comment\">//基准元素</span></div><div class=\"line\">        <span class=\"keyword\">while</span>(low&lt;high)&#123;</div><div class=\"line\">            <span class=\"comment\">//找到比基准元素小的元素位置</span></div><div class=\"line\">            <span class=\"keyword\">while</span>(low&lt;high &amp;&amp; a[high]&gt;=temp)&#123;</div><div class=\"line\">                high--;</div><div class=\"line\">            &#125;</div><div class=\"line\">            a[low] = a[high]; </div><div class=\"line\">            <span class=\"keyword\">while</span>(low&lt;high &amp;&amp; a[low]&lt;=temp)&#123;</div><div class=\"line\">                low++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            a[high] = a[low];</div><div class=\"line\">        &#125;</div><div class=\"line\">        a[low] = temp;</div><div class=\"line\">        <span class=\"keyword\">return</span> low;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"快速排序三向切分法（改进的实现）\"><a href=\"#快速排序三向切分法（改进的实现）\" class=\"headerlink\" title=\"快速排序三向切分法（改进的实现）\"></a>快速排序三向切分法（改进的实现）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quick3Sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (low &gt;= high) <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> lt = low, gt = high;</div><div class=\"line\">    <span class=\"keyword\">int</span> temp = a[low];</div><div class=\"line\">    <span class=\"keyword\">int</span> i = low;</div><div class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= gt) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a[i] &lt; temp) swap(a, lt++, i++);</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[i] &gt; temp) swap(a, i, gt--);</div><div class=\"line\">        <span class=\"keyword\">else</span> i++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    quick3Sort(a, low, lt - <span class=\"number\">1</span>);</div><div class=\"line\">    quick3Sort(a, gt + <span class=\"number\">1</span>, high);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> swap = a[i];</div><div class=\"line\">    a[i] = a[j];</div><div class=\"line\">    a[j] = swap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"快速排序的复杂度\"><a href=\"#快速排序的复杂度\" class=\"headerlink\" title=\"快速排序的复杂度\"></a>快速排序的复杂度</h2><p>时间复杂度 nlogn,排序方法中平均性能最好的。但若初始序列按关键码有序或基本有序时，快排序反而蜕化为冒泡排序。快速排序是一个不稳定的排序方法。</p>\n<h2 id=\"改进方法\"><a href=\"#改进方法\" class=\"headerlink\" title=\"改进方法\"></a>改进方法</h2><ol>\n<li>当数组比较小的时候，快速排序比插入排序慢，这个时候用插入排序替换比较好。</li>\n<li>通常以“三者取中法”来选取基准记录，即将排序区间的两个端点与中点三个记录关键码居中的调整为支点记录</li>\n</ol>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ul>\n<li>普通的无序集合排序，使用快速排序。 </li>\n<li>包含很多重复元素的集合排序，使用三向切分的快速排序。</li>\n<li>基本有序的集合使用归并排序。</li>\n</ul>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 突破算法第一天-快速排序：</strong> <Excerpt in index | 首页摘要><br>30天突破算法是我给自己定的一个学习计划，希望在这30天，每天都能完成计划。第一天学习最重要的快速排序。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"30天突破算法\"><a href=\"#30天突破算法\" class=\"headerlink\" title=\"30天突破算法\"></a>30天突破算法</h2><p>算法种类不计其数，说30天突破只是给自己定的学习计划。目的是通过30天的记录熟悉常见的算法，提高自己的算法能力。对以后的工作来说也是打下夯实的基础。</p>\n<h2 id=\"快速排序的原理\"><a href=\"#快速排序的原理\" class=\"headerlink\" title=\"快速排序的原理\"></a>快速排序的原理</h2><p>快速排序也是分治法思想的一种实现，他的思路是使数组中的每个元素与基准值（Pivot，通常是数组的首个值，A[0]）比较，数组中比基准值小的放在基准值的左边，形成左部；大的放在右边，形成右部；接下来将左部和右部分别递归地执行上面的过程：选基准值，小的放在左边，大的放在右边。重复此过程，直到排序结束。步骤如下：</p>\n<ul>\n<li>1.找基准值，设Pivot = a[0] </li>\n<li>2.分区（Partition）：比基准值小的放左边，大的放右边，基准值(Pivot)放左部与右部的之间。</li>\n<li>3.进行左部（a[0] - a[pivot-1]）的递归，以及右部（a[pivot+1] - a[n-1]）的递归，重复上述步骤。</li>\n</ul>\n<p><img src=\"http://o7kalf5h3.bkt.clouddn.com/quicksort.jpg\" alt=\"快速排序原理图\"></p>\n<h2 id=\"快速排序java实现（递归版）\"><a href=\"#快速排序java实现（递归版）\" class=\"headerlink\" title=\"快速排序java实现（递归版）\"></a>快速排序java实现（递归版）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span>[] a=&#123;<span class=\"number\">49</span>,<span class=\"number\">38</span>,<span class=\"number\">65</span>,<span class=\"number\">97</span>,<span class=\"number\">76</span>,<span class=\"number\">13</span>,<span class=\"number\">27</span>,<span class=\"number\">49</span>,<span class=\"number\">78</span>,<span class=\"number\">34</span>,<span class=\"number\">12</span>,<span class=\"number\">64</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>&#125;;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"排序之前：\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</div><div class=\"line\">            System.out.print(a[i]+<span class=\"string\">\" \"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//快速排序</span></div><div class=\"line\">        quick(a);</div><div class=\"line\">        System.out.println();</div><div class=\"line\">        System.out.println(<span class=\"string\">\"排序之后：\"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</div><div class=\"line\">            System.out.print(a[i]+<span class=\"string\">\" \"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quick</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(a.length&gt;<span class=\"number\">0</span>)&#123;</div><div class=\"line\">            quickSort(a,<span class=\"number\">0</span>,a.length-<span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(low&lt;high)&#123; <span class=\"comment\">//如果不加这个判断递归会无法退出导致堆栈溢出异常</span></div><div class=\"line\">            <span class=\"keyword\">int</span> middle = getMiddle(a,low,high);</div><div class=\"line\">            quickSort(a, <span class=\"number\">0</span>, middle-<span class=\"number\">1</span>);</div><div class=\"line\">            quickSort(a, middle+<span class=\"number\">1</span>, high);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getMiddle</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> temp = a[low];<span class=\"comment\">//基准元素</span></div><div class=\"line\">        <span class=\"keyword\">while</span>(low&lt;high)&#123;</div><div class=\"line\">            <span class=\"comment\">//找到比基准元素小的元素位置</span></div><div class=\"line\">            <span class=\"keyword\">while</span>(low&lt;high &amp;&amp; a[high]&gt;=temp)&#123;</div><div class=\"line\">                high--;</div><div class=\"line\">            &#125;</div><div class=\"line\">            a[low] = a[high]; </div><div class=\"line\">            <span class=\"keyword\">while</span>(low&lt;high &amp;&amp; a[low]&lt;=temp)&#123;</div><div class=\"line\">                low++;</div><div class=\"line\">            &#125;</div><div class=\"line\">            a[high] = a[low];</div><div class=\"line\">        &#125;</div><div class=\"line\">        a[low] = temp;</div><div class=\"line\">        <span class=\"keyword\">return</span> low;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"快速排序三向切分法（改进的实现）\"><a href=\"#快速排序三向切分法（改进的实现）\" class=\"headerlink\" title=\"快速排序三向切分法（改进的实现）\"></a>快速排序三向切分法（改进的实现）</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quick3Sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (low &gt;= high) <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">int</span> lt = low, gt = high;</div><div class=\"line\">    <span class=\"keyword\">int</span> temp = a[low];</div><div class=\"line\">    <span class=\"keyword\">int</span> i = low;</div><div class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= gt) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a[i] &lt; temp) swap(a, lt++, i++);</div><div class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (a[i] &gt; temp) swap(a, i, gt--);</div><div class=\"line\">        <span class=\"keyword\">else</span> i++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    quick3Sort(a, low, lt - <span class=\"number\">1</span>);</div><div class=\"line\">    quick3Sort(a, gt + <span class=\"number\">1</span>, high);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> swap = a[i];</div><div class=\"line\">    a[i] = a[j];</div><div class=\"line\">    a[j] = swap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"快速排序的复杂度\"><a href=\"#快速排序的复杂度\" class=\"headerlink\" title=\"快速排序的复杂度\"></a>快速排序的复杂度</h2><p>时间复杂度 nlogn,排序方法中平均性能最好的。但若初始序列按关键码有序或基本有序时，快排序反而蜕化为冒泡排序。快速排序是一个不稳定的排序方法。</p>\n<h2 id=\"改进方法\"><a href=\"#改进方法\" class=\"headerlink\" title=\"改进方法\"></a>改进方法</h2><ol>\n<li>当数组比较小的时候，快速排序比插入排序慢，这个时候用插入排序替换比较好。</li>\n<li>通常以“三者取中法”来选取基准记录，即将排序区间的两个端点与中点三个记录关键码居中的调整为支点记录</li>\n</ol>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><ul>\n<li>普通的无序集合排序，使用快速排序。 </li>\n<li>包含很多重复元素的集合排序，使用三向切分的快速排序。</li>\n<li>基本有序的集合使用归并排序。</li>\n</ul>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"突破算法第10天-二叉树","date":"2017-10-29T13:17:09.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n用java实现算法求出二叉树的高度\n<!-- more -->\n<The rest of contents | 余下全文>\n## 树\n* 先序遍历：先访问根结点，然后左节点，最后右节点\n* 中序遍历：先访问左结点，然后根节点，最后右节点\n* 后续遍历：先访问左结点，然后右节点，最后根节点\n\n## java实现\n```java\npublic class TreeNode {\n    TreeNode left;\n    TreeNode right;\n    int val;\n\n    TreeNode(int val) {\n        this.val = val;\n    }\n\n    public static void main(String[] args) {\n        TreeNode root = new TreeNode(1);\n        TreeNode left1 = new TreeNode(2);\n        TreeNode left2 = new TreeNode(3);\n        TreeNode right1 = new TreeNode(4);\n        //创建一棵树\n        root.left = left1;\n        left1.right = left2;\n        root.right = right1;\n        scanNodes(root);\n        System.out.println(\"树的深度是：\" + getDepth(root));\n        System.out.println(\"非递归深度：\" + findDeep2(root));\n    }\n\n    // 递归返回二叉树的深度\n    static int getDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        int left = getDepth(root.left);\n        int right = getDepth(root.right);\n        return left > right ? left + 1 : right + 1;\n    }\n\n    static void scanNodes(TreeNode root) {\n        if (root == null) {\n            return;\n        }\n//        System.out.println(root.val); //先序遍历\n        scanNodes(root.left);\n//        System.out.println(root.val); //中序遍历\n        scanNodes(root.right);\n        System.out.println(root.val); // 后序遍历\n    }\n    // 非递归求深度\n    public static int findDeep2(TreeNode root) {\n        if (root == null)\n            return 0;\n        TreeNode current = null;\n        LinkedList<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        int cur, next;\n        int level = 0;\n        while (!queue.isEmpty()) {\n            cur = 0;\n            //当遍历完当前层以后，队列里元素全是下一层的元素，队列的长度是这一层的节点的个数\n            next = queue.size();\n            while (cur < next) {\n                current = queue.poll();\n                cur++;\n                //把当前节点的左右节点入队（如果存在的话）  \n                if (current.left != null) {\n                    queue.offer(current.left);\n                }\n                if (current.right != null) {\n                    queue.offer(current.right);\n                }\n            }\n            level++;\n        }\n        return level;\n    }\n}\n\n```\n\n## 树的变种\n二叉查找树，平衡二叉查找树，红黑树，b树\n红黑树和平衡二叉树（AVL树）类似，都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能。红黑树和AVL树的区别在于它使用颜色来标识结点的高度，它所追求的是局部平衡而不是AVL树中的非常严格的平衡。\n由于二叉树的效率和深度息息相关，于是出现了多路的B树，B+树等等。b树是叶子为n的平衡树。\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/suanfa-10.md","raw":"title: 突破算法第10天-二叉树\ndate: 2017-10-29 21:17:09\ntags: 算法\ncategories: algorithm\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n用java实现算法求出二叉树的高度\n<!-- more -->\n<The rest of contents | 余下全文>\n## 树\n* 先序遍历：先访问根结点，然后左节点，最后右节点\n* 中序遍历：先访问左结点，然后根节点，最后右节点\n* 后续遍历：先访问左结点，然后右节点，最后根节点\n\n## java实现\n```java\npublic class TreeNode {\n    TreeNode left;\n    TreeNode right;\n    int val;\n\n    TreeNode(int val) {\n        this.val = val;\n    }\n\n    public static void main(String[] args) {\n        TreeNode root = new TreeNode(1);\n        TreeNode left1 = new TreeNode(2);\n        TreeNode left2 = new TreeNode(3);\n        TreeNode right1 = new TreeNode(4);\n        //创建一棵树\n        root.left = left1;\n        left1.right = left2;\n        root.right = right1;\n        scanNodes(root);\n        System.out.println(\"树的深度是：\" + getDepth(root));\n        System.out.println(\"非递归深度：\" + findDeep2(root));\n    }\n\n    // 递归返回二叉树的深度\n    static int getDepth(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        int left = getDepth(root.left);\n        int right = getDepth(root.right);\n        return left > right ? left + 1 : right + 1;\n    }\n\n    static void scanNodes(TreeNode root) {\n        if (root == null) {\n            return;\n        }\n//        System.out.println(root.val); //先序遍历\n        scanNodes(root.left);\n//        System.out.println(root.val); //中序遍历\n        scanNodes(root.right);\n        System.out.println(root.val); // 后序遍历\n    }\n    // 非递归求深度\n    public static int findDeep2(TreeNode root) {\n        if (root == null)\n            return 0;\n        TreeNode current = null;\n        LinkedList<TreeNode> queue = new LinkedList<>();\n        queue.offer(root);\n        int cur, next;\n        int level = 0;\n        while (!queue.isEmpty()) {\n            cur = 0;\n            //当遍历完当前层以后，队列里元素全是下一层的元素，队列的长度是这一层的节点的个数\n            next = queue.size();\n            while (cur < next) {\n                current = queue.poll();\n                cur++;\n                //把当前节点的左右节点入队（如果存在的话）  \n                if (current.left != null) {\n                    queue.offer(current.left);\n                }\n                if (current.right != null) {\n                    queue.offer(current.right);\n                }\n            }\n            level++;\n        }\n        return level;\n    }\n}\n\n```\n\n## 树的变种\n二叉查找树，平衡二叉查找树，红黑树，b树\n红黑树和平衡二叉树（AVL树）类似，都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能。红黑树和AVL树的区别在于它使用颜色来标识结点的高度，它所追求的是局部平衡而不是AVL树中的非常严格的平衡。\n由于二叉树的效率和深度息息相关，于是出现了多路的B树，B+树等等。b树是叶子为n的平衡树。\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"suanfa-10","published":1,"updated":"2017-10-30T14:36:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla7t004f8p9ki7p6b3k3","content":"<p><strong> 突破算法第10天-二叉树：</strong> <Excerpt in index | 首页摘要><br>用java实现算法求出二叉树的高度<br><a id=\"more\"></a></p>\n<p><The rest of contents | 余下全文></p>\n<h2 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h2><ul>\n<li>先序遍历：先访问根结点，然后左节点，最后右节点</li>\n<li>中序遍历：先访问左结点，然后根节点，最后右节点</li>\n<li>后续遍历：先访问左结点，然后右节点，最后根节点</li>\n</ul>\n<h2 id=\"java实现\"><a href=\"#java实现\" class=\"headerlink\" title=\"java实现\"></a>java实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    TreeNode left;</div><div class=\"line\">    TreeNode right;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\"></div><div class=\"line\">    TreeNode(<span class=\"keyword\">int</span> val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        TreeNode root = <span class=\"keyword\">new</span> TreeNode(<span class=\"number\">1</span>);</div><div class=\"line\">        TreeNode left1 = <span class=\"keyword\">new</span> TreeNode(<span class=\"number\">2</span>);</div><div class=\"line\">        TreeNode left2 = <span class=\"keyword\">new</span> TreeNode(<span class=\"number\">3</span>);</div><div class=\"line\">        TreeNode right1 = <span class=\"keyword\">new</span> TreeNode(<span class=\"number\">4</span>);</div><div class=\"line\">        <span class=\"comment\">//创建一棵树</span></div><div class=\"line\">        root.left = left1;</div><div class=\"line\">        left1.right = left2;</div><div class=\"line\">        root.right = right1;</div><div class=\"line\">        scanNodes(root);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"树的深度是：\"</span> + getDepth(root));</div><div class=\"line\">        System.out.println(<span class=\"string\">\"非递归深度：\"</span> + findDeep2(root));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 递归返回二叉树的深度</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> left = getDepth(root.left);</div><div class=\"line\">        <span class=\"keyword\">int</span> right = getDepth(root.right);</div><div class=\"line\">        <span class=\"keyword\">return</span> left &gt; right ? left + <span class=\"number\">1</span> : right + <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">scanNodes</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"><span class=\"comment\">//        System.out.println(root.val); //先序遍历</span></div><div class=\"line\">        scanNodes(root.left);</div><div class=\"line\"><span class=\"comment\">//        System.out.println(root.val); //中序遍历</span></div><div class=\"line\">        scanNodes(root.right);</div><div class=\"line\">        System.out.println(root.val); <span class=\"comment\">// 后序遍历</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 非递归求深度</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">findDeep2</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        TreeNode current = <span class=\"keyword\">null</span>;</div><div class=\"line\">        LinkedList&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</div><div class=\"line\">        queue.offer(root);</div><div class=\"line\">        <span class=\"keyword\">int</span> cur, next;</div><div class=\"line\">        <span class=\"keyword\">int</span> level = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</div><div class=\"line\">            cur = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"comment\">//当遍历完当前层以后，队列里元素全是下一层的元素，队列的长度是这一层的节点的个数</span></div><div class=\"line\">            next = queue.size();</div><div class=\"line\">            <span class=\"keyword\">while</span> (cur &lt; next) &#123;</div><div class=\"line\">                current = queue.poll();</div><div class=\"line\">                cur++;</div><div class=\"line\">                <span class=\"comment\">//把当前节点的左右节点入队（如果存在的话）  </span></div><div class=\"line\">                <span class=\"keyword\">if</span> (current.left != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    queue.offer(current.left);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (current.right != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    queue.offer(current.right);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            level++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> level;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"树的变种\"><a href=\"#树的变种\" class=\"headerlink\" title=\"树的变种\"></a>树的变种</h2><p>二叉查找树，平衡二叉查找树，红黑树，b树<br>红黑树和平衡二叉树（AVL树）类似，都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能。红黑树和AVL树的区别在于它使用颜色来标识结点的高度，它所追求的是局部平衡而不是AVL树中的非常严格的平衡。<br>由于二叉树的效率和深度息息相关，于是出现了多路的B树，B+树等等。b树是叶子为n的平衡树。</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 突破算法第10天-二叉树：</strong> <Excerpt in index | 首页摘要><br>用java实现算法求出二叉树的高度<br>","more":"</p>\n<p><The rest of contents | 余下全文></p>\n<h2 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h2><ul>\n<li>先序遍历：先访问根结点，然后左节点，最后右节点</li>\n<li>中序遍历：先访问左结点，然后根节点，最后右节点</li>\n<li>后续遍历：先访问左结点，然后右节点，最后根节点</li>\n</ul>\n<h2 id=\"java实现\"><a href=\"#java实现\" class=\"headerlink\" title=\"java实现\"></a>java实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span> </span>&#123;</div><div class=\"line\">    TreeNode left;</div><div class=\"line\">    TreeNode right;</div><div class=\"line\">    <span class=\"keyword\">int</span> val;</div><div class=\"line\"></div><div class=\"line\">    TreeNode(<span class=\"keyword\">int</span> val) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.val = val;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        TreeNode root = <span class=\"keyword\">new</span> TreeNode(<span class=\"number\">1</span>);</div><div class=\"line\">        TreeNode left1 = <span class=\"keyword\">new</span> TreeNode(<span class=\"number\">2</span>);</div><div class=\"line\">        TreeNode left2 = <span class=\"keyword\">new</span> TreeNode(<span class=\"number\">3</span>);</div><div class=\"line\">        TreeNode right1 = <span class=\"keyword\">new</span> TreeNode(<span class=\"number\">4</span>);</div><div class=\"line\">        <span class=\"comment\">//创建一棵树</span></div><div class=\"line\">        root.left = left1;</div><div class=\"line\">        left1.right = left2;</div><div class=\"line\">        root.right = right1;</div><div class=\"line\">        scanNodes(root);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"树的深度是：\"</span> + getDepth(root));</div><div class=\"line\">        System.out.println(<span class=\"string\">\"非递归深度：\"</span> + findDeep2(root));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 递归返回二叉树的深度</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDepth</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">int</span> left = getDepth(root.left);</div><div class=\"line\">        <span class=\"keyword\">int</span> right = getDepth(root.right);</div><div class=\"line\">        <span class=\"keyword\">return</span> left &gt; right ? left + <span class=\"number\">1</span> : right + <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">scanNodes</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"><span class=\"comment\">//        System.out.println(root.val); //先序遍历</span></div><div class=\"line\">        scanNodes(root.left);</div><div class=\"line\"><span class=\"comment\">//        System.out.println(root.val); //中序遍历</span></div><div class=\"line\">        scanNodes(root.right);</div><div class=\"line\">        System.out.println(root.val); <span class=\"comment\">// 后序遍历</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 非递归求深度</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">findDeep2</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">        TreeNode current = <span class=\"keyword\">null</span>;</div><div class=\"line\">        LinkedList&lt;TreeNode&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</div><div class=\"line\">        queue.offer(root);</div><div class=\"line\">        <span class=\"keyword\">int</span> cur, next;</div><div class=\"line\">        <span class=\"keyword\">int</span> level = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</div><div class=\"line\">            cur = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"comment\">//当遍历完当前层以后，队列里元素全是下一层的元素，队列的长度是这一层的节点的个数</span></div><div class=\"line\">            next = queue.size();</div><div class=\"line\">            <span class=\"keyword\">while</span> (cur &lt; next) &#123;</div><div class=\"line\">                current = queue.poll();</div><div class=\"line\">                cur++;</div><div class=\"line\">                <span class=\"comment\">//把当前节点的左右节点入队（如果存在的话）  </span></div><div class=\"line\">                <span class=\"keyword\">if</span> (current.left != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    queue.offer(current.left);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (current.right != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    queue.offer(current.right);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            level++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> level;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"树的变种\"><a href=\"#树的变种\" class=\"headerlink\" title=\"树的变种\"></a>树的变种</h2><p>二叉查找树，平衡二叉查找树，红黑树，b树<br>红黑树和平衡二叉树（AVL树）类似，都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能。红黑树和AVL树的区别在于它使用颜色来标识结点的高度，它所追求的是局部平衡而不是AVL树中的非常严格的平衡。<br>由于二叉树的效率和深度息息相关，于是出现了多路的B树，B+树等等。b树是叶子为n的平衡树。</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"突破算法第11天-红黑树","date":"2017-10-30T14:35:37.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n红黑树\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 红黑树\n本文的主要内容：\n1. 红黑树的基本概念以及最重要的 5 点规则。\n2. 红黑树的左旋转、右旋转、重新着色的原理与 Java 实现；\n3. 红黑树的增加结点、删除结点过程解析；\n\n## 红黑树的基本概念与数据结构表示\n\n首先红黑树来个定义：\n\n> 红黑树定义：红黑树又称红 - 黑二叉树，它首先是一颗二叉树，它具体二叉树所有的特性。同时红黑树更是一颗自平衡的排序二叉树 (平衡二叉树的一种实现方式)。\n\n我们知道一颗基本的二叉排序树他们都需要满足一个基本性质：即树中的任何节点的值大于它的左子节点，且小于它的右子节点。\n\n按照这个基本性质使得树的检索效率大大提高。我们知道在生成二叉排序树的过程是非常容易失衡的，最坏的情况就是一边倒（只有右 / 左子树），这样势必会导致二叉树的检索效率大大降低（O(n)），所以为了维持二叉排序树的平衡，大牛们提出了各种平衡二叉树的实现算法，如：AVL，SBT，伸展树，TREAP ，红黑树等等。\n\n> 平衡二叉树必须具备如下特性：它是一棵空树或它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。也就是说该二叉树的任何一个子节点，其左右子树的高度都相近。下面给出平衡二叉树的几个示意图：\n\n![红黑树](http://img.blog.csdn.net/20170110134212154?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n红黑树顾名思义就是结点是红色或者是黑色的平衡二叉树，它通过颜色的约束来维持着二叉树的平衡。对于一棵有效的红黑树而言我们必须增加如下规则，这也是红黑树最重要的 5 点规则：\n\n1. 每个结点都只能是红色或者黑色中的一种。\n2. 根结点是黑色的。\n3. 每个叶结点（NIL 节点，空节点）是黑色的。\n4. 如果一个结点是红的，则它两个子节点都是黑的。也就是说在一条路径上不能出现相邻的两个红色结点。\n5. 从任一结点到其每个叶子的所有路径都包含相同数目的黑色结点。\n\n这些约束强制了红黑树的关键性质: 从根到叶子最长的可能路径不多于最短的可能路径的两倍长。结果是这棵树大致上是平衡的。因为操作比如插入、删除和查找某个值的最坏情况时间都要求与树的高度成比例，这个在高度上的理论上限允许红黑树在最坏情况下都是高效的，而不同于普通的二叉查找树。所以红黑树它是复杂而高效的，其检索效率 O(lg n)。下图为一颗典型的红黑二叉树：\n![](http://img.blog.csdn.net/20170110134903553?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n上面关于红黑树的概念基本已经说得很清楚了，下面给出红黑树的结点用 Java 表示数据结构：\n\n```java\nprivate static final boolean RED = true;\nprivate static final boolean BLACK = false;\nprivate Node root;//二叉查找树的根节点\n\n//结点数据结构\nprivate class Node{\n    private Key key;//键\n    private Value value;//值\n    private Node left, right;//指向子树的链接:左子树和右子树.\n    private int N;//以该节点为根的子树中的结点总数\n    boolean color;//由其父结点指向它的链接的颜色也就是结点颜色.\n\n    public Node(Key key, Value value, int N, boolean color) {\n        this.key = key;\n        this.value = value;\n        this.N = N;\n        this.color = color;\n    }\n}\n\n/**\n * 获取整个二叉查找树的大小\n * @return\n */\npublic int size(){\n    return size(root);\n}\n/**\n * 获取某一个结点为根结点的二叉查找树的大小\n * @param x\n * @return\n */\nprivate int size(Node x){\n    if(x == null){\n        return 0;\n    } else {\n        return x.N;\n    }\n}\nprivate boolean isRed(Node x){\n    if(x == null){\n        return false;\n    }\n    return x.color == RED;\n}\n```\n\n## 红黑树的三个基本操作\n\n红黑树在插入，删除过程中可能会破坏原本的平衡条件导致不满足红黑树的性质，这时候一般情况下要通过左旋、右旋和重新着色这个三个操作来使红黑树重新满足平衡化条件。\n\n## 旋转\n\n旋转分为左旋和右旋。在我们实现某些操作中可能会出现红色右链接或则两个连续的红链接，这时候就要通过旋转修复。\n\n通常左旋操作用于将一个向右倾斜的红色链接 (这个红色链接链连接的两个结点均是红色结点) 旋转为向左链接。对比操作前后，可以看出，该操作实际上是将红线链接的两个结点中的一个较大的结点移动到根结点上。\n\n左旋的示意图如下：\n![](http://img.blog.csdn.net/20170110141248765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![](http://img.blog.csdn.net/20170110141309245?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n左旋的 Java 实现如下：\n\n```java\n/**\n * 左旋转\n * @param h\n * @return\n */\nprivate Node rotateLeft(Node h){\n    Node x = h.right;\n    //把x的左结点赋值给h的右结点\n    h.right = x.left;\n    //把h赋值给x的左结点\n    x.left = h;\n    //\n    x.color = h.color;\n    h.color = RED;\n    x.N = h.N;\n    h.N = 1+ size(h.left) + size(h.right);\n\n    return x;\n}\n```\n\n左旋的动画效果如下：\n![](http://img.blog.csdn.net/20170110142027660?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n右旋其实就是左旋的逆操作：\n![](http://img.blog.csdn.net/20170110142230957?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![](http://img.blog.csdn.net/20170110142252648?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n右旋的代码如下：\n\n```java\n/**\n * 右旋转\n * @param h\n * @return\n */\nprivate Node rotateRight(Node h){\n    Node x = h.left;\n    h.left = x.right;\n    x.right = h;\n\n    x.color = h.color;\n    h.color = RED;\n    x.N = h.N;\n    h.N = 1+ size(h.left) + size(h.right);\n    return x;\n}\n```\n\n右旋的动态示意图：\n![](http://img.blog.csdn.net/20170110142410322?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## <a></a>颜色反转\n\n当出现一个临时的 4-node 的时候，即一个节点的两个子节点均为红色，如下图：\n![](http://img.blog.csdn.net/20170110143015321?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我们需要将 E 提升至父节点，操作方法很简单，就是把 E 对子节点的连线设置为黑色，自己的颜色设置为红色。颜色反转之后颜色如下：\n![](http://img.blog.csdn.net/20170110143225712?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n实现代码如下：\n\n```java\n/**\n * 颜色转换\n * @param h\n */\nprivate void flipColors(Node h){\n    h.color = RED;//父结点颜色变红\n    h.left.color = BLACK;//子结点颜色变黑\n    h.right.color = BLACK;//子结点颜色变黑\n}\n```\n\n> 注意：以上的旋转和颜色反转操作都是针对单一结点的，反转或则颜色反转操作之后可能引起其父结点又不满足平衡性质。\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/suanfa-11.md","raw":"title: 突破算法第11天-红黑树\ndate: 2017-10-30 22:35:37\ntags: 算法\ncategories: algorithm\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n红黑树\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 红黑树\n本文的主要内容：\n1. 红黑树的基本概念以及最重要的 5 点规则。\n2. 红黑树的左旋转、右旋转、重新着色的原理与 Java 实现；\n3. 红黑树的增加结点、删除结点过程解析；\n\n## 红黑树的基本概念与数据结构表示\n\n首先红黑树来个定义：\n\n> 红黑树定义：红黑树又称红 - 黑二叉树，它首先是一颗二叉树，它具体二叉树所有的特性。同时红黑树更是一颗自平衡的排序二叉树 (平衡二叉树的一种实现方式)。\n\n我们知道一颗基本的二叉排序树他们都需要满足一个基本性质：即树中的任何节点的值大于它的左子节点，且小于它的右子节点。\n\n按照这个基本性质使得树的检索效率大大提高。我们知道在生成二叉排序树的过程是非常容易失衡的，最坏的情况就是一边倒（只有右 / 左子树），这样势必会导致二叉树的检索效率大大降低（O(n)），所以为了维持二叉排序树的平衡，大牛们提出了各种平衡二叉树的实现算法，如：AVL，SBT，伸展树，TREAP ，红黑树等等。\n\n> 平衡二叉树必须具备如下特性：它是一棵空树或它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。也就是说该二叉树的任何一个子节点，其左右子树的高度都相近。下面给出平衡二叉树的几个示意图：\n\n![红黑树](http://img.blog.csdn.net/20170110134212154?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n红黑树顾名思义就是结点是红色或者是黑色的平衡二叉树，它通过颜色的约束来维持着二叉树的平衡。对于一棵有效的红黑树而言我们必须增加如下规则，这也是红黑树最重要的 5 点规则：\n\n1. 每个结点都只能是红色或者黑色中的一种。\n2. 根结点是黑色的。\n3. 每个叶结点（NIL 节点，空节点）是黑色的。\n4. 如果一个结点是红的，则它两个子节点都是黑的。也就是说在一条路径上不能出现相邻的两个红色结点。\n5. 从任一结点到其每个叶子的所有路径都包含相同数目的黑色结点。\n\n这些约束强制了红黑树的关键性质: 从根到叶子最长的可能路径不多于最短的可能路径的两倍长。结果是这棵树大致上是平衡的。因为操作比如插入、删除和查找某个值的最坏情况时间都要求与树的高度成比例，这个在高度上的理论上限允许红黑树在最坏情况下都是高效的，而不同于普通的二叉查找树。所以红黑树它是复杂而高效的，其检索效率 O(lg n)。下图为一颗典型的红黑二叉树：\n![](http://img.blog.csdn.net/20170110134903553?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n上面关于红黑树的概念基本已经说得很清楚了，下面给出红黑树的结点用 Java 表示数据结构：\n\n```java\nprivate static final boolean RED = true;\nprivate static final boolean BLACK = false;\nprivate Node root;//二叉查找树的根节点\n\n//结点数据结构\nprivate class Node{\n    private Key key;//键\n    private Value value;//值\n    private Node left, right;//指向子树的链接:左子树和右子树.\n    private int N;//以该节点为根的子树中的结点总数\n    boolean color;//由其父结点指向它的链接的颜色也就是结点颜色.\n\n    public Node(Key key, Value value, int N, boolean color) {\n        this.key = key;\n        this.value = value;\n        this.N = N;\n        this.color = color;\n    }\n}\n\n/**\n * 获取整个二叉查找树的大小\n * @return\n */\npublic int size(){\n    return size(root);\n}\n/**\n * 获取某一个结点为根结点的二叉查找树的大小\n * @param x\n * @return\n */\nprivate int size(Node x){\n    if(x == null){\n        return 0;\n    } else {\n        return x.N;\n    }\n}\nprivate boolean isRed(Node x){\n    if(x == null){\n        return false;\n    }\n    return x.color == RED;\n}\n```\n\n## 红黑树的三个基本操作\n\n红黑树在插入，删除过程中可能会破坏原本的平衡条件导致不满足红黑树的性质，这时候一般情况下要通过左旋、右旋和重新着色这个三个操作来使红黑树重新满足平衡化条件。\n\n## 旋转\n\n旋转分为左旋和右旋。在我们实现某些操作中可能会出现红色右链接或则两个连续的红链接，这时候就要通过旋转修复。\n\n通常左旋操作用于将一个向右倾斜的红色链接 (这个红色链接链连接的两个结点均是红色结点) 旋转为向左链接。对比操作前后，可以看出，该操作实际上是将红线链接的两个结点中的一个较大的结点移动到根结点上。\n\n左旋的示意图如下：\n![](http://img.blog.csdn.net/20170110141248765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![](http://img.blog.csdn.net/20170110141309245?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n左旋的 Java 实现如下：\n\n```java\n/**\n * 左旋转\n * @param h\n * @return\n */\nprivate Node rotateLeft(Node h){\n    Node x = h.right;\n    //把x的左结点赋值给h的右结点\n    h.right = x.left;\n    //把h赋值给x的左结点\n    x.left = h;\n    //\n    x.color = h.color;\n    h.color = RED;\n    x.N = h.N;\n    h.N = 1+ size(h.left) + size(h.right);\n\n    return x;\n}\n```\n\n左旋的动画效果如下：\n![](http://img.blog.csdn.net/20170110142027660?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n右旋其实就是左旋的逆操作：\n![](http://img.blog.csdn.net/20170110142230957?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![](http://img.blog.csdn.net/20170110142252648?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n右旋的代码如下：\n\n```java\n/**\n * 右旋转\n * @param h\n * @return\n */\nprivate Node rotateRight(Node h){\n    Node x = h.left;\n    h.left = x.right;\n    x.right = h;\n\n    x.color = h.color;\n    h.color = RED;\n    x.N = h.N;\n    h.N = 1+ size(h.left) + size(h.right);\n    return x;\n}\n```\n\n右旋的动态示意图：\n![](http://img.blog.csdn.net/20170110142410322?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## <a></a>颜色反转\n\n当出现一个临时的 4-node 的时候，即一个节点的两个子节点均为红色，如下图：\n![](http://img.blog.csdn.net/20170110143015321?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我们需要将 E 提升至父节点，操作方法很简单，就是把 E 对子节点的连线设置为黑色，自己的颜色设置为红色。颜色反转之后颜色如下：\n![](http://img.blog.csdn.net/20170110143225712?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n实现代码如下：\n\n```java\n/**\n * 颜色转换\n * @param h\n */\nprivate void flipColors(Node h){\n    h.color = RED;//父结点颜色变红\n    h.left.color = BLACK;//子结点颜色变黑\n    h.right.color = BLACK;//子结点颜色变黑\n}\n```\n\n> 注意：以上的旋转和颜色反转操作都是针对单一结点的，反转或则颜色反转操作之后可能引起其父结点又不满足平衡性质。\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"suanfa-11","published":1,"updated":"2018-01-28T09:25:15.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla7u004k8p9kpkc54brh","content":"<p><strong> 突破算法第11天-红黑树：</strong> <Excerpt in index | 首页摘要><br>红黑树<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h2><p>本文的主要内容：</p>\n<ol>\n<li>红黑树的基本概念以及最重要的 5 点规则。</li>\n<li>红黑树的左旋转、右旋转、重新着色的原理与 Java 实现；</li>\n<li>红黑树的增加结点、删除结点过程解析；</li>\n</ol>\n<h2 id=\"红黑树的基本概念与数据结构表示\"><a href=\"#红黑树的基本概念与数据结构表示\" class=\"headerlink\" title=\"红黑树的基本概念与数据结构表示\"></a>红黑树的基本概念与数据结构表示</h2><p>首先红黑树来个定义：</p>\n<blockquote>\n<p>红黑树定义：红黑树又称红 - 黑二叉树，它首先是一颗二叉树，它具体二叉树所有的特性。同时红黑树更是一颗自平衡的排序二叉树 (平衡二叉树的一种实现方式)。</p>\n</blockquote>\n<p>我们知道一颗基本的二叉排序树他们都需要满足一个基本性质：即树中的任何节点的值大于它的左子节点，且小于它的右子节点。</p>\n<p>按照这个基本性质使得树的检索效率大大提高。我们知道在生成二叉排序树的过程是非常容易失衡的，最坏的情况就是一边倒（只有右 / 左子树），这样势必会导致二叉树的检索效率大大降低（O(n)），所以为了维持二叉排序树的平衡，大牛们提出了各种平衡二叉树的实现算法，如：AVL，SBT，伸展树，TREAP ，红黑树等等。</p>\n<blockquote>\n<p>平衡二叉树必须具备如下特性：它是一棵空树或它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。也就是说该二叉树的任何一个子节点，其左右子树的高度都相近。下面给出平衡二叉树的几个示意图：</p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20170110134212154?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"红黑树\"></p>\n<p>红黑树顾名思义就是结点是红色或者是黑色的平衡二叉树，它通过颜色的约束来维持着二叉树的平衡。对于一棵有效的红黑树而言我们必须增加如下规则，这也是红黑树最重要的 5 点规则：</p>\n<ol>\n<li>每个结点都只能是红色或者黑色中的一种。</li>\n<li>根结点是黑色的。</li>\n<li>每个叶结点（NIL 节点，空节点）是黑色的。</li>\n<li>如果一个结点是红的，则它两个子节点都是黑的。也就是说在一条路径上不能出现相邻的两个红色结点。</li>\n<li>从任一结点到其每个叶子的所有路径都包含相同数目的黑色结点。</li>\n</ol>\n<p>这些约束强制了红黑树的关键性质: 从根到叶子最长的可能路径不多于最短的可能路径的两倍长。结果是这棵树大致上是平衡的。因为操作比如插入、删除和查找某个值的最坏情况时间都要求与树的高度成比例，这个在高度上的理论上限允许红黑树在最坏情况下都是高效的，而不同于普通的二叉查找树。所以红黑树它是复杂而高效的，其检索效率 O(lg n)。下图为一颗典型的红黑二叉树：<br><img src=\"http://img.blog.csdn.net/20170110134903553?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>上面关于红黑树的概念基本已经说得很清楚了，下面给出红黑树的结点用 Java 表示数据结构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> RED = <span class=\"keyword\">true</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> BLACK = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> Node root;<span class=\"comment\">//二叉查找树的根节点</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//结点数据结构</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Key key;<span class=\"comment\">//键</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Value value;<span class=\"comment\">//值</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Node left, right;<span class=\"comment\">//指向子树的链接:左子树和右子树.</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;<span class=\"comment\">//以该节点为根的子树中的结点总数</span></div><div class=\"line\">    <span class=\"keyword\">boolean</span> color;<span class=\"comment\">//由其父结点指向它的链接的颜色也就是结点颜色.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value value, <span class=\"keyword\">int</span> N, <span class=\"keyword\">boolean</span> color)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.key = key;</div><div class=\"line\">        <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">        <span class=\"keyword\">this</span>.N = N;</div><div class=\"line\">        <span class=\"keyword\">this</span>.color = color;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 获取整个二叉查找树的大小</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> size(root);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 获取某一个结点为根结点的二叉查找树的大小</div><div class=\"line\"> * <span class=\"doctag\">@param</span> x</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(x == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x.N;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isRed</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(x == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> x.color == RED;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"红黑树的三个基本操作\"><a href=\"#红黑树的三个基本操作\" class=\"headerlink\" title=\"红黑树的三个基本操作\"></a>红黑树的三个基本操作</h2><p>红黑树在插入，删除过程中可能会破坏原本的平衡条件导致不满足红黑树的性质，这时候一般情况下要通过左旋、右旋和重新着色这个三个操作来使红黑树重新满足平衡化条件。</p>\n<h2 id=\"旋转\"><a href=\"#旋转\" class=\"headerlink\" title=\"旋转\"></a>旋转</h2><p>旋转分为左旋和右旋。在我们实现某些操作中可能会出现红色右链接或则两个连续的红链接，这时候就要通过旋转修复。</p>\n<p>通常左旋操作用于将一个向右倾斜的红色链接 (这个红色链接链连接的两个结点均是红色结点) 旋转为向左链接。对比操作前后，可以看出，该操作实际上是将红线链接的两个结点中的一个较大的结点移动到根结点上。</p>\n<p>左旋的示意图如下：<br><img src=\"http://img.blog.csdn.net/20170110141248765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p><img src=\"http://img.blog.csdn.net/20170110141309245?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>左旋的 Java 实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 左旋转</div><div class=\"line\"> * <span class=\"doctag\">@param</span> h</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">rotateLeft</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">    Node x = h.right;</div><div class=\"line\">    <span class=\"comment\">//把x的左结点赋值给h的右结点</span></div><div class=\"line\">    h.right = x.left;</div><div class=\"line\">    <span class=\"comment\">//把h赋值给x的左结点</span></div><div class=\"line\">    x.left = h;</div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    x.color = h.color;</div><div class=\"line\">    h.color = RED;</div><div class=\"line\">    x.N = h.N;</div><div class=\"line\">    h.N = <span class=\"number\">1</span>+ size(h.left) + size(h.right);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>左旋的动画效果如下：<br><img src=\"http://img.blog.csdn.net/20170110142027660?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>右旋其实就是左旋的逆操作：<br><img src=\"http://img.blog.csdn.net/20170110142230957?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br><img src=\"http://img.blog.csdn.net/20170110142252648?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br>右旋的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 右旋转</div><div class=\"line\"> * <span class=\"doctag\">@param</span> h</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">rotateRight</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">    Node x = h.left;</div><div class=\"line\">    h.left = x.right;</div><div class=\"line\">    x.right = h;</div><div class=\"line\"></div><div class=\"line\">    x.color = h.color;</div><div class=\"line\">    h.color = RED;</div><div class=\"line\">    x.N = h.N;</div><div class=\"line\">    h.N = <span class=\"number\">1</span>+ size(h.left) + size(h.right);</div><div class=\"line\">    <span class=\"keyword\">return</span> x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>右旋的动态示意图：<br><img src=\"http://img.blog.csdn.net/20170110142410322?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<h2 id=\"颜色反转\"><a href=\"#颜色反转\" class=\"headerlink\" title=\"颜色反转\"></a><a></a>颜色反转</h2><p>当出现一个临时的 4-node 的时候，即一个节点的两个子节点均为红色，如下图：<br><img src=\"http://img.blog.csdn.net/20170110143015321?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br>我们需要将 E 提升至父节点，操作方法很简单，就是把 E 对子节点的连线设置为黑色，自己的颜色设置为红色。颜色反转之后颜色如下：<br><img src=\"http://img.blog.csdn.net/20170110143225712?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br>实现代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 颜色转换</div><div class=\"line\"> * <span class=\"doctag\">@param</span> h</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">flipColors</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">    h.color = RED;<span class=\"comment\">//父结点颜色变红</span></div><div class=\"line\">    h.left.color = BLACK;<span class=\"comment\">//子结点颜色变黑</span></div><div class=\"line\">    h.right.color = BLACK;<span class=\"comment\">//子结点颜色变黑</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：以上的旋转和颜色反转操作都是针对单一结点的，反转或则颜色反转操作之后可能引起其父结点又不满足平衡性质。</p>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 突破算法第11天-红黑树：</strong> <Excerpt in index | 首页摘要><br>红黑树<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h2><p>本文的主要内容：</p>\n<ol>\n<li>红黑树的基本概念以及最重要的 5 点规则。</li>\n<li>红黑树的左旋转、右旋转、重新着色的原理与 Java 实现；</li>\n<li>红黑树的增加结点、删除结点过程解析；</li>\n</ol>\n<h2 id=\"红黑树的基本概念与数据结构表示\"><a href=\"#红黑树的基本概念与数据结构表示\" class=\"headerlink\" title=\"红黑树的基本概念与数据结构表示\"></a>红黑树的基本概念与数据结构表示</h2><p>首先红黑树来个定义：</p>\n<blockquote>\n<p>红黑树定义：红黑树又称红 - 黑二叉树，它首先是一颗二叉树，它具体二叉树所有的特性。同时红黑树更是一颗自平衡的排序二叉树 (平衡二叉树的一种实现方式)。</p>\n</blockquote>\n<p>我们知道一颗基本的二叉排序树他们都需要满足一个基本性质：即树中的任何节点的值大于它的左子节点，且小于它的右子节点。</p>\n<p>按照这个基本性质使得树的检索效率大大提高。我们知道在生成二叉排序树的过程是非常容易失衡的，最坏的情况就是一边倒（只有右 / 左子树），这样势必会导致二叉树的检索效率大大降低（O(n)），所以为了维持二叉排序树的平衡，大牛们提出了各种平衡二叉树的实现算法，如：AVL，SBT，伸展树，TREAP ，红黑树等等。</p>\n<blockquote>\n<p>平衡二叉树必须具备如下特性：它是一棵空树或它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。也就是说该二叉树的任何一个子节点，其左右子树的高度都相近。下面给出平衡二叉树的几个示意图：</p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20170110134212154?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"红黑树\"></p>\n<p>红黑树顾名思义就是结点是红色或者是黑色的平衡二叉树，它通过颜色的约束来维持着二叉树的平衡。对于一棵有效的红黑树而言我们必须增加如下规则，这也是红黑树最重要的 5 点规则：</p>\n<ol>\n<li>每个结点都只能是红色或者黑色中的一种。</li>\n<li>根结点是黑色的。</li>\n<li>每个叶结点（NIL 节点，空节点）是黑色的。</li>\n<li>如果一个结点是红的，则它两个子节点都是黑的。也就是说在一条路径上不能出现相邻的两个红色结点。</li>\n<li>从任一结点到其每个叶子的所有路径都包含相同数目的黑色结点。</li>\n</ol>\n<p>这些约束强制了红黑树的关键性质: 从根到叶子最长的可能路径不多于最短的可能路径的两倍长。结果是这棵树大致上是平衡的。因为操作比如插入、删除和查找某个值的最坏情况时间都要求与树的高度成比例，这个在高度上的理论上限允许红黑树在最坏情况下都是高效的，而不同于普通的二叉查找树。所以红黑树它是复杂而高效的，其检索效率 O(lg n)。下图为一颗典型的红黑二叉树：<br><img src=\"http://img.blog.csdn.net/20170110134903553?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>上面关于红黑树的概念基本已经说得很清楚了，下面给出红黑树的结点用 Java 表示数据结构：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> RED = <span class=\"keyword\">true</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> BLACK = <span class=\"keyword\">false</span>;</div><div class=\"line\"><span class=\"keyword\">private</span> Node root;<span class=\"comment\">//二叉查找树的根节点</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//结点数据结构</span></div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Key key;<span class=\"comment\">//键</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Value value;<span class=\"comment\">//值</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Node left, right;<span class=\"comment\">//指向子树的链接:左子树和右子树.</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> N;<span class=\"comment\">//以该节点为根的子树中的结点总数</span></div><div class=\"line\">    <span class=\"keyword\">boolean</span> color;<span class=\"comment\">//由其父结点指向它的链接的颜色也就是结点颜色.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Key key, Value value, <span class=\"keyword\">int</span> N, <span class=\"keyword\">boolean</span> color)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.key = key;</div><div class=\"line\">        <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">        <span class=\"keyword\">this</span>.N = N;</div><div class=\"line\">        <span class=\"keyword\">this</span>.color = color;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 获取整个二叉查找树的大小</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> size(root);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 获取某一个结点为根结点的二叉查找树的大小</div><div class=\"line\"> * <span class=\"doctag\">@param</span> x</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(x == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x.N;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isRed</span><span class=\"params\">(Node x)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(x == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> x.color == RED;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"红黑树的三个基本操作\"><a href=\"#红黑树的三个基本操作\" class=\"headerlink\" title=\"红黑树的三个基本操作\"></a>红黑树的三个基本操作</h2><p>红黑树在插入，删除过程中可能会破坏原本的平衡条件导致不满足红黑树的性质，这时候一般情况下要通过左旋、右旋和重新着色这个三个操作来使红黑树重新满足平衡化条件。</p>\n<h2 id=\"旋转\"><a href=\"#旋转\" class=\"headerlink\" title=\"旋转\"></a>旋转</h2><p>旋转分为左旋和右旋。在我们实现某些操作中可能会出现红色右链接或则两个连续的红链接，这时候就要通过旋转修复。</p>\n<p>通常左旋操作用于将一个向右倾斜的红色链接 (这个红色链接链连接的两个结点均是红色结点) 旋转为向左链接。对比操作前后，可以看出，该操作实际上是将红线链接的两个结点中的一个较大的结点移动到根结点上。</p>\n<p>左旋的示意图如下：<br><img src=\"http://img.blog.csdn.net/20170110141248765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p><img src=\"http://img.blog.csdn.net/20170110141309245?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>左旋的 Java 实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 左旋转</div><div class=\"line\"> * <span class=\"doctag\">@param</span> h</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">rotateLeft</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">    Node x = h.right;</div><div class=\"line\">    <span class=\"comment\">//把x的左结点赋值给h的右结点</span></div><div class=\"line\">    h.right = x.left;</div><div class=\"line\">    <span class=\"comment\">//把h赋值给x的左结点</span></div><div class=\"line\">    x.left = h;</div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    x.color = h.color;</div><div class=\"line\">    h.color = RED;</div><div class=\"line\">    x.N = h.N;</div><div class=\"line\">    h.N = <span class=\"number\">1</span>+ size(h.left) + size(h.right);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>左旋的动画效果如下：<br><img src=\"http://img.blog.csdn.net/20170110142027660?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>右旋其实就是左旋的逆操作：<br><img src=\"http://img.blog.csdn.net/20170110142230957?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br><img src=\"http://img.blog.csdn.net/20170110142252648?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br>右旋的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 右旋转</div><div class=\"line\"> * <span class=\"doctag\">@param</span> h</div><div class=\"line\"> * <span class=\"doctag\">@return</span></div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">rotateRight</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">    Node x = h.left;</div><div class=\"line\">    h.left = x.right;</div><div class=\"line\">    x.right = h;</div><div class=\"line\"></div><div class=\"line\">    x.color = h.color;</div><div class=\"line\">    h.color = RED;</div><div class=\"line\">    x.N = h.N;</div><div class=\"line\">    h.N = <span class=\"number\">1</span>+ size(h.left) + size(h.right);</div><div class=\"line\">    <span class=\"keyword\">return</span> x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>右旋的动态示意图：<br><img src=\"http://img.blog.csdn.net/20170110142410322?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<h2 id=\"颜色反转\"><a href=\"#颜色反转\" class=\"headerlink\" title=\"颜色反转\"></a><a></a>颜色反转</h2><p>当出现一个临时的 4-node 的时候，即一个节点的两个子节点均为红色，如下图：<br><img src=\"http://img.blog.csdn.net/20170110143015321?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br>我们需要将 E 提升至父节点，操作方法很简单，就是把 E 对子节点的连线设置为黑色，自己的颜色设置为红色。颜色反转之后颜色如下：<br><img src=\"http://img.blog.csdn.net/20170110143225712?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDg1MzI2MQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br>实现代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * 颜色转换</div><div class=\"line\"> * <span class=\"doctag\">@param</span> h</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">flipColors</span><span class=\"params\">(Node h)</span></span>&#123;</div><div class=\"line\">    h.color = RED;<span class=\"comment\">//父结点颜色变红</span></div><div class=\"line\">    h.left.color = BLACK;<span class=\"comment\">//子结点颜色变黑</span></div><div class=\"line\">    h.right.color = BLACK;<span class=\"comment\">//子结点颜色变黑</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：以上的旋转和颜色反转操作都是针对单一结点的，反转或则颜色反转操作之后可能引起其父结点又不满足平衡性质。</p>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"突破算法第二天-插入排序","date":"2017-10-21T01:41:27.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n今天是突破算法第二天，插入排序，比较简单。效率比较低，但是思想很广泛，应用很广，是很多高级排序算法的一个子过程。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 插入排序的原理\n 将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的有序表。即：先将序列的第1个记录\n 看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。\n 要点：设立哨兵，作为临时存储和判断数组边界之用\n\n![插入排序原理](http://o7kalf5h3.bkt.clouddn.com/insert.jpg)\n\n## 插入排序java实现\n```java\n public static void insertSort(int[] a, int n) {\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j > 0 && (a[j]<a[j-1]); j--) {\n                swap(a, j, j-1);\n            }\n        }\n    }\n    private static void swap(int[] a, int i, int j) {\n        int swap = a[i];\n        a[i] = a[j];\n        a[j] = swap;\n    }\n```\n## 算法复杂度\n插入排序的复杂度为O（n^2）\n\n## 改进方法\n希尔排序，其他的插入排序有二分插入排序，2-路插入排序。\n\n## 适用场景\n插入排序比较适合部分有序的数组（以下四种数组）\n* 数组中每个元素距离它的最终位置都不远\n* 一个有序的大数组接一个小数组\n* 数组中只有几个位置不正确\n* 数组比较小\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/suanfa-2.md","raw":"title: 突破算法第二天-插入排序\ndate: 2017-10-21 09:41:27\ntags: 算法\ncategories: algorithm\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n今天是突破算法第二天，插入排序，比较简单。效率比较低，但是思想很广泛，应用很广，是很多高级排序算法的一个子过程。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 插入排序的原理\n 将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的有序表。即：先将序列的第1个记录\n 看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。\n 要点：设立哨兵，作为临时存储和判断数组边界之用\n\n![插入排序原理](http://o7kalf5h3.bkt.clouddn.com/insert.jpg)\n\n## 插入排序java实现\n```java\n public static void insertSort(int[] a, int n) {\n        for (int i = 0; i < n; i++) {\n            for (int j = i; j > 0 && (a[j]<a[j-1]); j--) {\n                swap(a, j, j-1);\n            }\n        }\n    }\n    private static void swap(int[] a, int i, int j) {\n        int swap = a[i];\n        a[i] = a[j];\n        a[j] = swap;\n    }\n```\n## 算法复杂度\n插入排序的复杂度为O（n^2）\n\n## 改进方法\n希尔排序，其他的插入排序有二分插入排序，2-路插入排序。\n\n## 适用场景\n插入排序比较适合部分有序的数组（以下四种数组）\n* 数组中每个元素距离它的最终位置都不远\n* 一个有序的大数组接一个小数组\n* 数组中只有几个位置不正确\n* 数组比较小\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"suanfa-2","published":1,"updated":"2017-10-22T16:24:49.390Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla7v004n8p9kns8fkz1i","content":"<p><strong> 突破算法第二天-插入排序：</strong> <Excerpt in index | 首页摘要><br>今天是突破算法第二天，插入排序，比较简单。效率比较低，但是思想很广泛，应用很广，是很多高级排序算法的一个子过程。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"插入排序的原理\"><a href=\"#插入排序的原理\" class=\"headerlink\" title=\"插入排序的原理\"></a>插入排序的原理</h2><p> 将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的有序表。即：先将序列的第1个记录<br> 看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。<br> 要点：设立哨兵，作为临时存储和判断数组边界之用</p>\n<p><img src=\"http://o7kalf5h3.bkt.clouddn.com/insert.jpg\" alt=\"插入排序原理\"></p>\n<h2 id=\"插入排序java实现\"><a href=\"#插入排序java实现\" class=\"headerlink\" title=\"插入排序java实现\"></a>插入排序java实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt; <span class=\"number\">0</span> &amp;&amp; (a[j]&lt;a[j-<span class=\"number\">1</span>]); j--) &#123;</div><div class=\"line\">               swap(a, j, j-<span class=\"number\">1</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> swap = a[i];</div><div class=\"line\">       a[i] = a[j];</div><div class=\"line\">       a[j] = swap;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"算法复杂度\"><a href=\"#算法复杂度\" class=\"headerlink\" title=\"算法复杂度\"></a>算法复杂度</h2><p>插入排序的复杂度为O（n^2）</p>\n<h2 id=\"改进方法\"><a href=\"#改进方法\" class=\"headerlink\" title=\"改进方法\"></a>改进方法</h2><p>希尔排序，其他的插入排序有二分插入排序，2-路插入排序。</p>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><p>插入排序比较适合部分有序的数组（以下四种数组）</p>\n<ul>\n<li>数组中每个元素距离它的最终位置都不远</li>\n<li>一个有序的大数组接一个小数组</li>\n<li>数组中只有几个位置不正确</li>\n<li>数组比较小</li>\n</ul>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 突破算法第二天-插入排序：</strong> <Excerpt in index | 首页摘要><br>今天是突破算法第二天，插入排序，比较简单。效率比较低，但是思想很广泛，应用很广，是很多高级排序算法的一个子过程。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"插入排序的原理\"><a href=\"#插入排序的原理\" class=\"headerlink\" title=\"插入排序的原理\"></a>插入排序的原理</h2><p> 将一个记录插入到已排序好的有序表中，从而得到一个新，记录数增1的有序表。即：先将序列的第1个记录<br> 看成是一个有序的子序列，然后从第2个记录逐个进行插入，直至整个序列有序为止。<br> 要点：设立哨兵，作为临时存储和判断数组边界之用</p>\n<p><img src=\"http://o7kalf5h3.bkt.clouddn.com/insert.jpg\" alt=\"插入排序原理\"></p>\n<h2 id=\"插入排序java实现\"><a href=\"#插入排序java实现\" class=\"headerlink\" title=\"插入排序java实现\"></a>插入排序java实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt; <span class=\"number\">0</span> &amp;&amp; (a[j]&lt;a[j-<span class=\"number\">1</span>]); j--) &#123;</div><div class=\"line\">               swap(a, j, j-<span class=\"number\">1</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> swap = a[i];</div><div class=\"line\">       a[i] = a[j];</div><div class=\"line\">       a[j] = swap;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"算法复杂度\"><a href=\"#算法复杂度\" class=\"headerlink\" title=\"算法复杂度\"></a>算法复杂度</h2><p>插入排序的复杂度为O（n^2）</p>\n<h2 id=\"改进方法\"><a href=\"#改进方法\" class=\"headerlink\" title=\"改进方法\"></a>改进方法</h2><p>希尔排序，其他的插入排序有二分插入排序，2-路插入排序。</p>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><p>插入排序比较适合部分有序的数组（以下四种数组）</p>\n<ul>\n<li>数组中每个元素距离它的最终位置都不远</li>\n<li>一个有序的大数组接一个小数组</li>\n<li>数组中只有几个位置不正确</li>\n<li>数组比较小</li>\n</ul>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"突破算法第三天-希尔排序","date":"2017-10-22T13:51:03.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n希尔排序平常用的比较少，主要是基于插入排序的改进。但是希尔排序的性能很高，数组越大，性能优势越明显。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 希尔排序的基本原理\n基本思想：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。  \n操作方法：\n1. 选择一个增量序列t1，t2，…，tk，其中ti>tj，tk=1； \n2. 按增量序列个数k，对序列进行k 趟排序； \n3. 每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。\n\n![希尔排序原理图](http://o7kalf5h3.bkt.clouddn.com/shellSort.jpg)\n\n## 希尔排序java实现\n```java\n    public static void shellSort(int[] a) {\n        int n = a.length;\n        int h = 1;\n        while (h < n/3) h = 3*h + 1;\n        while (h >= 1) {\n            // h-sort the array\n            for (int i = h; i < n; i++) {\n                for (int j = i; j >= h && (a[j]< a[j-h]); j -= h) {\n                    swap(a, j, j-h);\n                }\n            }\n            h /= 3;\n        }\n    }\n    private static void swap(int[] a, int i, int j) {\n        int swap = a[i];\n        a[i] = a[j];\n        a[j] = swap;\n    }\n```\n## 算法复杂度\n希尔排序时效分析很难，关键码的比较次数与记录移动次数依赖于增量因子序列d的选取，是一个不稳定排序算法\n\n## 适用场景\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/suanfa-3.md","raw":"title: 突破算法第三天-希尔排序\ndate: 2017-10-22 21:51:03\ntags: 算法\ncategories: algorithm\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n希尔排序平常用的比较少，主要是基于插入排序的改进。但是希尔排序的性能很高，数组越大，性能优势越明显。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 希尔排序的基本原理\n基本思想：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。  \n操作方法：\n1. 选择一个增量序列t1，t2，…，tk，其中ti>tj，tk=1； \n2. 按增量序列个数k，对序列进行k 趟排序； \n3. 每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。\n\n![希尔排序原理图](http://o7kalf5h3.bkt.clouddn.com/shellSort.jpg)\n\n## 希尔排序java实现\n```java\n    public static void shellSort(int[] a) {\n        int n = a.length;\n        int h = 1;\n        while (h < n/3) h = 3*h + 1;\n        while (h >= 1) {\n            // h-sort the array\n            for (int i = h; i < n; i++) {\n                for (int j = i; j >= h && (a[j]< a[j-h]); j -= h) {\n                    swap(a, j, j-h);\n                }\n            }\n            h /= 3;\n        }\n    }\n    private static void swap(int[] a, int i, int j) {\n        int swap = a[i];\n        a[i] = a[j];\n        a[j] = swap;\n    }\n```\n## 算法复杂度\n希尔排序时效分析很难，关键码的比较次数与记录移动次数依赖于增量因子序列d的选取，是一个不稳定排序算法\n\n## 适用场景\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"suanfa-3","published":1,"updated":"2017-10-22T16:24:45.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla7z004r8p9kyjvr020o","content":"<p><strong> 突破算法第三天-希尔排序：</strong> <Excerpt in index | 首页摘要><br>希尔排序平常用的比较少，主要是基于插入排序的改进。但是希尔排序的性能很高，数组越大，性能优势越明显。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"希尔排序的基本原理\"><a href=\"#希尔排序的基本原理\" class=\"headerlink\" title=\"希尔排序的基本原理\"></a>希尔排序的基本原理</h2><p>基本思想：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。<br>操作方法：</p>\n<ol>\n<li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1； </li>\n<li>按增量序列个数k，对序列进行k 趟排序； </li>\n<li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li>\n</ol>\n<p><img src=\"http://o7kalf5h3.bkt.clouddn.com/shellSort.jpg\" alt=\"希尔排序原理图\"></p>\n<h2 id=\"希尔排序java实现\"><a href=\"#希尔排序java实现\" class=\"headerlink\" title=\"希尔排序java实现\"></a>希尔排序java实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = a.length;</div><div class=\"line\">    <span class=\"keyword\">int</span> h = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (h &lt; n/<span class=\"number\">3</span>) h = <span class=\"number\">3</span>*h + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (h &gt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// h-sort the array</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = h; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt;= h &amp;&amp; (a[j]&lt; a[j-h]); j -= h) &#123;</div><div class=\"line\">                swap(a, j, j-h);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        h /= <span class=\"number\">3</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> swap = a[i];</div><div class=\"line\">    a[i] = a[j];</div><div class=\"line\">    a[j] = swap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"算法复杂度\"><a href=\"#算法复杂度\" class=\"headerlink\" title=\"算法复杂度\"></a>算法复杂度</h2><p>希尔排序时效分析很难，关键码的比较次数与记录移动次数依赖于增量因子序列d的选取，是一个不稳定排序算法</p>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 突破算法第三天-希尔排序：</strong> <Excerpt in index | 首页摘要><br>希尔排序平常用的比较少，主要是基于插入排序的改进。但是希尔排序的性能很高，数组越大，性能优势越明显。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"希尔排序的基本原理\"><a href=\"#希尔排序的基本原理\" class=\"headerlink\" title=\"希尔排序的基本原理\"></a>希尔排序的基本原理</h2><p>基本思想：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。<br>操作方法：</p>\n<ol>\n<li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1； </li>\n<li>按增量序列个数k，对序列进行k 趟排序； </li>\n<li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li>\n</ol>\n<p><img src=\"http://o7kalf5h3.bkt.clouddn.com/shellSort.jpg\" alt=\"希尔排序原理图\"></p>\n<h2 id=\"希尔排序java实现\"><a href=\"#希尔排序java实现\" class=\"headerlink\" title=\"希尔排序java实现\"></a>希尔排序java实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> n = a.length;</div><div class=\"line\">    <span class=\"keyword\">int</span> h = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (h &lt; n/<span class=\"number\">3</span>) h = <span class=\"number\">3</span>*h + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span> (h &gt;= <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// h-sort the array</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = h; i &lt; n; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt;= h &amp;&amp; (a[j]&lt; a[j-h]); j -= h) &#123;</div><div class=\"line\">                swap(a, j, j-h);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        h /= <span class=\"number\">3</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> swap = a[i];</div><div class=\"line\">    a[i] = a[j];</div><div class=\"line\">    a[j] = swap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"算法复杂度\"><a href=\"#算法复杂度\" class=\"headerlink\" title=\"算法复杂度\"></a>算法复杂度</h2><p>希尔排序时效分析很难，关键码的比较次数与记录移动次数依赖于增量因子序列d的选取，是一个不稳定排序算法</p>\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"突破算法第一天-归并排序","date":"2017-10-23T15:56:27.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n归并排序是利用分治思想进行排序的典型应用，特别是对几个基本有序的子序列合并时，效率最高。在实际应用中，分布式应用，分布式查询排序会比较多应用到归并排序。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 归并排序的原理\n归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。\n归并排序分为两种种，第一种是自底向上的归并。\n\n第二种是自顶向下的归并。\n\n## 自底向上的归并排序java实现\n```java\npublic class MergeSortBU {\n    private static void merge(int[] a, int[] aux, int lo, int mid, int hi) {\n        // 复制到aux[]\n        for (int k = lo; k <= hi; k++) {\n            aux[k] = a[k];\n        }\n        // 合并回 a[]\n        int i = lo, j = mid + 1;\n        for (int k = lo; k <= hi; k++) {\n            if (i > mid) a[k] = aux[j++];\n            else if (j > hi) a[k] = aux[i++];\n            else if (aux[j] < aux[i]) a[k] = aux[j++];\n            else a[k] = aux[i++];\n        }\n    }\n\n    public static void mergeSort(int[] a) {\n        int n = a.length;\n        int[] aux = new int[n];\n        for (int len = 1; len < n; len *= 2) {\n            for (int lo = 0; lo < n - len; lo += len + len) {\n                int mid = lo + len - 1;\n                int hi = Math.min(lo + len + len - 1, n - 1);\n                merge(a, aux, lo, mid, hi);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {49, 38, 65, 97, 76, 13, 27, 4, 78, 34, 12, 64, 1, 8};\n        mergeSort(arr);\n        System.out.println(\"排序之后：\");\n        System.out.println(Arrays.toString(arr));\n    }\n}\n```\n## 自顶向下的归并排序java实现\n```java\nprivate static void sort(int[] a, int low, int high) {\n        if (high <= low) return;\n        int mid = low + (high - low) / 2;\n        sort(a, low, mid);\n        sort(a, mid + 1, high);\n        merge(a, low, mid, high);\n    }\n\n    private static void merge(int[] a, int lo, int mid, int hi) {\n        // 复制到aux[]\n        int[] aux = new int[a.length];\n        for (int k = lo; k <= hi; k++) {\n            aux[k] = a[k];\n        }\n        // 合并回 a[]\n        int i = lo, j = mid + 1;\n        for (int k = lo; k <= hi; k++) {\n            if (i > mid) a[k] = aux[j++];\n            else if (j > hi) a[k] = aux[i++];\n            else if (aux[j] < aux[i]) a[k] = aux[j++];\n            else a[k] = aux[i++];\n        }\n    }\n```\n## 算法复杂度\n归并排序的算法复杂度是nlgn\n\n## 应用场景\n1. 几个基本有序的数组进行排序\n2. 部分有序的数组\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/suanfa-4.md","raw":"title: 突破算法第一天-归并排序\ndate: 2017-10-23 23:56:27\ntags: 算法\ncategories: algorithm\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n归并排序是利用分治思想进行排序的典型应用，特别是对几个基本有序的子序列合并时，效率最高。在实际应用中，分布式应用，分布式查询排序会比较多应用到归并排序。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 归并排序的原理\n归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。\n归并排序分为两种种，第一种是自底向上的归并。\n\n第二种是自顶向下的归并。\n\n## 自底向上的归并排序java实现\n```java\npublic class MergeSortBU {\n    private static void merge(int[] a, int[] aux, int lo, int mid, int hi) {\n        // 复制到aux[]\n        for (int k = lo; k <= hi; k++) {\n            aux[k] = a[k];\n        }\n        // 合并回 a[]\n        int i = lo, j = mid + 1;\n        for (int k = lo; k <= hi; k++) {\n            if (i > mid) a[k] = aux[j++];\n            else if (j > hi) a[k] = aux[i++];\n            else if (aux[j] < aux[i]) a[k] = aux[j++];\n            else a[k] = aux[i++];\n        }\n    }\n\n    public static void mergeSort(int[] a) {\n        int n = a.length;\n        int[] aux = new int[n];\n        for (int len = 1; len < n; len *= 2) {\n            for (int lo = 0; lo < n - len; lo += len + len) {\n                int mid = lo + len - 1;\n                int hi = Math.min(lo + len + len - 1, n - 1);\n                merge(a, aux, lo, mid, hi);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {49, 38, 65, 97, 76, 13, 27, 4, 78, 34, 12, 64, 1, 8};\n        mergeSort(arr);\n        System.out.println(\"排序之后：\");\n        System.out.println(Arrays.toString(arr));\n    }\n}\n```\n## 自顶向下的归并排序java实现\n```java\nprivate static void sort(int[] a, int low, int high) {\n        if (high <= low) return;\n        int mid = low + (high - low) / 2;\n        sort(a, low, mid);\n        sort(a, mid + 1, high);\n        merge(a, low, mid, high);\n    }\n\n    private static void merge(int[] a, int lo, int mid, int hi) {\n        // 复制到aux[]\n        int[] aux = new int[a.length];\n        for (int k = lo; k <= hi; k++) {\n            aux[k] = a[k];\n        }\n        // 合并回 a[]\n        int i = lo, j = mid + 1;\n        for (int k = lo; k <= hi; k++) {\n            if (i > mid) a[k] = aux[j++];\n            else if (j > hi) a[k] = aux[i++];\n            else if (aux[j] < aux[i]) a[k] = aux[j++];\n            else a[k] = aux[i++];\n        }\n    }\n```\n## 算法复杂度\n归并排序的算法复杂度是nlgn\n\n## 应用场景\n1. 几个基本有序的数组进行排序\n2. 部分有序的数组\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"suanfa-4","published":1,"updated":"2017-10-24T15:29:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla81004u8p9kb8njhcdi","content":"<p><strong> 突破算法第一天-归并排序：</strong> <Excerpt in index | 首页摘要><br>归并排序是利用分治思想进行排序的典型应用，特别是对几个基本有序的子序列合并时，效率最高。在实际应用中，分布式应用，分布式查询排序会比较多应用到归并排序。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"归并排序的原理\"><a href=\"#归并排序的原理\" class=\"headerlink\" title=\"归并排序的原理\"></a>归并排序的原理</h2><p>归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。<br>归并排序分为两种种，第一种是自底向上的归并。</p>\n<p>第二种是自顶向下的归并。</p>\n<h2 id=\"自底向上的归并排序java实现\"><a href=\"#自底向上的归并排序java实现\" class=\"headerlink\" title=\"自底向上的归并排序java实现\"></a>自底向上的归并排序java实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergeSortBU</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span>[] aux, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 复制到aux[]</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = lo; k &lt;= hi; k++) &#123;</div><div class=\"line\">            aux[k] = a[k];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 合并回 a[]</span></div><div class=\"line\">        <span class=\"keyword\">int</span> i = lo, j = mid + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = lo; k &lt;= hi; k++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i &gt; mid) a[k] = aux[j++];</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j &gt; hi) a[k] = aux[i++];</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (aux[j] &lt; aux[i]) a[k] = aux[j++];</div><div class=\"line\">            <span class=\"keyword\">else</span> a[k] = aux[i++];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> n = a.length;</div><div class=\"line\">        <span class=\"keyword\">int</span>[] aux = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> len = <span class=\"number\">1</span>; len &lt; n; len *= <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> lo = <span class=\"number\">0</span>; lo &lt; n - len; lo += len + len) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> mid = lo + len - <span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"keyword\">int</span> hi = Math.min(lo + len + len - <span class=\"number\">1</span>, n - <span class=\"number\">1</span>);</div><div class=\"line\">                merge(a, aux, lo, mid, hi);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">49</span>, <span class=\"number\">38</span>, <span class=\"number\">65</span>, <span class=\"number\">97</span>, <span class=\"number\">76</span>, <span class=\"number\">13</span>, <span class=\"number\">27</span>, <span class=\"number\">4</span>, <span class=\"number\">78</span>, <span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">64</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>&#125;;</div><div class=\"line\">        mergeSort(arr);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"排序之后：\"</span>);</div><div class=\"line\">        System.out.println(Arrays.toString(arr));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"自顶向下的归并排序java实现\"><a href=\"#自顶向下的归并排序java实现\" class=\"headerlink\" title=\"自顶向下的归并排序java实现\"></a>自顶向下的归并排序java实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (high &lt;= low) <span class=\"keyword\">return</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> mid = low + (high - low) / <span class=\"number\">2</span>;</div><div class=\"line\">        sort(a, low, mid);</div><div class=\"line\">        sort(a, mid + <span class=\"number\">1</span>, high);</div><div class=\"line\">        merge(a, low, mid, high);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 复制到aux[]</span></div><div class=\"line\">        <span class=\"keyword\">int</span>[] aux = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[a.length];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = lo; k &lt;= hi; k++) &#123;</div><div class=\"line\">            aux[k] = a[k];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 合并回 a[]</span></div><div class=\"line\">        <span class=\"keyword\">int</span> i = lo, j = mid + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = lo; k &lt;= hi; k++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i &gt; mid) a[k] = aux[j++];</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j &gt; hi) a[k] = aux[i++];</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (aux[j] &lt; aux[i]) a[k] = aux[j++];</div><div class=\"line\">            <span class=\"keyword\">else</span> a[k] = aux[i++];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"算法复杂度\"><a href=\"#算法复杂度\" class=\"headerlink\" title=\"算法复杂度\"></a>算法复杂度</h2><p>归并排序的算法复杂度是nlgn</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><ol>\n<li>几个基本有序的数组进行排序</li>\n<li>部分有序的数组</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 突破算法第一天-归并排序：</strong> <Excerpt in index | 首页摘要><br>归并排序是利用分治思想进行排序的典型应用，特别是对几个基本有序的子序列合并时，效率最高。在实际应用中，分布式应用，分布式查询排序会比较多应用到归并排序。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"归并排序的原理\"><a href=\"#归并排序的原理\" class=\"headerlink\" title=\"归并排序的原理\"></a>归并排序的原理</h2><p>归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。<br>归并排序分为两种种，第一种是自底向上的归并。</p>\n<p>第二种是自顶向下的归并。</p>\n<h2 id=\"自底向上的归并排序java实现\"><a href=\"#自底向上的归并排序java实现\" class=\"headerlink\" title=\"自底向上的归并排序java实现\"></a>自底向上的归并排序java实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergeSortBU</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span>[] aux, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 复制到aux[]</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = lo; k &lt;= hi; k++) &#123;</div><div class=\"line\">            aux[k] = a[k];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 合并回 a[]</span></div><div class=\"line\">        <span class=\"keyword\">int</span> i = lo, j = mid + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = lo; k &lt;= hi; k++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i &gt; mid) a[k] = aux[j++];</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j &gt; hi) a[k] = aux[i++];</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (aux[j] &lt; aux[i]) a[k] = aux[j++];</div><div class=\"line\">            <span class=\"keyword\">else</span> a[k] = aux[i++];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> n = a.length;</div><div class=\"line\">        <span class=\"keyword\">int</span>[] aux = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> len = <span class=\"number\">1</span>; len &lt; n; len *= <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> lo = <span class=\"number\">0</span>; lo &lt; n - len; lo += len + len) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> mid = lo + len - <span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"keyword\">int</span> hi = Math.min(lo + len + len - <span class=\"number\">1</span>, n - <span class=\"number\">1</span>);</div><div class=\"line\">                merge(a, aux, lo, mid, hi);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">49</span>, <span class=\"number\">38</span>, <span class=\"number\">65</span>, <span class=\"number\">97</span>, <span class=\"number\">76</span>, <span class=\"number\">13</span>, <span class=\"number\">27</span>, <span class=\"number\">4</span>, <span class=\"number\">78</span>, <span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">64</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>&#125;;</div><div class=\"line\">        mergeSort(arr);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"排序之后：\"</span>);</div><div class=\"line\">        System.out.println(Arrays.toString(arr));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"自顶向下的归并排序java实现\"><a href=\"#自顶向下的归并排序java实现\" class=\"headerlink\" title=\"自顶向下的归并排序java实现\"></a>自顶向下的归并排序java实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (high &lt;= low) <span class=\"keyword\">return</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> mid = low + (high - low) / <span class=\"number\">2</span>;</div><div class=\"line\">        sort(a, low, mid);</div><div class=\"line\">        sort(a, mid + <span class=\"number\">1</span>, high);</div><div class=\"line\">        merge(a, low, mid, high);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> lo, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> hi)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 复制到aux[]</span></div><div class=\"line\">        <span class=\"keyword\">int</span>[] aux = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[a.length];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = lo; k &lt;= hi; k++) &#123;</div><div class=\"line\">            aux[k] = a[k];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 合并回 a[]</span></div><div class=\"line\">        <span class=\"keyword\">int</span> i = lo, j = mid + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = lo; k &lt;= hi; k++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (i &gt; mid) a[k] = aux[j++];</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j &gt; hi) a[k] = aux[i++];</div><div class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (aux[j] &lt; aux[i]) a[k] = aux[j++];</div><div class=\"line\">            <span class=\"keyword\">else</span> a[k] = aux[i++];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"算法复杂度\"><a href=\"#算法复杂度\" class=\"headerlink\" title=\"算法复杂度\"></a>算法复杂度</h2><p>归并排序的算法复杂度是nlgn</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><ol>\n<li>几个基本有序的数组进行排序</li>\n<li>部分有序的数组</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"突破算法第五天-选择排序","date":"2017-10-24T13:46:33.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n选择排序很简单，属于交换排序算法。通过比较找到最大值或最小值，然后进行交换。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 选择排序的原理\n首先找到数组中最小的元素，与数组第一个元素交换，然后在剩下的元素中选择最小的，与第二个元素交换，以此类推，直到排序完成。  \n![选择排序图](http://o7kalf5h3.bkt.clouddn.com/selectSort.jpg)\n\n## 选择排序的java实现\n```java\n    private static void sort(int[] a) {\n        int len = a.length;\n        for (int i = 1; i < len; i++) {\n            for (int j = i; j > 0 && (a[j] < a[j - 1]); j--) {\n                swap(a, j, j - 1);\n            }\n        }\n    }\n\n    private static void swap(int[] a, int i, int j) {\n        int swap = a[i];\n        a[i] = a[j];\n        a[j] = swap;\n    }\n```\n## 算法复杂度\n选择排序的算法复杂度是O(n^2)\n\n## 改进\n1. 每次选择的时候把最大值和最小值都比较出来，双向进行交换排序\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/suanfa-5.md","raw":"title: 突破算法第五天-选择排序\ndate: 2017-10-24 21:46:33\ntags: 算法\ncategories: algorithm\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n选择排序很简单，属于交换排序算法。通过比较找到最大值或最小值，然后进行交换。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 选择排序的原理\n首先找到数组中最小的元素，与数组第一个元素交换，然后在剩下的元素中选择最小的，与第二个元素交换，以此类推，直到排序完成。  \n![选择排序图](http://o7kalf5h3.bkt.clouddn.com/selectSort.jpg)\n\n## 选择排序的java实现\n```java\n    private static void sort(int[] a) {\n        int len = a.length;\n        for (int i = 1; i < len; i++) {\n            for (int j = i; j > 0 && (a[j] < a[j - 1]); j--) {\n                swap(a, j, j - 1);\n            }\n        }\n    }\n\n    private static void swap(int[] a, int i, int j) {\n        int swap = a[i];\n        a[i] = a[j];\n        a[j] = swap;\n    }\n```\n## 算法复杂度\n选择排序的算法复杂度是O(n^2)\n\n## 改进\n1. 每次选择的时候把最大值和最小值都比较出来，双向进行交换排序\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"suanfa-5","published":1,"updated":"2017-10-24T15:51:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla82004y8p9k4upa7i5r","content":"<p><strong> 突破算法第五天-选择排序：</strong> <Excerpt in index | 首页摘要><br>选择排序很简单，属于交换排序算法。通过比较找到最大值或最小值，然后进行交换。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"选择排序的原理\"><a href=\"#选择排序的原理\" class=\"headerlink\" title=\"选择排序的原理\"></a>选择排序的原理</h2><p>首先找到数组中最小的元素，与数组第一个元素交换，然后在剩下的元素中选择最小的，与第二个元素交换，以此类推，直到排序完成。<br><img src=\"http://o7kalf5h3.bkt.clouddn.com/selectSort.jpg\" alt=\"选择排序图\"></p>\n<h2 id=\"选择排序的java实现\"><a href=\"#选择排序的java实现\" class=\"headerlink\" title=\"选择排序的java实现\"></a>选择排序的java实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> len = a.length;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt; <span class=\"number\">0</span> &amp;&amp; (a[j] &lt; a[j - <span class=\"number\">1</span>]); j--) &#123;</div><div class=\"line\">            swap(a, j, j - <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> swap = a[i];</div><div class=\"line\">    a[i] = a[j];</div><div class=\"line\">    a[j] = swap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"算法复杂度\"><a href=\"#算法复杂度\" class=\"headerlink\" title=\"算法复杂度\"></a>算法复杂度</h2><p>选择排序的算法复杂度是O(n^2)</p>\n<h2 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h2><ol>\n<li>每次选择的时候把最大值和最小值都比较出来，双向进行交换排序</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 突破算法第五天-选择排序：</strong> <Excerpt in index | 首页摘要><br>选择排序很简单，属于交换排序算法。通过比较找到最大值或最小值，然后进行交换。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"选择排序的原理\"><a href=\"#选择排序的原理\" class=\"headerlink\" title=\"选择排序的原理\"></a>选择排序的原理</h2><p>首先找到数组中最小的元素，与数组第一个元素交换，然后在剩下的元素中选择最小的，与第二个元素交换，以此类推，直到排序完成。<br><img src=\"http://o7kalf5h3.bkt.clouddn.com/selectSort.jpg\" alt=\"选择排序图\"></p>\n<h2 id=\"选择排序的java实现\"><a href=\"#选择排序的java实现\" class=\"headerlink\" title=\"选择排序的java实现\"></a>选择排序的java实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> len = a.length;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &gt; <span class=\"number\">0</span> &amp;&amp; (a[j] &lt; a[j - <span class=\"number\">1</span>]); j--) &#123;</div><div class=\"line\">            swap(a, j, j - <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> swap = a[i];</div><div class=\"line\">    a[i] = a[j];</div><div class=\"line\">    a[j] = swap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"算法复杂度\"><a href=\"#算法复杂度\" class=\"headerlink\" title=\"算法复杂度\"></a>算法复杂度</h2><p>选择排序的算法复杂度是O(n^2)</p>\n<h2 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h2><ol>\n<li>每次选择的时候把最大值和最小值都比较出来，双向进行交换排序</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"突破算法第六天-冒泡排序","date":"2017-10-25T14:06:06.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n冒泡排序也非常简单，效率比较低。了解即可。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 冒泡排序的原理\n在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。\n\n![冒泡排序图](http://o7kalf5h3.bkt.clouddn.com/bubbleSort.jpg)\n\n## 冒泡排序的java实现\n```java\nprivate static void bubbleSort(int a[], int n) {\n    for (int i = 0; i < n - 1; ++i) {\n        for (int j = 0; j < n - i - 1; ++j) {\n            if (a[j] > a[j + 1]) {\n                int tmp = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = tmp;\n            }\n        }\n    }\n}\n```\n## 算法复杂度\n冒泡排序的复杂度为O(n^2)\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/suanfa-6.md","raw":"title: 突破算法第六天-冒泡排序\ndate: 2017-10-25 22:06:06\ntags: 算法\ncategories: algorithm\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n冒泡排序也非常简单，效率比较低。了解即可。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 冒泡排序的原理\n在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。\n\n![冒泡排序图](http://o7kalf5h3.bkt.clouddn.com/bubbleSort.jpg)\n\n## 冒泡排序的java实现\n```java\nprivate static void bubbleSort(int a[], int n) {\n    for (int i = 0; i < n - 1; ++i) {\n        for (int j = 0; j < n - i - 1; ++j) {\n            if (a[j] > a[j + 1]) {\n                int tmp = a[j];\n                a[j] = a[j + 1];\n                a[j + 1] = tmp;\n            }\n        }\n    }\n}\n```\n## 算法复杂度\n冒泡排序的复杂度为O(n^2)\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"suanfa-6","published":1,"updated":"2017-10-27T00:38:35.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla8300518p9kme9ksgio","content":"<p><strong> 突破算法第六天-冒泡排序：</strong> <Excerpt in index | 首页摘要><br>冒泡排序也非常简单，效率比较低。了解即可。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"冒泡排序的原理\"><a href=\"#冒泡排序的原理\" class=\"headerlink\" title=\"冒泡排序的原理\"></a>冒泡排序的原理</h2><p>在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。</p>\n<p><img src=\"http://o7kalf5h3.bkt.clouddn.com/bubbleSort.jpg\" alt=\"冒泡排序图\"></p>\n<h2 id=\"冒泡排序的java实现\"><a href=\"#冒泡排序的java实现\" class=\"headerlink\" title=\"冒泡排序的java实现\"></a>冒泡排序的java实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n - i - <span class=\"number\">1</span>; ++j) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (a[j] &gt; a[j + <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> tmp = a[j];</div><div class=\"line\">                a[j] = a[j + <span class=\"number\">1</span>];</div><div class=\"line\">                a[j + <span class=\"number\">1</span>] = tmp;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"算法复杂度\"><a href=\"#算法复杂度\" class=\"headerlink\" title=\"算法复杂度\"></a>算法复杂度</h2><p>冒泡排序的复杂度为O(n^2)</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 突破算法第六天-冒泡排序：</strong> <Excerpt in index | 首页摘要><br>冒泡排序也非常简单，效率比较低。了解即可。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"冒泡排序的原理\"><a href=\"#冒泡排序的原理\" class=\"headerlink\" title=\"冒泡排序的原理\"></a>冒泡排序的原理</h2><p>在要排序的一组数中，对当前还未排好序的范围内的全部数，自上而下对相邻的两个数依次进行比较和调整，让较大的数往下沉，较小的往上冒。即：每当两相邻的数比较后发现它们的排序与排序要求相反时，就将它们互换。</p>\n<p><img src=\"http://o7kalf5h3.bkt.clouddn.com/bubbleSort.jpg\" alt=\"冒泡排序图\"></p>\n<h2 id=\"冒泡排序的java实现\"><a href=\"#冒泡排序的java实现\" class=\"headerlink\" title=\"冒泡排序的java实现\"></a>冒泡排序的java实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; ++i) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n - i - <span class=\"number\">1</span>; ++j) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (a[j] &gt; a[j + <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> tmp = a[j];</div><div class=\"line\">                a[j] = a[j + <span class=\"number\">1</span>];</div><div class=\"line\">                a[j + <span class=\"number\">1</span>] = tmp;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"算法复杂度\"><a href=\"#算法复杂度\" class=\"headerlink\" title=\"算法复杂度\"></a>算法复杂度</h2><p>冒泡排序的复杂度为O(n^2)</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"突破算法第七天-堆排序","date":"2017-10-26T14:50:57.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n堆排序是利用二叉树的原理实现的一种排序，难点在于要构建堆,构建堆一般可以采用下沉或者上浮的算法进行。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 堆排序的基本原理\n初始时把要排序的n个数的序列看作是一棵顺序存储的二叉树（一维数组存储二叉树），调整它们的存储序，使之成为一个堆，将堆顶元素输出，得到n 个元素中最小(或最大)的元素，这时堆的根节点的数最小（或者最大）。然后对前面(n-1)个元素重新调整使之成为堆，输出堆顶元素，得到n 个元素中次小(或次大)的元素。依此类推，直到只有两个节点的堆，并对它们作交换，最后得到有n个节点的有序序列。称这个过程为堆排序。\n因此，实现堆排序需解决两个问题：\n1. 如何将n 个待排序的数建成堆；\n2. 输出堆顶元素后，怎样调整剩余n-1 个元素，使其成为一个新堆。\n\n## 堆排序java实现\n```java\npublic static void sort(int[] a) {\n        int n = a.length;\n        for (int k = n / 2; k >= 1; k--)\n            sink(a, k, n);\n        while (n > 1) {\n            swap(a, 1, n--);\n            sink(a, 1, n);\n        }\n    }\n\nprivate static void sink(int[] a, int k, int n) {\n    while (2 * k <= n) {\n        int j = 2 * k;\n        if (j < n && a[j - 1] < a[j + 1 - 1]) j++;\n        if (a[k - 1] >= a[j - 1]) break;\n        swap(a, k, j);\n        k = j;\n    }\n}\n\nprivate static void swap(int[] a, int i, int j) {\n    int swap = a[i - 1];\n    a[i - 1] = a[j - 1];\n    a[j - 1] = swap;\n}\n\npublic static void main(String[] args) {\n    int[] arr = {49, 38, 65, 97, 76, 13, 27, 4, 78, 34, 12, 64, 1, 8};\n    sort(arr);\n    System.out.println(\"排序之后：\");\n    System.out.println(Arrays.toString(arr));\n}\n```\n## 算法复杂度\n堆排序的平均时间复杂度为Ο(nlogn)\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/suanfa-7.md","raw":"title: 突破算法第七天-堆排序\ndate: 2017-10-26 22:50:57\ntags: 算法\ncategories: algorithm\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n堆排序是利用二叉树的原理实现的一种排序，难点在于要构建堆,构建堆一般可以采用下沉或者上浮的算法进行。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 堆排序的基本原理\n初始时把要排序的n个数的序列看作是一棵顺序存储的二叉树（一维数组存储二叉树），调整它们的存储序，使之成为一个堆，将堆顶元素输出，得到n 个元素中最小(或最大)的元素，这时堆的根节点的数最小（或者最大）。然后对前面(n-1)个元素重新调整使之成为堆，输出堆顶元素，得到n 个元素中次小(或次大)的元素。依此类推，直到只有两个节点的堆，并对它们作交换，最后得到有n个节点的有序序列。称这个过程为堆排序。\n因此，实现堆排序需解决两个问题：\n1. 如何将n 个待排序的数建成堆；\n2. 输出堆顶元素后，怎样调整剩余n-1 个元素，使其成为一个新堆。\n\n## 堆排序java实现\n```java\npublic static void sort(int[] a) {\n        int n = a.length;\n        for (int k = n / 2; k >= 1; k--)\n            sink(a, k, n);\n        while (n > 1) {\n            swap(a, 1, n--);\n            sink(a, 1, n);\n        }\n    }\n\nprivate static void sink(int[] a, int k, int n) {\n    while (2 * k <= n) {\n        int j = 2 * k;\n        if (j < n && a[j - 1] < a[j + 1 - 1]) j++;\n        if (a[k - 1] >= a[j - 1]) break;\n        swap(a, k, j);\n        k = j;\n    }\n}\n\nprivate static void swap(int[] a, int i, int j) {\n    int swap = a[i - 1];\n    a[i - 1] = a[j - 1];\n    a[j - 1] = swap;\n}\n\npublic static void main(String[] args) {\n    int[] arr = {49, 38, 65, 97, 76, 13, 27, 4, 78, 34, 12, 64, 1, 8};\n    sort(arr);\n    System.out.println(\"排序之后：\");\n    System.out.println(Arrays.toString(arr));\n}\n```\n## 算法复杂度\n堆排序的平均时间复杂度为Ο(nlogn)\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"suanfa-7","published":1,"updated":"2017-10-27T00:38:41.817Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla8500558p9km0m7dkkm","content":"<p><strong> 突破算法第七天-堆排序：</strong> <Excerpt in index | 首页摘要><br>堆排序是利用二叉树的原理实现的一种排序，难点在于要构建堆,构建堆一般可以采用下沉或者上浮的算法进行。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"堆排序的基本原理\"><a href=\"#堆排序的基本原理\" class=\"headerlink\" title=\"堆排序的基本原理\"></a>堆排序的基本原理</h2><p>初始时把要排序的n个数的序列看作是一棵顺序存储的二叉树（一维数组存储二叉树），调整它们的存储序，使之成为一个堆，将堆顶元素输出，得到n 个元素中最小(或最大)的元素，这时堆的根节点的数最小（或者最大）。然后对前面(n-1)个元素重新调整使之成为堆，输出堆顶元素，得到n 个元素中次小(或次大)的元素。依此类推，直到只有两个节点的堆，并对它们作交换，最后得到有n个节点的有序序列。称这个过程为堆排序。<br>因此，实现堆排序需解决两个问题：</p>\n<ol>\n<li>如何将n 个待排序的数建成堆；</li>\n<li>输出堆顶元素后，怎样调整剩余n-1 个元素，使其成为一个新堆。</li>\n</ol>\n<h2 id=\"堆排序java实现\"><a href=\"#堆排序java实现\" class=\"headerlink\" title=\"堆排序java实现\"></a>堆排序java实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> n = a.length;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = n / <span class=\"number\">2</span>; k &gt;= <span class=\"number\">1</span>; k--)</div><div class=\"line\">            sink(a, k, n);</div><div class=\"line\">        <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            swap(a, <span class=\"number\">1</span>, n--);</div><div class=\"line\">            sink(a, <span class=\"number\">1</span>, n);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">2</span> * k &lt;= n) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> j = <span class=\"number\">2</span> * k;</div><div class=\"line\">        <span class=\"keyword\">if</span> (j &lt; n &amp;&amp; a[j - <span class=\"number\">1</span>] &lt; a[j + <span class=\"number\">1</span> - <span class=\"number\">1</span>]) j++;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a[k - <span class=\"number\">1</span>] &gt;= a[j - <span class=\"number\">1</span>]) <span class=\"keyword\">break</span>;</div><div class=\"line\">        swap(a, k, j);</div><div class=\"line\">        k = j;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> swap = a[i - <span class=\"number\">1</span>];</div><div class=\"line\">    a[i - <span class=\"number\">1</span>] = a[j - <span class=\"number\">1</span>];</div><div class=\"line\">    a[j - <span class=\"number\">1</span>] = swap;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">49</span>, <span class=\"number\">38</span>, <span class=\"number\">65</span>, <span class=\"number\">97</span>, <span class=\"number\">76</span>, <span class=\"number\">13</span>, <span class=\"number\">27</span>, <span class=\"number\">4</span>, <span class=\"number\">78</span>, <span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">64</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>&#125;;</div><div class=\"line\">    sort(arr);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"排序之后：\"</span>);</div><div class=\"line\">    System.out.println(Arrays.toString(arr));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"算法复杂度\"><a href=\"#算法复杂度\" class=\"headerlink\" title=\"算法复杂度\"></a>算法复杂度</h2><p>堆排序的平均时间复杂度为Ο(nlogn)</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 突破算法第七天-堆排序：</strong> <Excerpt in index | 首页摘要><br>堆排序是利用二叉树的原理实现的一种排序，难点在于要构建堆,构建堆一般可以采用下沉或者上浮的算法进行。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"堆排序的基本原理\"><a href=\"#堆排序的基本原理\" class=\"headerlink\" title=\"堆排序的基本原理\"></a>堆排序的基本原理</h2><p>初始时把要排序的n个数的序列看作是一棵顺序存储的二叉树（一维数组存储二叉树），调整它们的存储序，使之成为一个堆，将堆顶元素输出，得到n 个元素中最小(或最大)的元素，这时堆的根节点的数最小（或者最大）。然后对前面(n-1)个元素重新调整使之成为堆，输出堆顶元素，得到n 个元素中次小(或次大)的元素。依此类推，直到只有两个节点的堆，并对它们作交换，最后得到有n个节点的有序序列。称这个过程为堆排序。<br>因此，实现堆排序需解决两个问题：</p>\n<ol>\n<li>如何将n 个待排序的数建成堆；</li>\n<li>输出堆顶元素后，怎样调整剩余n-1 个元素，使其成为一个新堆。</li>\n</ol>\n<h2 id=\"堆排序java实现\"><a href=\"#堆排序java实现\" class=\"headerlink\" title=\"堆排序java实现\"></a>堆排序java实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> n = a.length;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = n / <span class=\"number\">2</span>; k &gt;= <span class=\"number\">1</span>; k--)</div><div class=\"line\">            sink(a, k, n);</div><div class=\"line\">        <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            swap(a, <span class=\"number\">1</span>, n--);</div><div class=\"line\">            sink(a, <span class=\"number\">1</span>, n);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">sink</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">2</span> * k &lt;= n) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> j = <span class=\"number\">2</span> * k;</div><div class=\"line\">        <span class=\"keyword\">if</span> (j &lt; n &amp;&amp; a[j - <span class=\"number\">1</span>] &lt; a[j + <span class=\"number\">1</span> - <span class=\"number\">1</span>]) j++;</div><div class=\"line\">        <span class=\"keyword\">if</span> (a[k - <span class=\"number\">1</span>] &gt;= a[j - <span class=\"number\">1</span>]) <span class=\"keyword\">break</span>;</div><div class=\"line\">        swap(a, k, j);</div><div class=\"line\">        k = j;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> swap = a[i - <span class=\"number\">1</span>];</div><div class=\"line\">    a[i - <span class=\"number\">1</span>] = a[j - <span class=\"number\">1</span>];</div><div class=\"line\">    a[j - <span class=\"number\">1</span>] = swap;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">49</span>, <span class=\"number\">38</span>, <span class=\"number\">65</span>, <span class=\"number\">97</span>, <span class=\"number\">76</span>, <span class=\"number\">13</span>, <span class=\"number\">27</span>, <span class=\"number\">4</span>, <span class=\"number\">78</span>, <span class=\"number\">34</span>, <span class=\"number\">12</span>, <span class=\"number\">64</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>&#125;;</div><div class=\"line\">    sort(arr);</div><div class=\"line\">    System.out.println(<span class=\"string\">\"排序之后：\"</span>);</div><div class=\"line\">    System.out.println(Arrays.toString(arr));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"算法复杂度\"><a href=\"#算法复杂度\" class=\"headerlink\" title=\"算法复杂度\"></a>算法复杂度</h2><p>堆排序的平均时间复杂度为Ο(nlogn)</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"突破算法第八天-桶排序","date":"2017-10-27T14:51:06.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n桶排序是个神奇的排序，在某些情况下可以达到O(N)的复杂度，快的离谱。但是桶排序是利用空间换时间，在空间充足的情况下，可以用桶排序进行高效的排序。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 桶排序的基本原理\n将阵列分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递回方式继续使用桶排序进行排序）。当要被排序的阵列内的数值是均匀分配的时候，桶排序使用线性时间（Θ（n））。但桶排序并不是 比较排序，他不受到 O(nlogn) 下限的影响， 简单来说，就是把数据分组，放在一个个的桶中，然后对每个桶里面的在进行排序\n\n## 桶排序的java实现\n```java\npublic static void bucketSort1(int[] arr){\n        //分桶，这里采用映射函数f(x)=x/10。\n        int bucketCount =10;\n        Integer[][] bucket = new Integer[bucketCount][arr.length];\n        for (int i=0; i<arr.length; i++){\n            int quotient = arr[i]/10;\n            for (int j=0; j<arr.length; j++){\n                if (bucket[quotient][j]==null){\n                    bucket[quotient][j]=arr[i];\n                    break;\n                }\n            }\n        }\n        //小桶排序\n        for (int i=0; i<bucket.length; i++){\n            //insertion sort\n            for (int j=1; j<bucket[i].length; ++j){\n                if(bucket[i][j]==null){\n                    break;\n                }\n                int value = bucket[i][j];\n                int position=j;\n                while (position>0 && bucket[i][position-1]>value){\n                    bucket[i][position] = bucket[i][position-1];\n                    position--;\n                }\n                bucket[i][position] = value;\n            }\n\n        }\n        //输出\n        for (int i=0, index=0; i<bucket.length; i++){\n            for (int j=0; j<bucket[i].length; j++){\n                if (bucket[i][j]!=null){\n                    arr[index] = bucket[i][j];\n                    index++;\n                }\n                else{\n                    break;\n                }\n            }\n        }\n    }\n```\n## 算法复杂度\n前面说的几大排序算法 ，大部分时间复杂度都是O（n2），也有部分排序算法时间复杂度是O(nlogn)。而桶式排序却能实现O（n）的时间复杂度。\n但桶排序的缺点是：\n1. 首先是空间复杂度比较高，需要的额外开销大。排序有两个数组的空间开销，一个存放待排序数组，一个就是所谓的桶，比如待排序值是从0到m-1，那就需要m个桶，这个桶数组就要至少m个空间。\n2. 其次待排序的元素都要在一定的范围内，限制较多。\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/suanfa-8.md","raw":"title: 突破算法第八天-桶排序\ndate: 2017-10-27 22:51:06\ntags: 算法\ncategories: algorithm\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n桶排序是个神奇的排序，在某些情况下可以达到O(N)的复杂度，快的离谱。但是桶排序是利用空间换时间，在空间充足的情况下，可以用桶排序进行高效的排序。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 桶排序的基本原理\n将阵列分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递回方式继续使用桶排序进行排序）。当要被排序的阵列内的数值是均匀分配的时候，桶排序使用线性时间（Θ（n））。但桶排序并不是 比较排序，他不受到 O(nlogn) 下限的影响， 简单来说，就是把数据分组，放在一个个的桶中，然后对每个桶里面的在进行排序\n\n## 桶排序的java实现\n```java\npublic static void bucketSort1(int[] arr){\n        //分桶，这里采用映射函数f(x)=x/10。\n        int bucketCount =10;\n        Integer[][] bucket = new Integer[bucketCount][arr.length];\n        for (int i=0; i<arr.length; i++){\n            int quotient = arr[i]/10;\n            for (int j=0; j<arr.length; j++){\n                if (bucket[quotient][j]==null){\n                    bucket[quotient][j]=arr[i];\n                    break;\n                }\n            }\n        }\n        //小桶排序\n        for (int i=0; i<bucket.length; i++){\n            //insertion sort\n            for (int j=1; j<bucket[i].length; ++j){\n                if(bucket[i][j]==null){\n                    break;\n                }\n                int value = bucket[i][j];\n                int position=j;\n                while (position>0 && bucket[i][position-1]>value){\n                    bucket[i][position] = bucket[i][position-1];\n                    position--;\n                }\n                bucket[i][position] = value;\n            }\n\n        }\n        //输出\n        for (int i=0, index=0; i<bucket.length; i++){\n            for (int j=0; j<bucket[i].length; j++){\n                if (bucket[i][j]!=null){\n                    arr[index] = bucket[i][j];\n                    index++;\n                }\n                else{\n                    break;\n                }\n            }\n        }\n    }\n```\n## 算法复杂度\n前面说的几大排序算法 ，大部分时间复杂度都是O（n2），也有部分排序算法时间复杂度是O(nlogn)。而桶式排序却能实现O（n）的时间复杂度。\n但桶排序的缺点是：\n1. 首先是空间复杂度比较高，需要的额外开销大。排序有两个数组的空间开销，一个存放待排序数组，一个就是所谓的桶，比如待排序值是从0到m-1，那就需要m个桶，这个桶数组就要至少m个空间。\n2. 其次待排序的元素都要在一定的范围内，限制较多。\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"suanfa-8","published":1,"updated":"2017-10-28T15:10:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla8600588p9kxn8z5kxx","content":"<p><strong> 突破算法第八天-桶排序：</strong> <Excerpt in index | 首页摘要><br>桶排序是个神奇的排序，在某些情况下可以达到O(N)的复杂度，快的离谱。但是桶排序是利用空间换时间，在空间充足的情况下，可以用桶排序进行高效的排序。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"桶排序的基本原理\"><a href=\"#桶排序的基本原理\" class=\"headerlink\" title=\"桶排序的基本原理\"></a>桶排序的基本原理</h2><p>将阵列分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递回方式继续使用桶排序进行排序）。当要被排序的阵列内的数值是均匀分配的时候，桶排序使用线性时间（Θ（n））。但桶排序并不是 比较排序，他不受到 O(nlogn) 下限的影响， 简单来说，就是把数据分组，放在一个个的桶中，然后对每个桶里面的在进行排序</p>\n<h2 id=\"桶排序的java实现\"><a href=\"#桶排序的java实现\" class=\"headerlink\" title=\"桶排序的java实现\"></a>桶排序的java实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bucketSort1</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">//分桶，这里采用映射函数f(x)=x/10。</span></div><div class=\"line\">        <span class=\"keyword\">int</span> bucketCount =<span class=\"number\">10</span>;</div><div class=\"line\">        Integer[][] bucket = <span class=\"keyword\">new</span> Integer[bucketCount][arr.length];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> quotient = arr[i]/<span class=\"number\">10</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;arr.length; j++)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (bucket[quotient][j]==<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">                    bucket[quotient][j]=arr[i];</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//小桶排序</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;bucket.length; i++)&#123;</div><div class=\"line\">            <span class=\"comment\">//insertion sort</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;bucket[i].length; ++j)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(bucket[i][j]==<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">int</span> value = bucket[i][j];</div><div class=\"line\">                <span class=\"keyword\">int</span> position=j;</div><div class=\"line\">                <span class=\"keyword\">while</span> (position&gt;<span class=\"number\">0</span> &amp;&amp; bucket[i][position-<span class=\"number\">1</span>]&gt;value)&#123;</div><div class=\"line\">                    bucket[i][position] = bucket[i][position-<span class=\"number\">1</span>];</div><div class=\"line\">                    position--;</div><div class=\"line\">                &#125;</div><div class=\"line\">                bucket[i][position] = value;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//输出</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>, index=<span class=\"number\">0</span>; i&lt;bucket.length; i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;bucket[i].length; j++)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (bucket[i][j]!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">                    arr[index] = bucket[i][j];</div><div class=\"line\">                    index++;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"算法复杂度\"><a href=\"#算法复杂度\" class=\"headerlink\" title=\"算法复杂度\"></a>算法复杂度</h2><p>前面说的几大排序算法 ，大部分时间复杂度都是O（n2），也有部分排序算法时间复杂度是O(nlogn)。而桶式排序却能实现O（n）的时间复杂度。<br>但桶排序的缺点是：</p>\n<ol>\n<li>首先是空间复杂度比较高，需要的额外开销大。排序有两个数组的空间开销，一个存放待排序数组，一个就是所谓的桶，比如待排序值是从0到m-1，那就需要m个桶，这个桶数组就要至少m个空间。</li>\n<li>其次待排序的元素都要在一定的范围内，限制较多。</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 突破算法第八天-桶排序：</strong> <Excerpt in index | 首页摘要><br>桶排序是个神奇的排序，在某些情况下可以达到O(N)的复杂度，快的离谱。但是桶排序是利用空间换时间，在空间充足的情况下，可以用桶排序进行高效的排序。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"桶排序的基本原理\"><a href=\"#桶排序的基本原理\" class=\"headerlink\" title=\"桶排序的基本原理\"></a>桶排序的基本原理</h2><p>将阵列分到有限数量的桶子里。每个桶子再个别排序（有可能再使用别的排序算法或是以递回方式继续使用桶排序进行排序）。当要被排序的阵列内的数值是均匀分配的时候，桶排序使用线性时间（Θ（n））。但桶排序并不是 比较排序，他不受到 O(nlogn) 下限的影响， 简单来说，就是把数据分组，放在一个个的桶中，然后对每个桶里面的在进行排序</p>\n<h2 id=\"桶排序的java实现\"><a href=\"#桶排序的java实现\" class=\"headerlink\" title=\"桶排序的java实现\"></a>桶排序的java实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bucketSort1</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</div><div class=\"line\">        <span class=\"comment\">//分桶，这里采用映射函数f(x)=x/10。</span></div><div class=\"line\">        <span class=\"keyword\">int</span> bucketCount =<span class=\"number\">10</span>;</div><div class=\"line\">        Integer[][] bucket = <span class=\"keyword\">new</span> Integer[bucketCount][arr.length];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> quotient = arr[i]/<span class=\"number\">10</span>;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;arr.length; j++)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (bucket[quotient][j]==<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">                    bucket[quotient][j]=arr[i];</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//小桶排序</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;bucket.length; i++)&#123;</div><div class=\"line\">            <span class=\"comment\">//insertion sort</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;bucket[i].length; ++j)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>(bucket[i][j]==<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">int</span> value = bucket[i][j];</div><div class=\"line\">                <span class=\"keyword\">int</span> position=j;</div><div class=\"line\">                <span class=\"keyword\">while</span> (position&gt;<span class=\"number\">0</span> &amp;&amp; bucket[i][position-<span class=\"number\">1</span>]&gt;value)&#123;</div><div class=\"line\">                    bucket[i][position] = bucket[i][position-<span class=\"number\">1</span>];</div><div class=\"line\">                    position--;</div><div class=\"line\">                &#125;</div><div class=\"line\">                bucket[i][position] = value;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//输出</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>, index=<span class=\"number\">0</span>; i&lt;bucket.length; i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;bucket[i].length; j++)&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (bucket[i][j]!=<span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">                    arr[index] = bucket[i][j];</div><div class=\"line\">                    index++;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"算法复杂度\"><a href=\"#算法复杂度\" class=\"headerlink\" title=\"算法复杂度\"></a>算法复杂度</h2><p>前面说的几大排序算法 ，大部分时间复杂度都是O（n2），也有部分排序算法时间复杂度是O(nlogn)。而桶式排序却能实现O（n）的时间复杂度。<br>但桶排序的缺点是：</p>\n<ol>\n<li>首先是空间复杂度比较高，需要的额外开销大。排序有两个数组的空间开销，一个存放待排序数组，一个就是所谓的桶，比如待排序值是从0到m-1，那就需要m个桶，这个桶数组就要至少m个空间。</li>\n<li>其次待排序的元素都要在一定的范围内，限制较多。</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"突破算法第九天-排序算法比较","date":"2017-10-28T15:10:58.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n排序算法个有千秋，有的性能高，有的性能很低。这就要求我们对常用的排序算法要全面了解，不要用错了算法，导致性能问题。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 排序算法性能比较·\n借一张网路上的比较图。特别直观。\n![算法比较](http://o7kalf5h3.bkt.clouddn.com/sortcom.jpg)\n\n## \b\b排序算法总结\n个人看法：\n* 一般的情况还是以快速排序为主，\n* 对于多个有序的数组合并的情况使用归并排序\n* 性能要求快，空间足够，待排序的元素都要在一定的范围内使用桶排序\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/suanfa-9.md","raw":"title: 突破算法第九天-排序算法比较\ndate: 2017-10-28 23:10:58\ntags: 算法\ncategories: algorithm\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n排序算法个有千秋，有的性能高，有的性能很低。这就要求我们对常用的排序算法要全面了解，不要用错了算法，导致性能问题。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 排序算法性能比较·\n借一张网路上的比较图。特别直观。\n![算法比较](http://o7kalf5h3.bkt.clouddn.com/sortcom.jpg)\n\n## \b\b排序算法总结\n个人看法：\n* 一般的情况还是以快速排序为主，\n* 对于多个有序的数组合并的情况使用归并排序\n* 性能要求快，空间足够，待排序的元素都要在一定的范围内使用桶排序\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"suanfa-9","published":1,"updated":"2017-10-29T13:02:02.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla88005b8p9kchapn2n0","content":"<p><strong> 突破算法第九天-排序算法比较：</strong> <Excerpt in index | 首页摘要><br>排序算法个有千秋，有的性能高，有的性能很低。这就要求我们对常用的排序算法要全面了解，不要用错了算法，导致性能问题。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"排序算法性能比较·\"><a href=\"#排序算法性能比较·\" class=\"headerlink\" title=\"排序算法性能比较·\"></a>排序算法性能比较·</h2><p>借一张网路上的比较图。特别直观。<br><img src=\"http://o7kalf5h3.bkt.clouddn.com/sortcom.jpg\" alt=\"算法比较\"></p>\n<h2 id=\"排序算法总结\"><a href=\"#排序算法总结\" class=\"headerlink\" title=\"\b\b排序算法总结\"></a>\b\b排序算法总结</h2><p>个人看法：</p>\n<ul>\n<li>一般的情况还是以快速排序为主，</li>\n<li>对于多个有序的数组合并的情况使用归并排序</li>\n<li>性能要求快，空间足够，待排序的元素都要在一定的范围内使用桶排序</li>\n</ul>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 突破算法第九天-排序算法比较：</strong> <Excerpt in index | 首页摘要><br>排序算法个有千秋，有的性能高，有的性能很低。这就要求我们对常用的排序算法要全面了解，不要用错了算法，导致性能问题。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"排序算法性能比较·\"><a href=\"#排序算法性能比较·\" class=\"headerlink\" title=\"排序算法性能比较·\"></a>排序算法性能比较·</h2><p>借一张网路上的比较图。特别直观。<br><img src=\"http://o7kalf5h3.bkt.clouddn.com/sortcom.jpg\" alt=\"算法比较\"></p>\n<h2 id=\"排序算法总结\"><a href=\"#排序算法总结\" class=\"headerlink\" title=\"\b\b排序算法总结\"></a>\b\b排序算法总结</h2><p>个人看法：</p>\n<ul>\n<li>一般的情况还是以快速排序为主，</li>\n<li>对于多个有序的数组合并的情况使用归并排序</li>\n<li>性能要求快，空间足够，待排序的元素都要在一定的范围内使用桶排序</li>\n</ul>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"用java将GBK工程转为uft8","date":"2017-08-11T23:43:59.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\nwindows下的默认编码为GBK还有gb2312，如何把gbk的java工程转为utf8的呢，如果直接修改工程编码，其实里面的java文件中中文是会乱码的，写了个批量转换java工程的程序，消遣一下。\n<!-- more -->\n<The rest of contents | 余下全文>\n## 为什么要转码？\n有些老的项目，或者朋友的项目之前没注意在windows上不是utf8，而你有需要看注释或者什么，总不能一个文件一个文件的去改编码属性吧。\n\n## 本程序试用范围\ngbk的代码，或者gb2312的工程均可以转换\n\n## 编码转换的思路\n本来想做成一个通用的会自动检测编码，自动转换的程序。但是由于判断编码类型不准，所以做成了针对GBK的转换。\n1. 制定gbk编码把文件流读进来，加载到内存，转为String类型的内容\n2. 将String内容转为utf8的String\n3. 将String内容写入文件\n\n## 核心代码：\n\n```java\npublic class TransferProject {\n    public static void transferFile(String pathName, int depth) throws Exception {\n        File dirFile = new File(pathName);\n        if (!isValidFile(dirFile)) return;\n        //获取此目录下的所有文件名与目录名\n        String[] fileList = dirFile.list();\n        int currentDepth = depth + 1;\n        for (int i = 0; i < fileList.length; i++) {\n            String string = fileList[i];\n            File file = new File(dirFile.getPath(), string);\n            String name = file.getName();\n            //如果是一个目录，搜索深度depth++，输出目录名后，进行递归\n            if (file.isDirectory()) {\n                //递归\n                transferFile(file.getCanonicalPath(), currentDepth);\n            } else {\n                if (name.contains(\".java\") || name.contains(\".properties\") || name.contains(\".xml\")) {\n                    readAndWrite(file);\n                    System.out.println(name + \" has converted to utf8 \");\n                }\n            }\n        }\n    }\n\n    private static boolean isValidFile(File dirFile) throws IOException {\n        if (dirFile.exists()) {\n            System.out.println(\"file exist\");\n            return true;\n        }\n        if (dirFile.isDirectory()) {\n            if (dirFile.isFile()) {\n                System.out.println(dirFile.getCanonicalFile());\n            }\n            return true;\n        }\n        return false;\n    }\n\n    private static void readAndWrite(File file) throws Exception {\n        String  content = FileUtils.readFileByEncode(file.getPath(), \"GBK\");\n        FileUtils.writeByBufferedReader(file.getPath(), new String(content.getBytes(\"UTF-8\"), \"UTF-8\"));\n    }\n\n    public static void main(String[] args) throws Exception {\n        //程序入口，制定src的path\n        String path = \"/Users/mac/Downloads/unit06_jdbc/src\";\n        transferFile(path, 1);\n    }\n}\n```\n\n```java\npublic class FileUtils {\n    public static void writeByBufferedReader(String path, String content) {\n        try {\n            File file = new File(path);\n            file.delete();\n            if (!file.exists()) {\n                file.createNewFile();\n            }\n\n            FileWriter fw = new FileWriter(file, false);\n            BufferedWriter bw = new BufferedWriter(fw);\n            bw.write(content);\n            bw.flush();\n            bw.close();\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    public static String readFileByEncode(String path, String chatSet) throws Exception {\n        InputStream input = new FileInputStream(path);\n        InputStreamReader in = new InputStreamReader(input, chatSet);\n        BufferedReader reader = new BufferedReader(in);\n        StringBuffer sb = new StringBuffer();\n        String line = reader.readLine();\n        while (line != null) {\n            sb.append(line);\n            sb.append(\"\\r\\n\");\n            line = reader.readLine();\n        }\n        return sb.toString();\n    }\n}\n```\n## 总结\n遇到类似的问题，都可以试着用代码来进行实现，给自己的编码带来一些新的乐趣，也增加自己的信心。\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/trandsferProject.md","raw":"title: 用java将GBK工程转为uft8\ndate: 2017-08-12 07:43:59\ntags: java\ncategories: 编程语言\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\nwindows下的默认编码为GBK还有gb2312，如何把gbk的java工程转为utf8的呢，如果直接修改工程编码，其实里面的java文件中中文是会乱码的，写了个批量转换java工程的程序，消遣一下。\n<!-- more -->\n<The rest of contents | 余下全文>\n## 为什么要转码？\n有些老的项目，或者朋友的项目之前没注意在windows上不是utf8，而你有需要看注释或者什么，总不能一个文件一个文件的去改编码属性吧。\n\n## 本程序试用范围\ngbk的代码，或者gb2312的工程均可以转换\n\n## 编码转换的思路\n本来想做成一个通用的会自动检测编码，自动转换的程序。但是由于判断编码类型不准，所以做成了针对GBK的转换。\n1. 制定gbk编码把文件流读进来，加载到内存，转为String类型的内容\n2. 将String内容转为utf8的String\n3. 将String内容写入文件\n\n## 核心代码：\n\n```java\npublic class TransferProject {\n    public static void transferFile(String pathName, int depth) throws Exception {\n        File dirFile = new File(pathName);\n        if (!isValidFile(dirFile)) return;\n        //获取此目录下的所有文件名与目录名\n        String[] fileList = dirFile.list();\n        int currentDepth = depth + 1;\n        for (int i = 0; i < fileList.length; i++) {\n            String string = fileList[i];\n            File file = new File(dirFile.getPath(), string);\n            String name = file.getName();\n            //如果是一个目录，搜索深度depth++，输出目录名后，进行递归\n            if (file.isDirectory()) {\n                //递归\n                transferFile(file.getCanonicalPath(), currentDepth);\n            } else {\n                if (name.contains(\".java\") || name.contains(\".properties\") || name.contains(\".xml\")) {\n                    readAndWrite(file);\n                    System.out.println(name + \" has converted to utf8 \");\n                }\n            }\n        }\n    }\n\n    private static boolean isValidFile(File dirFile) throws IOException {\n        if (dirFile.exists()) {\n            System.out.println(\"file exist\");\n            return true;\n        }\n        if (dirFile.isDirectory()) {\n            if (dirFile.isFile()) {\n                System.out.println(dirFile.getCanonicalFile());\n            }\n            return true;\n        }\n        return false;\n    }\n\n    private static void readAndWrite(File file) throws Exception {\n        String  content = FileUtils.readFileByEncode(file.getPath(), \"GBK\");\n        FileUtils.writeByBufferedReader(file.getPath(), new String(content.getBytes(\"UTF-8\"), \"UTF-8\"));\n    }\n\n    public static void main(String[] args) throws Exception {\n        //程序入口，制定src的path\n        String path = \"/Users/mac/Downloads/unit06_jdbc/src\";\n        transferFile(path, 1);\n    }\n}\n```\n\n```java\npublic class FileUtils {\n    public static void writeByBufferedReader(String path, String content) {\n        try {\n            File file = new File(path);\n            file.delete();\n            if (!file.exists()) {\n                file.createNewFile();\n            }\n\n            FileWriter fw = new FileWriter(file, false);\n            BufferedWriter bw = new BufferedWriter(fw);\n            bw.write(content);\n            bw.flush();\n            bw.close();\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    public static String readFileByEncode(String path, String chatSet) throws Exception {\n        InputStream input = new FileInputStream(path);\n        InputStreamReader in = new InputStreamReader(input, chatSet);\n        BufferedReader reader = new BufferedReader(in);\n        StringBuffer sb = new StringBuffer();\n        String line = reader.readLine();\n        while (line != null) {\n            sb.append(line);\n            sb.append(\"\\r\\n\");\n            line = reader.readLine();\n        }\n        return sb.toString();\n    }\n}\n```\n## 总结\n遇到类似的问题，都可以试着用代码来进行实现，给自己的编码带来一些新的乐趣，也增加自己的信心。\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"trandsferProject","published":1,"updated":"2017-08-12T00:01:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla8c005f8p9kn3di7fyj","content":"<p><strong> 用java将GBK工程转为uft8：</strong> <Excerpt in index | 首页摘要><br>windows下的默认编码为GBK还有gb2312，如何把gbk的java工程转为utf8的呢，如果直接修改工程编码，其实里面的java文件中中文是会乱码的，写了个批量转换java工程的程序，消遣一下。<br><a id=\"more\"></a></p>\n<p><The rest of contents | 余下全文></p>\n<h2 id=\"为什么要转码？\"><a href=\"#为什么要转码？\" class=\"headerlink\" title=\"为什么要转码？\"></a>为什么要转码？</h2><p>有些老的项目，或者朋友的项目之前没注意在windows上不是utf8，而你有需要看注释或者什么，总不能一个文件一个文件的去改编码属性吧。</p>\n<h2 id=\"本程序试用范围\"><a href=\"#本程序试用范围\" class=\"headerlink\" title=\"本程序试用范围\"></a>本程序试用范围</h2><p>gbk的代码，或者gb2312的工程均可以转换</p>\n<h2 id=\"编码转换的思路\"><a href=\"#编码转换的思路\" class=\"headerlink\" title=\"编码转换的思路\"></a>编码转换的思路</h2><p>本来想做成一个通用的会自动检测编码，自动转换的程序。但是由于判断编码类型不准，所以做成了针对GBK的转换。</p>\n<ol>\n<li>制定gbk编码把文件流读进来，加载到内存，转为String类型的内容</li>\n<li>将String内容转为utf8的String</li>\n<li>将String内容写入文件</li>\n</ol>\n<h2 id=\"核心代码：\"><a href=\"#核心代码：\" class=\"headerlink\" title=\"核心代码：\"></a>核心代码：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransferProject</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">transferFile</span><span class=\"params\">(String pathName, <span class=\"keyword\">int</span> depth)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        File dirFile = <span class=\"keyword\">new</span> File(pathName);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!isValidFile(dirFile)) <span class=\"keyword\">return</span>;</div><div class=\"line\">        <span class=\"comment\">//获取此目录下的所有文件名与目录名</span></div><div class=\"line\">        String[] fileList = dirFile.list();</div><div class=\"line\">        <span class=\"keyword\">int</span> currentDepth = depth + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; fileList.length; i++) &#123;</div><div class=\"line\">            String string = fileList[i];</div><div class=\"line\">            File file = <span class=\"keyword\">new</span> File(dirFile.getPath(), string);</div><div class=\"line\">            String name = file.getName();</div><div class=\"line\">            <span class=\"comment\">//如果是一个目录，搜索深度depth++，输出目录名后，进行递归</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (file.isDirectory()) &#123;</div><div class=\"line\">                <span class=\"comment\">//递归</span></div><div class=\"line\">                transferFile(file.getCanonicalPath(), currentDepth);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (name.contains(<span class=\"string\">\".java\"</span>) || name.contains(<span class=\"string\">\".properties\"</span>) || name.contains(<span class=\"string\">\".xml\"</span>)) &#123;</div><div class=\"line\">                    readAndWrite(file);</div><div class=\"line\">                    System.out.println(name + <span class=\"string\">\" has converted to utf8 \"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidFile</span><span class=\"params\">(File dirFile)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dirFile.exists()) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"file exist\"</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dirFile.isDirectory()) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (dirFile.isFile()) &#123;</div><div class=\"line\">                System.out.println(dirFile.getCanonicalFile());</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">readAndWrite</span><span class=\"params\">(File file)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        String  content = FileUtils.readFileByEncode(file.getPath(), <span class=\"string\">\"GBK\"</span>);</div><div class=\"line\">        FileUtils.writeByBufferedReader(file.getPath(), <span class=\"keyword\">new</span> String(content.getBytes(<span class=\"string\">\"UTF-8\"</span>), <span class=\"string\">\"UTF-8\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//程序入口，制定src的path</span></div><div class=\"line\">        String path = <span class=\"string\">\"/Users/mac/Downloads/unit06_jdbc/src\"</span>;</div><div class=\"line\">        transferFile(path, <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileUtils</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">writeByBufferedReader</span><span class=\"params\">(String path, String content)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            File file = <span class=\"keyword\">new</span> File(path);</div><div class=\"line\">            file.delete();</div><div class=\"line\">            <span class=\"keyword\">if</span> (!file.exists()) &#123;</div><div class=\"line\">                file.createNewFile();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            FileWriter fw = <span class=\"keyword\">new</span> FileWriter(file, <span class=\"keyword\">false</span>);</div><div class=\"line\">            BufferedWriter bw = <span class=\"keyword\">new</span> BufferedWriter(fw);</div><div class=\"line\">            bw.write(content);</div><div class=\"line\">            bw.flush();</div><div class=\"line\">            bw.close();</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">readFileByEncode</span><span class=\"params\">(String path, String chatSet)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        InputStream input = <span class=\"keyword\">new</span> FileInputStream(path);</div><div class=\"line\">        InputStreamReader in = <span class=\"keyword\">new</span> InputStreamReader(input, chatSet);</div><div class=\"line\">        BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(in);</div><div class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</div><div class=\"line\">        String line = reader.readLine();</div><div class=\"line\">        <span class=\"keyword\">while</span> (line != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            sb.append(line);</div><div class=\"line\">            sb.append(<span class=\"string\">\"\\r\\n\"</span>);</div><div class=\"line\">            line = reader.readLine();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>遇到类似的问题，都可以试着用代码来进行实现，给自己的编码带来一些新的乐趣，也增加自己的信心。</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 用java将GBK工程转为uft8：</strong> <Excerpt in index | 首页摘要><br>windows下的默认编码为GBK还有gb2312，如何把gbk的java工程转为utf8的呢，如果直接修改工程编码，其实里面的java文件中中文是会乱码的，写了个批量转换java工程的程序，消遣一下。<br>","more":"</p>\n<p><The rest of contents | 余下全文></p>\n<h2 id=\"为什么要转码？\"><a href=\"#为什么要转码？\" class=\"headerlink\" title=\"为什么要转码？\"></a>为什么要转码？</h2><p>有些老的项目，或者朋友的项目之前没注意在windows上不是utf8，而你有需要看注释或者什么，总不能一个文件一个文件的去改编码属性吧。</p>\n<h2 id=\"本程序试用范围\"><a href=\"#本程序试用范围\" class=\"headerlink\" title=\"本程序试用范围\"></a>本程序试用范围</h2><p>gbk的代码，或者gb2312的工程均可以转换</p>\n<h2 id=\"编码转换的思路\"><a href=\"#编码转换的思路\" class=\"headerlink\" title=\"编码转换的思路\"></a>编码转换的思路</h2><p>本来想做成一个通用的会自动检测编码，自动转换的程序。但是由于判断编码类型不准，所以做成了针对GBK的转换。</p>\n<ol>\n<li>制定gbk编码把文件流读进来，加载到内存，转为String类型的内容</li>\n<li>将String内容转为utf8的String</li>\n<li>将String内容写入文件</li>\n</ol>\n<h2 id=\"核心代码：\"><a href=\"#核心代码：\" class=\"headerlink\" title=\"核心代码：\"></a>核心代码：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TransferProject</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">transferFile</span><span class=\"params\">(String pathName, <span class=\"keyword\">int</span> depth)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        File dirFile = <span class=\"keyword\">new</span> File(pathName);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!isValidFile(dirFile)) <span class=\"keyword\">return</span>;</div><div class=\"line\">        <span class=\"comment\">//获取此目录下的所有文件名与目录名</span></div><div class=\"line\">        String[] fileList = dirFile.list();</div><div class=\"line\">        <span class=\"keyword\">int</span> currentDepth = depth + <span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; fileList.length; i++) &#123;</div><div class=\"line\">            String string = fileList[i];</div><div class=\"line\">            File file = <span class=\"keyword\">new</span> File(dirFile.getPath(), string);</div><div class=\"line\">            String name = file.getName();</div><div class=\"line\">            <span class=\"comment\">//如果是一个目录，搜索深度depth++，输出目录名后，进行递归</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (file.isDirectory()) &#123;</div><div class=\"line\">                <span class=\"comment\">//递归</span></div><div class=\"line\">                transferFile(file.getCanonicalPath(), currentDepth);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (name.contains(<span class=\"string\">\".java\"</span>) || name.contains(<span class=\"string\">\".properties\"</span>) || name.contains(<span class=\"string\">\".xml\"</span>)) &#123;</div><div class=\"line\">                    readAndWrite(file);</div><div class=\"line\">                    System.out.println(name + <span class=\"string\">\" has converted to utf8 \"</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isValidFile</span><span class=\"params\">(File dirFile)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dirFile.exists()) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"file exist\"</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dirFile.isDirectory()) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (dirFile.isFile()) &#123;</div><div class=\"line\">                System.out.println(dirFile.getCanonicalFile());</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">readAndWrite</span><span class=\"params\">(File file)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        String  content = FileUtils.readFileByEncode(file.getPath(), <span class=\"string\">\"GBK\"</span>);</div><div class=\"line\">        FileUtils.writeByBufferedReader(file.getPath(), <span class=\"keyword\">new</span> String(content.getBytes(<span class=\"string\">\"UTF-8\"</span>), <span class=\"string\">\"UTF-8\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//程序入口，制定src的path</span></div><div class=\"line\">        String path = <span class=\"string\">\"/Users/mac/Downloads/unit06_jdbc/src\"</span>;</div><div class=\"line\">        transferFile(path, <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FileUtils</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">writeByBufferedReader</span><span class=\"params\">(String path, String content)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            File file = <span class=\"keyword\">new</span> File(path);</div><div class=\"line\">            file.delete();</div><div class=\"line\">            <span class=\"keyword\">if</span> (!file.exists()) &#123;</div><div class=\"line\">                file.createNewFile();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            FileWriter fw = <span class=\"keyword\">new</span> FileWriter(file, <span class=\"keyword\">false</span>);</div><div class=\"line\">            BufferedWriter bw = <span class=\"keyword\">new</span> BufferedWriter(fw);</div><div class=\"line\">            bw.write(content);</div><div class=\"line\">            bw.flush();</div><div class=\"line\">            bw.close();</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">readFileByEncode</span><span class=\"params\">(String path, String chatSet)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">        InputStream input = <span class=\"keyword\">new</span> FileInputStream(path);</div><div class=\"line\">        InputStreamReader in = <span class=\"keyword\">new</span> InputStreamReader(input, chatSet);</div><div class=\"line\">        BufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(in);</div><div class=\"line\">        StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</div><div class=\"line\">        String line = reader.readLine();</div><div class=\"line\">        <span class=\"keyword\">while</span> (line != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            sb.append(line);</div><div class=\"line\">            sb.append(<span class=\"string\">\"\\r\\n\"</span>);</div><div class=\"line\">            line = reader.readLine();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> sb.toString();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>遇到类似的问题，都可以试着用代码来进行实现，给自己的编码带来一些新的乐趣，也增加自己的信心。</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Ubuntu16服务器环境配置","date":"2016-04-26T10:48:11.000Z","_content":"** ubuntu开发环境配置：** <Excerpt in index | 首页摘要>\n    ubuntu16下node,java开发环境配置\n <!-- more -->\n<The rest of contents | 余下全文>\n\n## ubuntu14升级到ubuntu16\n1. 终端下执行命令\n`sudo apt-get update && sudo apt-get dist-upgrade`\n2. 重启系统以完成更新的安装\n`sudo init 6`\n3. 用命令安装更新管理器核心update-manager-core，如果服务器已安装则可以跳过\n`sudo apt-get install update-manager-core`\n4. 编辑/etc/update-manager/release-upgrades配置文件，设置Prompt=lts\n`sudo vi /etc/update-manager/release-upgrades`\n5. 启动升级进程\n`sudo do-release-upgrade -d`\n\n## 安装系统软件\n1. 更新系统和软件\n   ```\n   sudo apt-get update\n   sudo apt-get upgade\n   ```\n2. 谷歌浏览器，火狐浏览器，atom编辑器，sublime编辑器，webstome,idea,eclipse\n3. 安装搜狗输入法（官网），安装fcitx配置搜狗输入法\n## 安装jdk\n1. 下载jdk并新建一个文件夹\n    ```\n    sudo mkdir /usr/lib/jvm\n    ```\n2. 解压文件\n    ```\n    sudo tar zxvf jdk-7u71-linux-x64.tar.gz -C /usr/lib/jvm/jdk1.7\n    ```\n3. 设置环境变量,设置~/.zshrc文件,或者编辑/etc/profile（全局）文件\n    ```\n    export JAVA_HOME=/usr/lib/jvm/jdk1.7\n    export JRE_HOME=${JAVA_HOME}/jre  \n    export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  \n    export PATH=${JAVA_HOME}/bin:$PATH\n    ```\n4. 检查是否安装成功\n    打开shell,\n    ```\n    java --version\n    ```\n\n## 安装nodejs\n1. nodejs版本迭代较快，有时候需要检查在不同版本下的兼容性问题，用nvm来控制版本\n2. 安装nvm,source的时候根据自己的shell版本，~/.bashrc, ~/.profile, 或者 ~/.zshrc\n    ```\n    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash\n    export NVM_DIR=\"$HOME/.nvm\"\n    [ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\" # This loads nvm\n    source ~/.profile\n    ```\n3. 安装不同版本的nodejs\n　　```\n    nvm ls-remote\n    nvm install v0.12.9\n    nvm install 5.0\n    nvm use 0.12.9\n    nvm alias default 0.12.9\n    ```\n\n## 安装mongodb\n1. 配置公钥\n```bash\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\necho \"deb http://repo.mongodb.org/apt/ubuntu \"$(lsb_release -sc)\"/mongodb-org/3.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list\n```\n2. 更新软件列表\n```bash\nsudo apt-get update\nsudo apt-get install -y mongodb-org\n```\n3. 完成上面的安装步骤配置mongodb的数据库的位置\n```bash\nsudo mongod --dbpath /data/db\n```\n4. 启动mongod\n```bash\nsudo service mongod start\nsudo service mongod stop\nsudo service mongod restart\n```\n\n## 安装redis\n1. 下载软件\n```bash\nwget http://download.redis.io/releases/redis-2.8.11.tar.gz\n```\n2. 解压安装\n```bash\ntar xvfz redis-2.8.11.tar.gz\ncd redis-2.8.11 && sudo make && sudo make install\n```\n3. 配置使用\n    1. 下载配置文件和init启动脚本\n    ```bash\n    wget https://github.com/ijonas/dotfiles/raw/master/etc/init.d/redis-server\n    wget https://github.com/ijonas/dotfiles/raw/master/etc/redis.conf\n    sudo mv redis-server /etc/init.d/redis-server\n    sudo chmod +x /etc/init.d/redis-server\n    sudo mv redis.conf /etc/redis.conf\n    ```\n    2. 初始化用户和日志路径\n    ```bash\n    sudo useradd redis\n    sudo mkdir -p /var/lib/redis\n    sudo mkdir -p /var/log/redis\n    sudo chown redis.redis /var/lib/redis\n    sudo chown redis.redis /var/log/redis\n    ```\n    3. 设置开机自动启动，关机自动关闭\n    ```bash\n    sudo update-rc.d redis-server defaults\n    ```\n\n## 环境变量配置\n1. 认识环境变量相关的文件\n- /etc/profile —— 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.并从/etc/profile.d目录的配置文件中搜集shell的设置；\n- /etc/environment —— 在登录时操作系统使用的第二个文件,系统在读取你自己的profile前,设置环境文件的环境变量；\n- /etc/bashrc —— 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取；\n- ~/.profile —— 每个用户都可使用该文件输入专用于自己使用的shell信息，当用户登录时，该文件仅仅执行一次！默认情况下,它设置一些环境变量,执行用户的.bashrc文件；\n- ~/.bashrc —— 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取；\n2. 配置环境变量\n- 在Ubuntu14.04的~/.bashrc中添加的环境变量,在文件添加\n``` bash\nexport PATH=$PATH:/home/qtcreator-2.6.1/bin\n```\n- 修改profile文件,vim编辑/etc/profile\n```bash\nsudo vim /etc/profile\nsource /etc/profile\n```\n\n## 安装开发工具\n1. zsh命令行工具\n2. mysql客户端workbench，mongo客户端工具robomongo\n3. 安装git,svn版本控制工具\n```bash\nsudo apt-get install git\nsudo apt-get install subversion\n```\n","source":"_posts/ubuntu-dev-config.md","raw":"title: ubuntu16服务器环境配置\ndate: 2016-04-26 18:48:11\ntags: linux\ncategories: 开发工具\n---\n** ubuntu开发环境配置：** <Excerpt in index | 首页摘要>\n    ubuntu16下node,java开发环境配置\n <!-- more -->\n<The rest of contents | 余下全文>\n\n## ubuntu14升级到ubuntu16\n1. 终端下执行命令\n`sudo apt-get update && sudo apt-get dist-upgrade`\n2. 重启系统以完成更新的安装\n`sudo init 6`\n3. 用命令安装更新管理器核心update-manager-core，如果服务器已安装则可以跳过\n`sudo apt-get install update-manager-core`\n4. 编辑/etc/update-manager/release-upgrades配置文件，设置Prompt=lts\n`sudo vi /etc/update-manager/release-upgrades`\n5. 启动升级进程\n`sudo do-release-upgrade -d`\n\n## 安装系统软件\n1. 更新系统和软件\n   ```\n   sudo apt-get update\n   sudo apt-get upgade\n   ```\n2. 谷歌浏览器，火狐浏览器，atom编辑器，sublime编辑器，webstome,idea,eclipse\n3. 安装搜狗输入法（官网），安装fcitx配置搜狗输入法\n## 安装jdk\n1. 下载jdk并新建一个文件夹\n    ```\n    sudo mkdir /usr/lib/jvm\n    ```\n2. 解压文件\n    ```\n    sudo tar zxvf jdk-7u71-linux-x64.tar.gz -C /usr/lib/jvm/jdk1.7\n    ```\n3. 设置环境变量,设置~/.zshrc文件,或者编辑/etc/profile（全局）文件\n    ```\n    export JAVA_HOME=/usr/lib/jvm/jdk1.7\n    export JRE_HOME=${JAVA_HOME}/jre  \n    export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  \n    export PATH=${JAVA_HOME}/bin:$PATH\n    ```\n4. 检查是否安装成功\n    打开shell,\n    ```\n    java --version\n    ```\n\n## 安装nodejs\n1. nodejs版本迭代较快，有时候需要检查在不同版本下的兼容性问题，用nvm来控制版本\n2. 安装nvm,source的时候根据自己的shell版本，~/.bashrc, ~/.profile, 或者 ~/.zshrc\n    ```\n    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash\n    export NVM_DIR=\"$HOME/.nvm\"\n    [ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\" # This loads nvm\n    source ~/.profile\n    ```\n3. 安装不同版本的nodejs\n　　```\n    nvm ls-remote\n    nvm install v0.12.9\n    nvm install 5.0\n    nvm use 0.12.9\n    nvm alias default 0.12.9\n    ```\n\n## 安装mongodb\n1. 配置公钥\n```bash\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\necho \"deb http://repo.mongodb.org/apt/ubuntu \"$(lsb_release -sc)\"/mongodb-org/3.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list\n```\n2. 更新软件列表\n```bash\nsudo apt-get update\nsudo apt-get install -y mongodb-org\n```\n3. 完成上面的安装步骤配置mongodb的数据库的位置\n```bash\nsudo mongod --dbpath /data/db\n```\n4. 启动mongod\n```bash\nsudo service mongod start\nsudo service mongod stop\nsudo service mongod restart\n```\n\n## 安装redis\n1. 下载软件\n```bash\nwget http://download.redis.io/releases/redis-2.8.11.tar.gz\n```\n2. 解压安装\n```bash\ntar xvfz redis-2.8.11.tar.gz\ncd redis-2.8.11 && sudo make && sudo make install\n```\n3. 配置使用\n    1. 下载配置文件和init启动脚本\n    ```bash\n    wget https://github.com/ijonas/dotfiles/raw/master/etc/init.d/redis-server\n    wget https://github.com/ijonas/dotfiles/raw/master/etc/redis.conf\n    sudo mv redis-server /etc/init.d/redis-server\n    sudo chmod +x /etc/init.d/redis-server\n    sudo mv redis.conf /etc/redis.conf\n    ```\n    2. 初始化用户和日志路径\n    ```bash\n    sudo useradd redis\n    sudo mkdir -p /var/lib/redis\n    sudo mkdir -p /var/log/redis\n    sudo chown redis.redis /var/lib/redis\n    sudo chown redis.redis /var/log/redis\n    ```\n    3. 设置开机自动启动，关机自动关闭\n    ```bash\n    sudo update-rc.d redis-server defaults\n    ```\n\n## 环境变量配置\n1. 认识环境变量相关的文件\n- /etc/profile —— 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.并从/etc/profile.d目录的配置文件中搜集shell的设置；\n- /etc/environment —— 在登录时操作系统使用的第二个文件,系统在读取你自己的profile前,设置环境文件的环境变量；\n- /etc/bashrc —— 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取；\n- ~/.profile —— 每个用户都可使用该文件输入专用于自己使用的shell信息，当用户登录时，该文件仅仅执行一次！默认情况下,它设置一些环境变量,执行用户的.bashrc文件；\n- ~/.bashrc —— 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取；\n2. 配置环境变量\n- 在Ubuntu14.04的~/.bashrc中添加的环境变量,在文件添加\n``` bash\nexport PATH=$PATH:/home/qtcreator-2.6.1/bin\n```\n- 修改profile文件,vim编辑/etc/profile\n```bash\nsudo vim /etc/profile\nsource /etc/profile\n```\n\n## 安装开发工具\n1. zsh命令行工具\n2. mysql客户端workbench，mongo客户端工具robomongo\n3. 安装git,svn版本控制工具\n```bash\nsudo apt-get install git\nsudo apt-get install subversion\n```\n","slug":"ubuntu-dev-config","published":1,"updated":"2017-08-04T14:39:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla8e005i8p9k9mq7ucxh","content":"<p><strong> ubuntu开发环境配置：</strong> <Excerpt in index | 首页摘要><br>    ubuntu16下node,java开发环境配置<br> <a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"ubuntu14升级到ubuntu16\"><a href=\"#ubuntu14升级到ubuntu16\" class=\"headerlink\" title=\"ubuntu14升级到ubuntu16\"></a>ubuntu14升级到ubuntu16</h2><ol>\n<li>终端下执行命令<br><code>sudo apt-get update &amp;&amp; sudo apt-get dist-upgrade</code></li>\n<li>重启系统以完成更新的安装<br><code>sudo init 6</code></li>\n<li>用命令安装更新管理器核心update-manager-core，如果服务器已安装则可以跳过<br><code>sudo apt-get install update-manager-core</code></li>\n<li>编辑/etc/update-manager/release-upgrades配置文件，设置Prompt=lts<br><code>sudo vi /etc/update-manager/release-upgrades</code></li>\n<li>启动升级进程<br><code>sudo do-release-upgrade -d</code></li>\n</ol>\n<h2 id=\"安装系统软件\"><a href=\"#安装系统软件\" class=\"headerlink\" title=\"安装系统软件\"></a>安装系统软件</h2><ol>\n<li><p>更新系统和软件</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> upgade</div></pre></td></tr></table></figure>\n</li>\n<li><p>谷歌浏览器，火狐浏览器，atom编辑器，sublime编辑器，webstome,idea,eclipse</p>\n</li>\n<li>安装搜狗输入法（官网），安装fcitx配置搜狗输入法<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2></li>\n<li><p>下载jdk并新建一个文件夹</p>\n <figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mkdir /usr/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">jvm</span></span></div></pre></td></tr></table></figure>\n</li>\n<li><p>解压文件</p>\n <figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo tar zxvf jdk-<span class=\"number\">7</span>u71-linux-x64.tar.gz -C /usr/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">jvm</span>/<span class=\"title\">jdk1</span>.7</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>设置环境变量,设置~/.zshrc文件,或者编辑/etc/profile（全局）文件</p>\n <figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=<span class=\"regexp\">/usr/lib</span><span class=\"regexp\">/jvm/jdk</span>1.<span class=\"number\">7</span></div><div class=\"line\">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre  </div><div class=\"line\">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/<span class=\"class\"><span class=\"keyword\">lib</span>:$&#123;<span class=\"title\">JRE_HOME</span>&#125;/<span class=\"title\">lib</span>  </span></div><div class=\"line\">export PATH=$&#123;JAVA_HOME&#125;/<span class=\"symbol\">bin:</span>$PATH</div></pre></td></tr></table></figure>\n</li>\n<li><p>检查是否安装成功<br> 打开shell,</p>\n <figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java <span class=\"comment\">--version</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h2><ol>\n<li>nodejs版本迭代较快，有时候需要检查在不同版本下的兼容性问题，用nvm来控制版本</li>\n<li><p>安装nvm,source的时候根据自己的shell版本，~/.bashrc, ~/.profile, 或者 ~/.zshrc</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash</div><div class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></div><div class=\"line\">[ <span class=\"_\">-s</span> <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; . <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> <span class=\"comment\"># This loads nvm</span></div><div class=\"line\"><span class=\"built_in\">source</span> ~/.profile</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装不同版本的nodejs<br>　　<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm ls-remote</div><div class=\"line\">nvm install v0<span class=\"number\">.12</span><span class=\"number\">.9</span></div><div class=\"line\">nvm install <span class=\"number\">5.0</span></div><div class=\"line\">nvm use <span class=\"number\">0.12</span><span class=\"number\">.9</span></div><div class=\"line\">nvm alias <span class=\"section\">default</span> <span class=\"number\">0.12</span><span class=\"number\">.9</span></div></pre></td></tr></table></figure></p>\n</li>\n</ol>\n<h2 id=\"安装mongodb\"><a href=\"#安装mongodb\" class=\"headerlink\" title=\"安装mongodb\"></a>安装mongodb</h2><ol>\n<li><p>配置公钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb http://repo.mongodb.org/apt/ubuntu \"</span>$(lsb_release -sc)<span class=\"string\">\"/mongodb-org/3.0 multiverse\"</span> | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list</div></pre></td></tr></table></figure>\n</li>\n<li><p>更新软件列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install -y mongodb-org</div></pre></td></tr></table></figure>\n</li>\n<li><p>完成上面的安装步骤配置mongodb的数据库的位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mongod --dbpath /data/db</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动mongod</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo service mongod start</div><div class=\"line\">sudo service mongod stop</div><div class=\"line\">sudo service mongod restart</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"安装redis\"><a href=\"#安装redis\" class=\"headerlink\" title=\"安装redis\"></a>安装redis</h2><ol>\n<li><p>下载软件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://download.redis.io/releases/redis-2.8.11.tar.gz</div></pre></td></tr></table></figure>\n</li>\n<li><p>解压安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar xvfz redis-2.8.11.tar.gz</div><div class=\"line\"><span class=\"built_in\">cd</span> redis-2.8.11 &amp;&amp; sudo make &amp;&amp; sudo make install</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置使用</p>\n<ol>\n<li><p>下载配置文件和init启动脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://github.com/ijonas/dotfiles/raw/master/etc/init.d/redis-server</div><div class=\"line\">wget https://github.com/ijonas/dotfiles/raw/master/etc/redis.conf</div><div class=\"line\">sudo mv redis-server /etc/init.d/redis-server</div><div class=\"line\">sudo chmod +x /etc/init.d/redis-server</div><div class=\"line\">sudo mv redis.conf /etc/redis.conf</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化用户和日志路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo useradd redis</div><div class=\"line\">sudo mkdir -p /var/lib/redis</div><div class=\"line\">sudo mkdir -p /var/<span class=\"built_in\">log</span>/redis</div><div class=\"line\">sudo chown redis.redis /var/lib/redis</div><div class=\"line\">sudo chown redis.redis /var/<span class=\"built_in\">log</span>/redis</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置开机自动启动，关机自动关闭</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo update-rc.d redis-server defaults</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"环境变量配置\"><a href=\"#环境变量配置\" class=\"headerlink\" title=\"环境变量配置\"></a>环境变量配置</h2><ol>\n<li>认识环境变量相关的文件</li>\n</ol>\n<ul>\n<li>/etc/profile —— 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.并从/etc/profile.d目录的配置文件中搜集shell的设置；</li>\n<li>/etc/environment —— 在登录时操作系统使用的第二个文件,系统在读取你自己的profile前,设置环境文件的环境变量；</li>\n<li>/etc/bashrc —— 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取；</li>\n<li>~/.profile —— 每个用户都可使用该文件输入专用于自己使用的shell信息，当用户登录时，该文件仅仅执行一次！默认情况下,它设置一些环境变量,执行用户的.bashrc文件；</li>\n<li>~/.bashrc —— 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取；</li>\n</ul>\n<ol>\n<li>配置环境变量</li>\n</ol>\n<ul>\n<li><p>在Ubuntu14.04的~/.bashrc中添加的环境变量,在文件添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/qtcreator-2.6.1/bin</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改profile文件,vim编辑/etc/profile</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /etc/profile</div><div class=\"line\"><span class=\"built_in\">source</span> /etc/profile</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"安装开发工具\"><a href=\"#安装开发工具\" class=\"headerlink\" title=\"安装开发工具\"></a>安装开发工具</h2><ol>\n<li>zsh命令行工具</li>\n<li>mysql客户端workbench，mongo客户端工具robomongo</li>\n<li>安装git,svn版本控制工具<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install git</div><div class=\"line\">sudo apt-get install subversion</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"<p><strong> ubuntu开发环境配置：</strong> <Excerpt in index | 首页摘要><br>    ubuntu16下node,java开发环境配置<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"ubuntu14升级到ubuntu16\"><a href=\"#ubuntu14升级到ubuntu16\" class=\"headerlink\" title=\"ubuntu14升级到ubuntu16\"></a>ubuntu14升级到ubuntu16</h2><ol>\n<li>终端下执行命令<br><code>sudo apt-get update &amp;&amp; sudo apt-get dist-upgrade</code></li>\n<li>重启系统以完成更新的安装<br><code>sudo init 6</code></li>\n<li>用命令安装更新管理器核心update-manager-core，如果服务器已安装则可以跳过<br><code>sudo apt-get install update-manager-core</code></li>\n<li>编辑/etc/update-manager/release-upgrades配置文件，设置Prompt=lts<br><code>sudo vi /etc/update-manager/release-upgrades</code></li>\n<li>启动升级进程<br><code>sudo do-release-upgrade -d</code></li>\n</ol>\n<h2 id=\"安装系统软件\"><a href=\"#安装系统软件\" class=\"headerlink\" title=\"安装系统软件\"></a>安装系统软件</h2><ol>\n<li><p>更新系统和软件</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> upgade</div></pre></td></tr></table></figure>\n</li>\n<li><p>谷歌浏览器，火狐浏览器，atom编辑器，sublime编辑器，webstome,idea,eclipse</p>\n</li>\n<li>安装搜狗输入法（官网），安装fcitx配置搜狗输入法<h2 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h2></li>\n<li><p>下载jdk并新建一个文件夹</p>\n <figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mkdir /usr/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">jvm</span></span></div></pre></td></tr></table></figure>\n</li>\n<li><p>解压文件</p>\n <figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo tar zxvf jdk-<span class=\"number\">7</span>u71-linux-x64.tar.gz -C /usr/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">jvm</span>/<span class=\"title\">jdk1</span>.7</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>设置环境变量,设置~/.zshrc文件,或者编辑/etc/profile（全局）文件</p>\n <figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=<span class=\"regexp\">/usr/lib</span><span class=\"regexp\">/jvm/jdk</span>1.<span class=\"number\">7</span></div><div class=\"line\">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre  </div><div class=\"line\">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/<span class=\"class\"><span class=\"keyword\">lib</span>:$&#123;<span class=\"title\">JRE_HOME</span>&#125;/<span class=\"title\">lib</span>  </span></div><div class=\"line\">export PATH=$&#123;JAVA_HOME&#125;/<span class=\"symbol\">bin:</span>$PATH</div></pre></td></tr></table></figure>\n</li>\n<li><p>检查是否安装成功<br> 打开shell,</p>\n <figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java <span class=\"comment\">--version</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h2><ol>\n<li>nodejs版本迭代较快，有时候需要检查在不同版本下的兼容性问题，用nvm来控制版本</li>\n<li><p>安装nvm,source的时候根据自己的shell版本，~/.bashrc, ~/.profile, 或者 ~/.zshrc</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash</div><div class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></div><div class=\"line\">[ <span class=\"_\">-s</span> <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; . <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> <span class=\"comment\"># This loads nvm</span></div><div class=\"line\"><span class=\"built_in\">source</span> ~/.profile</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装不同版本的nodejs<br>　　<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm ls-remote</div><div class=\"line\">nvm install v0<span class=\"number\">.12</span><span class=\"number\">.9</span></div><div class=\"line\">nvm install <span class=\"number\">5.0</span></div><div class=\"line\">nvm use <span class=\"number\">0.12</span><span class=\"number\">.9</span></div><div class=\"line\">nvm alias <span class=\"section\">default</span> <span class=\"number\">0.12</span><span class=\"number\">.9</span></div></pre></td></tr></table></figure></p>\n</li>\n</ol>\n<h2 id=\"安装mongodb\"><a href=\"#安装mongodb\" class=\"headerlink\" title=\"安装mongodb\"></a>安装mongodb</h2><ol>\n<li><p>配置公钥</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb http://repo.mongodb.org/apt/ubuntu \"</span>$(lsb_release -sc)<span class=\"string\">\"/mongodb-org/3.0 multiverse\"</span> | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list</div></pre></td></tr></table></figure>\n</li>\n<li><p>更新软件列表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install -y mongodb-org</div></pre></td></tr></table></figure>\n</li>\n<li><p>完成上面的安装步骤配置mongodb的数据库的位置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mongod --dbpath /data/db</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动mongod</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo service mongod start</div><div class=\"line\">sudo service mongod stop</div><div class=\"line\">sudo service mongod restart</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"安装redis\"><a href=\"#安装redis\" class=\"headerlink\" title=\"安装redis\"></a>安装redis</h2><ol>\n<li><p>下载软件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://download.redis.io/releases/redis-2.8.11.tar.gz</div></pre></td></tr></table></figure>\n</li>\n<li><p>解压安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar xvfz redis-2.8.11.tar.gz</div><div class=\"line\"><span class=\"built_in\">cd</span> redis-2.8.11 &amp;&amp; sudo make &amp;&amp; sudo make install</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置使用</p>\n<ol>\n<li><p>下载配置文件和init启动脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https://github.com/ijonas/dotfiles/raw/master/etc/init.d/redis-server</div><div class=\"line\">wget https://github.com/ijonas/dotfiles/raw/master/etc/redis.conf</div><div class=\"line\">sudo mv redis-server /etc/init.d/redis-server</div><div class=\"line\">sudo chmod +x /etc/init.d/redis-server</div><div class=\"line\">sudo mv redis.conf /etc/redis.conf</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化用户和日志路径</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo useradd redis</div><div class=\"line\">sudo mkdir -p /var/lib/redis</div><div class=\"line\">sudo mkdir -p /var/<span class=\"built_in\">log</span>/redis</div><div class=\"line\">sudo chown redis.redis /var/lib/redis</div><div class=\"line\">sudo chown redis.redis /var/<span class=\"built_in\">log</span>/redis</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置开机自动启动，关机自动关闭</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo update-rc.d redis-server defaults</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"环境变量配置\"><a href=\"#环境变量配置\" class=\"headerlink\" title=\"环境变量配置\"></a>环境变量配置</h2><ol>\n<li>认识环境变量相关的文件</li>\n</ol>\n<ul>\n<li>/etc/profile —— 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.并从/etc/profile.d目录的配置文件中搜集shell的设置；</li>\n<li>/etc/environment —— 在登录时操作系统使用的第二个文件,系统在读取你自己的profile前,设置环境文件的环境变量；</li>\n<li>/etc/bashrc —— 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取；</li>\n<li>~/.profile —— 每个用户都可使用该文件输入专用于自己使用的shell信息，当用户登录时，该文件仅仅执行一次！默认情况下,它设置一些环境变量,执行用户的.bashrc文件；</li>\n<li>~/.bashrc —— 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取；</li>\n</ul>\n<ol>\n<li>配置环境变量</li>\n</ol>\n<ul>\n<li><p>在Ubuntu14.04的~/.bashrc中添加的环境变量,在文件添加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/qtcreator-2.6.1/bin</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改profile文件,vim编辑/etc/profile</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim /etc/profile</div><div class=\"line\"><span class=\"built_in\">source</span> /etc/profile</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"安装开发工具\"><a href=\"#安装开发工具\" class=\"headerlink\" title=\"安装开发工具\"></a>安装开发工具</h2><ol>\n<li>zsh命令行工具</li>\n<li>mysql客户端workbench，mongo客户端工具robomongo</li>\n<li>安装git,svn版本控制工具<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install git</div><div class=\"line\">sudo apt-get install subversion</div></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"微信公众号开发","date":"2017-04-28T04:55:33.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n微信公众号开发的一些注意事项\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 开发环境搭建\n1. 微信公众号开发者配置，url，token，\n2. 本地调试，使用内网穿透工具，花生壳，或者netapp，买一个可以自定义域名的，内网映射到制定端口，\n3. 项目搭建，express或koa搭建项目，npm有微信的现成包，直接配置\n\n## 回复\n1. 回复和发消息并没有什么特别注意的地方，这里不多说\n\n## 菜单\n1. 微信菜单有自定义菜单，有个性化菜单，但是个性化菜单优先级高于个性化菜单\n2. 个性化菜单可以根据用户的tag，sex，group等属性进行区分菜单\n3. 注意，我在使用时发现**个性化菜单经常会失效**，不起作用，偶尔会起作用，如果线上打算使用个性化菜单，请慎重并仔细测试\n\n## 授权\n授权有网页授权，js sdk授权，\n网页授权也有两种，一个上静默授权，一个是点击授权，贴一下js sdk调用前认证的代码，要使用sha1加密\n```js\nasync getSignConfig(originUrl) {\n      let data = {}\n      const sha1 = crypto.createHash('sha1')\n      const appId = this.app.config.weixin.appID\n      const jsapi_ticket = await this.ctx.service.token.getJSApiTicket()\n      const noncestr = this.app.config.jsapi.noncestr\n      const url = this.app.config.domain + originUrl\n      const timestamp = parseInt(new Date().getTime() / 1000)\n      // sha1加密\n      const str = `jsapi_ticket=${jsapi_ticket}&noncestr=${noncestr}&timestamp=${timestamp}&url=${url}`\n      sha1.update(str)\n      const signature = sha1.digest('hex')\n      data = { jsapi_ticket, noncestr, timestamp, url, signature, appId }\n      return data\n    }\n```\n调用js sdk页面上代码\n```js\nwx.config({\n    debug: false, // 开启调试模式,\n    appId: appId, // 必填，公众号的唯一标识\n    timestamp: timestamp, // 必填，生成签名的时间戳\n    nonceStr: nonceStr, // 必填，生成签名的随机串\n    signature:  signature,// 必填，签名，见附录1\n    jsApiList: ['closeWindow'] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2\n});\nwx.ready(function(){\n    setTimeout(function(){\n      wx.closeWindow();\n    },2000);\n});\n```\n\n\n## 实用的常识\n1. tag不能重复创建，但是给用户可以重复打同一个tag\n2. 更改菜单一般五分钟生效，或者重新关注公众号，立马能看到\n3. 如果调用js sdk，务必使用https，防止因为安全问题，导致ios下js下载失败。如果你的服务是https，而引用了https的微信js，在ios下肯定会下载失败，这是ios的安全机制导致的。\n4. 微信关闭窗口的js接口，不管jsconfig验证是否通过，窗口都可以关闭\n5. 微信的token过期时间上2h，但是很多时候30分钟不到可能已经失效，建议**把token过期时间设置为10分钟之内**\n\n## 常见报错\n1. 创建菜单的时候，菜单长度不合法，仔细检查自己传的json菜单，一般都是**json格式问题**，而不是长度\n2. redirect_uri不合法，是创建授权菜单的redirect_uri和**网页授权域名**配置不一样\n3. 关注公众号，服务端设置的欢迎消息发不过去，如果自己代码无异常，一般是因为**token过期**\n\n## 以后遇到其他问题继续补充\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/wechat-dev.md","raw":"title: 微信公众号开发\ndate: 2017-04-28 12:55:33\ntags: 编程语言\ncategories: javacript\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n微信公众号开发的一些注意事项\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 开发环境搭建\n1. 微信公众号开发者配置，url，token，\n2. 本地调试，使用内网穿透工具，花生壳，或者netapp，买一个可以自定义域名的，内网映射到制定端口，\n3. 项目搭建，express或koa搭建项目，npm有微信的现成包，直接配置\n\n## 回复\n1. 回复和发消息并没有什么特别注意的地方，这里不多说\n\n## 菜单\n1. 微信菜单有自定义菜单，有个性化菜单，但是个性化菜单优先级高于个性化菜单\n2. 个性化菜单可以根据用户的tag，sex，group等属性进行区分菜单\n3. 注意，我在使用时发现**个性化菜单经常会失效**，不起作用，偶尔会起作用，如果线上打算使用个性化菜单，请慎重并仔细测试\n\n## 授权\n授权有网页授权，js sdk授权，\n网页授权也有两种，一个上静默授权，一个是点击授权，贴一下js sdk调用前认证的代码，要使用sha1加密\n```js\nasync getSignConfig(originUrl) {\n      let data = {}\n      const sha1 = crypto.createHash('sha1')\n      const appId = this.app.config.weixin.appID\n      const jsapi_ticket = await this.ctx.service.token.getJSApiTicket()\n      const noncestr = this.app.config.jsapi.noncestr\n      const url = this.app.config.domain + originUrl\n      const timestamp = parseInt(new Date().getTime() / 1000)\n      // sha1加密\n      const str = `jsapi_ticket=${jsapi_ticket}&noncestr=${noncestr}&timestamp=${timestamp}&url=${url}`\n      sha1.update(str)\n      const signature = sha1.digest('hex')\n      data = { jsapi_ticket, noncestr, timestamp, url, signature, appId }\n      return data\n    }\n```\n调用js sdk页面上代码\n```js\nwx.config({\n    debug: false, // 开启调试模式,\n    appId: appId, // 必填，公众号的唯一标识\n    timestamp: timestamp, // 必填，生成签名的时间戳\n    nonceStr: nonceStr, // 必填，生成签名的随机串\n    signature:  signature,// 必填，签名，见附录1\n    jsApiList: ['closeWindow'] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2\n});\nwx.ready(function(){\n    setTimeout(function(){\n      wx.closeWindow();\n    },2000);\n});\n```\n\n\n## 实用的常识\n1. tag不能重复创建，但是给用户可以重复打同一个tag\n2. 更改菜单一般五分钟生效，或者重新关注公众号，立马能看到\n3. 如果调用js sdk，务必使用https，防止因为安全问题，导致ios下js下载失败。如果你的服务是https，而引用了https的微信js，在ios下肯定会下载失败，这是ios的安全机制导致的。\n4. 微信关闭窗口的js接口，不管jsconfig验证是否通过，窗口都可以关闭\n5. 微信的token过期时间上2h，但是很多时候30分钟不到可能已经失效，建议**把token过期时间设置为10分钟之内**\n\n## 常见报错\n1. 创建菜单的时候，菜单长度不合法，仔细检查自己传的json菜单，一般都是**json格式问题**，而不是长度\n2. redirect_uri不合法，是创建授权菜单的redirect_uri和**网页授权域名**配置不一样\n3. 关注公众号，服务端设置的欢迎消息发不过去，如果自己代码无异常，一般是因为**token过期**\n\n## 以后遇到其他问题继续补充\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"wechat-dev","published":1,"updated":"2017-05-26T06:12:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla8f005m8p9kqp9oq6xv","content":"<p><strong> 微信公众号开发：</strong> <Excerpt in index | 首页摘要><br>微信公众号开发的一些注意事项<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"开发环境搭建\"><a href=\"#开发环境搭建\" class=\"headerlink\" title=\"开发环境搭建\"></a>开发环境搭建</h2><ol>\n<li>微信公众号开发者配置，url，token，</li>\n<li>本地调试，使用内网穿透工具，花生壳，或者netapp，买一个可以自定义域名的，内网映射到制定端口，</li>\n<li>项目搭建，express或koa搭建项目，npm有微信的现成包，直接配置</li>\n</ol>\n<h2 id=\"回复\"><a href=\"#回复\" class=\"headerlink\" title=\"回复\"></a>回复</h2><ol>\n<li>回复和发消息并没有什么特别注意的地方，这里不多说</li>\n</ol>\n<h2 id=\"菜单\"><a href=\"#菜单\" class=\"headerlink\" title=\"菜单\"></a>菜单</h2><ol>\n<li>微信菜单有自定义菜单，有个性化菜单，但是个性化菜单优先级高于个性化菜单</li>\n<li>个性化菜单可以根据用户的tag，sex，group等属性进行区分菜单</li>\n<li>注意，我在使用时发现<strong>个性化菜单经常会失效</strong>，不起作用，偶尔会起作用，如果线上打算使用个性化菜单，请慎重并仔细测试</li>\n</ol>\n<h2 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h2><p>授权有网页授权，js sdk授权，<br>网页授权也有两种，一个上静默授权，一个是点击授权，贴一下js sdk调用前认证的代码，要使用sha1加密<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span> getSignConfig(originUrl) &#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> data = &#123;&#125;</div><div class=\"line\">      <span class=\"keyword\">const</span> sha1 = crypto.createHash(<span class=\"string\">'sha1'</span>)</div><div class=\"line\">      <span class=\"keyword\">const</span> appId = <span class=\"keyword\">this</span>.app.config.weixin.appID</div><div class=\"line\">      <span class=\"keyword\">const</span> jsapi_ticket = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.ctx.service.token.getJSApiTicket()</div><div class=\"line\">      <span class=\"keyword\">const</span> noncestr = <span class=\"keyword\">this</span>.app.config.jsapi.noncestr</div><div class=\"line\">      <span class=\"keyword\">const</span> url = <span class=\"keyword\">this</span>.app.config.domain + originUrl</div><div class=\"line\">      <span class=\"keyword\">const</span> timestamp = <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() / <span class=\"number\">1000</span>)</div><div class=\"line\">      <span class=\"comment\">// sha1加密</span></div><div class=\"line\">      <span class=\"keyword\">const</span> str = <span class=\"string\">`jsapi_ticket=<span class=\"subst\">$&#123;jsapi_ticket&#125;</span>&amp;noncestr=<span class=\"subst\">$&#123;noncestr&#125;</span>&amp;timestamp=<span class=\"subst\">$&#123;timestamp&#125;</span>&amp;url=<span class=\"subst\">$&#123;url&#125;</span>`</span></div><div class=\"line\">      sha1.update(str)</div><div class=\"line\">      <span class=\"keyword\">const</span> signature = sha1.digest(<span class=\"string\">'hex'</span>)</div><div class=\"line\">      data = &#123; jsapi_ticket, noncestr, timestamp, url, signature, appId &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> data</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>调用js sdk页面上代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">wx.config(&#123;</div><div class=\"line\">    debug: <span class=\"literal\">false</span>, <span class=\"comment\">// 开启调试模式,</span></div><div class=\"line\">    appId: appId, <span class=\"comment\">// 必填，公众号的唯一标识</span></div><div class=\"line\">    timestamp: timestamp, <span class=\"comment\">// 必填，生成签名的时间戳</span></div><div class=\"line\">    nonceStr: nonceStr, <span class=\"comment\">// 必填，生成签名的随机串</span></div><div class=\"line\">    signature:  signature,<span class=\"comment\">// 必填，签名，见附录1</span></div><div class=\"line\">    jsApiList: [<span class=\"string\">'closeWindow'</span>] <span class=\"comment\">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></div><div class=\"line\">&#125;);</div><div class=\"line\">wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      wx.closeWindow();</div><div class=\"line\">    &#125;,<span class=\"number\">2000</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"实用的常识\"><a href=\"#实用的常识\" class=\"headerlink\" title=\"实用的常识\"></a>实用的常识</h2><ol>\n<li>tag不能重复创建，但是给用户可以重复打同一个tag</li>\n<li>更改菜单一般五分钟生效，或者重新关注公众号，立马能看到</li>\n<li>如果调用js sdk，务必使用https，防止因为安全问题，导致ios下js下载失败。如果你的服务是https，而引用了https的微信js，在ios下肯定会下载失败，这是ios的安全机制导致的。</li>\n<li>微信关闭窗口的js接口，不管jsconfig验证是否通过，窗口都可以关闭</li>\n<li>微信的token过期时间上2h，但是很多时候30分钟不到可能已经失效，建议<strong>把token过期时间设置为10分钟之内</strong></li>\n</ol>\n<h2 id=\"常见报错\"><a href=\"#常见报错\" class=\"headerlink\" title=\"常见报错\"></a>常见报错</h2><ol>\n<li>创建菜单的时候，菜单长度不合法，仔细检查自己传的json菜单，一般都是<strong>json格式问题</strong>，而不是长度</li>\n<li>redirect_uri不合法，是创建授权菜单的redirect_uri和<strong>网页授权域名</strong>配置不一样</li>\n<li>关注公众号，服务端设置的欢迎消息发不过去，如果自己代码无异常，一般是因为<strong>token过期</strong></li>\n</ol>\n<h2 id=\"以后遇到其他问题继续补充\"><a href=\"#以后遇到其他问题继续补充\" class=\"headerlink\" title=\"以后遇到其他问题继续补充\"></a>以后遇到其他问题继续补充</h2><blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 微信公众号开发：</strong> <Excerpt in index | 首页摘要><br>微信公众号开发的一些注意事项<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"开发环境搭建\"><a href=\"#开发环境搭建\" class=\"headerlink\" title=\"开发环境搭建\"></a>开发环境搭建</h2><ol>\n<li>微信公众号开发者配置，url，token，</li>\n<li>本地调试，使用内网穿透工具，花生壳，或者netapp，买一个可以自定义域名的，内网映射到制定端口，</li>\n<li>项目搭建，express或koa搭建项目，npm有微信的现成包，直接配置</li>\n</ol>\n<h2 id=\"回复\"><a href=\"#回复\" class=\"headerlink\" title=\"回复\"></a>回复</h2><ol>\n<li>回复和发消息并没有什么特别注意的地方，这里不多说</li>\n</ol>\n<h2 id=\"菜单\"><a href=\"#菜单\" class=\"headerlink\" title=\"菜单\"></a>菜单</h2><ol>\n<li>微信菜单有自定义菜单，有个性化菜单，但是个性化菜单优先级高于个性化菜单</li>\n<li>个性化菜单可以根据用户的tag，sex，group等属性进行区分菜单</li>\n<li>注意，我在使用时发现<strong>个性化菜单经常会失效</strong>，不起作用，偶尔会起作用，如果线上打算使用个性化菜单，请慎重并仔细测试</li>\n</ol>\n<h2 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h2><p>授权有网页授权，js sdk授权，<br>网页授权也有两种，一个上静默授权，一个是点击授权，贴一下js sdk调用前认证的代码，要使用sha1加密<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span> getSignConfig(originUrl) &#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> data = &#123;&#125;</div><div class=\"line\">      <span class=\"keyword\">const</span> sha1 = crypto.createHash(<span class=\"string\">'sha1'</span>)</div><div class=\"line\">      <span class=\"keyword\">const</span> appId = <span class=\"keyword\">this</span>.app.config.weixin.appID</div><div class=\"line\">      <span class=\"keyword\">const</span> jsapi_ticket = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.ctx.service.token.getJSApiTicket()</div><div class=\"line\">      <span class=\"keyword\">const</span> noncestr = <span class=\"keyword\">this</span>.app.config.jsapi.noncestr</div><div class=\"line\">      <span class=\"keyword\">const</span> url = <span class=\"keyword\">this</span>.app.config.domain + originUrl</div><div class=\"line\">      <span class=\"keyword\">const</span> timestamp = <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() / <span class=\"number\">1000</span>)</div><div class=\"line\">      <span class=\"comment\">// sha1加密</span></div><div class=\"line\">      <span class=\"keyword\">const</span> str = <span class=\"string\">`jsapi_ticket=<span class=\"subst\">$&#123;jsapi_ticket&#125;</span>&amp;noncestr=<span class=\"subst\">$&#123;noncestr&#125;</span>&amp;timestamp=<span class=\"subst\">$&#123;timestamp&#125;</span>&amp;url=<span class=\"subst\">$&#123;url&#125;</span>`</span></div><div class=\"line\">      sha1.update(str)</div><div class=\"line\">      <span class=\"keyword\">const</span> signature = sha1.digest(<span class=\"string\">'hex'</span>)</div><div class=\"line\">      data = &#123; jsapi_ticket, noncestr, timestamp, url, signature, appId &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> data</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>调用js sdk页面上代码<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">wx.config(&#123;</div><div class=\"line\">    debug: <span class=\"literal\">false</span>, <span class=\"comment\">// 开启调试模式,</span></div><div class=\"line\">    appId: appId, <span class=\"comment\">// 必填，公众号的唯一标识</span></div><div class=\"line\">    timestamp: timestamp, <span class=\"comment\">// 必填，生成签名的时间戳</span></div><div class=\"line\">    nonceStr: nonceStr, <span class=\"comment\">// 必填，生成签名的随机串</span></div><div class=\"line\">    signature:  signature,<span class=\"comment\">// 必填，签名，见附录1</span></div><div class=\"line\">    jsApiList: [<span class=\"string\">'closeWindow'</span>] <span class=\"comment\">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></div><div class=\"line\">&#125;);</div><div class=\"line\">wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      wx.closeWindow();</div><div class=\"line\">    &#125;,<span class=\"number\">2000</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"实用的常识\"><a href=\"#实用的常识\" class=\"headerlink\" title=\"实用的常识\"></a>实用的常识</h2><ol>\n<li>tag不能重复创建，但是给用户可以重复打同一个tag</li>\n<li>更改菜单一般五分钟生效，或者重新关注公众号，立马能看到</li>\n<li>如果调用js sdk，务必使用https，防止因为安全问题，导致ios下js下载失败。如果你的服务是https，而引用了https的微信js，在ios下肯定会下载失败，这是ios的安全机制导致的。</li>\n<li>微信关闭窗口的js接口，不管jsconfig验证是否通过，窗口都可以关闭</li>\n<li>微信的token过期时间上2h，但是很多时候30分钟不到可能已经失效，建议<strong>把token过期时间设置为10分钟之内</strong></li>\n</ol>\n<h2 id=\"常见报错\"><a href=\"#常见报错\" class=\"headerlink\" title=\"常见报错\"></a>常见报错</h2><ol>\n<li>创建菜单的时候，菜单长度不合法，仔细检查自己传的json菜单，一般都是<strong>json格式问题</strong>，而不是长度</li>\n<li>redirect_uri不合法，是创建授权菜单的redirect_uri和<strong>网页授权域名</strong>配置不一样</li>\n<li>关注公众号，服务端设置的欢迎消息发不过去，如果自己代码无异常，一般是因为<strong>token过期</strong></li>\n</ol>\n<h2 id=\"以后遇到其他问题继续补充\"><a href=\"#以后遇到其他问题继续补充\" class=\"headerlink\" title=\"以后遇到其他问题继续补充\"></a>以后遇到其他问题继续补充</h2><blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"为什么使用Zookeeper？","date":"2018-02-18T14:15:44.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n随着大型互联网的发展，分布式系统应用越来越来越广泛，zookeeper成了分布式系统的标配。集群容错，动态负载均衡，动态扩容，异地多活等架构都依赖于zookeeper而搭建。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## zookeeper是什么？\nzookeeper是由雅虎创建的，基于google chubby,一个开源的分布式协调服务，是分布式数据一致性的解决方案。\n\n## zookeeper的特性\n* 顺序一致性，从同一个客户端发起的事务请求，最终会严格按照顺序被应用到zookeeper中。\n* 原子性，事务请求在所有集群是一致的，要么都成功，要么都失败。\n* 可靠性，一旦服务器成功应用某个事务，那么所有集群中一定同步并保留。\n* 实时性，一个事务被应用，客户端能立即从服务端读取到状态变化。\n\n## zookeeper的原理？\n基于分布式协议pasxo，而实现了自己的zab协议。保证数据的一致性。\n\n## zookeeper的数据模型\n* 持久化节点，节点创建后一直存在，直到主动删除。\n* 持久化有序节点，每个节点都会为它的一级子节点维护一个顺序。\n* 临时节点，临时节点的生命周期和客户端会话保持一直。客户端会话失效，节点自动清理。\n* 临时有序节点，临时节点基础上多一个顺序性特性。\n\n## zookeeper使用场景有哪些？\n* 订阅发布\n    * watcher机制\n    * 统一配置管理(disconf)\n* 分布式锁（redis也可以）\n* 分布式队列\n* 负载均衡(dubbo)\n* ID生成器\n* master选举(kafka,hadoop,hbase)\n\n## 集群角色有哪些？\n### leader\n1. 事务请求的唯一调度者和处理者，保证集群事务的处理顺序\n2. 集群内部服务的调度者\n\n### follower\n1. 处理非事务请求，以及转发事务请求到leader\n2. 参与事务请求提议的投票\n3. 参与leader选举的投票\n\n### observer\n1. 观察集群中最新状态的变化并同步到observer服务器上\n2. 增加observer不影响集群事务处理能力，还能提升非事务请求的处理能力\n\n## zookeeper集群为什么是奇数？\nzookeeper事务请求提议需要超过半数的机器，假如是2(n+1)台,需要n+2台机器同意，\n由于在增删改操作中需要半数以上服务器通过，来分析以下情况。\n2台服务器，至少2台正常运行才行（2的半数为1，半数以上最少为2），正常运行1台服务器都不允许挂掉\n3台服务器，至少2台正常运行才行（3的半数为1.5，半数以上最少为2），正常运行可以允许1台服务器挂掉\n4台服务器，至少3台正常运行才行（4的半数为2，半数以上最少为3），正常运行可以允许1台服务器挂掉\n5台服务器，至少3台正常运行才行（5的半数为2.5，半数以上最少为3），正常运行可以允许2台服务器挂掉\n6台服务器，至少3台正常运行才行（6的半数为3，半数以上最少为4），正常运行可以允许2台服务器挂掉\n\n## zookeeper日志管理？\n\n## leader选举的原理\n\n\n## 未完待续\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/zookeeper.md","raw":"title: 为什么使用zookeeper？\ndate: 2018-02-18 22:15:44\ntags: zookeeper\ncategories: 分布式架构\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n随着大型互联网的发展，分布式系统应用越来越来越广泛，zookeeper成了分布式系统的标配。集群容错，动态负载均衡，动态扩容，异地多活等架构都依赖于zookeeper而搭建。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## zookeeper是什么？\nzookeeper是由雅虎创建的，基于google chubby,一个开源的分布式协调服务，是分布式数据一致性的解决方案。\n\n## zookeeper的特性\n* 顺序一致性，从同一个客户端发起的事务请求，最终会严格按照顺序被应用到zookeeper中。\n* 原子性，事务请求在所有集群是一致的，要么都成功，要么都失败。\n* 可靠性，一旦服务器成功应用某个事务，那么所有集群中一定同步并保留。\n* 实时性，一个事务被应用，客户端能立即从服务端读取到状态变化。\n\n## zookeeper的原理？\n基于分布式协议pasxo，而实现了自己的zab协议。保证数据的一致性。\n\n## zookeeper的数据模型\n* 持久化节点，节点创建后一直存在，直到主动删除。\n* 持久化有序节点，每个节点都会为它的一级子节点维护一个顺序。\n* 临时节点，临时节点的生命周期和客户端会话保持一直。客户端会话失效，节点自动清理。\n* 临时有序节点，临时节点基础上多一个顺序性特性。\n\n## zookeeper使用场景有哪些？\n* 订阅发布\n    * watcher机制\n    * 统一配置管理(disconf)\n* 分布式锁（redis也可以）\n* 分布式队列\n* 负载均衡(dubbo)\n* ID生成器\n* master选举(kafka,hadoop,hbase)\n\n## 集群角色有哪些？\n### leader\n1. 事务请求的唯一调度者和处理者，保证集群事务的处理顺序\n2. 集群内部服务的调度者\n\n### follower\n1. 处理非事务请求，以及转发事务请求到leader\n2. 参与事务请求提议的投票\n3. 参与leader选举的投票\n\n### observer\n1. 观察集群中最新状态的变化并同步到observer服务器上\n2. 增加observer不影响集群事务处理能力，还能提升非事务请求的处理能力\n\n## zookeeper集群为什么是奇数？\nzookeeper事务请求提议需要超过半数的机器，假如是2(n+1)台,需要n+2台机器同意，\n由于在增删改操作中需要半数以上服务器通过，来分析以下情况。\n2台服务器，至少2台正常运行才行（2的半数为1，半数以上最少为2），正常运行1台服务器都不允许挂掉\n3台服务器，至少2台正常运行才行（3的半数为1.5，半数以上最少为2），正常运行可以允许1台服务器挂掉\n4台服务器，至少3台正常运行才行（4的半数为2，半数以上最少为3），正常运行可以允许1台服务器挂掉\n5台服务器，至少3台正常运行才行（5的半数为2.5，半数以上最少为3），正常运行可以允许2台服务器挂掉\n6台服务器，至少3台正常运行才行（6的半数为3，半数以上最少为4），正常运行可以允许2台服务器挂掉\n\n## zookeeper日志管理？\n\n## leader选举的原理\n\n\n## 未完待续\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"zookeeper","published":1,"updated":"2018-04-07T07:13:30.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfpfla8h005p8p9ku3pkjrn7","content":"<p><strong> 为什么使用Zookeeper？：</strong> <Excerpt in index | 首页摘要><br>随着大型互联网的发展，分布式系统应用越来越来越广泛，zookeeper成了分布式系统的标配。集群容错，动态负载均衡，动态扩容，异地多活等架构都依赖于zookeeper而搭建。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"zookeeper是什么？\"><a href=\"#zookeeper是什么？\" class=\"headerlink\" title=\"zookeeper是什么？\"></a>zookeeper是什么？</h2><p>zookeeper是由雅虎创建的，基于google chubby,一个开源的分布式协调服务，是分布式数据一致性的解决方案。</p>\n<h2 id=\"zookeeper的特性\"><a href=\"#zookeeper的特性\" class=\"headerlink\" title=\"zookeeper的特性\"></a>zookeeper的特性</h2><ul>\n<li>顺序一致性，从同一个客户端发起的事务请求，最终会严格按照顺序被应用到zookeeper中。</li>\n<li>原子性，事务请求在所有集群是一致的，要么都成功，要么都失败。</li>\n<li>可靠性，一旦服务器成功应用某个事务，那么所有集群中一定同步并保留。</li>\n<li>实时性，一个事务被应用，客户端能立即从服务端读取到状态变化。</li>\n</ul>\n<h2 id=\"zookeeper的原理？\"><a href=\"#zookeeper的原理？\" class=\"headerlink\" title=\"zookeeper的原理？\"></a>zookeeper的原理？</h2><p>基于分布式协议pasxo，而实现了自己的zab协议。保证数据的一致性。</p>\n<h2 id=\"zookeeper的数据模型\"><a href=\"#zookeeper的数据模型\" class=\"headerlink\" title=\"zookeeper的数据模型\"></a>zookeeper的数据模型</h2><ul>\n<li>持久化节点，节点创建后一直存在，直到主动删除。</li>\n<li>持久化有序节点，每个节点都会为它的一级子节点维护一个顺序。</li>\n<li>临时节点，临时节点的生命周期和客户端会话保持一直。客户端会话失效，节点自动清理。</li>\n<li>临时有序节点，临时节点基础上多一个顺序性特性。</li>\n</ul>\n<h2 id=\"zookeeper使用场景有哪些？\"><a href=\"#zookeeper使用场景有哪些？\" class=\"headerlink\" title=\"zookeeper使用场景有哪些？\"></a>zookeeper使用场景有哪些？</h2><ul>\n<li>订阅发布<ul>\n<li>watcher机制</li>\n<li>统一配置管理(disconf)</li>\n</ul>\n</li>\n<li>分布式锁（redis也可以）</li>\n<li>分布式队列</li>\n<li>负载均衡(dubbo)</li>\n<li>ID生成器</li>\n<li>master选举(kafka,hadoop,hbase)</li>\n</ul>\n<h2 id=\"集群角色有哪些？\"><a href=\"#集群角色有哪些？\" class=\"headerlink\" title=\"集群角色有哪些？\"></a>集群角色有哪些？</h2><h3 id=\"leader\"><a href=\"#leader\" class=\"headerlink\" title=\"leader\"></a>leader</h3><ol>\n<li>事务请求的唯一调度者和处理者，保证集群事务的处理顺序</li>\n<li>集群内部服务的调度者</li>\n</ol>\n<h3 id=\"follower\"><a href=\"#follower\" class=\"headerlink\" title=\"follower\"></a>follower</h3><ol>\n<li>处理非事务请求，以及转发事务请求到leader</li>\n<li>参与事务请求提议的投票</li>\n<li>参与leader选举的投票</li>\n</ol>\n<h3 id=\"observer\"><a href=\"#observer\" class=\"headerlink\" title=\"observer\"></a>observer</h3><ol>\n<li>观察集群中最新状态的变化并同步到observer服务器上</li>\n<li>增加observer不影响集群事务处理能力，还能提升非事务请求的处理能力</li>\n</ol>\n<h2 id=\"zookeeper集群为什么是奇数？\"><a href=\"#zookeeper集群为什么是奇数？\" class=\"headerlink\" title=\"zookeeper集群为什么是奇数？\"></a>zookeeper集群为什么是奇数？</h2><p>zookeeper事务请求提议需要超过半数的机器，假如是2(n+1)台,需要n+2台机器同意，<br>由于在增删改操作中需要半数以上服务器通过，来分析以下情况。<br>2台服务器，至少2台正常运行才行（2的半数为1，半数以上最少为2），正常运行1台服务器都不允许挂掉<br>3台服务器，至少2台正常运行才行（3的半数为1.5，半数以上最少为2），正常运行可以允许1台服务器挂掉<br>4台服务器，至少3台正常运行才行（4的半数为2，半数以上最少为3），正常运行可以允许1台服务器挂掉<br>5台服务器，至少3台正常运行才行（5的半数为2.5，半数以上最少为3），正常运行可以允许2台服务器挂掉<br>6台服务器，至少3台正常运行才行（6的半数为3，半数以上最少为4），正常运行可以允许2台服务器挂掉</p>\n<h2 id=\"zookeeper日志管理？\"><a href=\"#zookeeper日志管理？\" class=\"headerlink\" title=\"zookeeper日志管理？\"></a>zookeeper日志管理？</h2><h2 id=\"leader选举的原理\"><a href=\"#leader选举的原理\" class=\"headerlink\" title=\"leader选举的原理\"></a>leader选举的原理</h2><h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 为什么使用Zookeeper？：</strong> <Excerpt in index | 首页摘要><br>随着大型互联网的发展，分布式系统应用越来越来越广泛，zookeeper成了分布式系统的标配。集群容错，动态负载均衡，动态扩容，异地多活等架构都依赖于zookeeper而搭建。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"zookeeper是什么？\"><a href=\"#zookeeper是什么？\" class=\"headerlink\" title=\"zookeeper是什么？\"></a>zookeeper是什么？</h2><p>zookeeper是由雅虎创建的，基于google chubby,一个开源的分布式协调服务，是分布式数据一致性的解决方案。</p>\n<h2 id=\"zookeeper的特性\"><a href=\"#zookeeper的特性\" class=\"headerlink\" title=\"zookeeper的特性\"></a>zookeeper的特性</h2><ul>\n<li>顺序一致性，从同一个客户端发起的事务请求，最终会严格按照顺序被应用到zookeeper中。</li>\n<li>原子性，事务请求在所有集群是一致的，要么都成功，要么都失败。</li>\n<li>可靠性，一旦服务器成功应用某个事务，那么所有集群中一定同步并保留。</li>\n<li>实时性，一个事务被应用，客户端能立即从服务端读取到状态变化。</li>\n</ul>\n<h2 id=\"zookeeper的原理？\"><a href=\"#zookeeper的原理？\" class=\"headerlink\" title=\"zookeeper的原理？\"></a>zookeeper的原理？</h2><p>基于分布式协议pasxo，而实现了自己的zab协议。保证数据的一致性。</p>\n<h2 id=\"zookeeper的数据模型\"><a href=\"#zookeeper的数据模型\" class=\"headerlink\" title=\"zookeeper的数据模型\"></a>zookeeper的数据模型</h2><ul>\n<li>持久化节点，节点创建后一直存在，直到主动删除。</li>\n<li>持久化有序节点，每个节点都会为它的一级子节点维护一个顺序。</li>\n<li>临时节点，临时节点的生命周期和客户端会话保持一直。客户端会话失效，节点自动清理。</li>\n<li>临时有序节点，临时节点基础上多一个顺序性特性。</li>\n</ul>\n<h2 id=\"zookeeper使用场景有哪些？\"><a href=\"#zookeeper使用场景有哪些？\" class=\"headerlink\" title=\"zookeeper使用场景有哪些？\"></a>zookeeper使用场景有哪些？</h2><ul>\n<li>订阅发布<ul>\n<li>watcher机制</li>\n<li>统一配置管理(disconf)</li>\n</ul>\n</li>\n<li>分布式锁（redis也可以）</li>\n<li>分布式队列</li>\n<li>负载均衡(dubbo)</li>\n<li>ID生成器</li>\n<li>master选举(kafka,hadoop,hbase)</li>\n</ul>\n<h2 id=\"集群角色有哪些？\"><a href=\"#集群角色有哪些？\" class=\"headerlink\" title=\"集群角色有哪些？\"></a>集群角色有哪些？</h2><h3 id=\"leader\"><a href=\"#leader\" class=\"headerlink\" title=\"leader\"></a>leader</h3><ol>\n<li>事务请求的唯一调度者和处理者，保证集群事务的处理顺序</li>\n<li>集群内部服务的调度者</li>\n</ol>\n<h3 id=\"follower\"><a href=\"#follower\" class=\"headerlink\" title=\"follower\"></a>follower</h3><ol>\n<li>处理非事务请求，以及转发事务请求到leader</li>\n<li>参与事务请求提议的投票</li>\n<li>参与leader选举的投票</li>\n</ol>\n<h3 id=\"observer\"><a href=\"#observer\" class=\"headerlink\" title=\"observer\"></a>observer</h3><ol>\n<li>观察集群中最新状态的变化并同步到observer服务器上</li>\n<li>增加observer不影响集群事务处理能力，还能提升非事务请求的处理能力</li>\n</ol>\n<h2 id=\"zookeeper集群为什么是奇数？\"><a href=\"#zookeeper集群为什么是奇数？\" class=\"headerlink\" title=\"zookeeper集群为什么是奇数？\"></a>zookeeper集群为什么是奇数？</h2><p>zookeeper事务请求提议需要超过半数的机器，假如是2(n+1)台,需要n+2台机器同意，<br>由于在增删改操作中需要半数以上服务器通过，来分析以下情况。<br>2台服务器，至少2台正常运行才行（2的半数为1，半数以上最少为2），正常运行1台服务器都不允许挂掉<br>3台服务器，至少2台正常运行才行（3的半数为1.5，半数以上最少为2），正常运行可以允许1台服务器挂掉<br>4台服务器，至少3台正常运行才行（4的半数为2，半数以上最少为3），正常运行可以允许1台服务器挂掉<br>5台服务器，至少3台正常运行才行（5的半数为2.5，半数以上最少为3），正常运行可以允许2台服务器挂掉<br>6台服务器，至少3台正常运行才行（6的半数为3，半数以上最少为4），正常运行可以允许2台服务器挂掉</p>\n<h2 id=\"zookeeper日志管理？\"><a href=\"#zookeeper日志管理？\" class=\"headerlink\" title=\"zookeeper日志管理？\"></a>zookeeper日志管理？</h2><h2 id=\"leader选举的原理\"><a href=\"#leader选举的原理\" class=\"headerlink\" title=\"leader选举的原理\"></a>leader选举的原理</h2><h2 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续\"></a>未完待续</h2><blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjfpfla4s00018p9kb4f71mkn","category_id":"cjfpfla5200058p9kvwc3twjk","_id":"cjfpfla5m000d8p9krusuxk2o"},{"post_id":"cjfpfla5a000c8p9kp4wfciq7","category_id":"cjfpfla5200058p9kvwc3twjk","_id":"cjfpfla5p000j8p9k2hv4d9pc"},{"post_id":"cjfpfla4x00038p9k66e0m28m","category_id":"cjfpfla5200058p9kvwc3twjk","_id":"cjfpfla5r000n8p9kb6rmhivu"},{"post_id":"cjfpfla5200068p9k833cyutz","category_id":"cjfpfla5n000g8p9k2znxfpee","_id":"cjfpfla5u000s8p9ki6qkx4d1"},{"post_id":"cjfpfla5400078p9kxvdhvzwe","category_id":"cjfpfla5q000m8p9k8j5ntxdd","_id":"cjfpfla5y000y8p9k31g8rfzc"},{"post_id":"cjfpfla5v000w8p9kdc8cjy5s","category_id":"cjfpfla5200058p9kvwc3twjk","_id":"cjfpfla6000138p9kcq0xb44y"},{"post_id":"cjfpfla5500098p9kt4pgu04i","category_id":"cjfpfla5u000u8p9koayo6ed0","_id":"cjfpfla6200168p9kfc1cuawh"},{"post_id":"cjfpfla5x000x8p9khct3lsff","category_id":"cjfpfla5200058p9kvwc3twjk","_id":"cjfpfla63001a8p9k6zjew1nt"},{"post_id":"cjfpfla6000148p9kuk4zgbz6","category_id":"cjfpfla5n000g8p9k2znxfpee","_id":"cjfpfla65001e8p9ki7ctj6jl"},{"post_id":"cjfpfla5m000f8p9koau1982c","category_id":"cjfpfla5y00108p9kzylj2whb","_id":"cjfpfla68001i8p9kkgo7bzdt"},{"post_id":"cjfpfla6200178p9ktcxdgkrj","category_id":"cjfpfla5n000g8p9k2znxfpee","_id":"cjfpfla6b001m8p9krlsobkrl"},{"post_id":"cjfpfla5o000i8p9kxsio5h5v","category_id":"cjfpfla5u000u8p9koayo6ed0","_id":"cjfpfla6e001q8p9ky8k6b5pb"},{"post_id":"cjfpfla66001f8p9k7be0af5h","category_id":"cjfpfla5n000g8p9k2znxfpee","_id":"cjfpfla6h001t8p9kr0l9c0wo"},{"post_id":"cjfpfla68001j8p9ko7d1o7uv","category_id":"cjfpfla5n000g8p9k2znxfpee","_id":"cjfpfla6k001y8p9k5x4cny73"},{"post_id":"cjfpfla5p000k8p9k8km610xu","category_id":"cjfpfla5q000m8p9k8j5ntxdd","_id":"cjfpfla6l00208p9khwugugdb"},{"post_id":"cjfpfla6b001n8p9knamman33","category_id":"cjfpfla5n000g8p9k2znxfpee","_id":"cjfpfla6n00248p9k0em4jdk0"},{"post_id":"cjfpfla5r000p8p9kngnwqh64","category_id":"cjfpfla6d001o8p9kr3udyn00","_id":"cjfpfla6o00278p9kxjgqacsd"},{"post_id":"cjfpfla6i001v8p9kviplf684","category_id":"cjfpfla5200058p9kvwc3twjk","_id":"cjfpfla6p002b8p9kwzwy6bxe"},{"post_id":"cjfpfla5s000r8p9kwj2pd311","category_id":"cjfpfla6d001o8p9kr3udyn00","_id":"cjfpfla6s002e8p9k1jwk2v6d"},{"post_id":"cjfpfla6n00268p9k9ns1bdcm","category_id":"cjfpfla5n000g8p9k2znxfpee","_id":"cjfpfla6u002h8p9ksbfqjws2"},{"post_id":"cjfpfla5z00118p9kmu5ccuhu","category_id":"cjfpfla6m00238p9k1zi9vbij","_id":"cjfpfla6v002l8p9k9h0xewoh"},{"post_id":"cjfpfla6o00288p9kt88tujla","category_id":"cjfpfla5n000g8p9k2znxfpee","_id":"cjfpfla6x002o8p9kec85z2z4"},{"post_id":"cjfpfla64001b8p9ko5ulybji","category_id":"cjfpfla6p002a8p9kfze8928m","_id":"cjfpfla6y002s8p9k0xhty1d6"},{"post_id":"cjfpfla6t002f8p9k8m9dewe2","category_id":"cjfpfla5n000g8p9k2znxfpee","_id":"cjfpfla6z002u8p9ku0ex99uq"},{"post_id":"cjfpfla6e001r8p9kcodpllue","category_id":"cjfpfla6p002a8p9kfze8928m","_id":"cjfpfla71002z8p9kqw10l6hd"},{"post_id":"cjfpfla6k001z8p9kq42tn3h6","category_id":"cjfpfla6x002p8p9kmhkq2zzw","_id":"cjfpfla7200328p9k57l6qbru"},{"post_id":"cjfpfla70002w8p9khpod2235","category_id":"cjfpfla5200058p9kvwc3twjk","_id":"cjfpfla7600378p9kx6st0u1e"},{"post_id":"cjfpfla7100308p9ku1xm1tyo","category_id":"cjfpfla5200058p9kvwc3twjk","_id":"cjfpfla78003a8p9kohvt3gyn"},{"post_id":"cjfpfla6l00218p9kjly0r2zg","category_id":"cjfpfla70002x8p9k5m13f7ki","_id":"cjfpfla79003f8p9kwc4vpi7e"},{"post_id":"cjfpfla7200348p9kvi4q8inc","category_id":"cjfpfla5200058p9kvwc3twjk","_id":"cjfpfla7a003i8p9kodf8jfbt"},{"post_id":"cjfpfla7600388p9ksl6cedz0","category_id":"cjfpfla5y00108p9kzylj2whb","_id":"cjfpfla7e003n8p9k2bvcndte"},{"post_id":"cjfpfla6p002c8p9ke55933tg","category_id":"cjfpfla70002x8p9k5m13f7ki","_id":"cjfpfla7f003q8p9kj0m0ebjn"},{"post_id":"cjfpfla78003c8p9kc961w0i1","category_id":"cjfpfla5200058p9kvwc3twjk","_id":"cjfpfla7h003v8p9krpm3s1ob"},{"post_id":"cjfpfla79003g8p9kz2pn7gfa","category_id":"cjfpfla70002x8p9k5m13f7ki","_id":"cjfpfla7l003y8p9kqbkt442c"},{"post_id":"cjfpfla6u002j8p9krz3m2pnd","category_id":"cjfpfla79003d8p9kvnor62ks","_id":"cjfpfla7n00438p9khqx8npu8"},{"post_id":"cjfpfla7b003k8p9ko4unyuff","category_id":"cjfpfla70002x8p9k5m13f7ki","_id":"cjfpfla7o00468p9k7rb1y2p7"},{"post_id":"cjfpfla7e003o8p9kjpg1lwr9","category_id":"cjfpfla5n000g8p9k2znxfpee","_id":"cjfpfla7r004b8p9kd6jy50q6"},{"post_id":"cjfpfla6v002m8p9k4mbs25q4","category_id":"cjfpfla70002x8p9k5m13f7ki","_id":"cjfpfla7s004e8p9kfhmmppqw"},{"post_id":"cjfpfla7g003s8p9ka0l7tx10","category_id":"cjfpfla5y00108p9kzylj2whb","_id":"cjfpfla7u004j8p9ksvrbskb6"},{"post_id":"cjfpfla7i003w8p9kqdnyy5w4","category_id":"cjfpfla6p002a8p9kfze8928m","_id":"cjfpfla7v004m8p9ko59c5664"},{"post_id":"cjfpfla6x002q8p9kg6wev2du","category_id":"cjfpfla70002x8p9k5m13f7ki","_id":"cjfpfla7z004q8p9kf6pwra42"},{"post_id":"cjfpfla7n00448p9k749mn2om","category_id":"cjfpfla5q000m8p9k8j5ntxdd","_id":"cjfpfla80004t8p9kvz0tc5fs"},{"post_id":"cjfpfla6y002t8p9k56mnpvbp","category_id":"cjfpfla70002x8p9k5m13f7ki","_id":"cjfpfla82004w8p9klr1kxbvv"},{"post_id":"cjfpfla7r004c8p9kg4fd8j2n","category_id":"cjfpfla5y00108p9kzylj2whb","_id":"cjfpfla8300508p9k2am232uu"},{"post_id":"cjfpfla7l003z8p9k4hvrb4n3","category_id":"cjfpfla7q00498p9ko1t44sw4","_id":"cjfpfla8400538p9kl7pr2578"},{"post_id":"cjfpfla7t004f8p9ki7p6b3k3","category_id":"cjfpfla5y00108p9kzylj2whb","_id":"cjfpfla8600578p9kghoxpkhw"},{"post_id":"cjfpfla7u004k8p9kpkc54brh","category_id":"cjfpfla5y00108p9kzylj2whb","_id":"cjfpfla87005a8p9k7yggj835"},{"post_id":"cjfpfla7v004n8p9kns8fkz1i","category_id":"cjfpfla5y00108p9kzylj2whb","_id":"cjfpfla8c005e8p9kaymrttaq"},{"post_id":"cjfpfla7p00478p9kgrrsraqs","category_id":"cjfpfla7u004i8p9kks7ywwio","_id":"cjfpfla8d005h8p9kjs1kokyy"},{"post_id":"cjfpfla7z004r8p9kyjvr020o","category_id":"cjfpfla5y00108p9kzylj2whb","_id":"cjfpfla8f005l8p9k0migpb8y"},{"post_id":"cjfpfla81004u8p9kb8njhcdi","category_id":"cjfpfla5y00108p9kzylj2whb","_id":"cjfpfla8h005o8p9ko1z6n6ju"},{"post_id":"cjfpfla82004y8p9k4upa7i5r","category_id":"cjfpfla5y00108p9kzylj2whb","_id":"cjfpfla8i005t8p9k2njffzqy"},{"post_id":"cjfpfla8300518p9kme9ksgio","category_id":"cjfpfla5y00108p9kzylj2whb","_id":"cjfpfla8j005v8p9km7hs6vpr"},{"post_id":"cjfpfla8500558p9km0m7dkkm","category_id":"cjfpfla5y00108p9kzylj2whb","_id":"cjfpfla8k005y8p9kvf6f1rj3"},{"post_id":"cjfpfla8600588p9kxn8z5kxx","category_id":"cjfpfla5y00108p9kzylj2whb","_id":"cjfpfla8k00608p9k9d9am9co"},{"post_id":"cjfpfla88005b8p9kchapn2n0","category_id":"cjfpfla5y00108p9kzylj2whb","_id":"cjfpfla8l00638p9kdbqbtthe"},{"post_id":"cjfpfla8c005f8p9kn3di7fyj","category_id":"cjfpfla5200058p9kvwc3twjk","_id":"cjfpfla8m00658p9k8bht0ihf"},{"post_id":"cjfpfla8e005i8p9k9mq7ucxh","category_id":"cjfpfla5n000g8p9k2znxfpee","_id":"cjfpfla8m00688p9kb3cptm0d"},{"post_id":"cjfpfla8h005p8p9ku3pkjrn7","category_id":"cjfpfla6d001o8p9kr3udyn00","_id":"cjfpfla8n006a8p9kfxlirs5t"},{"post_id":"cjfpfla8f005m8p9kqp9oq6xv","category_id":"cjfpfla8i005s8p9kyoksp2ip","_id":"cjfpfla8n006d8p9kxsqd3vs7"}],"PostTag":[{"post_id":"cjfpfla4s00018p9kb4f71mkn","tag_id":"cjfpfla4y00048p9knoucmezp","_id":"cjfpfla5a000b8p9kacutxsr1"},{"post_id":"cjfpfla4x00038p9k66e0m28m","tag_id":"cjfpfla4y00048p9knoucmezp","_id":"cjfpfla5o000h8p9kqdf19sps"},{"post_id":"cjfpfla5200068p9k833cyutz","tag_id":"cjfpfla5m000e8p9kr4fm9p30","_id":"cjfpfla5r000o8p9kh1ubsh5q"},{"post_id":"cjfpfla5p000k8p9k8km610xu","tag_id":"cjfpfla5m000e8p9kr4fm9p30","_id":"cjfpfla5s000q8p9ktdm3c6j1"},{"post_id":"cjfpfla5400078p9kxvdhvzwe","tag_id":"cjfpfla5m000e8p9kr4fm9p30","_id":"cjfpfla5u000v8p9kit1cd36y"},{"post_id":"cjfpfla5500098p9kt4pgu04i","tag_id":"cjfpfla5u000t8p9k9wlnq9ho","_id":"cjfpfla6000128p9k7lnqbufi"},{"post_id":"cjfpfla5a000c8p9kp4wfciq7","tag_id":"cjfpfla5m000e8p9kr4fm9p30","_id":"cjfpfla6300198p9k4vhf1v7v"},{"post_id":"cjfpfla6000148p9kuk4zgbz6","tag_id":"cjfpfla5m000e8p9kr4fm9p30","_id":"cjfpfla65001c8p9k9artuxj7"},{"post_id":"cjfpfla6200178p9ktcxdgkrj","tag_id":"cjfpfla5m000e8p9kr4fm9p30","_id":"cjfpfla67001h8p9kwe14ccov"},{"post_id":"cjfpfla5m000f8p9koau1982c","tag_id":"cjfpfla6100158p9ktlmts0ib","_id":"cjfpfla69001k8p9kno0mnzt5"},{"post_id":"cjfpfla64001b8p9ko5ulybji","tag_id":"cjfpfla5m000e8p9kr4fm9p30","_id":"cjfpfla6e001p8p9kmffn9yfx"},{"post_id":"cjfpfla5o000i8p9kxsio5h5v","tag_id":"cjfpfla5u000t8p9k9wlnq9ho","_id":"cjfpfla6f001s8p9kytkn6m1w"},{"post_id":"cjfpfla5r000p8p9kngnwqh64","tag_id":"cjfpfla6a001l8p9kzlfc1hlv","_id":"cjfpfla6k001x8p9kxwikhu8u"},{"post_id":"cjfpfla5s000r8p9kwj2pd311","tag_id":"cjfpfla6h001u8p9k1kinbwng","_id":"cjfpfla6n00258p9k6watxm0s"},{"post_id":"cjfpfla5v000w8p9kdc8cjy5s","tag_id":"cjfpfla6m00228p9kprwxf0oc","_id":"cjfpfla6s002d8p9kc9ut8uyc"},{"post_id":"cjfpfla5x000x8p9khct3lsff","tag_id":"cjfpfla6h001u8p9k1kinbwng","_id":"cjfpfla6v002k8p9kroeqv61l"},{"post_id":"cjfpfla5z00118p9kmu5ccuhu","tag_id":"cjfpfla6t002g8p9kfhbghjt7","_id":"cjfpfla6y002r8p9kv6wqmh31"},{"post_id":"cjfpfla66001f8p9k7be0af5h","tag_id":"cjfpfla6x002n8p9kz59zckjf","_id":"cjfpfla71002y8p9k3bd8u2sd"},{"post_id":"cjfpfla70002w8p9khpod2235","tag_id":"cjfpfla6m00228p9kprwxf0oc","_id":"cjfpfla7200318p9kwcc8ga41"},{"post_id":"cjfpfla7100308p9ku1xm1tyo","tag_id":"cjfpfla6m00228p9kprwxf0oc","_id":"cjfpfla7600368p9kjcbzdsne"},{"post_id":"cjfpfla68001j8p9ko7d1o7uv","tag_id":"cjfpfla6x002n8p9kz59zckjf","_id":"cjfpfla7700398p9k99xlcua9"},{"post_id":"cjfpfla7200348p9kvi4q8inc","tag_id":"cjfpfla6m00228p9kprwxf0oc","_id":"cjfpfla79003e8p9kewgsm8iq"},{"post_id":"cjfpfla7600388p9ksl6cedz0","tag_id":"cjfpfla6100158p9ktlmts0ib","_id":"cjfpfla7a003h8p9k3oizsojl"},{"post_id":"cjfpfla6b001n8p9knamman33","tag_id":"cjfpfla6x002n8p9kz59zckjf","_id":"cjfpfla7d003m8p9kc6vmqyo7"},{"post_id":"cjfpfla78003c8p9kc961w0i1","tag_id":"cjfpfla6m00228p9kprwxf0oc","_id":"cjfpfla7f003p8p9kzkzr1026"},{"post_id":"cjfpfla6e001r8p9kcodpllue","tag_id":"cjfpfla6h001u8p9k1kinbwng","_id":"cjfpfla7h003u8p9kbsga48bj"},{"post_id":"cjfpfla6i001v8p9kviplf684","tag_id":"cjfpfla6h001u8p9k1kinbwng","_id":"cjfpfla7k003x8p9k6i6b8uvy"},{"post_id":"cjfpfla7g003s8p9ka0l7tx10","tag_id":"cjfpfla6100158p9ktlmts0ib","_id":"cjfpfla7n00428p9ks8cs9tyi"},{"post_id":"cjfpfla6k001z8p9kq42tn3h6","tag_id":"cjfpfla7g003r8p9k7cbhf5qp","_id":"cjfpfla7o00458p9ktjo0pwg4"},{"post_id":"cjfpfla7l003z8p9k4hvrb4n3","tag_id":"cjfpfla6h001u8p9k1kinbwng","_id":"cjfpfla7q004a8p9k3mcvwna4"},{"post_id":"cjfpfla7n00448p9k749mn2om","tag_id":"cjfpfla5m000e8p9kr4fm9p30","_id":"cjfpfla7s004d8p9kzkr5dn6y"},{"post_id":"cjfpfla6l00218p9kjly0r2zg","tag_id":"cjfpfla7m00408p9k6cjk73ug","_id":"cjfpfla7t004h8p9kfkmfkm58"},{"post_id":"cjfpfla7r004c8p9kg4fd8j2n","tag_id":"cjfpfla6100158p9ktlmts0ib","_id":"cjfpfla7v004l8p9kr5sfnf9y"},{"post_id":"cjfpfla6n00268p9k9ns1bdcm","tag_id":"cjfpfla7q00488p9koorh9mu4","_id":"cjfpfla7z004p8p9kexmcf3j1"},{"post_id":"cjfpfla7t004f8p9ki7p6b3k3","tag_id":"cjfpfla6100158p9ktlmts0ib","_id":"cjfpfla80004s8p9kijhwb9f9"},{"post_id":"cjfpfla7u004k8p9kpkc54brh","tag_id":"cjfpfla6100158p9ktlmts0ib","_id":"cjfpfla82004v8p9kthod8kql"},{"post_id":"cjfpfla6o00288p9kt88tujla","tag_id":"cjfpfla7q00488p9koorh9mu4","_id":"cjfpfla83004z8p9kltzlbth9"},{"post_id":"cjfpfla7v004n8p9kns8fkz1i","tag_id":"cjfpfla6100158p9ktlmts0ib","_id":"cjfpfla8400528p9kb4fpwj5b"},{"post_id":"cjfpfla7z004r8p9kyjvr020o","tag_id":"cjfpfla6100158p9ktlmts0ib","_id":"cjfpfla8600568p9kyzd0m0ta"},{"post_id":"cjfpfla81004u8p9kb8njhcdi","tag_id":"cjfpfla6100158p9ktlmts0ib","_id":"cjfpfla8700598p9kdazm02xn"},{"post_id":"cjfpfla6p002c8p9ke55933tg","tag_id":"cjfpfla7y004o8p9k1f0pu7rn","_id":"cjfpfla8c005d8p9k186sidk6"},{"post_id":"cjfpfla82004y8p9k4upa7i5r","tag_id":"cjfpfla6100158p9ktlmts0ib","_id":"cjfpfla8d005g8p9kicswyrwg"},{"post_id":"cjfpfla8300518p9kme9ksgio","tag_id":"cjfpfla6100158p9ktlmts0ib","_id":"cjfpfla8f005k8p9kl4tyauba"},{"post_id":"cjfpfla6t002f8p9k8m9dewe2","tag_id":"cjfpfla7m00408p9k6cjk73ug","_id":"cjfpfla8g005n8p9kng30zmpj"},{"post_id":"cjfpfla8500558p9km0m7dkkm","tag_id":"cjfpfla6100158p9ktlmts0ib","_id":"cjfpfla8i005r8p9kq03utz7b"},{"post_id":"cjfpfla8600588p9kxn8z5kxx","tag_id":"cjfpfla6100158p9ktlmts0ib","_id":"cjfpfla8j005u8p9km6sev3he"},{"post_id":"cjfpfla6u002j8p9krz3m2pnd","tag_id":"cjfpfla8400548p9kxv1f13kl","_id":"cjfpfla8k005x8p9kdnb1vvm5"},{"post_id":"cjfpfla88005b8p9kchapn2n0","tag_id":"cjfpfla6100158p9ktlmts0ib","_id":"cjfpfla8k005z8p9kanvm47aq"},{"post_id":"cjfpfla8c005f8p9kn3di7fyj","tag_id":"cjfpfla6h001u8p9k1kinbwng","_id":"cjfpfla8l00628p9koijkeqxy"},{"post_id":"cjfpfla6v002m8p9k4mbs25q4","tag_id":"cjfpfla7m00408p9k6cjk73ug","_id":"cjfpfla8m00648p9kyseqkc7r"},{"post_id":"cjfpfla6x002q8p9kg6wev2du","tag_id":"cjfpfla7m00408p9k6cjk73ug","_id":"cjfpfla8m00678p9k9m2ke329"},{"post_id":"cjfpfla6y002t8p9k56mnpvbp","tag_id":"cjfpfla7m00408p9k6cjk73ug","_id":"cjfpfla8m00698p9k1ltd65o9"},{"post_id":"cjfpfla79003g8p9kz2pn7gfa","tag_id":"cjfpfla8j005w8p9kb4e2elvv","_id":"cjfpfla8n006c8p9k485kzexp"},{"post_id":"cjfpfla7b003k8p9ko4unyuff","tag_id":"cjfpfla8j005w8p9kb4e2elvv","_id":"cjfpfla8n006e8p9k2c44yvi5"},{"post_id":"cjfpfla7e003o8p9kjpg1lwr9","tag_id":"cjfpfla8m00668p9kpohdr0ry","_id":"cjfpfla8n006f8p9kub6p88q5"},{"post_id":"cjfpfla7i003w8p9kqdnyy5w4","tag_id":"cjfpfla8n006b8p9ku5f5cj1h","_id":"cjfpfla8n006h8p9kc1zw2i7o"},{"post_id":"cjfpfla7p00478p9kgrrsraqs","tag_id":"cjfpfla8n006g8p9km5szunaw","_id":"cjfpfla8o006j8p9k63imbq3g"},{"post_id":"cjfpfla8e005i8p9k9mq7ucxh","tag_id":"cjfpfla8m00668p9kpohdr0ry","_id":"cjfpfla8o006l8p9kdjyh47nw"},{"post_id":"cjfpfla8f005m8p9kqp9oq6xv","tag_id":"cjfpfla8o006k8p9kq8tvv5hn","_id":"cjfpfla8o006n8p9kohiid82i"},{"post_id":"cjfpfla8h005p8p9ku3pkjrn7","tag_id":"cjfpfla8o006m8p9k4ih6bu6f","_id":"cjfpfla8o006o8p9kcu0cuthc"}],"Tag":[{"name":"http","_id":"cjfpfla4y00048p9knoucmezp"},{"name":"others","_id":"cjfpfla5m000e8p9kr4fm9p30"},{"name":"数码产品","_id":"cjfpfla5u000t8p9k9wlnq9ho"},{"name":"算法","_id":"cjfpfla6100158p9ktlmts0ib"},{"name":"protocol","_id":"cjfpfla6a001l8p9kzlfc1hlv"},{"name":"java","_id":"cjfpfla6h001u8p9k1kinbwng"},{"name":"node","_id":"cjfpfla6m00228p9kprwxf0oc"},{"name":"book","_id":"cjfpfla6t002g8p9kfhbghjt7"},{"name":"hexo","_id":"cjfpfla6x002n8p9kz59zckjf"},{"name":"开发工具","_id":"cjfpfla7g003r8p9k7cbhf5qp"},{"name":"mysql","_id":"cjfpfla7m00408p9k6cjk73ug"},{"name":"mac","_id":"cjfpfla7q00488p9koorh9mu4"},{"name":"mongodb","_id":"cjfpfla7y004o8p9k1f0pu7rn"},{"name":"学习笔记","_id":"cjfpfla8400548p9kxv1f13kl"},{"name":"redis","_id":"cjfpfla8j005w8p9kb4e2elvv"},{"name":"linux","_id":"cjfpfla8m00668p9kpohdr0ry"},{"name":"nodejs","_id":"cjfpfla8n006b8p9ku5f5cj1h"},{"name":"algorithm","_id":"cjfpfla8n006g8p9km5szunaw"},{"name":"编程语言","_id":"cjfpfla8o006k8p9kq8tvv5hn"},{"name":"zookeeper","_id":"cjfpfla8o006m8p9k4ih6bu6f"}]}}