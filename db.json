{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"themes/spfk/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/css/loading-style.css","path":"css/loading-style.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/css/showshare.css","path":"css/showshare.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/coderwall.png","path":"img/coderwall.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/delicious.png","path":"img/delicious.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/douban.png","path":"img/douban.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/facebook.png","path":"img/facebook.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/github.png","path":"img/github.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/google.png","path":"img/google.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/linkedin.png","path":"img/linkedin.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/mail.png","path":"img/mail.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/pinboard.png","path":"img/pinboard.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/pinterest.png","path":"img/pinterest.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/qq.png","path":"img/qq.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/rss.png","path":"img/rss.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/twitter.png","path":"img/twitter.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/wechat.png","path":"img/wechat.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/weibo.png","path":"img/weibo.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/zhihu.png","path":"img/zhihu.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/TweenMax.js","path":"js/TweenMax.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/pace.js","path":"js/pace.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/TweenMax.min.js","path":"js/TweenMax.min.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/embed.js","path":"js/embed.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg.jpg","path":"background/bg.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/css/pace/pace-theme-flash.css","path":"css/pace/pace-theme-flash.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.css","path":"font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","path":"js/404/jquery.parallaxify-0.0.2.min.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-8.jpg","path":"background/bg-8.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/spfk/source/js/404/jquery-2.0.3.min.js","path":"js/404/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/img/bg.jpg","path":"img/bg.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-7.jpg","path":"background/bg-7.jpg","modified":1,"renderable":1},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/spfk/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"5bf02de266d56960527e1bdce73ae9f4a59d7177","modified":1478522401000},{"_id":"source/CNAME","hash":"c771e255330fda2bf36bc3b33bb0aa356d708e5a","modified":1479016085000},{"_id":"source/robots.txt","hash":"a85bb59ceced6bc34b825fa60dd3b5c2614ded1a","modified":1479016085000},{"_id":"themes/spfk/.gitignore","hash":"79b4a9ac435bc5833a0bc461ebacb10908b34ed3","modified":1460959402000},{"_id":"themes/spfk/README.md","hash":"70a2f5327a7f6759b1f786f2f17220a990b2e3ff","modified":1460959402000},{"_id":"themes/spfk/_config.yml","hash":"22e1d3be72df1c916f22fb7466b5b4eed4243556","modified":1480345120000},{"_id":"themes/spfk/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1460959402000},{"_id":"source/404/index.md","hash":"34edc9819d33d4d62ba6a8c228e01ee554de7887","modified":1479016085000},{"_id":"source/_posts/ajax-jsonp.md","hash":"3c73ef781b0ee5ef5deef83dba4b040eddf3e09b","modified":1480263360000},{"_id":"source/_posts/ajax-study.md","hash":"94b854065e843e00fac97ade9bd428d1f420be51","modified":1480263367000},{"_id":"source/_posts/best-js-snippet.md","hash":"a0b27e2245977a518b278c62b1be7fb3c8e08eed","modified":1479016085000},{"_id":"source/_posts/code-resource.md","hash":"6c4e46a0e292c42ff93678ffa8a40ccfc2473e03","modified":1479016085000},{"_id":"source/_posts/coder-study.md","hash":"fd016a2ee2501ce340bdf7cb55db2e363228490b","modified":1479016085000},{"_id":"source/_posts/dream.md","hash":"0cf74cad29282c2ed21baacdfb73eb872d0bb39b","modified":1479016085000},{"_id":"source/_posts/ghost-blog.md","hash":"a9078ead319d72de6404405e26f06cba68494954","modified":1479016085000},{"_id":"source/_posts/git-config-study.md","hash":"ac9e8483af58e3de5dc8baa93f1e7c876c9b8352","modified":1479016085000},{"_id":"source/_posts/git-svn.md","hash":"1c5db911eb38055d3c0d268bc8ecd2c047e1e820","modified":1479016085000},{"_id":"source/_posts/hello-world.md","hash":"02098c32734d3c1d3437d7fcd58f90d8c49e52c4","modified":1479016085000},{"_id":"source/_posts/hexo-coding-blog.md","hash":"a0929e65566bab8318b0aa63f1e336fa5361e1ef","modified":1480345735000},{"_id":"source/_posts/hexo-config.md","hash":"f8a82072b979f8849f5f094f15fae3598008f9f1","modified":1480346615000},{"_id":"source/_posts/hexo-githup-blog.md","hash":"f60f36c40d97781f28c264a772da31e7858e7440","modified":1480345819000},{"_id":"source/_posts/js-study.md","hash":"7849e1c78836ca1a60987b8d95dad09bd9d3c710","modified":1479016886000},{"_id":"source/_posts/java-date.md","hash":"c4428e850255186d160b79dd8b9cc1ecb6c179ad","modified":1479016902000},{"_id":"source/_posts/mac-dev.md","hash":"99974c07e3fa023e8e028d16ab19dbd3bf50e706","modified":1480235525000},{"_id":"source/_posts/mac-mysql-unicode.md","hash":"e94fc181a12708bd45fc37411d803394506fa934","modified":1479016085000},{"_id":"source/_posts/mongodb-study.md","hash":"e9f78ae33a5e2e4d6d39230fbe7d59e391a5b37d","modified":1479016881000},{"_id":"source/_posts/mysql-optimize.md","hash":"f6add3d859dbb3c3fc0d18a5cbd95739d3a2a18c","modified":1479016085000},{"_id":"source/_posts/mysql-study.md","hash":"504abcc41233c035f7cac9ae3b9711557b046a01","modified":1479016085000},{"_id":"source/_posts/node-develop.md","hash":"01bb7774bb1022ff9df3a1900a7b24aee3c1f659","modified":1479016085000},{"_id":"source/_posts/node-notes.md","hash":"90cc52e0d4bef974694cc37e09373898bafbaa3c","modified":1480231159000},{"_id":"source/_posts/node-study.md","hash":"8f50c992938774732d6465089717ce1e3229b4ec","modified":1479016869000},{"_id":"source/_posts/npm-detail.md","hash":"776870d6768474d7de22b31237c93dfff8884c09","modified":1480231131000},{"_id":"source/_posts/redis-study.md","hash":"cb03d1bb4dd700d7c0737a76c2bd8ac242367dc8","modified":1479016085000},{"_id":"source/_posts/server-config.md","hash":"addfdee38f0f9e28035d8e672b834d10c16734ea","modified":1480338386000},{"_id":"source/_posts/sort-study.md","hash":"f3d648a687e8063dcd497148c47dbdb5369663ba","modified":1479016844000},{"_id":"source/_posts/study-goals.md","hash":"9babc34893ad330ed5ef1a3ed194214e710a5a5f","modified":1479016849000},{"_id":"source/_posts/sublime-config.md","hash":"2d2d0d13c8934fb1083d8417791f8511cb6e101f","modified":1479016855000},{"_id":"source/_posts/ubuntu-dev-config.md","hash":"0d4324815d085b5387c6a19627f2bbce5c560bf3","modified":1479016860000},{"_id":"source/about/index.md","hash":"bfa41ca85c97aba61cadc96c391dc674c5c445a0","modified":1480345533000},{"_id":"source/tags/index.md","hash":"fef5870e5133fd9c32c9dad0fb6e61365a7c14e1","modified":1479016085000},{"_id":"themes/spfk/languages/de.yml","hash":"bc80f78f61c3d7af9652e6aa6fc3e4ff39b0c8d3","modified":1460959402000},{"_id":"themes/spfk/languages/default.yml","hash":"f0a7a032b31555c9ec05a711e1ac19bb07724708","modified":1460959402000},{"_id":"themes/spfk/languages/en.yml","hash":"a093e794aef63ec9e9e9ef490cf7e4474e45e59f","modified":1460959402000},{"_id":"themes/spfk/languages/fr-FR.yml","hash":"04b9a0d80d88d01e039e8077afe88f741e9620ba","modified":1460959402000},{"_id":"themes/spfk/languages/ru.yml","hash":"62f84ea82a696060c481fc22d4742e6201bb9bdc","modified":1460959402000},{"_id":"themes/spfk/languages/zh-Hans.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1460959402000},{"_id":"themes/spfk/languages/zh-hk.yml","hash":"e702fc43556e54c396917bdf7c869d528742e28b","modified":1460959402000},{"_id":"themes/spfk/languages/zh-tw.yml","hash":"005559baa96b7bb34e1efe6b031829a95d58d5e0","modified":1460959402000},{"_id":"themes/spfk/languages/zh.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1460959402000},{"_id":"themes/spfk/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1460959402000},{"_id":"themes/spfk/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1460959402000},{"_id":"themes/spfk/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1460959402000},{"_id":"themes/spfk/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1460959402000},{"_id":"themes/spfk/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1460959402000},{"_id":"themes/spfk/layout/plugins.swig","hash":"4c978bfbde006b6e3b82f4931541fada9381806d","modified":1460959402000},{"_id":"themes/spfk/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1460959402000},{"_id":"themes/spfk/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1460959402000},{"_id":"themes/spfk/source/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/after-footer.ejs","hash":"d539fc1549e82f92a04ac9b9f3260865ac74331b","modified":1479008336000},{"_id":"themes/spfk/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/archive.ejs","hash":"5754529ad4b3f7728558f1cedeac919148839039","modified":1479015173000},{"_id":"themes/spfk/layout/_partial/article.ejs","hash":"57f4428d1b526a174edb985d8c82f6b86ce0b623","modified":1479015189000},{"_id":"themes/spfk/layout/_partial/background.ejs","hash":"054cbde2b775dd05f942e62d3ba5374ff8c71fea","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/bodybackground.ejs","hash":"ad24b949bbe4fadf7549be3d1df76fc7444d1adc","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/case.swig","hash":"7d7985459acc9075a9fa8fb3559b1b04d66acad8","modified":1479014918000},{"_id":"themes/spfk/layout/_partial/footer.ejs","hash":"6f9d3caf983556065bd14b7c717a5381da604a12","modified":1480242286000},{"_id":"themes/spfk/layout/_partial/head.ejs","hash":"45c969fbd9acce7a3efcc4af87014d829bbce1e2","modified":1480260096000},{"_id":"themes/spfk/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/hide-labels.ejs","hash":"cf8ad5201c1f0729203acd0e9258a4677dbc164b","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/left-col.ejs","hash":"7d7b067745e42ad0891d73a02482bd3f82de6dbd","modified":1479014752000},{"_id":"themes/spfk/layout/_partial/mathjax.ejs","hash":"7be03a92dabeb2f94bf0e731d12a1c1146d736dd","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/mobile-nav.ejs","hash":"d4565d52e6536465c740ad8dc5737c2e8eed9f05","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/page.ejs","hash":"eae6f792026f76100e02653bd7f488b03e9bf10b","modified":1461253646000},{"_id":"themes/spfk/layout/_partial/plugin.swig","hash":"b8539477a33580d9e493365f16e7b7d40afc5e5c","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/post-nav-button.ejs","hash":"67990b7bfd26a6a22e16075a774875facaa3aa75","modified":1479014995000},{"_id":"themes/spfk/layout/_partial/scrolling-button.ejs","hash":"40573748d4a14530e6052836ef8a7063e6486d45","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/theme.swig","hash":"96ae0d2429f712faf2964ed74fbeffc395accac2","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/toc.ejs","hash":"8081ae5881736d72c3bf126b165efe20b6b5a93b","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/work.swig","hash":"65a961293ae6ad0d226fa41cd73dc343327b5043","modified":1479015114000},{"_id":"themes/spfk/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1460959402000},{"_id":"themes/spfk/source/css/_variables.styl","hash":"11fe650f1f335795ab971965c3ec0ed36e211956","modified":1460959402000},{"_id":"themes/spfk/source/css/loading-style.css","hash":"ef12c256b59ed836994afed35bf02556248133ce","modified":1460959402000},{"_id":"themes/spfk/source/css/showshare.css","hash":"2873b428f3c7d8aaeb83dc2b92722242407a147b","modified":1480330781000},{"_id":"themes/spfk/source/css/style.styl","hash":"7387fe6ae17026a37dd7f2615fae966324cd05ee","modified":1460962820000},{"_id":"themes/spfk/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1460959402000},{"_id":"themes/spfk/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1460959402000},{"_id":"themes/spfk/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1460959402000},{"_id":"themes/spfk/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1460959402000},{"_id":"themes/spfk/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1460959402000},{"_id":"themes/spfk/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1460959402000},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.css","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1460959402000},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1460959402000},{"_id":"themes/spfk/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1460959402000},{"_id":"themes/spfk/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1460959402000},{"_id":"themes/spfk/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1460959402000},{"_id":"themes/spfk/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1460959402000},{"_id":"themes/spfk/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1460959402000},{"_id":"themes/spfk/source/img/favicon.png","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1460959402000},{"_id":"themes/spfk/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1460959402000},{"_id":"themes/spfk/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1460959402000},{"_id":"themes/spfk/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1460959402000},{"_id":"themes/spfk/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1460959402000},{"_id":"themes/spfk/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1460959402000},{"_id":"themes/spfk/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1460959402000},{"_id":"themes/spfk/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1460959402000},{"_id":"themes/spfk/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1460959402000},{"_id":"themes/spfk/source/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1460959402000},{"_id":"themes/spfk/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1460959402000},{"_id":"themes/spfk/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1460959402000},{"_id":"themes/spfk/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1460959402000},{"_id":"themes/spfk/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1460959402000},{"_id":"themes/spfk/source/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1460959402000},{"_id":"themes/spfk/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1460959402000},{"_id":"themes/spfk/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1460959402000},{"_id":"themes/spfk/source/js/TweenMax.js","hash":"1f60b6ccd135d181b78254468ffda1c7b9d51556","modified":1460959402000},{"_id":"themes/spfk/source/js/clipboard.min.js","hash":"fe53ec94d317bae8f12d1a5eee23040bf02680bb","modified":1460959402000},{"_id":"themes/spfk/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1460959402000},{"_id":"themes/spfk/source/js/jquery.lazyload.js","hash":"9c34c37b4dca82386648d364da913153d1db902e","modified":1460959402000},{"_id":"themes/spfk/source/js/main.js","hash":"0576a737975026a9102689a4be4832fa82bf1af2","modified":1461253324000},{"_id":"themes/spfk/source/js/mobile.js","hash":"baed8d560883c842c2b8c3e0fadcf359f97140d0","modified":1460959402000},{"_id":"themes/spfk/source/js/pace.js","hash":"d9cfcb7e1fc4b827a64491726c9a78b9886b3793","modified":1460959402000},{"_id":"themes/spfk/source/js/pc.js","hash":"482dc45356756150f0bee80c8d9a0987965b89ea","modified":1460959402000},{"_id":"themes/spfk/source/js/plugins.js","hash":"63e93eee75d6a83717af73dcc9829983123e01c1","modified":1460959402000},{"_id":"themes/spfk/source/js/TweenMax.min.js","hash":"2207f42520d5c548702511180e500c3e077605f8","modified":1460959402000},{"_id":"themes/spfk/source/js/embed.js","hash":"0c4047c10bffdc5289f4e61700cc7dfbb56ccb0d","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/analytics/baidu-analytics.ejs","hash":"e72a08ad3f7b43e7e9f09b005523cdc2f38356ac","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/analytics/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/comments/disqus.ejs","hash":"2e5cad68bc59190b4158f4ab1879a222ca49a0d2","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/comments/duoshuo.ejs","hash":"92613fae2cbd8f14cc7527b6161c6f34cdf16fc1","modified":1460962594000},{"_id":"themes/spfk/layout/_partial/comments/youyan.ejs","hash":"142e1bb357d738663655ddab25f75e85e20345e4","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/post/TipTitle.ejs","hash":"a1b64506cd6aba3cd8ab48cf3ee0d6477123d6b1","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/post/date.ejs","hash":"819b5bb409694b4187482b2e2b5928ac9d7b2832","modified":1479015016000},{"_id":"themes/spfk/layout/_partial/post/loading.ejs","hash":"ba96f9dd60069b3ac2a332c45b1df82c0bf68f21","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/post/nav.ejs","hash":"f9eb5dab0a493633ca0cd3bf4b2b850b668b5ad8","modified":1479015050000},{"_id":"themes/spfk/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/post/title.ejs","hash":"c4ca9fd95cb9104b46f9c95ce25bcd99c4671d9e","modified":1479015075000},{"_id":"themes/spfk/layout/_partial/share/baidu-share.ejs","hash":"136d1ffb6176e220e034a601df9c86f005fd9b4f","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/share/share.ejs","hash":"bfac451ed8d632dbba84673691cc5ea3315c1469","modified":1460959402000},{"_id":"themes/spfk/layout/_partial/share/showshare.ejs","hash":"d38ea660d51c8c58aa8ad20f225949863152326a","modified":1460959402000},{"_id":"themes/spfk/source/background/bg-1.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1460959402000},{"_id":"themes/spfk/source/background/bg-3.jpg","hash":"f1347eddd07bdae93ab6bebad8627eddc5baeb44","modified":1460959402000},{"_id":"themes/spfk/source/background/bg-6.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1460959402000},{"_id":"themes/spfk/source/background/bg.jpg","hash":"025104fea158c2f290a05c7113107dab43f491e5","modified":1460959402000},{"_id":"themes/spfk/source/css/_partial/archive.styl","hash":"209c5f47622ab78b836155530a0cf8ccaa472fe2","modified":1480334466000},{"_id":"themes/spfk/source/css/_partial/article.styl","hash":"00faadabd414205e3e8bf232c196889503fffb95","modified":1480347572000},{"_id":"themes/spfk/source/css/_partial/baidushare.styl","hash":"cb3de96a10bfa233bb942411738c5552b91c97e0","modified":1480249488000},{"_id":"themes/spfk/source/css/_partial/footer.styl","hash":"44be8d66c7698d4c162bc54b0eb8109ee300fe29","modified":1480263951000},{"_id":"themes/spfk/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1460959402000},{"_id":"themes/spfk/source/css/_partial/highlight.styl","hash":"113a76f3ff97de7ee61d8871e6f066322cd0f163","modified":1480347426000},{"_id":"themes/spfk/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1460959402000},{"_id":"themes/spfk/source/css/_partial/main.styl","hash":"d139d2f96e90e2e0e101abe734e033ff2bfacd1b","modified":1460959402000},{"_id":"themes/spfk/source/css/_partial/mains.styl","hash":"85cacbe7593c829d316ea3cafa18236f223f3d14","modified":1480242789000},{"_id":"themes/spfk/source/css/_partial/mobile-slider.styl","hash":"211a4286f60751c372090fa96f384521e2ce352c","modified":1460959402000},{"_id":"themes/spfk/source/css/_partial/mobile.styl","hash":"34e57e1e364830cf63d030a222c1f6f0b417ebe0","modified":1460959402000},{"_id":"themes/spfk/source/css/_partial/page.styl","hash":"fd30cf933e39ee348e69cc8458455cc4f622b7e9","modified":1460959402000},{"_id":"themes/spfk/source/css/_partial/plugins.styl","hash":"98b6db59fbedee6f2a35b76624cce7b5f8ffce94","modified":1460959402000},{"_id":"themes/spfk/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1460959402000},{"_id":"themes/spfk/source/css/_partial/share.styl","hash":"3cfc59278c21b504f8f633e08767a449e03af8d0","modified":1460959402000},{"_id":"themes/spfk/source/css/_partial/tagcloud.styl","hash":"fbfc24f48dbdd193cc7e916f5ae00e6cdcf22def","modified":1460959402000},{"_id":"themes/spfk/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1460959402000},{"_id":"themes/spfk/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1460959402000},{"_id":"themes/spfk/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1460959402000},{"_id":"themes/spfk/source/css/pace/pace-theme-flash.css","hash":"65ce5d4aac09e570914a075a4fd17941c9a51c47","modified":1460959402000},{"_id":"themes/spfk/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1460959402000},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1460959402000},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1460959402000},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1460959402000},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1460959402000},{"_id":"themes/spfk/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1460959402000},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.css","hash":"6d39a08bc85169eca450978f895f85d5d3451c0a","modified":1460959402000},{"_id":"themes/spfk/source/font-awesome/css/font-awesome.min.css","hash":"624e4a106f0cf385ff4bd6a65c52cecd84f42ef9","modified":1460959402000},{"_id":"themes/spfk/source/js/404/jquery.parallaxify-0.0.2.min.js","hash":"4bbd22670cd359d05e78c186a98288fb21fbf092","modified":1460959402000},{"_id":"themes/spfk/source/background/bg-8.jpg","hash":"ce5760578eb814fe951c56200e81c6f47b6468d4","modified":1460959402000},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1460959402000},{"_id":"themes/spfk/source/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1460959402000},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1460959402000},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1460959402000},{"_id":"themes/spfk/source/img/avatar.png","hash":"31f8c6a64a3ccaa454d41fc4eb074aeb94e6cbde","modified":1460901150000},{"_id":"themes/spfk/source/js/404/jquery-2.0.3.min.js","hash":"bbc61d6a6dd66b913c6f237f29475a889fbe3015","modified":1460959402000},{"_id":"themes/spfk/source/css/_partial/customise/blockquote.styl","hash":"edfed5def2ad4f7fdad0eb50b26a51c3b010c2b1","modified":1460959402000},{"_id":"themes/spfk/source/css/_partial/customise/code-block.styl","hash":"048e5fab5e8b11e4e3bdbb72591de49f9075c5fa","modified":1480250113000},{"_id":"themes/spfk/source/css/_partial/customise/inline-code.styl","hash":"aedbcd697c9fbaeeb93c068be3db771c41feba0d","modified":1460959402000},{"_id":"themes/spfk/source/css/_partial/post/youyan.styl","hash":"9076b0d3c231e16b8a1d7f834e62a98d843edd32","modified":1460959402000},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1460959402000},{"_id":"themes/spfk/source/background/bg-4.jpg","hash":"dbecc189e28d00fa23e397eb512e039c2ff03c87","modified":1460959402000},{"_id":"themes/spfk/source/background/bg-5.jpg","hash":"dfb23c1c3cf8a3dcb8dc0ea10cf06501c151a2a2","modified":1460959402000},{"_id":"themes/spfk/source/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1460959402000},{"_id":"themes/spfk/source/background/bg-7.jpg","hash":"d7237c6014e28c90f53287f48f718d0759af104b","modified":1460959402000},{"_id":"themes/spfk/source/font-awesome/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1460959402000},{"_id":"themes/spfk/source/background/bg-2.jpg","hash":"40a6db13e9c461f80e2c4efee7fb63bbd594e751","modified":1460959402000},{"_id":"public/urls.txt","hash":"94f0976d1b4b6737767f519f7194102766354199","modified":1480348337514},{"_id":"public/baidusitemap.xml","hash":"4be8534b7bcef8e5e1b29d15718b27682a5d45af","modified":1480348337541},{"_id":"public/atom.xml","hash":"109709773600f1359cebd1a36feece1c252643a3","modified":1480348337918},{"_id":"public/sitemap.xml","hash":"eff4da3e7dee43bd58a6a72052533b7ce6c56cd5","modified":1480348337936},{"_id":"public/archives/2016/page/4/index.html","hash":"40b424f83b7e619e58a401c11b6ef2d533267e40","modified":1480348337949},{"_id":"public/archives/2016/05/page/2/index.html","hash":"583e2bb14a2e4e9443149c2d4ee463db977ecae9","modified":1480348337949},{"_id":"public/archives/2016/06/index.html","hash":"bf9eccfdfd494458de7b1fdb33b59f2ffb7ab982","modified":1480348337949},{"_id":"public/categories/开发工具/page/2/index.html","hash":"f725a9777dcd6fad14910f88613ce6db6465935d","modified":1480348337949},{"_id":"public/categories/others/index.html","hash":"f9646f1222028dd68f8efdb84bb42418f4b4974b","modified":1480348337949},{"_id":"public/categories/学习笔记/index.html","hash":"878b37883b1affeb6a573718a5fb1b284842aab2","modified":1480348337949},{"_id":"public/categories/个人随笔/index.html","hash":"a46eedb4bfb74d518d405787ab63254af531867e","modified":1480348337949},{"_id":"public/categories/算法/index.html","hash":"b1de40ae79ba54860c5c28c9cfd8b3c5cbee51b6","modified":1480348337949},{"_id":"public/tags/http/index.html","hash":"40b9aa450214df4a9d17912d0a72ecc789234f7a","modified":1480348337949},{"_id":"public/tags/others/page/2/index.html","hash":"97142700034d7f088ebd2b8f8cbd43f03545f5a3","modified":1480348337949},{"_id":"public/tags/开发工具/index.html","hash":"86704bbb46929acb91afa274b8cfb9114d1b6a29","modified":1480348337950},{"_id":"public/tags/javacript/index.html","hash":"7ce2072a24f84ce56a1c679b7395c771de78d515","modified":1480348337950},{"_id":"public/tags/java/index.html","hash":"d22ad44b7ef992c352019dec60124cd7ca6650be","modified":1480348337950},{"_id":"public/tags/mac/index.html","hash":"430a77290d408cd09428177426904a0b0d9ab5c5","modified":1480348337950},{"_id":"public/tags/mongodb/index.html","hash":"141fcd14e5ca69ec14533c8c5fdf3187d7300871","modified":1480348337950},{"_id":"public/tags/redis/index.html","hash":"14d5633c18309a32fc85f90015a5fcbcaa3c49d5","modified":1480348337950},{"_id":"public/tags/linux/index.html","hash":"3e29cece093138dcae0770de99c56ec8020f8bcc","modified":1480348337950},{"_id":"public/404.html","hash":"58ee60e4b82afed887e0896308ffb185ba856ce5","modified":1480348337950},{"_id":"public/about/index.html","hash":"2121850f88c62f4193a3a78b9afca333279b6853","modified":1480348337950},{"_id":"public/tags/index.html","hash":"8888fe799101e93934ce742d86dc4f5f0420018a","modified":1480348337950},{"_id":"public/hexo-config.html","hash":"2599bba5ba997d1a4ad1739518dcfcbf9a324388","modified":1480348337950},{"_id":"public/server-config.html","hash":"2358f980fc3469c646aae38977c09e064c52a15c","modified":1480348337950},{"_id":"public/mac-dev.html","hash":"3cf35e8bd4654dd70d4b7e694b2212d044064d04","modified":1480348337950},{"_id":"public/npm-detail.html","hash":"ac4ad8ac855238bce7eb3d35620aec7ea0659ac3","modified":1480348337950},{"_id":"public/node-notes.html","hash":"61cdbe0e99f53680b2ef259c86a6838eb74bf24a","modified":1480348337950},{"_id":"public/best-js-snippet.html","hash":"08b72d3d51e7a811b730dc84c953eb883f630325","modified":1480348337951},{"_id":"public/code-resource.html","hash":"1cb52dabb08613030eb0fe783c25f0f0188f91ea","modified":1480348337951},{"_id":"public/ajax-jsonp.html","hash":"68dbadcc6a1cd4411bef8618ae8004fbef569b77","modified":1480348337951},{"_id":"public/ajax-study.html","hash":"3c94336bddb29c0cb04090f082a53396d1bde595","modified":1480348337951},{"_id":"public/mysql-optimize.html","hash":"80e195aeabf2b747b0e956eeee83cc4e2bbaa3ea","modified":1480348337951},{"_id":"public/mac-mysql-unicode.html","hash":"3703d64c48ecde07b7b95b7c673948c8baab9e5d","modified":1480348337951},{"_id":"public/mysql-study.html","hash":"d1f3cb13cbd0f0160eb74c66e5f51e018ad35eff","modified":1480348337951},{"_id":"public/node-develop.html","hash":"540977d2a286c25338963cb8409e957682d6d253","modified":1480348337951},{"_id":"public/redis-study.html","hash":"f46defbc1690bdc9827615758be26b4d71cf868e","modified":1480348337951},{"_id":"public/git-svn.html","hash":"e80d51cbfde8f1e104e12da029f0a3ca53db02fb","modified":1480348337951},{"_id":"public/java-date.html","hash":"d091bad6bd2230712e3e99461cf8ac99191befbf","modified":1480348337951},{"_id":"public/study-goals.html","hash":"969a763a67f67738299baf6c393583f728bb2191","modified":1480348337951},{"_id":"public/ghost-blog.html","hash":"884e783473264d8c200a7b3c6c30da78007a47cb","modified":1480348337951},{"_id":"public/sort-study.html","hash":"70a3144dc8b8ef4d8a0bbb4123f4e0d403ae882b","modified":1480348337951},{"_id":"public/git-config-study.html","hash":"a5e1b1f7475296ede49ded20b60936a03acc2563","modified":1480348337951},{"_id":"public/ubuntu-dev-config.html","hash":"68fadd19e3f1fbd2d587a8f311fa325ddb758dd6","modified":1480348337952},{"_id":"public/sublime-config.html","hash":"f842ebbd494a23fcd738f32a8d6309977130e9f7","modified":1480348337952},{"_id":"public/dream.html","hash":"31cb89748b48d11ffc9583280c91b995cf9d319c","modified":1480348337952},{"_id":"public/js-study.html","hash":"1d6c17b43020bb290f5779b8d98095f845b3010e","modified":1480348337952},{"_id":"public/hexo-coding-blog.html","hash":"1bd8b058d72b7a4b04def0d4117a6e0127f852db","modified":1480348337952},{"_id":"public/coder-study.html","hash":"a03c7aa7344c8247eef032faf2e345bf0b5b983d","modified":1480348337952},{"_id":"public/hexo-githup-blog.html","hash":"5af0aac4b2dc219272a39bb2a8dfbdc542d9fa17","modified":1480348337952},{"_id":"public/mongodb-study.html","hash":"5afbec1396c4db2fa1c2759825d474839496fcd8","modified":1480348337952},{"_id":"public/node-study.html","hash":"fbc1836aad6c67e4d0b71e0119f1e858c079d9a0","modified":1480348337952},{"_id":"public/hello-world.html","hash":"4a013f1076bd7e3ba248fe9ef60afd25e0b35eca","modified":1480348337952},{"_id":"public/archives/index.html","hash":"7bd8d09c2a4afdcecc4a4bbd931386c01bd30cf8","modified":1480348337952},{"_id":"public/archives/page/2/index.html","hash":"d9b188ee7192a2cf46ed06e2ca5e5ed3aff83e9b","modified":1480348337952},{"_id":"public/archives/page/3/index.html","hash":"bd3536fb6685ab660b7dc828fde53bfc7b27d473","modified":1480348337952},{"_id":"public/archives/page/4/index.html","hash":"b76675823a6d5bdd0f60a9f8da73ab0ab0f787d2","modified":1480348337953},{"_id":"public/archives/2015/index.html","hash":"a3c0c746d2d2ef06ada08b46ffd67534a8b50a94","modified":1480348337953},{"_id":"public/archives/2015/12/index.html","hash":"fd44806c82c974fdea01994ee27030b109cc5f95","modified":1480348337953},{"_id":"public/archives/2016/index.html","hash":"071c7fd48baf8e4366331904c3e88764d4b95cae","modified":1480348337953},{"_id":"public/archives/2016/page/2/index.html","hash":"0d5c6012be0bc8e86d6a8209d1669398ab553dd1","modified":1480348337953},{"_id":"public/archives/2016/page/3/index.html","hash":"063441b3fda1eb373bd6bcc7f14b3d519d6443f2","modified":1480348337953},{"_id":"public/archives/2016/04/index.html","hash":"c77f8e27774e868c8d4ba493d122a8e4709d8bd1","modified":1480348337953},{"_id":"public/archives/2016/05/index.html","hash":"3c01961f9dbfabbabfb26b93ee4d4e7f7e47b131","modified":1480348337953},{"_id":"public/archives/2016/07/index.html","hash":"e84c626c755a9ac1ae9d16b623e3a677f047b6e2","modified":1480348337953},{"_id":"public/archives/2016/11/index.html","hash":"fcfa5bf7fdc55b856bc5b1587d01c5c26462bcf8","modified":1480348337954},{"_id":"public/categories/编程语言/index.html","hash":"998241f914e6104cc371cba8f0db12dd67f86536","modified":1480348337954},{"_id":"public/categories/开发工具/index.html","hash":"435baa8a693d7a25792f5930e1b4eb5c35c48fb8","modified":1480348337954},{"_id":"public/categories/数据库/index.html","hash":"23d62e9e01258b1ccce72f14fcb8e0a0a9d1b9a3","modified":1480348337954},{"_id":"public/index.html","hash":"dacae538006eae3e456734b4619ce67fec51871f","modified":1480348337954},{"_id":"public/page/2/index.html","hash":"a436d0d975a1cfba62f9d19824c13652c5a232d5","modified":1480348337954},{"_id":"public/page/3/index.html","hash":"6139cb5c00d6fd5ca7f24ca3720f457e9b097f82","modified":1480348337954},{"_id":"public/page/4/index.html","hash":"df6b5931729edc51fdedb0315ad4bab325ddd531","modified":1480348337954},{"_id":"public/tags/others/index.html","hash":"0963ef0591110b2184ceb7737a251f96df714975","modified":1480348337955},{"_id":"public/tags/hexo/index.html","hash":"29d48362781c77044f976fb59b1c57275da41714","modified":1480348337955},{"_id":"public/tags/mysql/index.html","hash":"76da359a9e47433c4153115348ae0c183ee67879","modified":1480348337955},{"_id":"public/tags/node/index.html","hash":"b2672086f49287f90a2db83c52d45cb022baf3b1","modified":1480348337955},{"_id":"public/CNAME","hash":"c771e255330fda2bf36bc3b33bb0aa356d708e5a","modified":1480348337979},{"_id":"public/robots.txt","hash":"a85bb59ceced6bc34b825fa60dd3b5c2614ded1a","modified":1480348337980},{"_id":"public/apple-touch-icon.png","hash":"c36a373c7830d61d1ce092bd5a88d0e9b54212fd","modified":1480348337980},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480348337980},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480348337980},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480348337980},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480348337980},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480348337981},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480348337981},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1480348337981},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1480348337981},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1480348337981},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1480348337981},{"_id":"public/img/favicon.png","hash":"5b4e9c94ff3396db5b074b69c1aa5bb909aba825","modified":1480348337981},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1480348337981},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1480348337982},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1480348337982},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1480348337982},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1480348337982},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1480348337982},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1480348337982},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1480348337982},{"_id":"public/img/qq.png","hash":"fd741764c5528fe371f053beac99839a97900eef","modified":1480348337982},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1480348337982},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1480348337982},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1480348337982},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1480348337983},{"_id":"public/img/wechat.png","hash":"7ca41b6e32ca4dac419225261ab4fee5a88f73a9","modified":1480348337983},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1480348337983},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1480348337983},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1480348337983},{"_id":"public/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1480348339437},{"_id":"public/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1480348339441},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1480348339441},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1480348339441},{"_id":"public/css/loading-style.css","hash":"1f67362d809e85edc9f122db7bc3711af1ed1d8b","modified":1480348339452},{"_id":"public/css/showshare.css","hash":"68c0f13ddbc6363bdf43d2a01357e39977068b2c","modified":1480348339452},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1480348339452},{"_id":"public/js/TweenMax.js","hash":"0ba64564a4fde4085fa3971dd53b7d64a41751e1","modified":1480348339452},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1480348339453},{"_id":"public/js/clipboard.min.js","hash":"c13b4bb8fee46447284590d2afc0efca0ea3cb7b","modified":1480348339453},{"_id":"public/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1480348339453},{"_id":"public/js/main.js","hash":"8472add3bb0cf6feb4a323b89de6e77bcb3bb1cc","modified":1480348339453},{"_id":"public/js/mobile.js","hash":"d3847e5bcaf39108931724ecb02770c62b10889f","modified":1480348339453},{"_id":"public/js/pc.js","hash":"ab375af6e3bcd054b1e87e1a8dcd3d7d25c2db40","modified":1480348339453},{"_id":"public/js/plugins.js","hash":"c1cf96b2d852b5803228a34d99014b005623bc06","modified":1480348339453},{"_id":"public/css/pace/pace-theme-flash.css","hash":"508bce8b59a1fbc1f1443a7c4ab3b026e5517dab","modified":1480348339453},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1480348339453},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1480348339453},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1480348339453},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1480348339453},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1480348339454},{"_id":"public/js/404/jquery.parallaxify-0.0.2.min.js","hash":"b97e2dfcb210b76f7bdd6e1800b26128bf4fad99","modified":1480348339455},{"_id":"public/css/style.css","hash":"18023b7b92d6a154ad0e15acf0dd2783fba80168","modified":1480348339455},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1480348339455},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1480348339456},{"_id":"public/js/pace.js","hash":"b49c10cd65d9488f7338e3c778e55ac6628650f3","modified":1480348339456},{"_id":"public/js/TweenMax.min.js","hash":"eaa4e4a08400da3f22dedda706ba56cdce5b0b7a","modified":1480348339456},{"_id":"public/js/embed.js","hash":"8d2d4a812ab639bc02fdd8749d3a39f6b9406c54","modified":1480348339456},{"_id":"public/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1480348339456},{"_id":"public/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1480348339457},{"_id":"public/js/404/jquery-2.0.3.min.js","hash":"fbf9c77d0c4e3c34a485980c1e5316b6212160c8","modified":1480348339457},{"_id":"public/background/bg-1.jpg","hash":"9d428ac435198b2a0107102a2e9ae71e53afe364","modified":1480348339457},{"_id":"public/background/bg-3.jpg","hash":"f1347eddd07bdae93ab6bebad8627eddc5baeb44","modified":1480348339457},{"_id":"public/background/bg-6.jpg","hash":"d69a0447e91f62977b144737f08620d77037c76a","modified":1480348339457},{"_id":"public/background/bg.jpg","hash":"025104fea158c2f290a05c7113107dab43f491e5","modified":1480348339457},{"_id":"public/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1480348339457},{"_id":"public/background/bg-8.jpg","hash":"ce5760578eb814fe951c56200e81c6f47b6468d4","modified":1480348339460},{"_id":"public/img/avatar.png","hash":"31f8c6a64a3ccaa454d41fc4eb074aeb94e6cbde","modified":1480348339460},{"_id":"public/background/bg-4.jpg","hash":"dbecc189e28d00fa23e397eb512e039c2ff03c87","modified":1480348339470},{"_id":"public/font-awesome/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1480348339470},{"_id":"public/img/bg.jpg","hash":"1bcba3c6348e2190a42bff762800bf846cf9239c","modified":1480348339476},{"_id":"public/background/bg-5.jpg","hash":"dfb23c1c3cf8a3dcb8dc0ea10cf06501c151a2a2","modified":1480348339476},{"_id":"public/background/bg-7.jpg","hash":"d7237c6014e28c90f53287f48f718d0759af104b","modified":1480348339479},{"_id":"public/background/bg-2.jpg","hash":"40a6db13e9c461f80e2c4efee7fb63bbd594e751","modified":1480348339480}],"Category":[{"name":"编程语言","_id":"ciw296d7m0005ohzj3plknt0u"},{"name":"开发工具","_id":"ciw296d80000gohzjthc7hi4u"},{"name":"others","_id":"ciw296d83000nohzjak0sflt0"},{"name":"个人随笔","_id":"ciw296d87000vohzj7wk44vx3"},{"name":"学习笔记","_id":"ciw296d8i001aohzjo8vobi4b"},{"name":"数据库","_id":"ciw296d8t001pohzjxtyw6z6p"},{"name":"算法","_id":"ciw296d9h002iohzjtiy3sp9a"}],"Data":[],"Page":[{"title":"404 Not Found：该页无法显示","comments":0,"_content":"\n<style type=\"text/css\">\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.search2 {\n\t\theight: 2.2em;\n\t\tfont-size: 1em;\n\t\twidth: 50%;\n\t\tmargin: auto 24%;\n\t\tcolor: #727272;\n\t\topacity: .6;\n\t\tborder: 2px solid lightgray;\n\t}\n\t.search2:hover {\n\t\topacity: 1;\n\t\tbox-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n\t\t};\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n</style>\n\n***\n\n<div class=\"pic\">\n<img src=\"/resources/Mihawk-Wind.gif\" title=\"Mihawk-Wind\">\n</div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n","source":"404/index.md","raw":"title: 404 Not Found：该页无法显示\ncomments: false\npermalink: /404\n\n---\n\n<style type=\"text/css\">\n\t.article-title {\n\t\tfont-size: 2.1em;\n\t}\n\tstrong a {\n\t\tcolor: #747474;\n\t}\n\t.share {\n\t\tdisplay: none;\n\t}\n\t.player {\n\t\tmargin-left: -10px;\n\t}\n\t.sign {\n\t\ttext-align: right;\n\t\tfont-style: italic;\n\t}\n  \t#page-visit {\n\t\tdisplay: none;\n\t}\n\t.center {\n\t\ttext-align: center;\n\t\theight: 2.5em;\n\t\tfont-weight: bold;\n\t}\n\t.search2 {\n\t\theight: 2.2em;\n\t\tfont-size: 1em;\n\t\twidth: 50%;\n\t\tmargin: auto 24%;\n\t\tcolor: #727272;\n\t\topacity: .6;\n\t\tborder: 2px solid lightgray;\n\t}\n\t.search2:hover {\n\t\topacity: 1;\n\t\tbox-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n\t\t};\n\t.article-entry hr {\n\t\tmargin: 0;\n\t}\n\t.pic {\n\t\ttext-align: center;\n\t\tmargin: 0;\n\t}\n\t.pic br {\n  \t\tdisplay: none;\n  \t}\n</style>\n\n***\n\n<div class=\"pic\">\n<img src=\"/resources/Mihawk-Wind.gif\" title=\"Mihawk-Wind\">\n</div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n","date":"2016-11-13T05:48:05.000Z","updated":"2016-11-13T05:48:05.000Z","path":"/404.html","layout":"page","_id":"ciw296d760000ohzjc65txo93","content":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .share {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n      #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n          display: none;\n      }\n</style>\n\n<hr>\n<div class=\"pic\"><br><img src=\"/resources/Mihawk-Wind.gif\" title=\"Mihawk-Wind\"><br></div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n","excerpt":"","more":"<style type=\"text/css\">\n    .article-title {\n        font-size: 2.1em;\n    }\n    strong a {\n        color: #747474;\n    }\n    .share {\n        display: none;\n    }\n    .player {\n        margin-left: -10px;\n    }\n    .sign {\n        text-align: right;\n        font-style: italic;\n    }\n      #page-visit {\n        display: none;\n    }\n    .center {\n        text-align: center;\n        height: 2.5em;\n        font-weight: bold;\n    }\n    .search2 {\n        height: 2.2em;\n        font-size: 1em;\n        width: 50%;\n        margin: auto 24%;\n        color: #727272;\n        opacity: .6;\n        border: 2px solid lightgray;\n    }\n    .search2:hover {\n        opacity: 1;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3)\n        };\n    .article-entry hr {\n        margin: 0;\n    }\n    .pic {\n        text-align: center;\n        margin: 0;\n    }\n    .pic br {\n          display: none;\n      }\n</style>\n\n<hr>\n<div class=\"pic\"><br><img src=\"/resources/Mihawk-Wind.gif\" title=\"Mihawk-Wind\"><br></div>\n\n<p class=\"center\">很抱歉，您所访问的地址并不存在: </p>\n\n<p class=\"center\"><a href=\"/\">回主页</a> · <a href=\"/archives\">所有文章</a> · <a href=\"/about\">留言板</a></p>\n\n<p class=\"center\">可在边栏搜索框中对本站进行检索，以获取相关信息。</p>\n"},{"title":"About","date":"2016-04-17T13:16:56.000Z","_content":"\n### 个人简介\n- 作为一个非计算机专业出身的IT男，入行也是很曲折的。在大学四年学的机械专业，在最后要毕业了才发觉那不是我想要的，我还是喜欢计算机！然后疯狂的学习了几个月java，踏入了程序员的行列！\n\n### 本博客的目的\n希望通过我自己的经历能够让学习编程的新手少走些一些弯路，同时我也不会拿官网的hello world教程放在这里，都拿官网的\nhello world做博客没有意义。\n\n### 编程的理想\n- 我是一个热爱技术的程序猿，一直觉得编程大牛才是世界上最叼的，好的程序员绝对是造福世界，改变世界，\n- 我想用自己的代码改变世界，想想就觉得是一件兴奋的事情！\n\n### 技术方向\n- 主修java，javascript，nodejs，react技术栈，略懂python，对编程语言充满了兴趣！\n\n### 兴趣\n- 运动：篮球，乒乓球，羽毛球都喜欢，最爱还是篮球\n- 动漫：火影，海贼，秦时明月等等\n- 旅行：人文，历史类偏爱\n- 分享：喜欢把自己的经验分享给大家\n\n### 欢迎留言\n如果有什么建议和想法，都可以和我留言，可以在博客下面留言，也可以去我的微博留言，必有回应！","source":"about/index.md","raw":"title: about\ndate: 2016-04-17 21:16:56\n---\n\n### 个人简介\n- 作为一个非计算机专业出身的IT男，入行也是很曲折的。在大学四年学的机械专业，在最后要毕业了才发觉那不是我想要的，我还是喜欢计算机！然后疯狂的学习了几个月java，踏入了程序员的行列！\n\n### 本博客的目的\n希望通过我自己的经历能够让学习编程的新手少走些一些弯路，同时我也不会拿官网的hello world教程放在这里，都拿官网的\nhello world做博客没有意义。\n\n### 编程的理想\n- 我是一个热爱技术的程序猿，一直觉得编程大牛才是世界上最叼的，好的程序员绝对是造福世界，改变世界，\n- 我想用自己的代码改变世界，想想就觉得是一件兴奋的事情！\n\n### 技术方向\n- 主修java，javascript，nodejs，react技术栈，略懂python，对编程语言充满了兴趣！\n\n### 兴趣\n- 运动：篮球，乒乓球，羽毛球都喜欢，最爱还是篮球\n- 动漫：火影，海贼，秦时明月等等\n- 旅行：人文，历史类偏爱\n- 分享：喜欢把自己的经验分享给大家\n\n### 欢迎留言\n如果有什么建议和想法，都可以和我留言，可以在博客下面留言，也可以去我的微博留言，必有回应！","updated":"2016-11-28T15:05:33.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciw296d7d0002ohzjqd0ledaw","content":"<h3 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h3><ul>\n<li>作为一个非计算机专业出身的IT男，入行也是很曲折的。在大学四年学的机械专业，在最后要毕业了才发觉那不是我想要的，我还是喜欢计算机！然后疯狂的学习了几个月java，踏入了程序员的行列！</li>\n</ul>\n<h3 id=\"本博客的目的\"><a href=\"#本博客的目的\" class=\"headerlink\" title=\"本博客的目的\"></a>本博客的目的</h3><p>希望通过我自己的经历能够让学习编程的新手少走些一些弯路，同时我也不会拿官网的hello world教程放在这里，都拿官网的<br>hello world做博客没有意义。</p>\n<h3 id=\"编程的理想\"><a href=\"#编程的理想\" class=\"headerlink\" title=\"编程的理想\"></a>编程的理想</h3><ul>\n<li>我是一个热爱技术的程序猿，一直觉得编程大牛才是世界上最叼的，好的程序员绝对是造福世界，改变世界，</li>\n<li>我想用自己的代码改变世界，想想就觉得是一件兴奋的事情！</li>\n</ul>\n<h3 id=\"技术方向\"><a href=\"#技术方向\" class=\"headerlink\" title=\"技术方向\"></a>技术方向</h3><ul>\n<li>主修java，javascript，nodejs，react技术栈，略懂python，对编程语言充满了兴趣！</li>\n</ul>\n<h3 id=\"兴趣\"><a href=\"#兴趣\" class=\"headerlink\" title=\"兴趣\"></a>兴趣</h3><ul>\n<li>运动：篮球，乒乓球，羽毛球都喜欢，最爱还是篮球</li>\n<li>动漫：火影，海贼，秦时明月等等</li>\n<li>旅行：人文，历史类偏爱</li>\n<li>分享：喜欢把自己的经验分享给大家</li>\n</ul>\n<h3 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h3><p>如果有什么建议和想法，都可以和我留言，可以在博客下面留言，也可以去我的微博留言，必有回应！</p>\n","excerpt":"","more":"<h3 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h3><ul>\n<li>作为一个非计算机专业出身的IT男，入行也是很曲折的。在大学四年学的机械专业，在最后要毕业了才发觉那不是我想要的，我还是喜欢计算机！然后疯狂的学习了几个月java，踏入了程序员的行列！</li>\n</ul>\n<h3 id=\"本博客的目的\"><a href=\"#本博客的目的\" class=\"headerlink\" title=\"本博客的目的\"></a>本博客的目的</h3><p>希望通过我自己的经历能够让学习编程的新手少走些一些弯路，同时我也不会拿官网的hello world教程放在这里，都拿官网的<br>hello world做博客没有意义。</p>\n<h3 id=\"编程的理想\"><a href=\"#编程的理想\" class=\"headerlink\" title=\"编程的理想\"></a>编程的理想</h3><ul>\n<li>我是一个热爱技术的程序猿，一直觉得编程大牛才是世界上最叼的，好的程序员绝对是造福世界，改变世界，</li>\n<li>我想用自己的代码改变世界，想想就觉得是一件兴奋的事情！</li>\n</ul>\n<h3 id=\"技术方向\"><a href=\"#技术方向\" class=\"headerlink\" title=\"技术方向\"></a>技术方向</h3><ul>\n<li>主修java，javascript，nodejs，react技术栈，略懂python，对编程语言充满了兴趣！</li>\n</ul>\n<h3 id=\"兴趣\"><a href=\"#兴趣\" class=\"headerlink\" title=\"兴趣\"></a>兴趣</h3><ul>\n<li>运动：篮球，乒乓球，羽毛球都喜欢，最爱还是篮球</li>\n<li>动漫：火影，海贼，秦时明月等等</li>\n<li>旅行：人文，历史类偏爱</li>\n<li>分享：喜欢把自己的经验分享给大家</li>\n</ul>\n<h3 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h3><p>如果有什么建议和想法，都可以和我留言，可以在博客下面留言，也可以去我的微博留言，必有回应！</p>\n"},{"title":"Tags","date":"2016-04-17T13:17:06.000Z","_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2016-04-17 21:17:06\n---\n","updated":"2016-11-13T05:48:05.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciw296das003kohzjz92tlmpk","content":"","excerpt":"","more":""}],"Post":[{"title":"Ajax和jsonp区别","date":"2016-07-06T12:54:16.000Z","_content":"** ajax和jsonp区别 ：** <Excerpt in index | 首页摘要>\n    jquery的封装影响了很多人的误解，所以有必要对ajax和jsonp的本质区别讲解，\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### jsonp是什么？\n利用在页面中创建`<script>`节点的方法向不同域提交HTTP请求的方法称为JSONP，这项技术可以解决跨域提交Ajax请求的问题。JSONP的工作原理如下所述：假设在 http://example1.com/index.php 这个页面中向 http://example2.com/getinfo.php 提交GET请求，我们可以将下面的JavaScript代码放在 http://example1.com/index.php 这个页面中来实现：\n\n```js\nvar eleScript= document.createElement(\"script\");\neleScript.type = \"text/javascript\";\neleScript.src = \"http://example2.com/getinfo.php\";\ndocument.getElementsByTagName(\"HEAD\")[0].appendChild(eleScript);\n```\n\n当GET请求从 http://example2.com/getinfo.php 返回时，可以返回一段JavaScript代码，这段代码会自动执行，可以用来负责调用 http://example1.com/index.php 页面中的一个callback函数。\n\nJSONP的优点是：它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行，不需要XMLHttpRequest或ActiveX的支持；并且在请求完毕后可以通过调用callback的方式回传结果。\n\nJSONP的缺点则是：它只支持GET请求而不支持POST等其它类型的HTTP请求；它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。\n\n### ajax是什么？\n\nAjax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。\n　XMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。\n\n### 误区是怎么产生的？\n\n这个很大程度上要归功于jquery的封装，由于jquery在api上，对json和jsonp都属于ajax模块，导致很多人误以为jsonp是ajax一种。\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/ajax-jsonp.md","raw":"title: ajax和jsonp区别\ndate: 2016-07-06 20:54:16\ntags: http\ncategories: 编程语言\n---\n** ajax和jsonp区别 ：** <Excerpt in index | 首页摘要>\n    jquery的封装影响了很多人的误解，所以有必要对ajax和jsonp的本质区别讲解，\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### jsonp是什么？\n利用在页面中创建`<script>`节点的方法向不同域提交HTTP请求的方法称为JSONP，这项技术可以解决跨域提交Ajax请求的问题。JSONP的工作原理如下所述：假设在 http://example1.com/index.php 这个页面中向 http://example2.com/getinfo.php 提交GET请求，我们可以将下面的JavaScript代码放在 http://example1.com/index.php 这个页面中来实现：\n\n```js\nvar eleScript= document.createElement(\"script\");\neleScript.type = \"text/javascript\";\neleScript.src = \"http://example2.com/getinfo.php\";\ndocument.getElementsByTagName(\"HEAD\")[0].appendChild(eleScript);\n```\n\n当GET请求从 http://example2.com/getinfo.php 返回时，可以返回一段JavaScript代码，这段代码会自动执行，可以用来负责调用 http://example1.com/index.php 页面中的一个callback函数。\n\nJSONP的优点是：它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行，不需要XMLHttpRequest或ActiveX的支持；并且在请求完毕后可以通过调用callback的方式回传结果。\n\nJSONP的缺点则是：它只支持GET请求而不支持POST等其它类型的HTTP请求；它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。\n\n### ajax是什么？\n\nAjax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。\n　XMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。\n\n### 误区是怎么产生的？\n\n这个很大程度上要归功于jquery的封装，由于jquery在api上，对json和jsonp都属于ajax模块，导致很多人误以为jsonp是ajax一种。\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"ajax-jsonp","published":1,"updated":"2016-11-27T16:16:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d780001ohzjpdognqq0","content":"<p><strong> ajax和jsonp区别 ：</strong> <Excerpt in index | 首页摘要><br>    jquery的封装影响了很多人的误解，所以有必要对ajax和jsonp的本质区别讲解，<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"jsonp是什么？\"><a href=\"#jsonp是什么？\" class=\"headerlink\" title=\"jsonp是什么？\"></a>jsonp是什么？</h3><p>利用在页面中创建<code>&lt;script&gt;</code>节点的方法向不同域提交HTTP请求的方法称为JSONP，这项技术可以解决跨域提交Ajax请求的问题。JSONP的工作原理如下所述：假设在 <a href=\"http://example1.com/index.php\">http://example1.com/index.php</a> 这个页面中向 <a href=\"http://example2.com/getinfo.php\">http://example2.com/getinfo.php</a> 提交GET请求，我们可以将下面的JavaScript代码放在 <a href=\"http://example1.com/index.php\">http://example1.com/index.php</a> 这个页面中来实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> eleScript= <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\">eleScript.type = <span class=\"string\">\"text/javascript\"</span>;</div><div class=\"line\">eleScript.src = <span class=\"string\">\"http://example2.com/getinfo.php\"</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"HEAD\"</span>)[<span class=\"number\">0</span>].appendChild(eleScript);</div></pre></td></tr></table></figure>\n<p>当GET请求从 <a href=\"http://example2.com/getinfo.php\">http://example2.com/getinfo.php</a> 返回时，可以返回一段JavaScript代码，这段代码会自动执行，可以用来负责调用 <a href=\"http://example1.com/index.php\">http://example1.com/index.php</a> 页面中的一个callback函数。</p>\n<p>JSONP的优点是：它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行，不需要XMLHttpRequest或ActiveX的支持；并且在请求完毕后可以通过调用callback的方式回传结果。</p>\n<p>JSONP的缺点则是：它只支持GET请求而不支持POST等其它类型的HTTP请求；它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。</p>\n<h3 id=\"ajax是什么？\"><a href=\"#ajax是什么？\" class=\"headerlink\" title=\"ajax是什么？\"></a>ajax是什么？</h3><p>Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。<br>　XMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。</p>\n<h3 id=\"误区是怎么产生的？\"><a href=\"#误区是怎么产生的？\" class=\"headerlink\" title=\"误区是怎么产生的？\"></a>误区是怎么产生的？</h3><p>这个很大程度上要归功于jquery的封装，由于jquery在api上，对json和jsonp都属于ajax模块，导致很多人误以为jsonp是ajax一种。</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> ajax和jsonp区别 ：</strong> <Excerpt in index | 首页摘要><br>    jquery的封装影响了很多人的误解，所以有必要对ajax和jsonp的本质区别讲解，<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"jsonp是什么？\"><a href=\"#jsonp是什么？\" class=\"headerlink\" title=\"jsonp是什么？\"></a>jsonp是什么？</h3><p>利用在页面中创建<code>&lt;script&gt;</code>节点的方法向不同域提交HTTP请求的方法称为JSONP，这项技术可以解决跨域提交Ajax请求的问题。JSONP的工作原理如下所述：假设在 <a href=\"http://example1.com/index.php\">http://example1.com/index.php</a> 这个页面中向 <a href=\"http://example2.com/getinfo.php\">http://example2.com/getinfo.php</a> 提交GET请求，我们可以将下面的JavaScript代码放在 <a href=\"http://example1.com/index.php\">http://example1.com/index.php</a> 这个页面中来实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> eleScript= <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\">eleScript.type = <span class=\"string\">\"text/javascript\"</span>;</div><div class=\"line\">eleScript.src = <span class=\"string\">\"http://example2.com/getinfo.php\"</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"HEAD\"</span>)[<span class=\"number\">0</span>].appendChild(eleScript);</div></pre></td></tr></table></figure>\n<p>当GET请求从 <a href=\"http://example2.com/getinfo.php\">http://example2.com/getinfo.php</a> 返回时，可以返回一段JavaScript代码，这段代码会自动执行，可以用来负责调用 <a href=\"http://example1.com/index.php\">http://example1.com/index.php</a> 页面中的一个callback函数。</p>\n<p>JSONP的优点是：它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行，不需要XMLHttpRequest或ActiveX的支持；并且在请求完毕后可以通过调用callback的方式回传结果。</p>\n<p>JSONP的缺点则是：它只支持GET请求而不支持POST等其它类型的HTTP请求；它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。</p>\n<h3 id=\"ajax是什么？\"><a href=\"#ajax是什么？\" class=\"headerlink\" title=\"ajax是什么？\"></a>ajax是什么？</h3><p>Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。<br>　XMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。</p>\n<h3 id=\"误区是怎么产生的？\"><a href=\"#误区是怎么产生的？\" class=\"headerlink\" title=\"误区是怎么产生的？\"></a>误区是怎么产生的？</h3><p>这个很大程度上要归功于jquery的封装，由于jquery在api上，对json和jsonp都属于ajax模块，导致很多人误以为jsonp是ajax一种。</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Ajax简单教程","date":"2016-07-06T12:53:11.000Z","_content":"** ajax简单教程：** <Excerpt in index | 首页摘要>\n    ajax常用的方法，一些容易出错的地方\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### ajax原理\nAjax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。\nXMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。\n所以我们先从XMLHttpRequest讲起，来看看它的工作原理。首先，我们先来看看XMLHttpRequest这个对象的属性。\n它的属性有：\n\n  | onreadystatechange   | responseText    |\n  | :------------- | :------------- |\n  |  每次状态改变所触发事件的事件处理程序    | 从服务器进程返回数据的字符串形式    |\n\n  | responseXML   | status     |\n  | :------------- | :------------- |\n  | 从服务器进程返回的DOM兼容的文档数据对象  | 从服务器返回的数字代码，比如常见的404 |\n\n  | status Text    | readyState    |\n  | :------------- | :------------- |\n  | 伴随状态码的字符串信息                 | 对象状态值                        |\nreadyState 对象状态值\n- 0 (未初始化) 对象已建立，但是尚未初始化（尚未调用open方法）\n- 1 (初始化) 对象已建立，尚未调用send方法\n- 2 (发送数据) send方法已调用，但是当前的状态及http头未知\n- 3 (数据传送中) 已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误，\n- 4 (完成) 数据接收完毕,此时可以通过通过responseXml和responseText获取完整的回应数据\n\n### ajax的使用\n\n1. 原生的ajax\n\n```js\nfunction CreateXmlHttp() {\n    //非IE浏览器创建XmlHttpRequest对象\n    if (window.XmlHttpRequest) {\n        xmlhttp = new XmlHttpRequest();\n    }\n    //IE浏览器创建XmlHttpRequest对象\n    if (window.ActiveXObject) {\n        try {\n            xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n        }\n        catch (e) {\n            try {\n                xmlhttp = new ActiveXObject(\"msxml2.XMLHTTP\");\n            }\n            catch (ex) { }\n        }\n    }\n}\n\nfunction Ustbwuyi() {\n    var data = document.getElementById(\"username\").value;\n    CreateXmlHttp();\n    if (!xmlhttp) {\n        alert(\"创建xmlhttp对象异常！\");\n        return false;\n    }\n    xmlhttp.open(\"POST\", url, false);\n    xmlhttp.onreadystatechange = function () {\n        if (xmlhttp.readyState == 4) {\n            document.getElementById(\"user1\").innerHTML = \"数据正在加载...\";\n            if (xmlhttp.status == 200) {\n                document.write(xmlhttp.responseText);\n            }\n        }\n    }\n    xmlhttp.send();\n}\n```\n\n2. jquery调用ajax\n\n```js\n$.ajax({\n    type: \"get\",\n    url: \"http://www.cnblogs.com/rss\",\n    beforeSend: function(XMLHttpRequest){\n    //ShowLoading();\n    },\n    success: function(data, textStatus){\n        $(\".ajax.ajaxResult\").html(\"\");\n        $(\"item\",data).each(function(i, domEle){\n        $(\".ajax.ajaxResult\").append(\"<li>\"+$(domEle).children(\"title\").text()+\"</li>\");\n        });\n\n    },\n    complete: function(XMLHttpRequest, textStatus){\n    //HideLoading();\n    },\n    error: function(){\n    //请求出错处理\n    }\n});\n```\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/ajax-study.md","raw":"title: ajax简单教程\ndate: 2016-07-06 20:53:11\ntags: http\ncategories: 编程语言\n---\n** ajax简单教程：** <Excerpt in index | 首页摘要>\n    ajax常用的方法，一些容易出错的地方\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### ajax原理\nAjax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。\nXMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。\n所以我们先从XMLHttpRequest讲起，来看看它的工作原理。首先，我们先来看看XMLHttpRequest这个对象的属性。\n它的属性有：\n\n  | onreadystatechange   | responseText    |\n  | :------------- | :------------- |\n  |  每次状态改变所触发事件的事件处理程序    | 从服务器进程返回数据的字符串形式    |\n\n  | responseXML   | status     |\n  | :------------- | :------------- |\n  | 从服务器进程返回的DOM兼容的文档数据对象  | 从服务器返回的数字代码，比如常见的404 |\n\n  | status Text    | readyState    |\n  | :------------- | :------------- |\n  | 伴随状态码的字符串信息                 | 对象状态值                        |\nreadyState 对象状态值\n- 0 (未初始化) 对象已建立，但是尚未初始化（尚未调用open方法）\n- 1 (初始化) 对象已建立，尚未调用send方法\n- 2 (发送数据) send方法已调用，但是当前的状态及http头未知\n- 3 (数据传送中) 已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误，\n- 4 (完成) 数据接收完毕,此时可以通过通过responseXml和responseText获取完整的回应数据\n\n### ajax的使用\n\n1. 原生的ajax\n\n```js\nfunction CreateXmlHttp() {\n    //非IE浏览器创建XmlHttpRequest对象\n    if (window.XmlHttpRequest) {\n        xmlhttp = new XmlHttpRequest();\n    }\n    //IE浏览器创建XmlHttpRequest对象\n    if (window.ActiveXObject) {\n        try {\n            xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n        }\n        catch (e) {\n            try {\n                xmlhttp = new ActiveXObject(\"msxml2.XMLHTTP\");\n            }\n            catch (ex) { }\n        }\n    }\n}\n\nfunction Ustbwuyi() {\n    var data = document.getElementById(\"username\").value;\n    CreateXmlHttp();\n    if (!xmlhttp) {\n        alert(\"创建xmlhttp对象异常！\");\n        return false;\n    }\n    xmlhttp.open(\"POST\", url, false);\n    xmlhttp.onreadystatechange = function () {\n        if (xmlhttp.readyState == 4) {\n            document.getElementById(\"user1\").innerHTML = \"数据正在加载...\";\n            if (xmlhttp.status == 200) {\n                document.write(xmlhttp.responseText);\n            }\n        }\n    }\n    xmlhttp.send();\n}\n```\n\n2. jquery调用ajax\n\n```js\n$.ajax({\n    type: \"get\",\n    url: \"http://www.cnblogs.com/rss\",\n    beforeSend: function(XMLHttpRequest){\n    //ShowLoading();\n    },\n    success: function(data, textStatus){\n        $(\".ajax.ajaxResult\").html(\"\");\n        $(\"item\",data).each(function(i, domEle){\n        $(\".ajax.ajaxResult\").append(\"<li>\"+$(domEle).children(\"title\").text()+\"</li>\");\n        });\n\n    },\n    complete: function(XMLHttpRequest, textStatus){\n    //HideLoading();\n    },\n    error: function(){\n    //请求出错处理\n    }\n});\n```\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"ajax-study","published":1,"updated":"2016-11-27T16:16:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d7e0003ohzjg05u6fx5","content":"<p><strong> ajax简单教程：</strong> <Excerpt in index | 首页摘要><br>    ajax常用的方法，一些容易出错的地方<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"ajax原理\"><a href=\"#ajax原理\" class=\"headerlink\" title=\"ajax原理\"></a>ajax原理</h3><p>Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。<br>XMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。<br>所以我们先从XMLHttpRequest讲起，来看看它的工作原理。首先，我们先来看看XMLHttpRequest这个对象的属性。<br>它的属性有：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">onreadystatechange</th>\n<th style=\"text-align:left\">responseText</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">每次状态改变所触发事件的事件处理程序</td>\n<td style=\"text-align:left\">从服务器进程返回数据的字符串形式</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">responseXML</th>\n<th style=\"text-align:left\">status</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">从服务器进程返回的DOM兼容的文档数据对象</td>\n<td style=\"text-align:left\">从服务器返回的数字代码，比如常见的404</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">status Text</th>\n<th style=\"text-align:left\">readyState</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">伴随状态码的字符串信息</td>\n<td style=\"text-align:left\">对象状态值</td>\n</tr>\n</tbody>\n</table>\n<p>readyState 对象状态值</p>\n<ul>\n<li>0 (未初始化) 对象已建立，但是尚未初始化（尚未调用open方法）</li>\n<li>1 (初始化) 对象已建立，尚未调用send方法</li>\n<li>2 (发送数据) send方法已调用，但是当前的状态及http头未知</li>\n<li>3 (数据传送中) 已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误，</li>\n<li>4 (完成) 数据接收完毕,此时可以通过通过responseXml和responseText获取完整的回应数据</li>\n</ul>\n<h3 id=\"ajax的使用\"><a href=\"#ajax的使用\" class=\"headerlink\" title=\"ajax的使用\"></a>ajax的使用</h3><ol>\n<li>原生的ajax</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreateXmlHttp</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//非IE浏览器创建XmlHttpRequest对象</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XmlHttpRequest) &#123;</div><div class=\"line\">        xmlhttp = <span class=\"keyword\">new</span> XmlHttpRequest();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//IE浏览器创建XmlHttpRequest对象</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.ActiveXObject) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            xmlhttp = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                xmlhttp = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"msxml2.XMLHTTP\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">catch</span> (ex) &#123; &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ustbwuyi</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"username\"</span>).value;</div><div class=\"line\">    CreateXmlHttp();</div><div class=\"line\">    <span class=\"keyword\">if</span> (!xmlhttp) &#123;</div><div class=\"line\">        alert(<span class=\"string\">\"创建xmlhttp对象异常！\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    xmlhttp.open(<span class=\"string\">\"POST\"</span>, url, <span class=\"literal\">false</span>);</div><div class=\"line\">    xmlhttp.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (xmlhttp.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"user1\"</span>).innerHTML = <span class=\"string\">\"数据正在加载...\"</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (xmlhttp.status == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">                <span class=\"built_in\">document</span>.write(xmlhttp.responseText);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    xmlhttp.send();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>jquery调用ajax</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">    type: <span class=\"string\">\"get\"</span>,</div><div class=\"line\">    url: <span class=\"string\">\"http://www.cnblogs.com/rss\"</span>,</div><div class=\"line\">    beforeSend: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">XMLHttpRequest</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//ShowLoading();</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, textStatus</span>)</span>&#123;</div><div class=\"line\">        $(<span class=\"string\">\".ajax.ajaxResult\"</span>).html(<span class=\"string\">\"\"</span>);</div><div class=\"line\">        $(<span class=\"string\">\"item\"</span>,data).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i, domEle</span>)</span>&#123;</div><div class=\"line\">        $(<span class=\"string\">\".ajax.ajaxResult\"</span>).append(<span class=\"string\">\"&lt;li&gt;\"</span>+$(domEle).children(<span class=\"string\">\"title\"</span>).text()+<span class=\"string\">\"&lt;/li&gt;\"</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">XMLHttpRequest, textStatus</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//HideLoading();</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//请求出错处理</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> ajax简单教程：</strong> <Excerpt in index | 首页摘要><br>    ajax常用的方法，一些容易出错的地方<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"ajax原理\"><a href=\"#ajax原理\" class=\"headerlink\" title=\"ajax原理\"></a>ajax原理</h3><p>Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。<br>XMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。<br>所以我们先从XMLHttpRequest讲起，来看看它的工作原理。首先，我们先来看看XMLHttpRequest这个对象的属性。<br>它的属性有：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">onreadystatechange</th>\n<th style=\"text-align:left\">responseText</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">每次状态改变所触发事件的事件处理程序</td>\n<td style=\"text-align:left\">从服务器进程返回数据的字符串形式</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">responseXML</th>\n<th style=\"text-align:left\">status</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">从服务器进程返回的DOM兼容的文档数据对象</td>\n<td style=\"text-align:left\">从服务器返回的数字代码，比如常见的404</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">status Text</th>\n<th style=\"text-align:left\">readyState</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">伴随状态码的字符串信息</td>\n<td style=\"text-align:left\">对象状态值</td>\n</tr>\n</tbody>\n</table>\n<p>readyState 对象状态值</p>\n<ul>\n<li>0 (未初始化) 对象已建立，但是尚未初始化（尚未调用open方法）</li>\n<li>1 (初始化) 对象已建立，尚未调用send方法</li>\n<li>2 (发送数据) send方法已调用，但是当前的状态及http头未知</li>\n<li>3 (数据传送中) 已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误，</li>\n<li>4 (完成) 数据接收完毕,此时可以通过通过responseXml和responseText获取完整的回应数据</li>\n</ul>\n<h3 id=\"ajax的使用\"><a href=\"#ajax的使用\" class=\"headerlink\" title=\"ajax的使用\"></a>ajax的使用</h3><ol>\n<li>原生的ajax</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">CreateXmlHttp</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//非IE浏览器创建XmlHttpRequest对象</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.XmlHttpRequest) &#123;</div><div class=\"line\">        xmlhttp = <span class=\"keyword\">new</span> XmlHttpRequest();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//IE浏览器创建XmlHttpRequest对象</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.ActiveXObject) &#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            xmlhttp = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                xmlhttp = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"msxml2.XMLHTTP\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">catch</span> (ex) &#123; &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Ustbwuyi</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"username\"</span>).value;</div><div class=\"line\">    CreateXmlHttp();</div><div class=\"line\">    <span class=\"keyword\">if</span> (!xmlhttp) &#123;</div><div class=\"line\">        alert(<span class=\"string\">\"创建xmlhttp对象异常！\"</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    xmlhttp.open(<span class=\"string\">\"POST\"</span>, url, <span class=\"literal\">false</span>);</div><div class=\"line\">    xmlhttp.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (xmlhttp.readyState == <span class=\"number\">4</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"user1\"</span>).innerHTML = <span class=\"string\">\"数据正在加载...\"</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (xmlhttp.status == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">                <span class=\"built_in\">document</span>.write(xmlhttp.responseText);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    xmlhttp.send();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>jquery调用ajax</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">    type: <span class=\"string\">\"get\"</span>,</div><div class=\"line\">    url: <span class=\"string\">\"http://www.cnblogs.com/rss\"</span>,</div><div class=\"line\">    beforeSend: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">XMLHttpRequest</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//ShowLoading();</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data, textStatus</span>)</span>&#123;</div><div class=\"line\">        $(<span class=\"string\">\".ajax.ajaxResult\"</span>).html(<span class=\"string\">\"\"</span>);</div><div class=\"line\">        $(<span class=\"string\">\"item\"</span>,data).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i, domEle</span>)</span>&#123;</div><div class=\"line\">        $(<span class=\"string\">\".ajax.ajaxResult\"</span>).append(<span class=\"string\">\"&lt;li&gt;\"</span>+$(domEle).children(<span class=\"string\">\"title\"</span>).text()+<span class=\"string\">\"&lt;/li&gt;\"</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\">    complete: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">XMLHttpRequest, textStatus</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//HideLoading();</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//请求出错处理</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Atom中最好的js代码补全","date":"2016-07-21T22:11:30.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n    这或许是atom中最好的js代码补全,包含了express,nodejs,es6,目前仍在继续更新\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## best-js-snippets\n\n这个package的名字就叫 **best-js-snippets** ,用atom的可以下载使用一下,提出建议,我会尽快修改\n![best-js-snippets](http://o7kalf5h3.bkt.clouddn.com/snippets.png)\n\n## 特性\n1. express补全\n2. es6补全\n3. js补全(string,dom操作)\n4. nodejs补全(fs,event,util,module,class,assert)\n\n\n## 如何安装\n1. atom编辑器中找到设置,搜索package,安装即可.\n2. 重启atom,享受吧!\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/best-js-snippet.md","raw":"title: atom中最好的js代码补全\ndate: 2016-07-22 06:11:30\ntags: others\ncategories: 开发工具\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n    这或许是atom中最好的js代码补全,包含了express,nodejs,es6,目前仍在继续更新\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## best-js-snippets\n\n这个package的名字就叫 **best-js-snippets** ,用atom的可以下载使用一下,提出建议,我会尽快修改\n![best-js-snippets](http://o7kalf5h3.bkt.clouddn.com/snippets.png)\n\n## 特性\n1. express补全\n2. es6补全\n3. js补全(string,dom操作)\n4. nodejs补全(fs,event,util,module,class,assert)\n\n\n## 如何安装\n1. atom编辑器中找到设置,搜索package,安装即可.\n2. 重启atom,享受吧!\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"best-js-snippet","published":1,"updated":"2016-11-13T05:48:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d7n0006ohzj7q3yzzd8","content":"<p><strong> Atom中最好的js代码补全：</strong> <Excerpt in index | 首页摘要><br>    这或许是atom中最好的js代码补全,包含了express,nodejs,es6,目前仍在继续更新<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"best-js-snippets\"><a href=\"#best-js-snippets\" class=\"headerlink\" title=\"best-js-snippets\"></a>best-js-snippets</h2><p>这个package的名字就叫 <strong>best-js-snippets</strong> ,用atom的可以下载使用一下,提出建议,我会尽快修改<br><img src=\"http://o7kalf5h3.bkt.clouddn.com/snippets.png\" alt=\"best-js-snippets\"></p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ol>\n<li>express补全</li>\n<li>es6补全</li>\n<li>js补全(string,dom操作)</li>\n<li>nodejs补全(fs,event,util,module,class,assert)</li>\n</ol>\n<h2 id=\"如何安装\"><a href=\"#如何安装\" class=\"headerlink\" title=\"如何安装\"></a>如何安装</h2><ol>\n<li>atom编辑器中找到设置,搜索package,安装即可.</li>\n<li>重启atom,享受吧!</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> Atom中最好的js代码补全：</strong> <Excerpt in index | 首页摘要><br>    这或许是atom中最好的js代码补全,包含了express,nodejs,es6,目前仍在继续更新<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"best-js-snippets\"><a href=\"#best-js-snippets\" class=\"headerlink\" title=\"best-js-snippets\"></a>best-js-snippets</h2><p>这个package的名字就叫 <strong>best-js-snippets</strong> ,用atom的可以下载使用一下,提出建议,我会尽快修改<br><img src=\"http://o7kalf5h3.bkt.clouddn.com/snippets.png\" alt=\"best-js-snippets\"></p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ol>\n<li>express补全</li>\n<li>es6补全</li>\n<li>js补全(string,dom操作)</li>\n<li>nodejs补全(fs,event,util,module,class,assert)</li>\n</ol>\n<h2 id=\"如何安装\"><a href=\"#如何安装\" class=\"headerlink\" title=\"如何安装\"></a>如何安装</h2><ol>\n<li>atom编辑器中找到设置,搜索package,安装即可.</li>\n<li>重启atom,享受吧!</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"程序员编程资源汇总","date":"2016-07-19T11:06:29.000Z","_content":"** 程序员编程资源汇总：** <Excerpt in index | 首页摘要>\n    自己收集的编程相关的资源，分享给大家，希望能帮助更多的人在编程的道路上越走越远！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### 为什么写这边博客？\n每个程序员都会面临一个问题，如何搜索自己需要的资料，我自己也有很多的时间花费在找寻资料上，\n希望能把最实用的书籍和资源收集起来给大家一个\n\n### 免费的编程书籍网站\n1. 原版英文书籍\n    - [英文原版](http://www.salttiger.com/)\n2. 中文开源书籍\n    - [免费开源](https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md)\n    - [gitbook](https://www.gitbook.com)\n3. 免费下载的网站\n    - [脚本之家](http://www.jb51.net/jiaoben/)\n    - [新浪微盘](http://vdisk.weibo.com/)\n\n\n### 代码资源\n\n1. 最好的代码仓库 [github](https://github.com/)\n2. [csdn代码仓库](https://code.csdn.net/)\n3. [gist](https://gist.github.com/)\n4. [代码片段之家](http://www.phpxs.com/code/)\n\n### 博客资源\n1. csdn\n2. 博客园\n3. 伯乐在线\n4. 简书\n\n## 问题解答\n1. stackoverflow\n2. segmentfault\n3. 知乎\n4. 谷歌\n\n**此文章会继续更新,把最好的资源奉献给大家!!**\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/code-resource.md","raw":"title: 程序员编程资源汇总\ndate: 2016-07-19 19:06:29\ntags: 开发工具\ncategories: others\n---\n** 程序员编程资源汇总：** <Excerpt in index | 首页摘要>\n    自己收集的编程相关的资源，分享给大家，希望能帮助更多的人在编程的道路上越走越远！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### 为什么写这边博客？\n每个程序员都会面临一个问题，如何搜索自己需要的资料，我自己也有很多的时间花费在找寻资料上，\n希望能把最实用的书籍和资源收集起来给大家一个\n\n### 免费的编程书籍网站\n1. 原版英文书籍\n    - [英文原版](http://www.salttiger.com/)\n2. 中文开源书籍\n    - [免费开源](https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md)\n    - [gitbook](https://www.gitbook.com)\n3. 免费下载的网站\n    - [脚本之家](http://www.jb51.net/jiaoben/)\n    - [新浪微盘](http://vdisk.weibo.com/)\n\n\n### 代码资源\n\n1. 最好的代码仓库 [github](https://github.com/)\n2. [csdn代码仓库](https://code.csdn.net/)\n3. [gist](https://gist.github.com/)\n4. [代码片段之家](http://www.phpxs.com/code/)\n\n### 博客资源\n1. csdn\n2. 博客园\n3. 伯乐在线\n4. 简书\n\n## 问题解答\n1. stackoverflow\n2. segmentfault\n3. 知乎\n4. 谷歌\n\n**此文章会继续更新,把最好的资源奉献给大家!!**\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"code-resource","published":1,"updated":"2016-11-13T05:48:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d7p0007ohzjk8a4v1cz","content":"<p><strong> 程序员编程资源汇总：</strong> <Excerpt in index | 首页摘要><br>    自己收集的编程相关的资源，分享给大家，希望能帮助更多的人在编程的道路上越走越远！<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"为什么写这边博客？\"><a href=\"#为什么写这边博客？\" class=\"headerlink\" title=\"为什么写这边博客？\"></a>为什么写这边博客？</h3><p>每个程序员都会面临一个问题，如何搜索自己需要的资料，我自己也有很多的时间花费在找寻资料上，<br>希望能把最实用的书籍和资源收集起来给大家一个</p>\n<h3 id=\"免费的编程书籍网站\"><a href=\"#免费的编程书籍网站\" class=\"headerlink\" title=\"免费的编程书籍网站\"></a>免费的编程书籍网站</h3><ol>\n<li>原版英文书籍<ul>\n<li><a href=\"http://www.salttiger.com/\">英文原版</a></li>\n</ul>\n</li>\n<li>中文开源书籍<ul>\n<li><a href=\"https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md\">免费开源</a></li>\n<li><a href=\"https://www.gitbook.com\">gitbook</a></li>\n</ul>\n</li>\n<li>免费下载的网站<ul>\n<li><a href=\"http://www.jb51.net/jiaoben/\">脚本之家</a></li>\n<li><a href=\"http://vdisk.weibo.com/\">新浪微盘</a></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"代码资源\"><a href=\"#代码资源\" class=\"headerlink\" title=\"代码资源\"></a>代码资源</h3><ol>\n<li>最好的代码仓库 <a href=\"https://github.com/\">github</a></li>\n<li><a href=\"https://code.csdn.net/\">csdn代码仓库</a></li>\n<li><a href=\"https://gist.github.com/\">gist</a></li>\n<li><a href=\"http://www.phpxs.com/code/\">代码片段之家</a></li>\n</ol>\n<h3 id=\"博客资源\"><a href=\"#博客资源\" class=\"headerlink\" title=\"博客资源\"></a>博客资源</h3><ol>\n<li>csdn</li>\n<li>博客园</li>\n<li>伯乐在线</li>\n<li>简书</li>\n</ol>\n<h2 id=\"问题解答\"><a href=\"#问题解答\" class=\"headerlink\" title=\"问题解答\"></a>问题解答</h2><ol>\n<li>stackoverflow</li>\n<li>segmentfault</li>\n<li>知乎</li>\n<li>谷歌</li>\n</ol>\n<p><strong>此文章会继续更新,把最好的资源奉献给大家!!</strong></p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 程序员编程资源汇总：</strong> <Excerpt in index | 首页摘要><br>    自己收集的编程相关的资源，分享给大家，希望能帮助更多的人在编程的道路上越走越远！<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"为什么写这边博客？\"><a href=\"#为什么写这边博客？\" class=\"headerlink\" title=\"为什么写这边博客？\"></a>为什么写这边博客？</h3><p>每个程序员都会面临一个问题，如何搜索自己需要的资料，我自己也有很多的时间花费在找寻资料上，<br>希望能把最实用的书籍和资源收集起来给大家一个</p>\n<h3 id=\"免费的编程书籍网站\"><a href=\"#免费的编程书籍网站\" class=\"headerlink\" title=\"免费的编程书籍网站\"></a>免费的编程书籍网站</h3><ol>\n<li>原版英文书籍<ul>\n<li><a href=\"http://www.salttiger.com/\">英文原版</a></li>\n</ul>\n</li>\n<li>中文开源书籍<ul>\n<li><a href=\"https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md\">免费开源</a></li>\n<li><a href=\"https://www.gitbook.com\">gitbook</a></li>\n</ul>\n</li>\n<li>免费下载的网站<ul>\n<li><a href=\"http://www.jb51.net/jiaoben/\">脚本之家</a></li>\n<li><a href=\"http://vdisk.weibo.com/\">新浪微盘</a></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"代码资源\"><a href=\"#代码资源\" class=\"headerlink\" title=\"代码资源\"></a>代码资源</h3><ol>\n<li>最好的代码仓库 <a href=\"https://github.com/\">github</a></li>\n<li><a href=\"https://code.csdn.net/\">csdn代码仓库</a></li>\n<li><a href=\"https://gist.github.com/\">gist</a></li>\n<li><a href=\"http://www.phpxs.com/code/\">代码片段之家</a></li>\n</ol>\n<h3 id=\"博客资源\"><a href=\"#博客资源\" class=\"headerlink\" title=\"博客资源\"></a>博客资源</h3><ol>\n<li>csdn</li>\n<li>博客园</li>\n<li>伯乐在线</li>\n<li>简书</li>\n</ol>\n<h2 id=\"问题解答\"><a href=\"#问题解答\" class=\"headerlink\" title=\"问题解答\"></a>问题解答</h2><ol>\n<li>stackoverflow</li>\n<li>segmentfault</li>\n<li>知乎</li>\n<li>谷歌</li>\n</ol>\n<p><strong>此文章会继续更新,把最好的资源奉献给大家!!</strong></p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"程序员入门指南","date":"2016-04-17T04:37:19.000Z","_content":"** 程序员入门指南 ：** <Excerpt in index | 首页摘要>\n        程序员入门必须了解的一些知识，个人经验，不喜勿喷！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 程序员的入门规划\n### 1.我该学习什么语言？\n\n- 这个问题困扰了几乎所有的程序员，比如java应用广好就业，比如php入门简单，ios待遇高，  python是万能语言，HTML和js前端缺人才等等\n\n- 个人见解：先学习难度小，大众化的编程语言，比如java，php，python，javascript,c/c++,这几个学哪一种其实差不多，入门以后看自己兴趣在进行其它语言的学习。\n\n### 2.我该怎么学习编程？\n\n这个问题是所有的程序员都有的，我也经常会疑问，到底该怎么学习呢？\n\n个人见解：\n\n1. 先了解语言的特性，适用的范围场景，比如是适合web开发，还是适合客户端程序，有的适合并发多线程，有的适合异步，还有的比较稳定，适合构建大型项目，有的开发效率高，等等。\n2. 了解语言的语法和常用api的使用，比如变量的声明，循环的使用，io的读取，http服务的创建，把这些基本的语法搞清楚，在进行下一步的学习。\n3. 学习web开发之前的准备，数据库的学习，http协议的学习，html，css和javacript的常用知识了解\n4. 学习常用框架，比如java学习常用的ssh三大框架，node的学习express，一定要做2个项目练习，把自己的之前学习的知识都巩固一下，\n5. 总结一下自己学习的过程，明白编程的思想在哪里，思路在哪里，学习编程，首先应该培养的是编程的思维和思想，有个正确的思维后面都简单多了。\n6. 养成写博客或者学习笔记的习惯，推荐写博客，\n7. 熟悉项目管理工具，svn，git之类的必须要会，工作中这些都是必须的\n8. 准备面试，通过面试题进一步巩固自己的知识，夯实基础。\n\n### 3.我应该去哪里学习编程？\n\n其实这个看个人，如果自学能力强，自控能力强，自学挺好的，下面我列举几个程序员常用的网站  \n\n1. [网易云课堂][1]，很多免费的视频课程，适合入门学习\n2. [慕课网][2]，很多it入门教学视频，资源也不错\n3. [极客学院][3]，和前两个网站差不多，\n4. [北风网][4]，类似的教学网站，其它的就不说了\n\n### 4.编程遇到问题怎么办？\n * 百度或者谷歌看看网上有没有类似的问题，一回生，二回熟，很快就明白了\n * 去官网查看api文档查找原因\n * 自己要学会debug代码，查找原因\n * 去各大论坛逛逛，说不定早有人提问此类问题了\n\n\n### 5.我想看编程的书籍去哪找呢？\n经典书籍还是买纸质的，买正版的，支持正版！\n\n1. [新浪微盘][5]，非常多的it书籍  \n2. [脚本之家][6]，非常多的pdf书籍，可惜大多数不是文字版pdf  \n3. [英文原版书籍][7]，都是高清文字版pdf，强烈推荐，都是英文原版的  \n4. [计算机书控][8]，都是免费的pdf文档，大多数不是文字版pdf\n\n### 6.学习心态\n\n1. 不要老是折腾工具，ide工具和文本编辑器一样一个就够了\n2. 不要自满，编程的东西学一辈子也学不会，要谦虚好学\n3. 不要急躁，既然知识学不完，我们应该掌握学习方法，指定计划去学习\n4. 要持之以恒，学习是一辈子的事，如果你没有这个打算，还是不要做程序员的好\n5. 切忌眼高手低，必须要敲代码才能达到效果\n\n### 7.编程进阶之路\n    当有了一定的编程基础之后,最大的问题是确定自己的方向,这个时候最容易迷茫和困惑,学习什么技术?  \n    怎么去学,这些真的很难\n   - 个人建议如下:  \n    1.技术型方向:提高自己的编程能力和语言造诣,最有效的是\"造轮子\",量变引起质变\n   - 写插件,写框架,写爬虫,写数据库,自制编程语言,等等.\n    2.业务型方向:提高自己的业务能力,和客户的沟通能力,分析需求,解决客户的难题\n   - 多出去见客户,去现场,了解需求,分析需求,\n\n\n\n[1]: http://study.163.com/\n[2]: http://www.imooc.com/\n[3]: http://www.jikexueyuan.com/\n[4]: http://www.ibeifeng.com/\n[5]: http://vdisk.weibo.com/\n[6]: http://www.jb51.net/\n[7]: http://www.salttiger.com/\n[8]: http://bestcbooks.com/\n","source":"_posts/coder-study.md","raw":"title: 程序员入门指南\ndate: 2016-04-17 12:37:19\ntags: others\ncategories: 编程语言\n---\n** 程序员入门指南 ：** <Excerpt in index | 首页摘要>\n        程序员入门必须了解的一些知识，个人经验，不喜勿喷！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## 程序员的入门规划\n### 1.我该学习什么语言？\n\n- 这个问题困扰了几乎所有的程序员，比如java应用广好就业，比如php入门简单，ios待遇高，  python是万能语言，HTML和js前端缺人才等等\n\n- 个人见解：先学习难度小，大众化的编程语言，比如java，php，python，javascript,c/c++,这几个学哪一种其实差不多，入门以后看自己兴趣在进行其它语言的学习。\n\n### 2.我该怎么学习编程？\n\n这个问题是所有的程序员都有的，我也经常会疑问，到底该怎么学习呢？\n\n个人见解：\n\n1. 先了解语言的特性，适用的范围场景，比如是适合web开发，还是适合客户端程序，有的适合并发多线程，有的适合异步，还有的比较稳定，适合构建大型项目，有的开发效率高，等等。\n2. 了解语言的语法和常用api的使用，比如变量的声明，循环的使用，io的读取，http服务的创建，把这些基本的语法搞清楚，在进行下一步的学习。\n3. 学习web开发之前的准备，数据库的学习，http协议的学习，html，css和javacript的常用知识了解\n4. 学习常用框架，比如java学习常用的ssh三大框架，node的学习express，一定要做2个项目练习，把自己的之前学习的知识都巩固一下，\n5. 总结一下自己学习的过程，明白编程的思想在哪里，思路在哪里，学习编程，首先应该培养的是编程的思维和思想，有个正确的思维后面都简单多了。\n6. 养成写博客或者学习笔记的习惯，推荐写博客，\n7. 熟悉项目管理工具，svn，git之类的必须要会，工作中这些都是必须的\n8. 准备面试，通过面试题进一步巩固自己的知识，夯实基础。\n\n### 3.我应该去哪里学习编程？\n\n其实这个看个人，如果自学能力强，自控能力强，自学挺好的，下面我列举几个程序员常用的网站  \n\n1. [网易云课堂][1]，很多免费的视频课程，适合入门学习\n2. [慕课网][2]，很多it入门教学视频，资源也不错\n3. [极客学院][3]，和前两个网站差不多，\n4. [北风网][4]，类似的教学网站，其它的就不说了\n\n### 4.编程遇到问题怎么办？\n * 百度或者谷歌看看网上有没有类似的问题，一回生，二回熟，很快就明白了\n * 去官网查看api文档查找原因\n * 自己要学会debug代码，查找原因\n * 去各大论坛逛逛，说不定早有人提问此类问题了\n\n\n### 5.我想看编程的书籍去哪找呢？\n经典书籍还是买纸质的，买正版的，支持正版！\n\n1. [新浪微盘][5]，非常多的it书籍  \n2. [脚本之家][6]，非常多的pdf书籍，可惜大多数不是文字版pdf  \n3. [英文原版书籍][7]，都是高清文字版pdf，强烈推荐，都是英文原版的  \n4. [计算机书控][8]，都是免费的pdf文档，大多数不是文字版pdf\n\n### 6.学习心态\n\n1. 不要老是折腾工具，ide工具和文本编辑器一样一个就够了\n2. 不要自满，编程的东西学一辈子也学不会，要谦虚好学\n3. 不要急躁，既然知识学不完，我们应该掌握学习方法，指定计划去学习\n4. 要持之以恒，学习是一辈子的事，如果你没有这个打算，还是不要做程序员的好\n5. 切忌眼高手低，必须要敲代码才能达到效果\n\n### 7.编程进阶之路\n    当有了一定的编程基础之后,最大的问题是确定自己的方向,这个时候最容易迷茫和困惑,学习什么技术?  \n    怎么去学,这些真的很难\n   - 个人建议如下:  \n    1.技术型方向:提高自己的编程能力和语言造诣,最有效的是\"造轮子\",量变引起质变\n   - 写插件,写框架,写爬虫,写数据库,自制编程语言,等等.\n    2.业务型方向:提高自己的业务能力,和客户的沟通能力,分析需求,解决客户的难题\n   - 多出去见客户,去现场,了解需求,分析需求,\n\n\n\n[1]: http://study.163.com/\n[2]: http://www.imooc.com/\n[3]: http://www.jikexueyuan.com/\n[4]: http://www.ibeifeng.com/\n[5]: http://vdisk.weibo.com/\n[6]: http://www.jb51.net/\n[7]: http://www.salttiger.com/\n[8]: http://bestcbooks.com/\n","slug":"coder-study","published":1,"updated":"2016-11-13T05:48:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d7q0009ohzjkmkrrdzm","content":"<p><strong> 程序员入门指南 ：</strong> <Excerpt in index | 首页摘要><br>        程序员入门必须了解的一些知识，个人经验，不喜勿喷！<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"程序员的入门规划\"><a href=\"#程序员的入门规划\" class=\"headerlink\" title=\"程序员的入门规划\"></a>程序员的入门规划</h2><h3 id=\"1-我该学习什么语言？\"><a href=\"#1-我该学习什么语言？\" class=\"headerlink\" title=\"1.我该学习什么语言？\"></a>1.我该学习什么语言？</h3><ul>\n<li><p>这个问题困扰了几乎所有的程序员，比如java应用广好就业，比如php入门简单，ios待遇高，  python是万能语言，HTML和js前端缺人才等等</p>\n</li>\n<li><p>个人见解：先学习难度小，大众化的编程语言，比如java，php，python，javascript,c/c++,这几个学哪一种其实差不多，入门以后看自己兴趣在进行其它语言的学习。</p>\n</li>\n</ul>\n<h3 id=\"2-我该怎么学习编程？\"><a href=\"#2-我该怎么学习编程？\" class=\"headerlink\" title=\"2.我该怎么学习编程？\"></a>2.我该怎么学习编程？</h3><p>这个问题是所有的程序员都有的，我也经常会疑问，到底该怎么学习呢？</p>\n<p>个人见解：</p>\n<ol>\n<li>先了解语言的特性，适用的范围场景，比如是适合web开发，还是适合客户端程序，有的适合并发多线程，有的适合异步，还有的比较稳定，适合构建大型项目，有的开发效率高，等等。</li>\n<li>了解语言的语法和常用api的使用，比如变量的声明，循环的使用，io的读取，http服务的创建，把这些基本的语法搞清楚，在进行下一步的学习。</li>\n<li>学习web开发之前的准备，数据库的学习，http协议的学习，html，css和javacript的常用知识了解</li>\n<li>学习常用框架，比如java学习常用的ssh三大框架，node的学习express，一定要做2个项目练习，把自己的之前学习的知识都巩固一下，</li>\n<li>总结一下自己学习的过程，明白编程的思想在哪里，思路在哪里，学习编程，首先应该培养的是编程的思维和思想，有个正确的思维后面都简单多了。</li>\n<li>养成写博客或者学习笔记的习惯，推荐写博客，</li>\n<li>熟悉项目管理工具，svn，git之类的必须要会，工作中这些都是必须的</li>\n<li>准备面试，通过面试题进一步巩固自己的知识，夯实基础。</li>\n</ol>\n<h3 id=\"3-我应该去哪里学习编程？\"><a href=\"#3-我应该去哪里学习编程？\" class=\"headerlink\" title=\"3.我应该去哪里学习编程？\"></a>3.我应该去哪里学习编程？</h3><p>其实这个看个人，如果自学能力强，自控能力强，自学挺好的，下面我列举几个程序员常用的网站  </p>\n<ol>\n<li><a href=\"http://study.163.com/\">网易云课堂</a>，很多免费的视频课程，适合入门学习</li>\n<li><a href=\"http://www.imooc.com/\">慕课网</a>，很多it入门教学视频，资源也不错</li>\n<li><a href=\"http://www.jikexueyuan.com/\">极客学院</a>，和前两个网站差不多，</li>\n<li><a href=\"http://www.ibeifeng.com/\">北风网</a>，类似的教学网站，其它的就不说了</li>\n</ol>\n<h3 id=\"4-编程遇到问题怎么办？\"><a href=\"#4-编程遇到问题怎么办？\" class=\"headerlink\" title=\"4.编程遇到问题怎么办？\"></a>4.编程遇到问题怎么办？</h3><ul>\n<li>百度或者谷歌看看网上有没有类似的问题，一回生，二回熟，很快就明白了</li>\n<li>去官网查看api文档查找原因</li>\n<li>自己要学会debug代码，查找原因</li>\n<li>去各大论坛逛逛，说不定早有人提问此类问题了</li>\n</ul>\n<h3 id=\"5-我想看编程的书籍去哪找呢？\"><a href=\"#5-我想看编程的书籍去哪找呢？\" class=\"headerlink\" title=\"5.我想看编程的书籍去哪找呢？\"></a>5.我想看编程的书籍去哪找呢？</h3><p>经典书籍还是买纸质的，买正版的，支持正版！</p>\n<ol>\n<li><a href=\"http://vdisk.weibo.com/\">新浪微盘</a>，非常多的it书籍  </li>\n<li><a href=\"http://www.jb51.net/\">脚本之家</a>，非常多的pdf书籍，可惜大多数不是文字版pdf  </li>\n<li><a href=\"http://www.salttiger.com/\">英文原版书籍</a>，都是高清文字版pdf，强烈推荐，都是英文原版的  </li>\n<li><a href=\"http://bestcbooks.com/\">计算机书控</a>，都是免费的pdf文档，大多数不是文字版pdf</li>\n</ol>\n<h3 id=\"6-学习心态\"><a href=\"#6-学习心态\" class=\"headerlink\" title=\"6.学习心态\"></a>6.学习心态</h3><ol>\n<li>不要老是折腾工具，ide工具和文本编辑器一样一个就够了</li>\n<li>不要自满，编程的东西学一辈子也学不会，要谦虚好学</li>\n<li>不要急躁，既然知识学不完，我们应该掌握学习方法，指定计划去学习</li>\n<li>要持之以恒，学习是一辈子的事，如果你没有这个打算，还是不要做程序员的好</li>\n<li>切忌眼高手低，必须要敲代码才能达到效果</li>\n</ol>\n<h3 id=\"7-编程进阶之路\"><a href=\"#7-编程进阶之路\" class=\"headerlink\" title=\"7.编程进阶之路\"></a>7.编程进阶之路</h3><pre><code>当有了一定的编程基础之后,最大的问题是确定自己的方向,这个时候最容易迷茫和困惑,学习什么技术?  \n怎么去学,这些真的很难\n</code></pre><ul>\n<li>个人建议如下:<br>1.技术型方向:提高自己的编程能力和语言造诣,最有效的是”造轮子”,量变引起质变</li>\n<li>写插件,写框架,写爬虫,写数据库,自制编程语言,等等.<br>2.业务型方向:提高自己的业务能力,和客户的沟通能力,分析需求,解决客户的难题</li>\n<li>多出去见客户,去现场,了解需求,分析需求,</li>\n</ul>\n","excerpt":"<p><strong> 程序员入门指南 ：</strong> <Excerpt in index | 首页摘要><br>        程序员入门必须了解的一些知识，个人经验，不喜勿喷！<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"程序员的入门规划\"><a href=\"#程序员的入门规划\" class=\"headerlink\" title=\"程序员的入门规划\"></a>程序员的入门规划</h2><h3 id=\"1-我该学习什么语言？\"><a href=\"#1-我该学习什么语言？\" class=\"headerlink\" title=\"1.我该学习什么语言？\"></a>1.我该学习什么语言？</h3><ul>\n<li><p>这个问题困扰了几乎所有的程序员，比如java应用广好就业，比如php入门简单，ios待遇高，  python是万能语言，HTML和js前端缺人才等等</p>\n</li>\n<li><p>个人见解：先学习难度小，大众化的编程语言，比如java，php，python，javascript,c/c++,这几个学哪一种其实差不多，入门以后看自己兴趣在进行其它语言的学习。</p>\n</li>\n</ul>\n<h3 id=\"2-我该怎么学习编程？\"><a href=\"#2-我该怎么学习编程？\" class=\"headerlink\" title=\"2.我该怎么学习编程？\"></a>2.我该怎么学习编程？</h3><p>这个问题是所有的程序员都有的，我也经常会疑问，到底该怎么学习呢？</p>\n<p>个人见解：</p>\n<ol>\n<li>先了解语言的特性，适用的范围场景，比如是适合web开发，还是适合客户端程序，有的适合并发多线程，有的适合异步，还有的比较稳定，适合构建大型项目，有的开发效率高，等等。</li>\n<li>了解语言的语法和常用api的使用，比如变量的声明，循环的使用，io的读取，http服务的创建，把这些基本的语法搞清楚，在进行下一步的学习。</li>\n<li>学习web开发之前的准备，数据库的学习，http协议的学习，html，css和javacript的常用知识了解</li>\n<li>学习常用框架，比如java学习常用的ssh三大框架，node的学习express，一定要做2个项目练习，把自己的之前学习的知识都巩固一下，</li>\n<li>总结一下自己学习的过程，明白编程的思想在哪里，思路在哪里，学习编程，首先应该培养的是编程的思维和思想，有个正确的思维后面都简单多了。</li>\n<li>养成写博客或者学习笔记的习惯，推荐写博客，</li>\n<li>熟悉项目管理工具，svn，git之类的必须要会，工作中这些都是必须的</li>\n<li>准备面试，通过面试题进一步巩固自己的知识，夯实基础。</li>\n</ol>\n<h3 id=\"3-我应该去哪里学习编程？\"><a href=\"#3-我应该去哪里学习编程？\" class=\"headerlink\" title=\"3.我应该去哪里学习编程？\"></a>3.我应该去哪里学习编程？</h3><p>其实这个看个人，如果自学能力强，自控能力强，自学挺好的，下面我列举几个程序员常用的网站  </p>\n<ol>\n<li><a href=\"http://study.163.com/\">网易云课堂</a>，很多免费的视频课程，适合入门学习</li>\n<li><a href=\"http://www.imooc.com/\">慕课网</a>，很多it入门教学视频，资源也不错</li>\n<li><a href=\"http://www.jikexueyuan.com/\">极客学院</a>，和前两个网站差不多，</li>\n<li><a href=\"http://www.ibeifeng.com/\">北风网</a>，类似的教学网站，其它的就不说了</li>\n</ol>\n<h3 id=\"4-编程遇到问题怎么办？\"><a href=\"#4-编程遇到问题怎么办？\" class=\"headerlink\" title=\"4.编程遇到问题怎么办？\"></a>4.编程遇到问题怎么办？</h3><ul>\n<li>百度或者谷歌看看网上有没有类似的问题，一回生，二回熟，很快就明白了</li>\n<li>去官网查看api文档查找原因</li>\n<li>自己要学会debug代码，查找原因</li>\n<li>去各大论坛逛逛，说不定早有人提问此类问题了</li>\n</ul>\n<h3 id=\"5-我想看编程的书籍去哪找呢？\"><a href=\"#5-我想看编程的书籍去哪找呢？\" class=\"headerlink\" title=\"5.我想看编程的书籍去哪找呢？\"></a>5.我想看编程的书籍去哪找呢？</h3><p>经典书籍还是买纸质的，买正版的，支持正版！</p>\n<ol>\n<li><a href=\"http://vdisk.weibo.com/\">新浪微盘</a>，非常多的it书籍  </li>\n<li><a href=\"http://www.jb51.net/\">脚本之家</a>，非常多的pdf书籍，可惜大多数不是文字版pdf  </li>\n<li><a href=\"http://www.salttiger.com/\">英文原版书籍</a>，都是高清文字版pdf，强烈推荐，都是英文原版的  </li>\n<li><a href=\"http://bestcbooks.com/\">计算机书控</a>，都是免费的pdf文档，大多数不是文字版pdf</li>\n</ol>\n<h3 id=\"6-学习心态\"><a href=\"#6-学习心态\" class=\"headerlink\" title=\"6.学习心态\"></a>6.学习心态</h3><ol>\n<li>不要老是折腾工具，ide工具和文本编辑器一样一个就够了</li>\n<li>不要自满，编程的东西学一辈子也学不会，要谦虚好学</li>\n<li>不要急躁，既然知识学不完，我们应该掌握学习方法，指定计划去学习</li>\n<li>要持之以恒，学习是一辈子的事，如果你没有这个打算，还是不要做程序员的好</li>\n<li>切忌眼高手低，必须要敲代码才能达到效果</li>\n</ol>\n<h3 id=\"7-编程进阶之路\"><a href=\"#7-编程进阶之路\" class=\"headerlink\" title=\"7.编程进阶之路\"></a>7.编程进阶之路</h3><pre><code>当有了一定的编程基础之后,最大的问题是确定自己的方向,这个时候最容易迷茫和困惑,学习什么技术?  \n怎么去学,这些真的很难\n</code></pre><ul>\n<li>个人建议如下:<br>1.技术型方向:提高自己的编程能力和语言造诣,最有效的是”造轮子”,量变引起质变</li>\n<li>写插件,写框架,写爬虫,写数据库,自制编程语言,等等.<br>2.业务型方向:提高自己的业务能力,和客户的沟通能力,分析需求,解决客户的难题</li>\n<li>多出去见客户,去现场,了解需求,分析需求,</li>\n</ul>"},{"title":"我的梦想","date":"2016-04-24T14:07:27.000Z","_content":"** 我的梦想：** <Excerpt in index | 首页摘要>\n    一个人如果活着没有梦想,那和咸鱼有什么区别?\n<!-- more -->请问你的梦想是什么?\n<The rest of contents | 余下全文>\n\n### 我的梦想是什么?\n- 刚开始接触编程的时候,感觉代码是个神器的世界,在这里你可以为所欲为,然后看到很多大神的框架,软件,在使用别人好的框架,好的软件,那一刻我感觉 <strong>\"我的梦想就是用代码改变世界!\"</strong>\n\n- 感觉自己迷失了好久,找不到方向,曾经的激情不知道去了哪里?\n\n### 开始追梦\n- 有了梦想,我开始了疯狂的奋斗,每天休息4,5个小时,全身心去学习编程,努力还是很快得到了回报,我用了3个月就入门学好了java,然后找了java程序员的工作,就这样开始了我程序员的追梦之旅!\n\n### 初级程序员\n\n- 虽然入门了,但是刚开始的工作并不是一帆风顺的.我还记得第一份任务,老大让我写一个稍微复杂的接口,客户专用的接口,使用springmvc,还要提交到git上,对我而言,这一切都是新东西,经过我几天的努力,还是搞砸了,就这样第一个任务以失败告终!\n- 虽然第一个任务失败了,但是工作还在继续,我还是继续努力的工作,我必须承认我不是编程的天才,可能别人一个小时完成的任务,我需要一个半小时,但是我必须做好,因为我有梦想!\n\n### 中级程序员\n- 在工作的时候就感觉时间飞逝,一天天很快过去.晚上睡觉的时候,我就会问自己,我今天到底做了什么功能?我收获了哪些技能?曾经有段时间每天都是该页面,我几乎烦的崩溃,感觉每天都在做无用的东西,后来发现,无论是前段后端,其实都是必不可少的技能,我的心态应该调整,让自己去喜欢前段,同时保持后端的热情.\n\n- 一个成熟的程序员和菜鸟最大的区别应该是心态!\n\n### 高级程序员\n- 未完待续\n\n\n### 架构师\n- 未完待续\n","source":"_posts/dream.md","raw":"title: 我的梦想\ndate: 2016-04-24 22:07:27\ntags: others\ncategories: 个人随笔\n---\n** 我的梦想：** <Excerpt in index | 首页摘要>\n    一个人如果活着没有梦想,那和咸鱼有什么区别?\n<!-- more -->请问你的梦想是什么?\n<The rest of contents | 余下全文>\n\n### 我的梦想是什么?\n- 刚开始接触编程的时候,感觉代码是个神器的世界,在这里你可以为所欲为,然后看到很多大神的框架,软件,在使用别人好的框架,好的软件,那一刻我感觉 <strong>\"我的梦想就是用代码改变世界!\"</strong>\n\n- 感觉自己迷失了好久,找不到方向,曾经的激情不知道去了哪里?\n\n### 开始追梦\n- 有了梦想,我开始了疯狂的奋斗,每天休息4,5个小时,全身心去学习编程,努力还是很快得到了回报,我用了3个月就入门学好了java,然后找了java程序员的工作,就这样开始了我程序员的追梦之旅!\n\n### 初级程序员\n\n- 虽然入门了,但是刚开始的工作并不是一帆风顺的.我还记得第一份任务,老大让我写一个稍微复杂的接口,客户专用的接口,使用springmvc,还要提交到git上,对我而言,这一切都是新东西,经过我几天的努力,还是搞砸了,就这样第一个任务以失败告终!\n- 虽然第一个任务失败了,但是工作还在继续,我还是继续努力的工作,我必须承认我不是编程的天才,可能别人一个小时完成的任务,我需要一个半小时,但是我必须做好,因为我有梦想!\n\n### 中级程序员\n- 在工作的时候就感觉时间飞逝,一天天很快过去.晚上睡觉的时候,我就会问自己,我今天到底做了什么功能?我收获了哪些技能?曾经有段时间每天都是该页面,我几乎烦的崩溃,感觉每天都在做无用的东西,后来发现,无论是前段后端,其实都是必不可少的技能,我的心态应该调整,让自己去喜欢前段,同时保持后端的热情.\n\n- 一个成熟的程序员和菜鸟最大的区别应该是心态!\n\n### 高级程序员\n- 未完待续\n\n\n### 架构师\n- 未完待续\n","slug":"dream","published":1,"updated":"2016-11-13T05:48:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d7w000cohzjff4bl48g","content":"<p><strong> 我的梦想：</strong> <Excerpt in index | 首页摘要><br>    一个人如果活着没有梦想,那和咸鱼有什么区别?<br><a id=\"more\"></a>请问你的梦想是什么?</p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"我的梦想是什么\"><a href=\"#我的梦想是什么\" class=\"headerlink\" title=\"我的梦想是什么?\"></a>我的梦想是什么?</h3><ul>\n<li><p>刚开始接触编程的时候,感觉代码是个神器的世界,在这里你可以为所欲为,然后看到很多大神的框架,软件,在使用别人好的框架,好的软件,那一刻我感觉 <strong>“我的梦想就是用代码改变世界!”</strong></p>\n</li>\n<li><p>感觉自己迷失了好久,找不到方向,曾经的激情不知道去了哪里?</p>\n</li>\n</ul>\n<h3 id=\"开始追梦\"><a href=\"#开始追梦\" class=\"headerlink\" title=\"开始追梦\"></a>开始追梦</h3><ul>\n<li>有了梦想,我开始了疯狂的奋斗,每天休息4,5个小时,全身心去学习编程,努力还是很快得到了回报,我用了3个月就入门学好了java,然后找了java程序员的工作,就这样开始了我程序员的追梦之旅!</li>\n</ul>\n<h3 id=\"初级程序员\"><a href=\"#初级程序员\" class=\"headerlink\" title=\"初级程序员\"></a>初级程序员</h3><ul>\n<li>虽然入门了,但是刚开始的工作并不是一帆风顺的.我还记得第一份任务,老大让我写一个稍微复杂的接口,客户专用的接口,使用springmvc,还要提交到git上,对我而言,这一切都是新东西,经过我几天的努力,还是搞砸了,就这样第一个任务以失败告终!</li>\n<li>虽然第一个任务失败了,但是工作还在继续,我还是继续努力的工作,我必须承认我不是编程的天才,可能别人一个小时完成的任务,我需要一个半小时,但是我必须做好,因为我有梦想!</li>\n</ul>\n<h3 id=\"中级程序员\"><a href=\"#中级程序员\" class=\"headerlink\" title=\"中级程序员\"></a>中级程序员</h3><ul>\n<li><p>在工作的时候就感觉时间飞逝,一天天很快过去.晚上睡觉的时候,我就会问自己,我今天到底做了什么功能?我收获了哪些技能?曾经有段时间每天都是该页面,我几乎烦的崩溃,感觉每天都在做无用的东西,后来发现,无论是前段后端,其实都是必不可少的技能,我的心态应该调整,让自己去喜欢前段,同时保持后端的热情.</p>\n</li>\n<li><p>一个成熟的程序员和菜鸟最大的区别应该是心态!</p>\n</li>\n</ul>\n<h3 id=\"高级程序员\"><a href=\"#高级程序员\" class=\"headerlink\" title=\"高级程序员\"></a>高级程序员</h3><ul>\n<li>未完待续</li>\n</ul>\n<h3 id=\"架构师\"><a href=\"#架构师\" class=\"headerlink\" title=\"架构师\"></a>架构师</h3><ul>\n<li>未完待续</li>\n</ul>\n","excerpt":"<p><strong> 我的梦想：</strong> <Excerpt in index | 首页摘要><br>    一个人如果活着没有梦想,那和咸鱼有什么区别?<br>","more":"请问你的梦想是什么?</p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"我的梦想是什么\"><a href=\"#我的梦想是什么\" class=\"headerlink\" title=\"我的梦想是什么?\"></a>我的梦想是什么?</h3><ul>\n<li><p>刚开始接触编程的时候,感觉代码是个神器的世界,在这里你可以为所欲为,然后看到很多大神的框架,软件,在使用别人好的框架,好的软件,那一刻我感觉 <strong>“我的梦想就是用代码改变世界!”</strong></p>\n</li>\n<li><p>感觉自己迷失了好久,找不到方向,曾经的激情不知道去了哪里?</p>\n</li>\n</ul>\n<h3 id=\"开始追梦\"><a href=\"#开始追梦\" class=\"headerlink\" title=\"开始追梦\"></a>开始追梦</h3><ul>\n<li>有了梦想,我开始了疯狂的奋斗,每天休息4,5个小时,全身心去学习编程,努力还是很快得到了回报,我用了3个月就入门学好了java,然后找了java程序员的工作,就这样开始了我程序员的追梦之旅!</li>\n</ul>\n<h3 id=\"初级程序员\"><a href=\"#初级程序员\" class=\"headerlink\" title=\"初级程序员\"></a>初级程序员</h3><ul>\n<li>虽然入门了,但是刚开始的工作并不是一帆风顺的.我还记得第一份任务,老大让我写一个稍微复杂的接口,客户专用的接口,使用springmvc,还要提交到git上,对我而言,这一切都是新东西,经过我几天的努力,还是搞砸了,就这样第一个任务以失败告终!</li>\n<li>虽然第一个任务失败了,但是工作还在继续,我还是继续努力的工作,我必须承认我不是编程的天才,可能别人一个小时完成的任务,我需要一个半小时,但是我必须做好,因为我有梦想!</li>\n</ul>\n<h3 id=\"中级程序员\"><a href=\"#中级程序员\" class=\"headerlink\" title=\"中级程序员\"></a>中级程序员</h3><ul>\n<li><p>在工作的时候就感觉时间飞逝,一天天很快过去.晚上睡觉的时候,我就会问自己,我今天到底做了什么功能?我收获了哪些技能?曾经有段时间每天都是该页面,我几乎烦的崩溃,感觉每天都在做无用的东西,后来发现,无论是前段后端,其实都是必不可少的技能,我的心态应该调整,让自己去喜欢前段,同时保持后端的热情.</p>\n</li>\n<li><p>一个成熟的程序员和菜鸟最大的区别应该是心态!</p>\n</li>\n</ul>\n<h3 id=\"高级程序员\"><a href=\"#高级程序员\" class=\"headerlink\" title=\"高级程序员\"></a>高级程序员</h3><ul>\n<li>未完待续</li>\n</ul>\n<h3 id=\"架构师\"><a href=\"#架构师\" class=\"headerlink\" title=\"架构师\"></a>架构师</h3><ul>\n<li>未完待续</li>\n</ul>"},{"title":"使用Ghost搭建个人博客","date":"2016-05-03T23:59:22.000Z","_content":"** 使用ghost搭建个人博客：** <Excerpt in index | 首页摘要>\n\t使用ghost搭建个人博客\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### ghost简介\n- ghost是轻量级的博客建站工具,使用起来简单,功能强大,适合个人搭建小型网站,个人博客,或者个人展示的网站\n- ghost基于nodejs,对于熟悉js的前端小伙伴来说,入手起来也是简单不少.\n\n### 准备工作\n1. 安装nodejs\n2. 安转git\n3. 配置ssh\n4. 下载ghost\n3. 购买域名\n\n### 搭建博客\n\n### 定制个人博客\n\n### 享受吧\n","source":"_posts/ghost-blog.md","raw":"title: 使用ghost搭建个人博客\ndate: 2016-05-04 07:59:22\ntags: others\ncategories: 开发工具\n---\n** 使用ghost搭建个人博客：** <Excerpt in index | 首页摘要>\n\t使用ghost搭建个人博客\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### ghost简介\n- ghost是轻量级的博客建站工具,使用起来简单,功能强大,适合个人搭建小型网站,个人博客,或者个人展示的网站\n- ghost基于nodejs,对于熟悉js的前端小伙伴来说,入手起来也是简单不少.\n\n### 准备工作\n1. 安装nodejs\n2. 安转git\n3. 配置ssh\n4. 下载ghost\n3. 购买域名\n\n### 搭建博客\n\n### 定制个人博客\n\n### 享受吧\n","slug":"ghost-blog","published":1,"updated":"2016-11-13T05:48:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d7y000fohzj9ywsfycz","content":"<p><strong> 使用ghost搭建个人博客：</strong> <Excerpt in index | 首页摘要><br>    使用ghost搭建个人博客<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"ghost简介\"><a href=\"#ghost简介\" class=\"headerlink\" title=\"ghost简介\"></a>ghost简介</h3><ul>\n<li>ghost是轻量级的博客建站工具,使用起来简单,功能强大,适合个人搭建小型网站,个人博客,或者个人展示的网站</li>\n<li>ghost基于nodejs,对于熟悉js的前端小伙伴来说,入手起来也是简单不少.</li>\n</ul>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>安装nodejs</li>\n<li>安转git</li>\n<li>配置ssh</li>\n<li>下载ghost</li>\n<li>购买域名</li>\n</ol>\n<h3 id=\"搭建博客\"><a href=\"#搭建博客\" class=\"headerlink\" title=\"搭建博客\"></a>搭建博客</h3><h3 id=\"定制个人博客\"><a href=\"#定制个人博客\" class=\"headerlink\" title=\"定制个人博客\"></a>定制个人博客</h3><h3 id=\"享受吧\"><a href=\"#享受吧\" class=\"headerlink\" title=\"享受吧\"></a>享受吧</h3>","excerpt":"<p><strong> 使用ghost搭建个人博客：</strong> <Excerpt in index | 首页摘要><br>    使用ghost搭建个人博客<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"ghost简介\"><a href=\"#ghost简介\" class=\"headerlink\" title=\"ghost简介\"></a>ghost简介</h3><ul>\n<li>ghost是轻量级的博客建站工具,使用起来简单,功能强大,适合个人搭建小型网站,个人博客,或者个人展示的网站</li>\n<li>ghost基于nodejs,对于熟悉js的前端小伙伴来说,入手起来也是简单不少.</li>\n</ul>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ol>\n<li>安装nodejs</li>\n<li>安转git</li>\n<li>配置ssh</li>\n<li>下载ghost</li>\n<li>购买域名</li>\n</ol>\n<h3 id=\"搭建博客\"><a href=\"#搭建博客\" class=\"headerlink\" title=\"搭建博客\"></a>搭建博客</h3><h3 id=\"定制个人博客\"><a href=\"#定制个人博客\" class=\"headerlink\" title=\"定制个人博客\"></a>定制个人博客</h3><h3 id=\"享受吧\"><a href=\"#享受吧\" class=\"headerlink\" title=\"享受吧\"></a>享受吧</h3>"},{"title":"Git学习笔记","date":"2016-05-01T00:24:45.000Z","_content":"** git学习笔记：** <Excerpt in index | 首页摘要>\n\tgit的常用操作，高级技巧都要哦\n<!-- more -->\n<The rest of contents | 余下全文\\>\n\n### 安装git\n1. 下载安装包 ￼下载地址￼\n2. 安装git\n3. 进入命令行,输入git看看是否成功\n\n### 配置git\n1. 配置全局用户名和密码\n\t\\`git config --global user.name \"John Doe\"\n\tgit config --global user.email johndoe@example.com\n\t\\`\n2. 配置ssh公钥\n\t`cd ~/.ssh` 然后`ls`\n\t如果没有,直接生成,一路点击enter\n\t\\`\\`\\`\n\tssh-keygen\n\tcat \\~/.ssh/id\\_rsa.pub\n\t\\`\\`\\`\n\t把公钥配置到github的个人设置\n\n### 常用的命令\n1. repository操作\n\t- 检出（clone）仓库代码：`git clone repository-url` / `git clone repository-url local-directoryname`\n\t\t+ 例如，clone jquery 仓库到本地： `git clone git://github.com/jquery/jquery.git`\n\t\t+ clone jquery 仓库到本地，并且重命名为 my-jquery ：`git clone git://github.com/jquery/jquery.git my-jquery`\n\t- 查看远程仓库：`git remote -v`\n\t- 添加远程仓库：`git remote add [name] [repository-url]`\n\t- 删除远程仓库：`git remote rm [name]`\n\t- 修改远程仓库地址：`git remote set-url origin new-repository-url`\n\t- 拉取远程仓库： `git pull [remoteName] [localBranchName]`\n\t- 推送远程仓库： `git push [remoteName] [localBranchName]`\n\n2. 提交/拉取/合并/删除\n\t- 添加文件到暂存区（staged）：`git add filename` / `git stage filename`\n\t- 将所有修改文件添加到暂存区（staged）： `git add --all` / `git add -A`\n\t- 提交修改到暂存区（staged）：`git commit -m 'commit message'` / `git commit -a -m 'commit message'` 注意理解 -a 参数的意义\n\t- 从Git仓库中删除文件：`git rm filename`\n\t- 从Git仓库中删除文件，但本地文件保留：`git rm --cached filename`\n\t- 重命名某个文件：`git mv filename newfilename` 或者直接修改完毕文件名 ，进行`git add -A && git commit -m 'commit message'` Git会自动识别是重命名了文件\n\n\t- 获取远程最新代码到本地：`git pull (origin branchname)` 可以指定分支名，也可以忽略。pull 命令自动 fetch 远程代码并且 merge，如果有冲突，会显示在状态栏，需要手动处理。更推荐使用：`git fetch` 之后 `git merge --no-ff origin branchname` 拉取最新的代码到本地仓库，并手动 merge 。\n\n3. 日志查看\n\t- 查看日志：`git log`\n\t- 查看日志，并查看每次的修改内容：`git log -p`\n\t- 查看日志，并查看每次文件的简单修改状态：`git log --stat`\n\t- 一行显示日志：`git log --pretty=oneline` / `git log --pretty='format:\"%h - %an, %ar : %s'`\n\t- 查看日志范围：\n\t\t+ 查看最近10条日志：`git log -10`\n\t\t+ 查看2周前：`git log --until=2week` 或者指定2周的明确日期，比如：`git log --until=2015-08-12`\n\t\t+ 查看最近2周内：`git log --since=2week` 或者指定2周明确日志，比如：`git log --since=2015-08-12`\n\t\t+ 只查看某个用户的提交：`git log --committer=user.name` / `git log --author=user.name`\n4. 取消操作\n\t- 上次提交msg错误/有未提交的文件应该同上一次一起提交，需要重新提交备注：`git commit --amend -m 'new msg'`\n\t- 一次`git add -A`后，需要将某个文件撤回到工作区，即：某个文件不应该在本次commit中：`git reset HEAD filename`\n\t- 撤销某些文件的修改内容：`git checkout -- filename` 注意：一旦执行，所有的改动都没有了，谨慎！谨慎！谨慎！\n\t- 将工作区内容回退到远端的某个版本：`git reset --hard <sha1-of-commit>`\n\t\t+ `--hard`：reset stage and working directory ,<commitid> 以来所有的变更全部丢弃，并将 HEAD 指向<commitid>\n\t\t+ `--soft`：nothing changed to stage and working directory ,仅仅将HEAD指向<commitid> ，所有变更显示在”changed to be committed”中\n\t\t+ `--mixed`：default,reset stage ,nothing to working directory ，这也就是第二个例子的原因\n\n5. 比较差异\n\t- 查看工作区（working directory）和暂存区（staged）之间差异：`git diff`\n\t- 查看工作区（working directory）与当前仓库版本（repository）HEAD版本差异：`git diff HEAD`\n\t- 查看暂存区（staged）与当前仓库版本（repository）差异：`git diff --cached` / `git diff --staged`\n\n6. 合并操作\n\t- 解决冲突后/获取远程最新代码后合并代码：`git merge branchname`\n\t- 保留该存在版本合并log：`git merge --no-ff branchname` 参数`--no-ff`防止 fast-forward 的提交\n","source":"_posts/git-config-study.md","raw":"title: git学习笔记\ndate: 2016-05-01 08:24:45\ntags: others\ncategories: 学习笔记\n---\n** git学习笔记：** <Excerpt in index | 首页摘要>\n\tgit的常用操作，高级技巧都要哦\n<!-- more -->\n<The rest of contents | 余下全文\\>\n\n### 安装git\n1. 下载安装包 ￼下载地址￼\n2. 安装git\n3. 进入命令行,输入git看看是否成功\n\n### 配置git\n1. 配置全局用户名和密码\n\t\\`git config --global user.name \"John Doe\"\n\tgit config --global user.email johndoe@example.com\n\t\\`\n2. 配置ssh公钥\n\t`cd ~/.ssh` 然后`ls`\n\t如果没有,直接生成,一路点击enter\n\t\\`\\`\\`\n\tssh-keygen\n\tcat \\~/.ssh/id\\_rsa.pub\n\t\\`\\`\\`\n\t把公钥配置到github的个人设置\n\n### 常用的命令\n1. repository操作\n\t- 检出（clone）仓库代码：`git clone repository-url` / `git clone repository-url local-directoryname`\n\t\t+ 例如，clone jquery 仓库到本地： `git clone git://github.com/jquery/jquery.git`\n\t\t+ clone jquery 仓库到本地，并且重命名为 my-jquery ：`git clone git://github.com/jquery/jquery.git my-jquery`\n\t- 查看远程仓库：`git remote -v`\n\t- 添加远程仓库：`git remote add [name] [repository-url]`\n\t- 删除远程仓库：`git remote rm [name]`\n\t- 修改远程仓库地址：`git remote set-url origin new-repository-url`\n\t- 拉取远程仓库： `git pull [remoteName] [localBranchName]`\n\t- 推送远程仓库： `git push [remoteName] [localBranchName]`\n\n2. 提交/拉取/合并/删除\n\t- 添加文件到暂存区（staged）：`git add filename` / `git stage filename`\n\t- 将所有修改文件添加到暂存区（staged）： `git add --all` / `git add -A`\n\t- 提交修改到暂存区（staged）：`git commit -m 'commit message'` / `git commit -a -m 'commit message'` 注意理解 -a 参数的意义\n\t- 从Git仓库中删除文件：`git rm filename`\n\t- 从Git仓库中删除文件，但本地文件保留：`git rm --cached filename`\n\t- 重命名某个文件：`git mv filename newfilename` 或者直接修改完毕文件名 ，进行`git add -A && git commit -m 'commit message'` Git会自动识别是重命名了文件\n\n\t- 获取远程最新代码到本地：`git pull (origin branchname)` 可以指定分支名，也可以忽略。pull 命令自动 fetch 远程代码并且 merge，如果有冲突，会显示在状态栏，需要手动处理。更推荐使用：`git fetch` 之后 `git merge --no-ff origin branchname` 拉取最新的代码到本地仓库，并手动 merge 。\n\n3. 日志查看\n\t- 查看日志：`git log`\n\t- 查看日志，并查看每次的修改内容：`git log -p`\n\t- 查看日志，并查看每次文件的简单修改状态：`git log --stat`\n\t- 一行显示日志：`git log --pretty=oneline` / `git log --pretty='format:\"%h - %an, %ar : %s'`\n\t- 查看日志范围：\n\t\t+ 查看最近10条日志：`git log -10`\n\t\t+ 查看2周前：`git log --until=2week` 或者指定2周的明确日期，比如：`git log --until=2015-08-12`\n\t\t+ 查看最近2周内：`git log --since=2week` 或者指定2周明确日志，比如：`git log --since=2015-08-12`\n\t\t+ 只查看某个用户的提交：`git log --committer=user.name` / `git log --author=user.name`\n4. 取消操作\n\t- 上次提交msg错误/有未提交的文件应该同上一次一起提交，需要重新提交备注：`git commit --amend -m 'new msg'`\n\t- 一次`git add -A`后，需要将某个文件撤回到工作区，即：某个文件不应该在本次commit中：`git reset HEAD filename`\n\t- 撤销某些文件的修改内容：`git checkout -- filename` 注意：一旦执行，所有的改动都没有了，谨慎！谨慎！谨慎！\n\t- 将工作区内容回退到远端的某个版本：`git reset --hard <sha1-of-commit>`\n\t\t+ `--hard`：reset stage and working directory ,<commitid> 以来所有的变更全部丢弃，并将 HEAD 指向<commitid>\n\t\t+ `--soft`：nothing changed to stage and working directory ,仅仅将HEAD指向<commitid> ，所有变更显示在”changed to be committed”中\n\t\t+ `--mixed`：default,reset stage ,nothing to working directory ，这也就是第二个例子的原因\n\n5. 比较差异\n\t- 查看工作区（working directory）和暂存区（staged）之间差异：`git diff`\n\t- 查看工作区（working directory）与当前仓库版本（repository）HEAD版本差异：`git diff HEAD`\n\t- 查看暂存区（staged）与当前仓库版本（repository）差异：`git diff --cached` / `git diff --staged`\n\n6. 合并操作\n\t- 解决冲突后/获取远程最新代码后合并代码：`git merge branchname`\n\t- 保留该存在版本合并log：`git merge --no-ff branchname` 参数`--no-ff`防止 fast-forward 的提交\n","slug":"git-config-study","published":1,"updated":"2016-11-13T05:48:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d81000johzj5rpnfxy2","content":"<p><strong> git学习笔记：</strong> <Excerpt in index | 首页摘要><br>    git的常用操作，高级技巧都要哦<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文\\>\n\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><ol>\n<li>下载安装包 ￼下载地址￼</li>\n<li>安装git</li>\n<li>进入命令行,输入git看看是否成功</li>\n</ol>\n<h3 id=\"配置git\"><a href=\"#配置git\" class=\"headerlink\" title=\"配置git\"></a>配置git</h3><ol>\n<li>配置全局用户名和密码<br> `git config –global user.name “John Doe”<br> git config –global user.email johndoe@example.com<br> `</li>\n<li>配置ssh公钥<br> <code>cd ~/.ssh</code> 然后<code>ls</code><br> 如果没有,直接生成,一路点击enter<br> ```<br> ssh-keygen<br> cat ~/.ssh/id_rsa.pub<br> ```<br> 把公钥配置到github的个人设置</li>\n</ol>\n<h3 id=\"常用的命令\"><a href=\"#常用的命令\" class=\"headerlink\" title=\"常用的命令\"></a>常用的命令</h3><ol>\n<li><p>repository操作</p>\n<ul>\n<li>检出（clone）仓库代码：<code>git clone repository-url</code> / <code>git clone repository-url local-directoryname</code><ul>\n<li>例如，clone jquery 仓库到本地： <code>git clone git://github.com/jquery/jquery.git</code></li>\n<li>clone jquery 仓库到本地，并且重命名为 my-jquery ：<code>git clone git://github.com/jquery/jquery.git my-jquery</code></li>\n</ul>\n</li>\n<li>查看远程仓库：<code>git remote -v</code></li>\n<li>添加远程仓库：<code>git remote add [name] [repository-url]</code></li>\n<li>删除远程仓库：<code>git remote rm [name]</code></li>\n<li>修改远程仓库地址：<code>git remote set-url origin new-repository-url</code></li>\n<li>拉取远程仓库： <code>git pull [remoteName] [localBranchName]</code></li>\n<li>推送远程仓库： <code>git push [remoteName] [localBranchName]</code></li>\n</ul>\n</li>\n<li><p>提交/拉取/合并/删除</p>\n<ul>\n<li>添加文件到暂存区（staged）：<code>git add filename</code> / <code>git stage filename</code></li>\n<li>将所有修改文件添加到暂存区（staged）： <code>git add --all</code> / <code>git add -A</code></li>\n<li>提交修改到暂存区（staged）：<code>git commit -m &#39;commit message&#39;</code> / <code>git commit -a -m &#39;commit message&#39;</code> 注意理解 -a 参数的意义</li>\n<li>从Git仓库中删除文件：<code>git rm filename</code></li>\n<li>从Git仓库中删除文件，但本地文件保留：<code>git rm --cached filename</code></li>\n<li><p>重命名某个文件：<code>git mv filename newfilename</code> 或者直接修改完毕文件名 ，进行<code>git add -A &amp;&amp; git commit -m &#39;commit message&#39;</code> Git会自动识别是重命名了文件</p>\n</li>\n<li><p>获取远程最新代码到本地：<code>git pull (origin branchname)</code> 可以指定分支名，也可以忽略。pull 命令自动 fetch 远程代码并且 merge，如果有冲突，会显示在状态栏，需要手动处理。更推荐使用：<code>git fetch</code> 之后 <code>git merge --no-ff origin branchname</code> 拉取最新的代码到本地仓库，并手动 merge 。</p>\n</li>\n</ul>\n</li>\n<li><p>日志查看</p>\n<ul>\n<li>查看日志：<code>git log</code></li>\n<li>查看日志，并查看每次的修改内容：<code>git log -p</code></li>\n<li>查看日志，并查看每次文件的简单修改状态：<code>git log --stat</code></li>\n<li>一行显示日志：<code>git log --pretty=oneline</code> / <code>git log --pretty=&#39;format:&quot;%h - %an, %ar : %s&#39;</code></li>\n<li>查看日志范围：<ul>\n<li>查看最近10条日志：<code>git log -10</code></li>\n<li>查看2周前：<code>git log --until=2week</code> 或者指定2周的明确日期，比如：<code>git log --until=2015-08-12</code></li>\n<li>查看最近2周内：<code>git log --since=2week</code> 或者指定2周明确日志，比如：<code>git log --since=2015-08-12</code></li>\n<li>只查看某个用户的提交：<code>git log --committer=user.name</code> / <code>git log --author=user.name</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>取消操作</p>\n<ul>\n<li>上次提交msg错误/有未提交的文件应该同上一次一起提交，需要重新提交备注：<code>git commit --amend -m &#39;new msg&#39;</code></li>\n<li>一次<code>git add -A</code>后，需要将某个文件撤回到工作区，即：某个文件不应该在本次commit中：<code>git reset HEAD filename</code></li>\n<li>撤销某些文件的修改内容：<code>git checkout -- filename</code> 注意：一旦执行，所有的改动都没有了，谨慎！谨慎！谨慎！</li>\n<li>将工作区内容回退到远端的某个版本：<code>git reset --hard &lt;sha1-of-commit&gt;</code><ul>\n<li><code>--hard</code>：reset stage and working directory ,<commitid> 以来所有的变更全部丢弃，并将 HEAD 指向<commitid></li>\n<li><code>--soft</code>：nothing changed to stage and working directory ,仅仅将HEAD指向<commitid> ，所有变更显示在”changed to be committed”中</li>\n<li><code>--mixed</code>：default,reset stage ,nothing to working directory ，这也就是第二个例子的原因</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>比较差异</p>\n<ul>\n<li>查看工作区（working directory）和暂存区（staged）之间差异：<code>git diff</code></li>\n<li>查看工作区（working directory）与当前仓库版本（repository）HEAD版本差异：<code>git diff HEAD</code></li>\n<li>查看暂存区（staged）与当前仓库版本（repository）差异：<code>git diff --cached</code> / <code>git diff --staged</code></li>\n</ul>\n</li>\n<li><p>合并操作</p>\n<ul>\n<li>解决冲突后/获取远程最新代码后合并代码：<code>git merge branchname</code></li>\n<li>保留该存在版本合并log：<code>git merge --no-ff branchname</code> 参数<code>--no-ff</code>防止 fast-forward 的提交</li>\n</ul>\n</li>\n</ol>\n","excerpt":"<p><strong> git学习笔记：</strong> <Excerpt in index | 首页摘要><br>    git的常用操作，高级技巧都要哦<br>","more":"</p>\n<The rest of contents | 余下全文\\>\n\n<h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><ol>\n<li>下载安装包 ￼下载地址￼</li>\n<li>安装git</li>\n<li>进入命令行,输入git看看是否成功</li>\n</ol>\n<h3 id=\"配置git\"><a href=\"#配置git\" class=\"headerlink\" title=\"配置git\"></a>配置git</h3><ol>\n<li>配置全局用户名和密码<br> `git config –global user.name “John Doe”<br> git config –global user.email johndoe@example.com<br> `</li>\n<li>配置ssh公钥<br> <code>cd ~/.ssh</code> 然后<code>ls</code><br> 如果没有,直接生成,一路点击enter<br> ```<br> ssh-keygen<br> cat ~/.ssh/id_rsa.pub<br> ```<br> 把公钥配置到github的个人设置</li>\n</ol>\n<h3 id=\"常用的命令\"><a href=\"#常用的命令\" class=\"headerlink\" title=\"常用的命令\"></a>常用的命令</h3><ol>\n<li><p>repository操作</p>\n<ul>\n<li>检出（clone）仓库代码：<code>git clone repository-url</code> / <code>git clone repository-url local-directoryname</code><ul>\n<li>例如，clone jquery 仓库到本地： <code>git clone git://github.com/jquery/jquery.git</code></li>\n<li>clone jquery 仓库到本地，并且重命名为 my-jquery ：<code>git clone git://github.com/jquery/jquery.git my-jquery</code></li>\n</ul>\n</li>\n<li>查看远程仓库：<code>git remote -v</code></li>\n<li>添加远程仓库：<code>git remote add [name] [repository-url]</code></li>\n<li>删除远程仓库：<code>git remote rm [name]</code></li>\n<li>修改远程仓库地址：<code>git remote set-url origin new-repository-url</code></li>\n<li>拉取远程仓库： <code>git pull [remoteName] [localBranchName]</code></li>\n<li>推送远程仓库： <code>git push [remoteName] [localBranchName]</code></li>\n</ul>\n</li>\n<li><p>提交/拉取/合并/删除</p>\n<ul>\n<li>添加文件到暂存区（staged）：<code>git add filename</code> / <code>git stage filename</code></li>\n<li>将所有修改文件添加到暂存区（staged）： <code>git add --all</code> / <code>git add -A</code></li>\n<li>提交修改到暂存区（staged）：<code>git commit -m &#39;commit message&#39;</code> / <code>git commit -a -m &#39;commit message&#39;</code> 注意理解 -a 参数的意义</li>\n<li>从Git仓库中删除文件：<code>git rm filename</code></li>\n<li>从Git仓库中删除文件，但本地文件保留：<code>git rm --cached filename</code></li>\n<li><p>重命名某个文件：<code>git mv filename newfilename</code> 或者直接修改完毕文件名 ，进行<code>git add -A &amp;&amp; git commit -m &#39;commit message&#39;</code> Git会自动识别是重命名了文件</p>\n</li>\n<li><p>获取远程最新代码到本地：<code>git pull (origin branchname)</code> 可以指定分支名，也可以忽略。pull 命令自动 fetch 远程代码并且 merge，如果有冲突，会显示在状态栏，需要手动处理。更推荐使用：<code>git fetch</code> 之后 <code>git merge --no-ff origin branchname</code> 拉取最新的代码到本地仓库，并手动 merge 。</p>\n</li>\n</ul>\n</li>\n<li><p>日志查看</p>\n<ul>\n<li>查看日志：<code>git log</code></li>\n<li>查看日志，并查看每次的修改内容：<code>git log -p</code></li>\n<li>查看日志，并查看每次文件的简单修改状态：<code>git log --stat</code></li>\n<li>一行显示日志：<code>git log --pretty=oneline</code> / <code>git log --pretty=&#39;format:&quot;%h - %an, %ar : %s&#39;</code></li>\n<li>查看日志范围：<ul>\n<li>查看最近10条日志：<code>git log -10</code></li>\n<li>查看2周前：<code>git log --until=2week</code> 或者指定2周的明确日期，比如：<code>git log --until=2015-08-12</code></li>\n<li>查看最近2周内：<code>git log --since=2week</code> 或者指定2周明确日志，比如：<code>git log --since=2015-08-12</code></li>\n<li>只查看某个用户的提交：<code>git log --committer=user.name</code> / <code>git log --author=user.name</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>取消操作</p>\n<ul>\n<li>上次提交msg错误/有未提交的文件应该同上一次一起提交，需要重新提交备注：<code>git commit --amend -m &#39;new msg&#39;</code></li>\n<li>一次<code>git add -A</code>后，需要将某个文件撤回到工作区，即：某个文件不应该在本次commit中：<code>git reset HEAD filename</code></li>\n<li>撤销某些文件的修改内容：<code>git checkout -- filename</code> 注意：一旦执行，所有的改动都没有了，谨慎！谨慎！谨慎！</li>\n<li>将工作区内容回退到远端的某个版本：<code>git reset --hard &lt;sha1-of-commit&gt;</code><ul>\n<li><code>--hard</code>：reset stage and working directory ,<commitid> 以来所有的变更全部丢弃，并将 HEAD 指向<commitid></li>\n<li><code>--soft</code>：nothing changed to stage and working directory ,仅仅将HEAD指向<commitid> ，所有变更显示在”changed to be committed”中</li>\n<li><code>--mixed</code>：default,reset stage ,nothing to working directory ，这也就是第二个例子的原因</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>比较差异</p>\n<ul>\n<li>查看工作区（working directory）和暂存区（staged）之间差异：<code>git diff</code></li>\n<li>查看工作区（working directory）与当前仓库版本（repository）HEAD版本差异：<code>git diff HEAD</code></li>\n<li>查看暂存区（staged）与当前仓库版本（repository）差异：<code>git diff --cached</code> / <code>git diff --staged</code></li>\n</ul>\n</li>\n<li><p>合并操作</p>\n<ul>\n<li>解决冲突后/获取远程最新代码后合并代码：<code>git merge branchname</code></li>\n<li>保留该存在版本合并log：<code>git merge --no-ff branchname</code> 参数<code>--no-ff</code>防止 fast-forward 的提交</li>\n</ul>\n</li>\n</ol>"},{"title":"Git比svn的优势","date":"2016-05-22T03:13:00.000Z","_content":"** git比svn的优势：** <Excerpt in index | 首页摘要>\n    主要介绍svn和git在使用的时候一些区别\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### 合并操作时对提交过程的保留\n- git:合并操作保留原有的提交过程\n- svn:多个提交合并为一个提交\n- 不用因为合并操作而导致追踪的困难\n\n### 修正提交\n- git：可以修正提交。  \n使用功能分支工作流，在自己的分支可以方便修正提交而不会影响大家。\n- svn：一旦提交就到服务器上，实际使用中就是不能修改  \n（svn可以在服务器上修改，因为过程复杂需要权限实际上从不会这样做）\n\n\n### 本地分支\n- git可以方便的创建本地分支,创建时间极短,分支可以是本地的,不会存在svn中目录权限的问题\n\n### 强大的合并能力\n- git：重命名（无论文件还有目录）提交 可以合并上 文件重命名前的这些文件的提交\n\n- svn：重命名（无论文件还有目录）提交后，你本地/或是分支上 有文件重命名前的这些文件的修改或提交，在做合并操作时,你会碰上传说中难搞的***树冲突***！\n\n- 这就导致在调整目录名称和类名调整的时候比较繁琐,需要告诉大家,我修改完以后你再修改\n\n\n### tag的支持\n\n- svn在模型上是没有分支和tag的。tag是通过目录权限限制（对开发只读）来保证不变。\n- git模型上一等公民支持tag，保证只读。\n\n### 速度优势\n\n- git的提交是个本地提交,相对svn来说如闪电一般\n- git提供了暂存区,可以方便制定提交内容,而不是全部内容\n\n### 日志查看\n- git：本地包含了完整的日志，闪电的速度（并且无需网络)\n- svn：需要从服务拉取。\n- 一旦用了git后，等待svn日志过程简直让我发狂\n","source":"_posts/git-svn.md","raw":"title: git比svn的优势\ndate: 2016-05-22 11:13:00\ntags: others\ncategories: 开发工具\n---\n** git比svn的优势：** <Excerpt in index | 首页摘要>\n    主要介绍svn和git在使用的时候一些区别\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### 合并操作时对提交过程的保留\n- git:合并操作保留原有的提交过程\n- svn:多个提交合并为一个提交\n- 不用因为合并操作而导致追踪的困难\n\n### 修正提交\n- git：可以修正提交。  \n使用功能分支工作流，在自己的分支可以方便修正提交而不会影响大家。\n- svn：一旦提交就到服务器上，实际使用中就是不能修改  \n（svn可以在服务器上修改，因为过程复杂需要权限实际上从不会这样做）\n\n\n### 本地分支\n- git可以方便的创建本地分支,创建时间极短,分支可以是本地的,不会存在svn中目录权限的问题\n\n### 强大的合并能力\n- git：重命名（无论文件还有目录）提交 可以合并上 文件重命名前的这些文件的提交\n\n- svn：重命名（无论文件还有目录）提交后，你本地/或是分支上 有文件重命名前的这些文件的修改或提交，在做合并操作时,你会碰上传说中难搞的***树冲突***！\n\n- 这就导致在调整目录名称和类名调整的时候比较繁琐,需要告诉大家,我修改完以后你再修改\n\n\n### tag的支持\n\n- svn在模型上是没有分支和tag的。tag是通过目录权限限制（对开发只读）来保证不变。\n- git模型上一等公民支持tag，保证只读。\n\n### 速度优势\n\n- git的提交是个本地提交,相对svn来说如闪电一般\n- git提供了暂存区,可以方便制定提交内容,而不是全部内容\n\n### 日志查看\n- git：本地包含了完整的日志，闪电的速度（并且无需网络)\n- svn：需要从服务拉取。\n- 一旦用了git后，等待svn日志过程简直让我发狂\n","slug":"git-svn","published":1,"updated":"2016-11-13T05:48:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d82000lohzjm883urhs","content":"<p><strong> git比svn的优势：</strong> <Excerpt in index | 首页摘要><br>    主要介绍svn和git在使用的时候一些区别<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"合并操作时对提交过程的保留\"><a href=\"#合并操作时对提交过程的保留\" class=\"headerlink\" title=\"合并操作时对提交过程的保留\"></a>合并操作时对提交过程的保留</h3><ul>\n<li>git:合并操作保留原有的提交过程</li>\n<li>svn:多个提交合并为一个提交</li>\n<li>不用因为合并操作而导致追踪的困难</li>\n</ul>\n<h3 id=\"修正提交\"><a href=\"#修正提交\" class=\"headerlink\" title=\"修正提交\"></a>修正提交</h3><ul>\n<li>git：可以修正提交。<br>使用功能分支工作流，在自己的分支可以方便修正提交而不会影响大家。</li>\n<li>svn：一旦提交就到服务器上，实际使用中就是不能修改<br>（svn可以在服务器上修改，因为过程复杂需要权限实际上从不会这样做）</li>\n</ul>\n<h3 id=\"本地分支\"><a href=\"#本地分支\" class=\"headerlink\" title=\"本地分支\"></a>本地分支</h3><ul>\n<li>git可以方便的创建本地分支,创建时间极短,分支可以是本地的,不会存在svn中目录权限的问题</li>\n</ul>\n<h3 id=\"强大的合并能力\"><a href=\"#强大的合并能力\" class=\"headerlink\" title=\"强大的合并能力\"></a>强大的合并能力</h3><ul>\n<li><p>git：重命名（无论文件还有目录）提交 可以合并上 文件重命名前的这些文件的提交</p>\n</li>\n<li><p>svn：重命名（无论文件还有目录）提交后，你本地/或是分支上 有文件重命名前的这些文件的修改或提交，在做合并操作时,你会碰上传说中难搞的<strong><em>树冲突</em></strong>！</p>\n</li>\n<li><p>这就导致在调整目录名称和类名调整的时候比较繁琐,需要告诉大家,我修改完以后你再修改</p>\n</li>\n</ul>\n<h3 id=\"tag的支持\"><a href=\"#tag的支持\" class=\"headerlink\" title=\"tag的支持\"></a>tag的支持</h3><ul>\n<li>svn在模型上是没有分支和tag的。tag是通过目录权限限制（对开发只读）来保证不变。</li>\n<li>git模型上一等公民支持tag，保证只读。</li>\n</ul>\n<h3 id=\"速度优势\"><a href=\"#速度优势\" class=\"headerlink\" title=\"速度优势\"></a>速度优势</h3><ul>\n<li>git的提交是个本地提交,相对svn来说如闪电一般</li>\n<li>git提供了暂存区,可以方便制定提交内容,而不是全部内容</li>\n</ul>\n<h3 id=\"日志查看\"><a href=\"#日志查看\" class=\"headerlink\" title=\"日志查看\"></a>日志查看</h3><ul>\n<li>git：本地包含了完整的日志，闪电的速度（并且无需网络)</li>\n<li>svn：需要从服务拉取。</li>\n<li>一旦用了git后，等待svn日志过程简直让我发狂</li>\n</ul>\n","excerpt":"<p><strong> git比svn的优势：</strong> <Excerpt in index | 首页摘要><br>    主要介绍svn和git在使用的时候一些区别<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"合并操作时对提交过程的保留\"><a href=\"#合并操作时对提交过程的保留\" class=\"headerlink\" title=\"合并操作时对提交过程的保留\"></a>合并操作时对提交过程的保留</h3><ul>\n<li>git:合并操作保留原有的提交过程</li>\n<li>svn:多个提交合并为一个提交</li>\n<li>不用因为合并操作而导致追踪的困难</li>\n</ul>\n<h3 id=\"修正提交\"><a href=\"#修正提交\" class=\"headerlink\" title=\"修正提交\"></a>修正提交</h3><ul>\n<li>git：可以修正提交。<br>使用功能分支工作流，在自己的分支可以方便修正提交而不会影响大家。</li>\n<li>svn：一旦提交就到服务器上，实际使用中就是不能修改<br>（svn可以在服务器上修改，因为过程复杂需要权限实际上从不会这样做）</li>\n</ul>\n<h3 id=\"本地分支\"><a href=\"#本地分支\" class=\"headerlink\" title=\"本地分支\"></a>本地分支</h3><ul>\n<li>git可以方便的创建本地分支,创建时间极短,分支可以是本地的,不会存在svn中目录权限的问题</li>\n</ul>\n<h3 id=\"强大的合并能力\"><a href=\"#强大的合并能力\" class=\"headerlink\" title=\"强大的合并能力\"></a>强大的合并能力</h3><ul>\n<li><p>git：重命名（无论文件还有目录）提交 可以合并上 文件重命名前的这些文件的提交</p>\n</li>\n<li><p>svn：重命名（无论文件还有目录）提交后，你本地/或是分支上 有文件重命名前的这些文件的修改或提交，在做合并操作时,你会碰上传说中难搞的<strong><em>树冲突</em></strong>！</p>\n</li>\n<li><p>这就导致在调整目录名称和类名调整的时候比较繁琐,需要告诉大家,我修改完以后你再修改</p>\n</li>\n</ul>\n<h3 id=\"tag的支持\"><a href=\"#tag的支持\" class=\"headerlink\" title=\"tag的支持\"></a>tag的支持</h3><ul>\n<li>svn在模型上是没有分支和tag的。tag是通过目录权限限制（对开发只读）来保证不变。</li>\n<li>git模型上一等公民支持tag，保证只读。</li>\n</ul>\n<h3 id=\"速度优势\"><a href=\"#速度优势\" class=\"headerlink\" title=\"速度优势\"></a>速度优势</h3><ul>\n<li>git的提交是个本地提交,相对svn来说如闪电一般</li>\n<li>git提供了暂存区,可以方便制定提交内容,而不是全部内容</li>\n</ul>\n<h3 id=\"日志查看\"><a href=\"#日志查看\" class=\"headerlink\" title=\"日志查看\"></a>日志查看</h3><ul>\n<li>git：本地包含了完整的日志，闪电的速度（并且无需网络)</li>\n<li>svn：需要从服务拉取。</li>\n<li>一旦用了git后，等待svn日志过程简直让我发狂</li>\n</ul>"},{"title":"Hello World","date":"2015-12-17T04:37:19.000Z","_content":"** Hello World：** <Excerpt in index | 首页摘要>\n\thexo的Hello World教程\n <!-- more -->\n<The rest of contents | 余下全文>\n\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"title: Hello World\ndate: 2015-12-17 12:37:19\ntags: others\n---\n** Hello World：** <Excerpt in index | 首页摘要>\n\thexo的Hello World教程\n <!-- more -->\n<The rest of contents | 余下全文>\n\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2016-11-13T05:48:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d84000pohzj9rdwfx60","content":"<p><strong> Hello World：</strong> <Excerpt in index | 首页摘要><br>    hexo的Hello World教程<br> <a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<p>Welcome to <a href=\"http://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\">Deployment</a></p>\n","excerpt":"<p><strong> Hello World：</strong> <Excerpt in index | 首页摘要><br>    hexo的Hello World教程<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<p>Welcome to <a href=\"http://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"Hexo和coding打造静态博客","date":"2016-04-19T03:32:59.000Z","_content":"\\*\\* hexo和coding打造静态博客 ：\\*\\* \\<Excerpt in index | 首页摘要\\>\n\t使用hexo和coding打造属于自己的静态博客，展示自己的作品，思想……\n<!-- more -->\n\\<The rest of contents | 余下全文\\>\n\n### 什么是hexo?\n- hexo是台湾的一个大学生用nodejs做的一个静态博客框架，使用hexo可以速度搭建自己的静态博客，\n结合第三方的代码托管平台即可实现个人的博客网站。\n\n### 什么是coding?\n- coding是和github类似的代码托管平台，但又不仅仅是托管平台，还有在线ide，码市等旗下产品，gitcafe也是被coding收购了，之前用gitcafe搭建的博客可以重新搭建了。\n\n### 什么是静态博客?\n- 静态博客就是只是有静态页面和js，css构成的博客，普通的网站都是有web服务构成的，而静态博客只是页面的集合，利用js做一些展示和特效。\n\n### 安装hexo\n- 首先确保自己安装nodejs，在命令行输入，尽量安装v0.12以上的版本\n```\n    node -v\n```\n- 安装hexo，命令行输入\n```\n    npm install hexo-cli -g\n```\n- 本地调试hexo，参考我的另一篇文章\n[hexo和github打造个人博客][1]\n\n### 注册配置coding\n- coding的pages功能有两种，一个是项目主页，一个是个人主页，本博客采用个人主页。\n- 个人主页就是项目中有一个coding-pages的分支，把项目发布到这个分支即可\n- coding的代码也是通过git这个工具，所以在coding个人设置里配置好自己的ssh公钥和github操作一样的\n- 在coding建立一个项目，名字和你的个性后缀一样，也就是Global Key，在个人设置里可以看到\n\n### 部署博客到coding\n- 在项目根目录下，修改\\_config.yml文件，把maocg替换为你的Global Key\n```\n    deploy:\n    - type: git\n      repo:git@git.coding.net:maocg/maocg.git,coding-pages\n```\n### 域名配置\n1. 在万网或者国外网站购买域名,备案并实名认证\n2. coding里的个人page可以直接配置域名,在个人项目设置,点击pages设置,绑定个人域名\n3. 在域名解析里指向coding里你个人page的ip地址,\n4. \n\n[1]:\thttp://geekwalker.cn/2015/12/20/hexo-githup-blog/","source":"_posts/hexo-coding-blog.md","raw":"title: hexo和coding打造静态博客\ndate: 2016-04-19 11:32:59\ntags: hexo\ncategories: 开发工具\n---\n\\*\\* hexo和coding打造静态博客 ：\\*\\* \\<Excerpt in index | 首页摘要\\>\n\t使用hexo和coding打造属于自己的静态博客，展示自己的作品，思想……\n<!-- more -->\n\\<The rest of contents | 余下全文\\>\n\n### 什么是hexo?\n- hexo是台湾的一个大学生用nodejs做的一个静态博客框架，使用hexo可以速度搭建自己的静态博客，\n结合第三方的代码托管平台即可实现个人的博客网站。\n\n### 什么是coding?\n- coding是和github类似的代码托管平台，但又不仅仅是托管平台，还有在线ide，码市等旗下产品，gitcafe也是被coding收购了，之前用gitcafe搭建的博客可以重新搭建了。\n\n### 什么是静态博客?\n- 静态博客就是只是有静态页面和js，css构成的博客，普通的网站都是有web服务构成的，而静态博客只是页面的集合，利用js做一些展示和特效。\n\n### 安装hexo\n- 首先确保自己安装nodejs，在命令行输入，尽量安装v0.12以上的版本\n```\n    node -v\n```\n- 安装hexo，命令行输入\n```\n    npm install hexo-cli -g\n```\n- 本地调试hexo，参考我的另一篇文章\n[hexo和github打造个人博客][1]\n\n### 注册配置coding\n- coding的pages功能有两种，一个是项目主页，一个是个人主页，本博客采用个人主页。\n- 个人主页就是项目中有一个coding-pages的分支，把项目发布到这个分支即可\n- coding的代码也是通过git这个工具，所以在coding个人设置里配置好自己的ssh公钥和github操作一样的\n- 在coding建立一个项目，名字和你的个性后缀一样，也就是Global Key，在个人设置里可以看到\n\n### 部署博客到coding\n- 在项目根目录下，修改\\_config.yml文件，把maocg替换为你的Global Key\n```\n    deploy:\n    - type: git\n      repo:git@git.coding.net:maocg/maocg.git,coding-pages\n```\n### 域名配置\n1. 在万网或者国外网站购买域名,备案并实名认证\n2. coding里的个人page可以直接配置域名,在个人项目设置,点击pages设置,绑定个人域名\n3. 在域名解析里指向coding里你个人page的ip地址,\n4. \n\n[1]:\thttp://geekwalker.cn/2015/12/20/hexo-githup-blog/","slug":"hexo-coding-blog","published":1,"updated":"2016-11-28T15:08:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d85000rohzj8vc63mxt","content":"<p>** hexo和coding打造静态博客 ：** \\<Excerpt in index | 首页摘要\\><br>    使用hexo和coding打造属于自己的静态博客，展示自己的作品，思想……<br><a id=\"more\"></a><br>\\<The rest of contents | 余下全文\\></p>\n<h3 id=\"什么是hexo\"><a href=\"#什么是hexo\" class=\"headerlink\" title=\"什么是hexo?\"></a>什么是hexo?</h3><ul>\n<li>hexo是台湾的一个大学生用nodejs做的一个静态博客框架，使用hexo可以速度搭建自己的静态博客，<br>结合第三方的代码托管平台即可实现个人的博客网站。</li>\n</ul>\n<h3 id=\"什么是coding\"><a href=\"#什么是coding\" class=\"headerlink\" title=\"什么是coding?\"></a>什么是coding?</h3><ul>\n<li>coding是和github类似的代码托管平台，但又不仅仅是托管平台，还有在线ide，码市等旗下产品，gitcafe也是被coding收购了，之前用gitcafe搭建的博客可以重新搭建了。</li>\n</ul>\n<h3 id=\"什么是静态博客\"><a href=\"#什么是静态博客\" class=\"headerlink\" title=\"什么是静态博客?\"></a>什么是静态博客?</h3><ul>\n<li>静态博客就是只是有静态页面和js，css构成的博客，普通的网站都是有web服务构成的，而静态博客只是页面的集合，利用js做一些展示和特效。</li>\n</ul>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><ul>\n<li><p>首先确保自己安装nodejs，在命令行输入，尽量安装v0.12以上的版本</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">node</span> <span class=\"title\">-v</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>安装hexo，命令行输入</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-<span class=\"keyword\">cli</span> -g</div></pre></td></tr></table></figure>\n</li>\n<li><p>本地调试hexo，参考我的另一篇文章<br><a href=\"http://geekwalker.cn/2015/12/20/hexo-githup-blog/\">hexo和github打造个人博客</a></p>\n</li>\n</ul>\n<h3 id=\"注册配置coding\"><a href=\"#注册配置coding\" class=\"headerlink\" title=\"注册配置coding\"></a>注册配置coding</h3><ul>\n<li>coding的pages功能有两种，一个是项目主页，一个是个人主页，本博客采用个人主页。</li>\n<li>个人主页就是项目中有一个coding-pages的分支，把项目发布到这个分支即可</li>\n<li>coding的代码也是通过git这个工具，所以在coding个人设置里配置好自己的ssh公钥和github操作一样的</li>\n<li>在coding建立一个项目，名字和你的个性后缀一样，也就是Global Key，在个人设置里可以看到</li>\n</ul>\n<h3 id=\"部署博客到coding\"><a href=\"#部署博客到coding\" class=\"headerlink\" title=\"部署博客到coding\"></a>部署博客到coding</h3><ul>\n<li>在项目根目录下，修改_config.yml文件，把maocg替换为你的Global Key<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">- <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>:git<span class=\"variable\">@git</span>.coding.<span class=\"attribute\">net</span>:maocg/maocg.git,coding-pages</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"域名配置\"><a href=\"#域名配置\" class=\"headerlink\" title=\"域名配置\"></a>域名配置</h3><ol>\n<li>在万网或者国外网站购买域名,备案并实名认证</li>\n<li>coding里的个人page可以直接配置域名,在个人项目设置,点击pages设置,绑定个人域名</li>\n<li>在域名解析里指向coding里你个人page的ip地址,</li>\n<li></li>\n</ol>\n","excerpt":"<p>** hexo和coding打造静态博客 ：** \\<Excerpt in index | 首页摘要\\><br>    使用hexo和coding打造属于自己的静态博客，展示自己的作品，思想……<br>","more":"<br>\\<The rest of contents | 余下全文\\></p>\n<h3 id=\"什么是hexo\"><a href=\"#什么是hexo\" class=\"headerlink\" title=\"什么是hexo?\"></a>什么是hexo?</h3><ul>\n<li>hexo是台湾的一个大学生用nodejs做的一个静态博客框架，使用hexo可以速度搭建自己的静态博客，<br>结合第三方的代码托管平台即可实现个人的博客网站。</li>\n</ul>\n<h3 id=\"什么是coding\"><a href=\"#什么是coding\" class=\"headerlink\" title=\"什么是coding?\"></a>什么是coding?</h3><ul>\n<li>coding是和github类似的代码托管平台，但又不仅仅是托管平台，还有在线ide，码市等旗下产品，gitcafe也是被coding收购了，之前用gitcafe搭建的博客可以重新搭建了。</li>\n</ul>\n<h3 id=\"什么是静态博客\"><a href=\"#什么是静态博客\" class=\"headerlink\" title=\"什么是静态博客?\"></a>什么是静态博客?</h3><ul>\n<li>静态博客就是只是有静态页面和js，css构成的博客，普通的网站都是有web服务构成的，而静态博客只是页面的集合，利用js做一些展示和特效。</li>\n</ul>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><ul>\n<li><p>首先确保自己安装nodejs，在命令行输入，尽量安装v0.12以上的版本</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">node</span> <span class=\"title\">-v</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>安装hexo，命令行输入</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-<span class=\"keyword\">cli</span> -g</div></pre></td></tr></table></figure>\n</li>\n<li><p>本地调试hexo，参考我的另一篇文章<br><a href=\"http://geekwalker.cn/2015/12/20/hexo-githup-blog/\">hexo和github打造个人博客</a></p>\n</li>\n</ul>\n<h3 id=\"注册配置coding\"><a href=\"#注册配置coding\" class=\"headerlink\" title=\"注册配置coding\"></a>注册配置coding</h3><ul>\n<li>coding的pages功能有两种，一个是项目主页，一个是个人主页，本博客采用个人主页。</li>\n<li>个人主页就是项目中有一个coding-pages的分支，把项目发布到这个分支即可</li>\n<li>coding的代码也是通过git这个工具，所以在coding个人设置里配置好自己的ssh公钥和github操作一样的</li>\n<li>在coding建立一个项目，名字和你的个性后缀一样，也就是Global Key，在个人设置里可以看到</li>\n</ul>\n<h3 id=\"部署博客到coding\"><a href=\"#部署博客到coding\" class=\"headerlink\" title=\"部署博客到coding\"></a>部署博客到coding</h3><ul>\n<li>在项目根目录下，修改_config.yml文件，把maocg替换为你的Global Key<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\">- <span class=\"attribute\">type</span>: git</div><div class=\"line\">  <span class=\"attribute\">repo</span>:git<span class=\"variable\">@git</span>.coding.<span class=\"attribute\">net</span>:maocg/maocg.git,coding-pages</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"域名配置\"><a href=\"#域名配置\" class=\"headerlink\" title=\"域名配置\"></a>域名配置</h3><ol>\n<li>在万网或者国外网站购买域名,备案并实名认证</li>\n<li>coding里的个人page可以直接配置域名,在个人项目设置,点击pages设置,绑定个人域名</li>\n<li>在域名解析里指向coding里你个人page的ip地址,</li>\n<li></li>\n</ol>"},{"title":"Hexo配置和优化记录","date":"2016-11-28T15:07:12.000Z","_content":"** hexo配置和优化高级篇：** <Excerpt in index | 首页摘要>\n本文章不讲解hexo的基础配置，只针对hexo的高级配置，性能优化，seo配置进行讲解。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### 前言\n仔细想想，使用hexo搭建博客也有半年多了，但是发现访问量一直几乎没有，特别是经历几次迁移之后，之前从github到coding，\n现在迁移到了云服务器，研究了一下如何进行seo和网站性能优化，便有了这篇文章。\n\n### 实用的功能\n1. 站内搜索（百度的）\n2. 本地搜索（本地插件）\n3. 网站统计\n4. 留言功能\n5. rss订阅功能\n\n\n### 性能优化\n1. html压缩\n2. css压缩\n3. js压缩\n4. img压缩\n5. nginx代理，开启gzip压缩\n6. cdn代理css和图片\n7. 删除主题无用的js和css\n\n### seo优化\n1. sitemap\n2. a标签添加`rel=\"external nofollow\"`\n3. 使用meta标签\n4. 使用robots文件\n5. 主动提交sitemap到搜索引擎\n6. 添加外链和内链\n\n\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/hexo-config.md","raw":"title: hexo配置和优化记录\ndate: 2016-11-28 23:07:12\ntags: hexo\ncategories: 开发工具\n---\n** hexo配置和优化高级篇：** <Excerpt in index | 首页摘要>\n本文章不讲解hexo的基础配置，只针对hexo的高级配置，性能优化，seo配置进行讲解。\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### 前言\n仔细想想，使用hexo搭建博客也有半年多了，但是发现访问量一直几乎没有，特别是经历几次迁移之后，之前从github到coding，\n现在迁移到了云服务器，研究了一下如何进行seo和网站性能优化，便有了这篇文章。\n\n### 实用的功能\n1. 站内搜索（百度的）\n2. 本地搜索（本地插件）\n3. 网站统计\n4. 留言功能\n5. rss订阅功能\n\n\n### 性能优化\n1. html压缩\n2. css压缩\n3. js压缩\n4. img压缩\n5. nginx代理，开启gzip压缩\n6. cdn代理css和图片\n7. 删除主题无用的js和css\n\n### seo优化\n1. sitemap\n2. a标签添加`rel=\"external nofollow\"`\n3. 使用meta标签\n4. 使用robots文件\n5. 主动提交sitemap到搜索引擎\n6. 添加外链和内链\n\n\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"hexo-config","published":1,"updated":"2016-11-28T15:23:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d88000wohzjhwwocbb6","content":"<p><strong> hexo配置和优化高级篇：</strong> <Excerpt in index | 首页摘要><br>本文章不讲解hexo的基础配置，只针对hexo的高级配置，性能优化，seo配置进行讲解。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>仔细想想，使用hexo搭建博客也有半年多了，但是发现访问量一直几乎没有，特别是经历几次迁移之后，之前从github到coding，<br>现在迁移到了云服务器，研究了一下如何进行seo和网站性能优化，便有了这篇文章。</p>\n<h3 id=\"实用的功能\"><a href=\"#实用的功能\" class=\"headerlink\" title=\"实用的功能\"></a>实用的功能</h3><ol>\n<li>站内搜索（百度的）</li>\n<li>本地搜索（本地插件）</li>\n<li>网站统计</li>\n<li>留言功能</li>\n<li>rss订阅功能</li>\n</ol>\n<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h3><ol>\n<li>html压缩</li>\n<li>css压缩</li>\n<li>js压缩</li>\n<li>img压缩</li>\n<li>nginx代理，开启gzip压缩</li>\n<li>cdn代理css和图片</li>\n<li>删除主题无用的js和css</li>\n</ol>\n<h3 id=\"seo优化\"><a href=\"#seo优化\" class=\"headerlink\" title=\"seo优化\"></a>seo优化</h3><ol>\n<li>sitemap</li>\n<li>a标签添加<code>rel=&quot;external nofollow&quot;</code></li>\n<li>使用meta标签</li>\n<li>使用robots文件</li>\n<li>主动提交sitemap到搜索引擎</li>\n<li>添加外链和内链</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> hexo配置和优化高级篇：</strong> <Excerpt in index | 首页摘要><br>本文章不讲解hexo的基础配置，只针对hexo的高级配置，性能优化，seo配置进行讲解。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>仔细想想，使用hexo搭建博客也有半年多了，但是发现访问量一直几乎没有，特别是经历几次迁移之后，之前从github到coding，<br>现在迁移到了云服务器，研究了一下如何进行seo和网站性能优化，便有了这篇文章。</p>\n<h3 id=\"实用的功能\"><a href=\"#实用的功能\" class=\"headerlink\" title=\"实用的功能\"></a>实用的功能</h3><ol>\n<li>站内搜索（百度的）</li>\n<li>本地搜索（本地插件）</li>\n<li>网站统计</li>\n<li>留言功能</li>\n<li>rss订阅功能</li>\n</ol>\n<h3 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h3><ol>\n<li>html压缩</li>\n<li>css压缩</li>\n<li>js压缩</li>\n<li>img压缩</li>\n<li>nginx代理，开启gzip压缩</li>\n<li>cdn代理css和图片</li>\n<li>删除主题无用的js和css</li>\n</ol>\n<h3 id=\"seo优化\"><a href=\"#seo优化\" class=\"headerlink\" title=\"seo优化\"></a>seo优化</h3><ol>\n<li>sitemap</li>\n<li>a标签添加<code>rel=&quot;external nofollow&quot;</code></li>\n<li>使用meta标签</li>\n<li>使用robots文件</li>\n<li>主动提交sitemap到搜索引擎</li>\n<li>添加外链和内链</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Hexo和github打造个人博客","date":"2015-12-20T14:35:04.000Z","_content":"** hexo和github打造个人博客 ：** <Excerpt in index | 首页摘要>\n    使用hexo和github打造属于自己的静态博客，展示自己的作品，思想……\n<!-- more -->\n<The rest of contents | 余下全文>\n\n##说明\n    自己在使用hexo搭建静态博客的时候踩了许多坑,最终去官网看教程搞定了,  \n    建议用hexo搭建个人博客的时候,最好看清教程的日期和使用的版本,这样就  \n    不会因为版本的不同导致的问题了.建议先去hexo官网了解一下\n   [**hexo官网**][1]\n## 1.准备工作\n 1. 安装nodejs\n    - 去官网下载nodejs安装(推荐安装0.12.x),安装之后在命令行 node -v,如果成功说明node环境ok,不成功就去环境变量配置一下.\n 2. 安装hexo\n    - 使用命令 npm install hexo -g,执行hexo -v 查看版本,本教程适合**3.1.1**版本\n 3. 安装git\n    - 去官网下载git安装,不会自行百度\n 4. 配置git\n    - 配置ssh私钥,上传到github上\n\n## 2.github-pages和gitcafe-page的说明\n\n 1. github有两种主页,一种是github-page(个人主页),一种是项目主页,本教程针对个人主页\n 2. gitcafe-page的个人主页只是在项目下有一个gitcafe-pages的分支,部署成功后访问主页即可\n 3. github-page需要将hexo博客发布到repository的master(主干)即可\n 4. gitcafe需要将hexo博客发布到repository的gitcafe-pages的分支\n 5. github的个人主页要求repository的名称和username一致，加入username是tom，则repository的名称为tom.github.io\n## 3.使用hexo写博客\n    - 新建一个文件夹myblog,\n    - 右键git bash here使用git的shell\n    - 在shell中输入hexo init,回车执行\n    - 在shell中输入hexo g ,回车\n    - 在shell中hexo s,回车\n    - 去浏览器访问http://localhost:4000,访问到主页,然后在shell中ctrl c停止\n    - 在shell中hexo new \"first-blog\",回车\n    - 在shell中hexo g ,回车\n    - 在shell中hexo s ,回车,在访问\n    - ok,在本地测试就没问题了\n\n## 4.发布到github和gitcafe\n    - 打开项目根部录下的.config.yml,找到deploy,修改如下:\n\n```\n   deploy:\n    - type: git\n      repo: git@github.com:yourname/yourname.github.io.git,master\n    - type: git\n      repo: git@gitcafe.com:yourname/yourname.git,gitcafe-pages\n```\n    - 如果只发布到github或者gitcafe上,修改如下:git的branch是master,gitcafe的是gitcafe-pages\n```\ndeploy:\n  type: git\n  repo: <repository url>\n  branch: [branch]\n  message: [message]\n```\n    访问地址就是 http://tom.github.io/\n### 5.常用命令\n    命令的简写为：\n    ```\n    hexo n == hexo new\n    hexo g == hexo generate\n    hexo s == hexo server\n    hexo d == hexo deploy\n    hexo clean  删除public文件夹\n    ```\n\n## 6.常见问题\n1. 部署时出现git not found\n  - npm install hexo-deployer-git --save  安装依赖包\n\n\n## 7.详细设置    \n    每个人对自己的博客都有不一样的要求，比如主题，分类，标签，评论插件的选择，  \n    这些对程序员的你来说，都是小菜一碟，下面是官网教程：\n   [hexo官方文档][2]\n\n\n博客效果可以看我的个人博客     [我的个人博客][3]\n\n\n  [1]: https://hexo.io/zh-cn/\n  [2]: https://hexo.io/docs/\n  [3]: http://geekwalker.cn\n","source":"_posts/hexo-githup-blog.md","raw":"title: hexo和github打造个人博客\ndate: 2015-12-20 22:35:04\ntags: hexo\ncategories: 开发工具\n---\n** hexo和github打造个人博客 ：** <Excerpt in index | 首页摘要>\n    使用hexo和github打造属于自己的静态博客，展示自己的作品，思想……\n<!-- more -->\n<The rest of contents | 余下全文>\n\n##说明\n    自己在使用hexo搭建静态博客的时候踩了许多坑,最终去官网看教程搞定了,  \n    建议用hexo搭建个人博客的时候,最好看清教程的日期和使用的版本,这样就  \n    不会因为版本的不同导致的问题了.建议先去hexo官网了解一下\n   [**hexo官网**][1]\n## 1.准备工作\n 1. 安装nodejs\n    - 去官网下载nodejs安装(推荐安装0.12.x),安装之后在命令行 node -v,如果成功说明node环境ok,不成功就去环境变量配置一下.\n 2. 安装hexo\n    - 使用命令 npm install hexo -g,执行hexo -v 查看版本,本教程适合**3.1.1**版本\n 3. 安装git\n    - 去官网下载git安装,不会自行百度\n 4. 配置git\n    - 配置ssh私钥,上传到github上\n\n## 2.github-pages和gitcafe-page的说明\n\n 1. github有两种主页,一种是github-page(个人主页),一种是项目主页,本教程针对个人主页\n 2. gitcafe-page的个人主页只是在项目下有一个gitcafe-pages的分支,部署成功后访问主页即可\n 3. github-page需要将hexo博客发布到repository的master(主干)即可\n 4. gitcafe需要将hexo博客发布到repository的gitcafe-pages的分支\n 5. github的个人主页要求repository的名称和username一致，加入username是tom，则repository的名称为tom.github.io\n## 3.使用hexo写博客\n    - 新建一个文件夹myblog,\n    - 右键git bash here使用git的shell\n    - 在shell中输入hexo init,回车执行\n    - 在shell中输入hexo g ,回车\n    - 在shell中hexo s,回车\n    - 去浏览器访问http://localhost:4000,访问到主页,然后在shell中ctrl c停止\n    - 在shell中hexo new \"first-blog\",回车\n    - 在shell中hexo g ,回车\n    - 在shell中hexo s ,回车,在访问\n    - ok,在本地测试就没问题了\n\n## 4.发布到github和gitcafe\n    - 打开项目根部录下的.config.yml,找到deploy,修改如下:\n\n```\n   deploy:\n    - type: git\n      repo: git@github.com:yourname/yourname.github.io.git,master\n    - type: git\n      repo: git@gitcafe.com:yourname/yourname.git,gitcafe-pages\n```\n    - 如果只发布到github或者gitcafe上,修改如下:git的branch是master,gitcafe的是gitcafe-pages\n```\ndeploy:\n  type: git\n  repo: <repository url>\n  branch: [branch]\n  message: [message]\n```\n    访问地址就是 http://tom.github.io/\n### 5.常用命令\n    命令的简写为：\n    ```\n    hexo n == hexo new\n    hexo g == hexo generate\n    hexo s == hexo server\n    hexo d == hexo deploy\n    hexo clean  删除public文件夹\n    ```\n\n## 6.常见问题\n1. 部署时出现git not found\n  - npm install hexo-deployer-git --save  安装依赖包\n\n\n## 7.详细设置    \n    每个人对自己的博客都有不一样的要求，比如主题，分类，标签，评论插件的选择，  \n    这些对程序员的你来说，都是小菜一碟，下面是官网教程：\n   [hexo官方文档][2]\n\n\n博客效果可以看我的个人博客     [我的个人博客][3]\n\n\n  [1]: https://hexo.io/zh-cn/\n  [2]: https://hexo.io/docs/\n  [3]: http://geekwalker.cn\n","slug":"hexo-githup-blog","published":1,"updated":"2016-11-28T15:10:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d8b000zohzjavd9rqq4","content":"<p><strong> hexo和github打造个人博客 ：</strong> <Excerpt in index | 首页摘要><br>    使用hexo和github打造属于自己的静态博客，展示自己的作品，思想……<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<p>##说明<br>    自己在使用hexo搭建静态博客的时候踩了许多坑,最终去官网看教程搞定了,<br>    建议用hexo搭建个人博客的时候,最好看清教程的日期和使用的版本,这样就<br>    不会因为版本的不同导致的问题了.建议先去hexo官网了解一下<br>   <a href=\"https://hexo.io/zh-cn/\"><strong>hexo官网</strong></a></p>\n<h2 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1.准备工作\"></a>1.准备工作</h2><ol>\n<li>安装nodejs<ul>\n<li>去官网下载nodejs安装(推荐安装0.12.x),安装之后在命令行 node -v,如果成功说明node环境ok,不成功就去环境变量配置一下.</li>\n</ul>\n</li>\n<li>安装hexo<ul>\n<li>使用命令 npm install hexo -g,执行hexo -v 查看版本,本教程适合<strong>3.1.1</strong>版本</li>\n</ul>\n</li>\n<li>安装git<ul>\n<li>去官网下载git安装,不会自行百度</li>\n</ul>\n</li>\n<li>配置git<ul>\n<li>配置ssh私钥,上传到github上</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-github-pages和gitcafe-page的说明\"><a href=\"#2-github-pages和gitcafe-page的说明\" class=\"headerlink\" title=\"2.github-pages和gitcafe-page的说明\"></a>2.github-pages和gitcafe-page的说明</h2><ol>\n<li>github有两种主页,一种是github-page(个人主页),一种是项目主页,本教程针对个人主页</li>\n<li>gitcafe-page的个人主页只是在项目下有一个gitcafe-pages的分支,部署成功后访问主页即可</li>\n<li>github-page需要将hexo博客发布到repository的master(主干)即可</li>\n<li>gitcafe需要将hexo博客发布到repository的gitcafe-pages的分支</li>\n<li>github的个人主页要求repository的名称和username一致，加入username是tom，则repository的名称为tom.github.io<h2 id=\"3-使用hexo写博客\"><a href=\"#3-使用hexo写博客\" class=\"headerlink\" title=\"3.使用hexo写博客\"></a>3.使用hexo写博客</h2><ul>\n<li>新建一个文件夹myblog,</li>\n<li>右键git bash here使用git的shell</li>\n<li>在shell中输入hexo init,回车执行</li>\n<li>在shell中输入hexo g ,回车</li>\n<li>在shell中hexo s,回车</li>\n<li>去浏览器访问<a href=\"http://localhost:4000,访问到主页,然后在shell中ctrl\">http://localhost:4000,访问到主页,然后在shell中ctrl</a> c停止</li>\n<li>在shell中hexo new “first-blog”,回车</li>\n<li>在shell中hexo g ,回车</li>\n<li>在shell中hexo s ,回车,在访问</li>\n<li>ok,在本地测试就没问题了</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"4-发布到github和gitcafe\"><a href=\"#4-发布到github和gitcafe\" class=\"headerlink\" title=\"4.发布到github和gitcafe\"></a>4.发布到github和gitcafe</h2><pre><code>- 打开项目根部录下的.config.yml,找到deploy,修改如下:\n</code></pre><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\"> - <span class=\"attribute\">type</span>: git</div><div class=\"line\">   <span class=\"attribute\">repo</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:yourname/yourname.github.io.git,master</div><div class=\"line\"> - <span class=\"attribute\">type</span>: git</div><div class=\"line\">   <span class=\"attribute\">repo</span>: git<span class=\"variable\">@gitcafe</span>.<span class=\"attribute\">com</span>:yourname/yourname.git,gitcafe-pages</div></pre></td></tr></table></figure>\n<pre><code>- 如果只发布到github或者gitcafe上,修改如下:git的branch是master,gitcafe的是gitcafe-pages\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">deploy:</span></div><div class=\"line\"><span class=\"symbol\">  type:</span> git</div><div class=\"line\"><span class=\"symbol\">  repo:</span> <span class=\"params\">&lt;repository url&gt;</span></div><div class=\"line\"><span class=\"symbol\">  branch:</span> [branch]</div><div class=\"line\"><span class=\"symbol\">  message:</span> [message]</div></pre></td></tr></table></figure>\n<pre><code>访问地址就是 http://tom.github.io/\n</code></pre><h3 id=\"5-常用命令\"><a href=\"#5-常用命令\" class=\"headerlink\" title=\"5.常用命令\"></a>5.常用命令</h3><pre><code>命令的简写为：\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n == hexo <span class=\"keyword\">new</span></div><div class=\"line\">hexo g == hexo <span class=\"keyword\">generate</span></div><div class=\"line\">hexo s == hexo server</div><div class=\"line\">hexo d == hexo deploy</div><div class=\"line\">hexo clean  删除public文件夹</div></pre></td></tr></table></figure>\n</code></pre><h2 id=\"6-常见问题\"><a href=\"#6-常见问题\" class=\"headerlink\" title=\"6.常见问题\"></a>6.常见问题</h2><ol>\n<li>部署时出现git not found<ul>\n<li>npm install hexo-deployer-git –save  安装依赖包</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"7-详细设置\"><a href=\"#7-详细设置\" class=\"headerlink\" title=\"7.详细设置\"></a>7.详细设置</h2><pre><code>每个人对自己的博客都有不一样的要求，比如主题，分类，标签，评论插件的选择，  \n这些对程序员的你来说，都是小菜一碟，下面是官网教程：\n</code></pre><p>   <a href=\"https://hexo.io/docs/\">hexo官方文档</a></p>\n<p>博客效果可以看我的个人博客     <a href=\"http://geekwalker.cn\">我的个人博客</a></p>\n","excerpt":"<p><strong> hexo和github打造个人博客 ：</strong> <Excerpt in index | 首页摘要><br>    使用hexo和github打造属于自己的静态博客，展示自己的作品，思想……<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<p>##说明<br>    自己在使用hexo搭建静态博客的时候踩了许多坑,最终去官网看教程搞定了,<br>    建议用hexo搭建个人博客的时候,最好看清教程的日期和使用的版本,这样就<br>    不会因为版本的不同导致的问题了.建议先去hexo官网了解一下<br>   <a href=\"https://hexo.io/zh-cn/\"><strong>hexo官网</strong></a></p>\n<h2 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1.准备工作\"></a>1.准备工作</h2><ol>\n<li>安装nodejs<ul>\n<li>去官网下载nodejs安装(推荐安装0.12.x),安装之后在命令行 node -v,如果成功说明node环境ok,不成功就去环境变量配置一下.</li>\n</ul>\n</li>\n<li>安装hexo<ul>\n<li>使用命令 npm install hexo -g,执行hexo -v 查看版本,本教程适合<strong>3.1.1</strong>版本</li>\n</ul>\n</li>\n<li>安装git<ul>\n<li>去官网下载git安装,不会自行百度</li>\n</ul>\n</li>\n<li>配置git<ul>\n<li>配置ssh私钥,上传到github上</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-github-pages和gitcafe-page的说明\"><a href=\"#2-github-pages和gitcafe-page的说明\" class=\"headerlink\" title=\"2.github-pages和gitcafe-page的说明\"></a>2.github-pages和gitcafe-page的说明</h2><ol>\n<li>github有两种主页,一种是github-page(个人主页),一种是项目主页,本教程针对个人主页</li>\n<li>gitcafe-page的个人主页只是在项目下有一个gitcafe-pages的分支,部署成功后访问主页即可</li>\n<li>github-page需要将hexo博客发布到repository的master(主干)即可</li>\n<li>gitcafe需要将hexo博客发布到repository的gitcafe-pages的分支</li>\n<li>github的个人主页要求repository的名称和username一致，加入username是tom，则repository的名称为tom.github.io<h2 id=\"3-使用hexo写博客\"><a href=\"#3-使用hexo写博客\" class=\"headerlink\" title=\"3.使用hexo写博客\"></a>3.使用hexo写博客</h2><ul>\n<li>新建一个文件夹myblog,</li>\n<li>右键git bash here使用git的shell</li>\n<li>在shell中输入hexo init,回车执行</li>\n<li>在shell中输入hexo g ,回车</li>\n<li>在shell中hexo s,回车</li>\n<li>去浏览器访问<a href=\"http://localhost:4000,访问到主页,然后在shell中ctrl\">http://localhost:4000,访问到主页,然后在shell中ctrl</a> c停止</li>\n<li>在shell中hexo new “first-blog”,回车</li>\n<li>在shell中hexo g ,回车</li>\n<li>在shell中hexo s ,回车,在访问</li>\n<li>ok,在本地测试就没问题了</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"4-发布到github和gitcafe\"><a href=\"#4-发布到github和gitcafe\" class=\"headerlink\" title=\"4.发布到github和gitcafe\"></a>4.发布到github和gitcafe</h2><pre><code>- 打开项目根部录下的.config.yml,找到deploy,修改如下:\n</code></pre><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">deploy</span>:</div><div class=\"line\"> - <span class=\"attribute\">type</span>: git</div><div class=\"line\">   <span class=\"attribute\">repo</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:yourname/yourname.github.io.git,master</div><div class=\"line\"> - <span class=\"attribute\">type</span>: git</div><div class=\"line\">   <span class=\"attribute\">repo</span>: git<span class=\"variable\">@gitcafe</span>.<span class=\"attribute\">com</span>:yourname/yourname.git,gitcafe-pages</div></pre></td></tr></table></figure>\n<pre><code>- 如果只发布到github或者gitcafe上,修改如下:git的branch是master,gitcafe的是gitcafe-pages\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">deploy:</span></div><div class=\"line\"><span class=\"symbol\">  type:</span> git</div><div class=\"line\"><span class=\"symbol\">  repo:</span> <span class=\"params\">&lt;repository url&gt;</span></div><div class=\"line\"><span class=\"symbol\">  branch:</span> [branch]</div><div class=\"line\"><span class=\"symbol\">  message:</span> [message]</div></pre></td></tr></table></figure>\n<pre><code>访问地址就是 http://tom.github.io/\n</code></pre><h3 id=\"5-常用命令\"><a href=\"#5-常用命令\" class=\"headerlink\" title=\"5.常用命令\"></a>5.常用命令</h3><pre><code>命令的简写为：\n<figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo n == hexo <span class=\"keyword\">new</span></div><div class=\"line\">hexo g == hexo <span class=\"keyword\">generate</span></div><div class=\"line\">hexo s == hexo server</div><div class=\"line\">hexo d == hexo deploy</div><div class=\"line\">hexo clean  删除public文件夹</div></pre></td></tr></table></figure>\n</code></pre><h2 id=\"6-常见问题\"><a href=\"#6-常见问题\" class=\"headerlink\" title=\"6.常见问题\"></a>6.常见问题</h2><ol>\n<li>部署时出现git not found<ul>\n<li>npm install hexo-deployer-git –save  安装依赖包</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"7-详细设置\"><a href=\"#7-详细设置\" class=\"headerlink\" title=\"7.详细设置\"></a>7.详细设置</h2><pre><code>每个人对自己的博客都有不一样的要求，比如主题，分类，标签，评论插件的选择，  \n这些对程序员的你来说，都是小菜一碟，下面是官网教程：\n</code></pre><p>   <a href=\"https://hexo.io/docs/\">hexo官方文档</a></p>\n<p>博客效果可以看我的个人博客     <a href=\"http://geekwalker.cn\">我的个人博客</a></p>"},{"title":"Js秘密花园","date":"2016-04-23T02:24:09.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n    js学习中遇到的问题,非常实用!\n <!-- more -->部分来自js秘密花园,其他都是自己的总结\n<The rest of contents | 余下全文>\n\n## 函数与匿名函数的写法\n- 函数声明\n    1. 第一种方式\n    ```\n    function foo() {}\n    ```\n    2. 第二种方式\n    ```\n    var foo = function() {};\n    ```\n    3. 第三种方式\n    ```\n    var foo = function bar() {\n        bar(); // 正常运行\n    }\n    bar(); // 出错：ReferenceError\n    ```\n- 匿名函数\n    1. 第一种方式\n    ```\n    (function(){\n            test();\n        })();\n    ```\n    2. 第二种方式\n    ```\n    (function(){\n            test();\n        }());\n    ```\n\n## js中for循环\n- 为了达到遍历数组的最佳性能，推荐使用经典的 for 循环\n    1. 经典for循环\n    ```\n    var arr = ['aa','bb','cc'];\n    for(var i=0;i<arr.length;i++){\n        console.log(arr[i]);\n    }\n    ```\n    2. for in循环(可以循环对象的属性),for in 循环同样在查找对象属性时遍历原型链上的所有属性\n    ```\n    var arr = ['aa','bb','cc'];\n    for(var i in arr){\n        console.log(arr[i]);\n    }\n    ```\n    3. forEach循环\n    ```\n    var arr = ['aa','bb','cc'];\n    arr.forEach(function(ele){\n        console.log(ele);\n    });\n    ```\n\n## this的用法\n- js中最复杂的莫过于的this的指向,此处大致介绍五种this的指向\n    1. 全局范围内,this指向全局,浏览器中是window对象\n    2. 函数调用,也是指向全局\n    ```\n    foo();\n    ```\n    3. 对象方法调用,指向调用者\n    ```\n    test.foo();\n    ```\n    4. 构造函数,指向新创建的对象\n    ```\n    new foo();\n    ```\n    5. 显示改变的this的指向\n    ```\n    function foo(a, b, c) {}\n    var bar = {};\n    foo.apply(bar, [1, 2, 3]); // 数组将会被扩展，如下所示\n    foo.call(bar, 1, 2, 3); // 传递到foo的参数是：a = 1, b = 2, c = 3\n    ```\n## call和apply的解惑\n- 这两个方法的用途都是在特定的作用域中调用函数,实际上等于设置函数体内 this 对象的值。首先, apply() 方法接收两个参数:一个是在其中运行函数的作用域,另一个是参数数组。其中,第二个参数可以是 Array 的实例,也可以是arguments 对象。例如:\n    ```\n    function sum(num1, num2){\n        return num1 + num2;\n    }\n    function callSum1(num1, num2){\n        return sum.apply(this, arguments);\n    }\n    function callSum2(num1, num2){\n        return sum.apply(this, [num1, num2]);\n    }\n    console.log(callSum1(10,10));\n    console.log(callSum2(10,10));\n    // 传入 arguments 对象\n    // 传入数组\n    //20\n    //20\n    ```\n- call() 方法与 apply() 方法的作用相同,它们的区别仅在于接收参数的方式不同。对于 call()\n方法而言,第一个参数是 this 值没有变化,变化的是其余参数都直接传递给函数。换句话说,在使用\ncall() 方法时,传递给函数的参数必须逐个列举出来,如下面的例子所示:\n    ```\n    function sum(num1, num2){\n        return num1 + num2;\n    }\n    function callSum(num1, num2){\n        return sum.call(this, num1, num2);\n    }\n    cosole.log(callSum(10,10)); //20\n    ```\n- 事实上，传递参数并非 apply()和 call()真正的用武之地；它们真正强大的地方是能够扩充函数\n赖以运行的作用域。下面来看一个例子。\n    ```\n    window.color = \"red\";\n    var o = { color: \"blue\" };\n    function sayColor(){\n        alert(this.color);\n    }\n    sayColor(); //red\n    sayColor.call(this); //red\n    sayColor.call(window); //red\n    sayColor.call(o); //blue\n    ```\n## js面向对象\n- 未完待续\n","source":"_posts/js-study.md","raw":"title: js秘密花园\ndate: 2016-04-23 10:24:09\ntags: javacript\ncategories: 学习笔记\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n    js学习中遇到的问题,非常实用!\n <!-- more -->部分来自js秘密花园,其他都是自己的总结\n<The rest of contents | 余下全文>\n\n## 函数与匿名函数的写法\n- 函数声明\n    1. 第一种方式\n    ```\n    function foo() {}\n    ```\n    2. 第二种方式\n    ```\n    var foo = function() {};\n    ```\n    3. 第三种方式\n    ```\n    var foo = function bar() {\n        bar(); // 正常运行\n    }\n    bar(); // 出错：ReferenceError\n    ```\n- 匿名函数\n    1. 第一种方式\n    ```\n    (function(){\n            test();\n        })();\n    ```\n    2. 第二种方式\n    ```\n    (function(){\n            test();\n        }());\n    ```\n\n## js中for循环\n- 为了达到遍历数组的最佳性能，推荐使用经典的 for 循环\n    1. 经典for循环\n    ```\n    var arr = ['aa','bb','cc'];\n    for(var i=0;i<arr.length;i++){\n        console.log(arr[i]);\n    }\n    ```\n    2. for in循环(可以循环对象的属性),for in 循环同样在查找对象属性时遍历原型链上的所有属性\n    ```\n    var arr = ['aa','bb','cc'];\n    for(var i in arr){\n        console.log(arr[i]);\n    }\n    ```\n    3. forEach循环\n    ```\n    var arr = ['aa','bb','cc'];\n    arr.forEach(function(ele){\n        console.log(ele);\n    });\n    ```\n\n## this的用法\n- js中最复杂的莫过于的this的指向,此处大致介绍五种this的指向\n    1. 全局范围内,this指向全局,浏览器中是window对象\n    2. 函数调用,也是指向全局\n    ```\n    foo();\n    ```\n    3. 对象方法调用,指向调用者\n    ```\n    test.foo();\n    ```\n    4. 构造函数,指向新创建的对象\n    ```\n    new foo();\n    ```\n    5. 显示改变的this的指向\n    ```\n    function foo(a, b, c) {}\n    var bar = {};\n    foo.apply(bar, [1, 2, 3]); // 数组将会被扩展，如下所示\n    foo.call(bar, 1, 2, 3); // 传递到foo的参数是：a = 1, b = 2, c = 3\n    ```\n## call和apply的解惑\n- 这两个方法的用途都是在特定的作用域中调用函数,实际上等于设置函数体内 this 对象的值。首先, apply() 方法接收两个参数:一个是在其中运行函数的作用域,另一个是参数数组。其中,第二个参数可以是 Array 的实例,也可以是arguments 对象。例如:\n    ```\n    function sum(num1, num2){\n        return num1 + num2;\n    }\n    function callSum1(num1, num2){\n        return sum.apply(this, arguments);\n    }\n    function callSum2(num1, num2){\n        return sum.apply(this, [num1, num2]);\n    }\n    console.log(callSum1(10,10));\n    console.log(callSum2(10,10));\n    // 传入 arguments 对象\n    // 传入数组\n    //20\n    //20\n    ```\n- call() 方法与 apply() 方法的作用相同,它们的区别仅在于接收参数的方式不同。对于 call()\n方法而言,第一个参数是 this 值没有变化,变化的是其余参数都直接传递给函数。换句话说,在使用\ncall() 方法时,传递给函数的参数必须逐个列举出来,如下面的例子所示:\n    ```\n    function sum(num1, num2){\n        return num1 + num2;\n    }\n    function callSum(num1, num2){\n        return sum.call(this, num1, num2);\n    }\n    cosole.log(callSum(10,10)); //20\n    ```\n- 事实上，传递参数并非 apply()和 call()真正的用武之地；它们真正强大的地方是能够扩充函数\n赖以运行的作用域。下面来看一个例子。\n    ```\n    window.color = \"red\";\n    var o = { color: \"blue\" };\n    function sayColor(){\n        alert(this.color);\n    }\n    sayColor(); //red\n    sayColor.call(this); //red\n    sayColor.call(window); //red\n    sayColor.call(o); //blue\n    ```\n## js面向对象\n- 未完待续\n","slug":"js-study","published":1,"updated":"2016-11-13T06:01:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d8e0014ohzj3ljudpp7","content":"<p><strong> Js秘密花园：</strong> <Excerpt in index | 首页摘要><br>    js学习中遇到的问题,非常实用!<br> <a id=\"more\"></a>部分来自js秘密花园,其他都是自己的总结</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"函数与匿名函数的写法\"><a href=\"#函数与匿名函数的写法\" class=\"headerlink\" title=\"函数与匿名函数的写法\"></a>函数与匿名函数的写法</h2><ul>\n<li><p>函数声明</p>\n<ol>\n<li><p>第一种方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>第二种方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>第三种方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    bar(); <span class=\"comment\">// 正常运行</span></div><div class=\"line\">&#125;</div><div class=\"line\">bar(); <span class=\"comment\">// 出错：ReferenceError</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>匿名函数</p>\n<ol>\n<li><p>第一种方式</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"name\">function</span>()&#123;</div><div class=\"line\">        test()<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)()<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>第二种方式</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"name\">function</span>()&#123;</div><div class=\"line\">        test()<span class=\"comment\">;</span></div><div class=\"line\">    &#125;())<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"js中for循环\"><a href=\"#js中for循环\" class=\"headerlink\" title=\"js中for循环\"></a>js中for循环</h2><ul>\n<li><p>为了达到遍历数组的最佳性能，推荐使用经典的 for 循环</p>\n<ol>\n<li><p>经典for循环</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [<span class=\"string\">'aa'</span>,<span class=\"string\">'bb'</span>,<span class=\"string\">'cc'</span>];</div><div class=\"line\"><span class=\"keyword\">for</span>(var <span class=\"built_in\">i</span>=<span class=\"number\">0</span>;<span class=\"built_in\">i</span>&lt;arr.<span class=\"built_in\">length</span>;<span class=\"built_in\">i</span>++)&#123;</div><div class=\"line\">    console.log(arr[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>for in循环(可以循环对象的属性),for in 循环同样在查找对象属性时遍历原型链上的所有属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>,<span class=\"string\">'bb'</span>,<span class=\"string\">'cc'</span>];</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> arr)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>forEach循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>,<span class=\"string\">'bb'</span>,<span class=\"string\">'cc'</span>];</div><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(ele);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"this的用法\"><a href=\"#this的用法\" class=\"headerlink\" title=\"this的用法\"></a>this的用法</h2><ul>\n<li><p>js中最复杂的莫过于的this的指向,此处大致介绍五种this的指向</p>\n<ol>\n<li>全局范围内,this指向全局,浏览器中是window对象</li>\n<li><p>函数调用,也是指向全局</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo<span class=\"comment\">()</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>对象方法调用,指向调用者</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">test<span class=\"selector-class\">.foo</span>();</div></pre></td></tr></table></figure>\n</li>\n<li><p>构造函数,指向新创建的对象</p>\n<figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">foo</span>();</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>显示改变的this的指向</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(a, b, c) &#123;&#125;</div><div class=\"line\">var bar = &#123;&#125;;</div><div class=\"line\">foo.apply(bar, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// 数组将会被扩展，如下所示</span></div><div class=\"line\">foo.call(bar, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 传递到foo的参数是：a = 1, b = 2, c = 3</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"call和apply的解惑\"><a href=\"#call和apply的解惑\" class=\"headerlink\" title=\"call和apply的解惑\"></a>call和apply的解惑</h2><ul>\n<li><p>这两个方法的用途都是在特定的作用域中调用函数,实际上等于设置函数体内 this 对象的值。首先, apply() 方法接收两个参数:一个是在其中运行函数的作用域,另一个是参数数组。其中,第二个参数可以是 Array 的实例,也可以是arguments 对象。例如:</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callSum1</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callSum2</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum.apply(<span class=\"keyword\">this</span>, [num1, num2]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(callSum1(<span class=\"number\">10</span>,<span class=\"number\">10</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(callSum2(<span class=\"number\">10</span>,<span class=\"number\">10</span>));</div><div class=\"line\"><span class=\"comment\">// 传入 arguments 对象</span></div><div class=\"line\"><span class=\"comment\">// 传入数组</span></div><div class=\"line\"><span class=\"comment\">//20</span></div><div class=\"line\"><span class=\"comment\">//20</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>call() 方法与 apply() 方法的作用相同,它们的区别仅在于接收参数的方式不同。对于 call()<br>方法而言,第一个参数是 this 值没有变化,变化的是其余参数都直接传递给函数。换句话说,在使用<br>call() 方法时,传递给函数的参数必须逐个列举出来,如下面的例子所示:</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callSum</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum.call(<span class=\"keyword\">this</span>, num1, num2);</div><div class=\"line\">&#125;</div><div class=\"line\">cosole.log(callSum(<span class=\"number\">10</span>,<span class=\"number\">10</span>)); <span class=\"comment\">//20</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>事实上，传递参数并非 apply()和 call()真正的用武之地；它们真正强大的地方是能够扩充函数<br>赖以运行的作用域。下面来看一个例子。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.color = <span class=\"string\">\"red\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123; color: <span class=\"string\">\"blue\"</span> &#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayColor</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.color);</div><div class=\"line\">&#125;</div><div class=\"line\">sayColor(); <span class=\"comment\">//red</span></div><div class=\"line\">sayColor.call(<span class=\"keyword\">this</span>); <span class=\"comment\">//red</span></div><div class=\"line\">sayColor.call(<span class=\"built_in\">window</span>); <span class=\"comment\">//red</span></div><div class=\"line\">sayColor.call(o); <span class=\"comment\">//blue</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"js面向对象\"><a href=\"#js面向对象\" class=\"headerlink\" title=\"js面向对象\"></a>js面向对象</h2><ul>\n<li>未完待续</li>\n</ul>\n","excerpt":"<p><strong> Js秘密花园：</strong> <Excerpt in index | 首页摘要><br>    js学习中遇到的问题,非常实用!<br>","more":"部分来自js秘密花园,其他都是自己的总结</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"函数与匿名函数的写法\"><a href=\"#函数与匿名函数的写法\" class=\"headerlink\" title=\"函数与匿名函数的写法\"></a>函数与匿名函数的写法</h2><ul>\n<li><p>函数声明</p>\n<ol>\n<li><p>第一种方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>第二种方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>第三种方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    bar(); <span class=\"comment\">// 正常运行</span></div><div class=\"line\">&#125;</div><div class=\"line\">bar(); <span class=\"comment\">// 出错：ReferenceError</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><p>匿名函数</p>\n<ol>\n<li><p>第一种方式</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"name\">function</span>()&#123;</div><div class=\"line\">        test()<span class=\"comment\">;</span></div><div class=\"line\">    &#125;)()<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>第二种方式</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"name\">function</span>()&#123;</div><div class=\"line\">        test()<span class=\"comment\">;</span></div><div class=\"line\">    &#125;())<span class=\"comment\">;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"js中for循环\"><a href=\"#js中for循环\" class=\"headerlink\" title=\"js中for循环\"></a>js中for循环</h2><ul>\n<li><p>为了达到遍历数组的最佳性能，推荐使用经典的 for 循环</p>\n<ol>\n<li><p>经典for循环</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [<span class=\"string\">'aa'</span>,<span class=\"string\">'bb'</span>,<span class=\"string\">'cc'</span>];</div><div class=\"line\"><span class=\"keyword\">for</span>(var <span class=\"built_in\">i</span>=<span class=\"number\">0</span>;<span class=\"built_in\">i</span>&lt;arr.<span class=\"built_in\">length</span>;<span class=\"built_in\">i</span>++)&#123;</div><div class=\"line\">    console.log(arr[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>for in循环(可以循环对象的属性),for in 循环同样在查找对象属性时遍历原型链上的所有属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>,<span class=\"string\">'bb'</span>,<span class=\"string\">'cc'</span>];</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> arr)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(arr[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>forEach循环</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'aa'</span>,<span class=\"string\">'bb'</span>,<span class=\"string\">'cc'</span>];</div><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(ele);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"this的用法\"><a href=\"#this的用法\" class=\"headerlink\" title=\"this的用法\"></a>this的用法</h2><ul>\n<li><p>js中最复杂的莫过于的this的指向,此处大致介绍五种this的指向</p>\n<ol>\n<li>全局范围内,this指向全局,浏览器中是window对象</li>\n<li><p>函数调用,也是指向全局</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">foo<span class=\"comment\">()</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>对象方法调用,指向调用者</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">test<span class=\"selector-class\">.foo</span>();</div></pre></td></tr></table></figure>\n</li>\n<li><p>构造函数,指向新创建的对象</p>\n<figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">foo</span>();</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>显示改变的this的指向</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(a, b, c) &#123;&#125;</div><div class=\"line\">var bar = &#123;&#125;;</div><div class=\"line\">foo.apply(bar, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// 数组将会被扩展，如下所示</span></div><div class=\"line\">foo.call(bar, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); <span class=\"comment\">// 传递到foo的参数是：a = 1, b = 2, c = 3</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"call和apply的解惑\"><a href=\"#call和apply的解惑\" class=\"headerlink\" title=\"call和apply的解惑\"></a>call和apply的解惑</h2><ul>\n<li><p>这两个方法的用途都是在特定的作用域中调用函数,实际上等于设置函数体内 this 对象的值。首先, apply() 方法接收两个参数:一个是在其中运行函数的作用域,另一个是参数数组。其中,第二个参数可以是 Array 的实例,也可以是arguments 对象。例如:</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callSum1</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callSum2</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum.apply(<span class=\"keyword\">this</span>, [num1, num2]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(callSum1(<span class=\"number\">10</span>,<span class=\"number\">10</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(callSum2(<span class=\"number\">10</span>,<span class=\"number\">10</span>));</div><div class=\"line\"><span class=\"comment\">// 传入 arguments 对象</span></div><div class=\"line\"><span class=\"comment\">// 传入数组</span></div><div class=\"line\"><span class=\"comment\">//20</span></div><div class=\"line\"><span class=\"comment\">//20</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>call() 方法与 apply() 方法的作用相同,它们的区别仅在于接收参数的方式不同。对于 call()<br>方法而言,第一个参数是 this 值没有变化,变化的是其余参数都直接传递给函数。换句话说,在使用<br>call() 方法时,传递给函数的参数必须逐个列举出来,如下面的例子所示:</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callSum</span>(<span class=\"params\">num1, num2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> sum.call(<span class=\"keyword\">this</span>, num1, num2);</div><div class=\"line\">&#125;</div><div class=\"line\">cosole.log(callSum(<span class=\"number\">10</span>,<span class=\"number\">10</span>)); <span class=\"comment\">//20</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>事实上，传递参数并非 apply()和 call()真正的用武之地；它们真正强大的地方是能够扩充函数<br>赖以运行的作用域。下面来看一个例子。</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.color = <span class=\"string\">\"red\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123; color: <span class=\"string\">\"blue\"</span> &#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayColor</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    alert(<span class=\"keyword\">this</span>.color);</div><div class=\"line\">&#125;</div><div class=\"line\">sayColor(); <span class=\"comment\">//red</span></div><div class=\"line\">sayColor.call(<span class=\"keyword\">this</span>); <span class=\"comment\">//red</span></div><div class=\"line\">sayColor.call(<span class=\"built_in\">window</span>); <span class=\"comment\">//red</span></div><div class=\"line\">sayColor.call(o); <span class=\"comment\">//blue</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"js面向对象\"><a href=\"#js面向对象\" class=\"headerlink\" title=\"js面向对象\"></a>js面向对象</h2><ul>\n<li>未完待续</li>\n</ul>"},{"title":"Java和javascript日期详解","date":"2016-05-13T13:48:00.000Z","_content":"** java，js日期转换：** <Excerpt in index | 首页摘要>\n    java的各种日期转换\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### 日期表示类型\n1. 获取long类型的日期格式\n```\nlong time = System.currentTimeMillis();\nSystem.out.printf(time+\"\");\nDate date =new Date();\nSystem.out.println(date.getTime());\n```\n2. 获取制定格式的日期\n```\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\nDate date =new Date();\nSystem.out.println(sdf.format(date) );\n```\n3. 把制定格式的日期转为date或者毫秒值\n```\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\nDate date = sdf.parse(\"2016-05-22 10:15:21\");\nlong mills = date.getTime();\n```\n- 说明:System.currentTimeMillis()并不能精确到1ms的级别,它取决于运行的系统,你再windows,mac,linux精确的范围都有差异,对于有高精度时间的要求,不能使用这个\n\n### 日期计算\n1. 最方便的方式是将时间转为毫秒值进行计算\n```\nDate from =new Date();\nThread.sleep(200);//线程休眠2ms\nDate to =new Date();\nSystem.out.println(to.getTime()-from.getTime());\n```\n\n### 高精度时间\n```\nlong time1 =System.nanoTime();\nSystem.out.printf(time1+\"\");\n```\n- 说明:System.nanoTime()提高了ns级别的精度,1ms=1000000ns,\n\n### javascript日期\n1. 获取时间的毫秒值\n\n2. 格式化时间\n\n3. 获取月份，时间\n","source":"_posts/java-date.md","raw":"title: java和javascript日期详解\ndate: 2016-05-13 21:48:00\ntags: java\ncategories: 编程语言\n---\n** java，js日期转换：** <Excerpt in index | 首页摘要>\n    java的各种日期转换\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### 日期表示类型\n1. 获取long类型的日期格式\n```\nlong time = System.currentTimeMillis();\nSystem.out.printf(time+\"\");\nDate date =new Date();\nSystem.out.println(date.getTime());\n```\n2. 获取制定格式的日期\n```\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\nDate date =new Date();\nSystem.out.println(sdf.format(date) );\n```\n3. 把制定格式的日期转为date或者毫秒值\n```\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");\nDate date = sdf.parse(\"2016-05-22 10:15:21\");\nlong mills = date.getTime();\n```\n- 说明:System.currentTimeMillis()并不能精确到1ms的级别,它取决于运行的系统,你再windows,mac,linux精确的范围都有差异,对于有高精度时间的要求,不能使用这个\n\n### 日期计算\n1. 最方便的方式是将时间转为毫秒值进行计算\n```\nDate from =new Date();\nThread.sleep(200);//线程休眠2ms\nDate to =new Date();\nSystem.out.println(to.getTime()-from.getTime());\n```\n\n### 高精度时间\n```\nlong time1 =System.nanoTime();\nSystem.out.printf(time1+\"\");\n```\n- 说明:System.nanoTime()提高了ns级别的精度,1ms=1000000ns,\n\n### javascript日期\n1. 获取时间的毫秒值\n\n2. 格式化时间\n\n3. 获取月份，时间\n","slug":"java-date","published":1,"updated":"2016-11-13T06:01:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d8g0017ohzjrhqj786u","content":"<p><strong> java，js日期转换：</strong> <Excerpt in index | 首页摘要><br>    java的各种日期转换<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"日期表示类型\"><a href=\"#日期表示类型\" class=\"headerlink\" title=\"日期表示类型\"></a>日期表示类型</h3><ol>\n<li><p>获取long类型的日期格式</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">long <span class=\"built_in\">time</span> = <span class=\"keyword\">System</span>.currentTimeMillis();</div><div class=\"line\"><span class=\"keyword\">System</span>.out.printf(<span class=\"built_in\">time</span>+<span class=\"string\">\"\"</span>);</div><div class=\"line\"><span class=\"built_in\">Date</span> <span class=\"built_in\">date</span> =<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"keyword\">System</span>.out.println(<span class=\"built_in\">date</span>.getTime());</div></pre></td></tr></table></figure>\n</li>\n<li><p>获取制定格式的日期</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd hh:mm:ss\"</span>);</div><div class=\"line\"><span class=\"built_in\">Date</span> <span class=\"built_in\">date</span> =<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"keyword\">System</span>.out.println(sdf.<span class=\"keyword\">format</span>(<span class=\"built_in\">date</span>) );</div></pre></td></tr></table></figure>\n</li>\n<li><p>把制定格式的日期转为date或者毫秒值</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd hh:mm:ss\"</span>);</div><div class=\"line\"><span class=\"built_in\">Date</span> <span class=\"built_in\">date</span> = sdf.<span class=\"built_in\">parse</span>(<span class=\"string\">\"2016-05-22 10:15:21\"</span>);</div><div class=\"line\">long mills = <span class=\"built_in\">date</span>.getTime();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>说明:System.currentTimeMillis()并不能精确到1ms的级别,它取决于运行的系统,你再windows,mac,linux精确的范围都有差异,对于有高精度时间的要求,不能使用这个</li>\n</ul>\n<h3 id=\"日期计算\"><a href=\"#日期计算\" class=\"headerlink\" title=\"日期计算\"></a>日期计算</h3><ol>\n<li>最方便的方式是将时间转为毫秒值进行计算<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Date</span> from =<span class=\"literal\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"keyword\">Thread</span>.sleep(<span class=\"number\">200</span>);<span class=\"comment\">//线程休眠2ms</span></div><div class=\"line\"><span class=\"built_in\">Date</span> <span class=\"keyword\">to</span> =<span class=\"literal\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">System.out.println(<span class=\"keyword\">to</span>.getTime()<span class=\"attr\">-from</span>.getTime());</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"高精度时间\"><a href=\"#高精度时间\" class=\"headerlink\" title=\"高精度时间\"></a>高精度时间</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">long</span> time1 =System.nanoTime();</div><div class=\"line\">System.out.<span class=\"built_in\">printf</span>(time1+<span class=\"string\">\"\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>说明:System.nanoTime()提高了ns级别的精度,1ms=1000000ns,</li>\n</ul>\n<h3 id=\"javascript日期\"><a href=\"#javascript日期\" class=\"headerlink\" title=\"javascript日期\"></a>javascript日期</h3><ol>\n<li><p>获取时间的毫秒值</p>\n</li>\n<li><p>格式化时间</p>\n</li>\n<li><p>获取月份，时间</p>\n</li>\n</ol>\n","excerpt":"<p><strong> java，js日期转换：</strong> <Excerpt in index | 首页摘要><br>    java的各种日期转换<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"日期表示类型\"><a href=\"#日期表示类型\" class=\"headerlink\" title=\"日期表示类型\"></a>日期表示类型</h3><ol>\n<li><p>获取long类型的日期格式</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">long <span class=\"built_in\">time</span> = <span class=\"keyword\">System</span>.currentTimeMillis();</div><div class=\"line\"><span class=\"keyword\">System</span>.out.printf(<span class=\"built_in\">time</span>+<span class=\"string\">\"\"</span>);</div><div class=\"line\"><span class=\"built_in\">Date</span> <span class=\"built_in\">date</span> =<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"keyword\">System</span>.out.println(<span class=\"built_in\">date</span>.getTime());</div></pre></td></tr></table></figure>\n</li>\n<li><p>获取制定格式的日期</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd hh:mm:ss\"</span>);</div><div class=\"line\"><span class=\"built_in\">Date</span> <span class=\"built_in\">date</span> =<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"keyword\">System</span>.out.println(sdf.<span class=\"keyword\">format</span>(<span class=\"built_in\">date</span>) );</div></pre></td></tr></table></figure>\n</li>\n<li><p>把制定格式的日期转为date或者毫秒值</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd hh:mm:ss\"</span>);</div><div class=\"line\"><span class=\"built_in\">Date</span> <span class=\"built_in\">date</span> = sdf.<span class=\"built_in\">parse</span>(<span class=\"string\">\"2016-05-22 10:15:21\"</span>);</div><div class=\"line\">long mills = <span class=\"built_in\">date</span>.getTime();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>说明:System.currentTimeMillis()并不能精确到1ms的级别,它取决于运行的系统,你再windows,mac,linux精确的范围都有差异,对于有高精度时间的要求,不能使用这个</li>\n</ul>\n<h3 id=\"日期计算\"><a href=\"#日期计算\" class=\"headerlink\" title=\"日期计算\"></a>日期计算</h3><ol>\n<li>最方便的方式是将时间转为毫秒值进行计算<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Date</span> from =<span class=\"literal\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\"><span class=\"keyword\">Thread</span>.sleep(<span class=\"number\">200</span>);<span class=\"comment\">//线程休眠2ms</span></div><div class=\"line\"><span class=\"built_in\">Date</span> <span class=\"keyword\">to</span> =<span class=\"literal\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">System.out.println(<span class=\"keyword\">to</span>.getTime()<span class=\"attr\">-from</span>.getTime());</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"高精度时间\"><a href=\"#高精度时间\" class=\"headerlink\" title=\"高精度时间\"></a>高精度时间</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">long</span> time1 =System.nanoTime();</div><div class=\"line\">System.out.<span class=\"built_in\">printf</span>(time1+<span class=\"string\">\"\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>说明:System.nanoTime()提高了ns级别的精度,1ms=1000000ns,</li>\n</ul>\n<h3 id=\"javascript日期\"><a href=\"#javascript日期\" class=\"headerlink\" title=\"javascript日期\"></a>javascript日期</h3><ol>\n<li><p>获取时间的毫秒值</p>\n</li>\n<li><p>格式化时间</p>\n</li>\n<li><p>获取月份，时间</p>\n</li>\n</ol>"},{"title":"Mac开发环境配置","date":"2016-11-27T07:52:38.000Z","_content":"** mac开发环境配置：** <Excerpt in index | 首页摘要>\n工欲善其事，必先利其器，做好开发者，先搞好开发环境啊。针对mac开发者的开发配置，把mac打造成最具生产力工具！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### 软件下载说明\n下面所提到的软件，有很多需要付费或者破解版，为了方便大家使用，会在网盘分享给大家，只需在评论的地方留下自己的**百度云账号**！！！\n\n### 软件分类说明\n1. 通用（开发者必备的软件）\n2. java类（java开发者必不可少）\n3. 前端类（偏前端和nodejs）\n4. python类\n5. 数据库类\n6. 其他（php，ruby等等）\n\n### 通用软件\n1. Alfred\n2. dash\n3. homebrew\n4. zsh（oh my zsh）\n5. sublime text3,\n6. vscode\n7. paste(剪切板工具)\n8. BetterSnapTool(分屏软件)\n9. cornerstone(svn)\n10. tower(git)\n11. alternote()\n12. paw\n13. chrome\n14. firefox\n15. pdf expert\n16. CheatSheet\n17. snippetslab\n\n### java软件\n1. jdk\n2. idea\n3. eclipse\n4. maven\n5. zookeeper,dubbo\n6. tomcat\n7. apache\n\n### 前端必备\n1. nvm(nodejs,npm,cnpm)\n2. webpack\n3. yo\n4. webstorm\n\n\n### python必备\n1. pycharm\n2. sublime text（插件）\n\n### 数据库类\n1. mysql\n2. mongodb\n3. sqllite\n4. navicate\n5. robomongo\n6. redis\n\n### 其他软件\n1. office\n2. keynote,pages,number\n3. photoshop\n\n文章长期更新，请收藏\n\n\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/mac-dev.md","raw":"title: mac开发环境配置\ndate: 2016-11-27 15:52:38\ntags: mac\ncategories: 开发工具\n---\n** mac开发环境配置：** <Excerpt in index | 首页摘要>\n工欲善其事，必先利其器，做好开发者，先搞好开发环境啊。针对mac开发者的开发配置，把mac打造成最具生产力工具！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### 软件下载说明\n下面所提到的软件，有很多需要付费或者破解版，为了方便大家使用，会在网盘分享给大家，只需在评论的地方留下自己的**百度云账号**！！！\n\n### 软件分类说明\n1. 通用（开发者必备的软件）\n2. java类（java开发者必不可少）\n3. 前端类（偏前端和nodejs）\n4. python类\n5. 数据库类\n6. 其他（php，ruby等等）\n\n### 通用软件\n1. Alfred\n2. dash\n3. homebrew\n4. zsh（oh my zsh）\n5. sublime text3,\n6. vscode\n7. paste(剪切板工具)\n8. BetterSnapTool(分屏软件)\n9. cornerstone(svn)\n10. tower(git)\n11. alternote()\n12. paw\n13. chrome\n14. firefox\n15. pdf expert\n16. CheatSheet\n17. snippetslab\n\n### java软件\n1. jdk\n2. idea\n3. eclipse\n4. maven\n5. zookeeper,dubbo\n6. tomcat\n7. apache\n\n### 前端必备\n1. nvm(nodejs,npm,cnpm)\n2. webpack\n3. yo\n4. webstorm\n\n\n### python必备\n1. pycharm\n2. sublime text（插件）\n\n### 数据库类\n1. mysql\n2. mongodb\n3. sqllite\n4. navicate\n5. robomongo\n6. redis\n\n### 其他软件\n1. office\n2. keynote,pages,number\n3. photoshop\n\n文章长期更新，请收藏\n\n\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"mac-dev","published":1,"updated":"2016-11-27T08:32:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d8i001bohzj4y7n25hn","content":"<p><strong> mac开发环境配置：</strong> <Excerpt in index | 首页摘要><br>工欲善其事，必先利其器，做好开发者，先搞好开发环境啊。针对mac开发者的开发配置，把mac打造成最具生产力工具！<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"软件下载说明\"><a href=\"#软件下载说明\" class=\"headerlink\" title=\"软件下载说明\"></a>软件下载说明</h3><p>下面所提到的软件，有很多需要付费或者破解版，为了方便大家使用，会在网盘分享给大家，只需在评论的地方留下自己的<strong>百度云账号</strong>！！！</p>\n<h3 id=\"软件分类说明\"><a href=\"#软件分类说明\" class=\"headerlink\" title=\"软件分类说明\"></a>软件分类说明</h3><ol>\n<li>通用（开发者必备的软件）</li>\n<li>java类（java开发者必不可少）</li>\n<li>前端类（偏前端和nodejs）</li>\n<li>python类</li>\n<li>数据库类</li>\n<li>其他（php，ruby等等）</li>\n</ol>\n<h3 id=\"通用软件\"><a href=\"#通用软件\" class=\"headerlink\" title=\"通用软件\"></a>通用软件</h3><ol>\n<li>Alfred</li>\n<li>dash</li>\n<li>homebrew</li>\n<li>zsh（oh my zsh）</li>\n<li>sublime text3,</li>\n<li>vscode</li>\n<li>paste(剪切板工具)</li>\n<li>BetterSnapTool(分屏软件)</li>\n<li>cornerstone(svn)</li>\n<li>tower(git)</li>\n<li>alternote()</li>\n<li>paw</li>\n<li>chrome</li>\n<li>firefox</li>\n<li>pdf expert</li>\n<li>CheatSheet</li>\n<li>snippetslab</li>\n</ol>\n<h3 id=\"java软件\"><a href=\"#java软件\" class=\"headerlink\" title=\"java软件\"></a>java软件</h3><ol>\n<li>jdk</li>\n<li>idea</li>\n<li>eclipse</li>\n<li>maven</li>\n<li>zookeeper,dubbo</li>\n<li>tomcat</li>\n<li>apache</li>\n</ol>\n<h3 id=\"前端必备\"><a href=\"#前端必备\" class=\"headerlink\" title=\"前端必备\"></a>前端必备</h3><ol>\n<li>nvm(nodejs,npm,cnpm)</li>\n<li>webpack</li>\n<li>yo</li>\n<li>webstorm</li>\n</ol>\n<h3 id=\"python必备\"><a href=\"#python必备\" class=\"headerlink\" title=\"python必备\"></a>python必备</h3><ol>\n<li>pycharm</li>\n<li>sublime text（插件）</li>\n</ol>\n<h3 id=\"数据库类\"><a href=\"#数据库类\" class=\"headerlink\" title=\"数据库类\"></a>数据库类</h3><ol>\n<li>mysql</li>\n<li>mongodb</li>\n<li>sqllite</li>\n<li>navicate</li>\n<li>robomongo</li>\n<li>redis</li>\n</ol>\n<h3 id=\"其他软件\"><a href=\"#其他软件\" class=\"headerlink\" title=\"其他软件\"></a>其他软件</h3><ol>\n<li>office</li>\n<li>keynote,pages,number</li>\n<li>photoshop</li>\n</ol>\n<p>文章长期更新，请收藏</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> mac开发环境配置：</strong> <Excerpt in index | 首页摘要><br>工欲善其事，必先利其器，做好开发者，先搞好开发环境啊。针对mac开发者的开发配置，把mac打造成最具生产力工具！<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"软件下载说明\"><a href=\"#软件下载说明\" class=\"headerlink\" title=\"软件下载说明\"></a>软件下载说明</h3><p>下面所提到的软件，有很多需要付费或者破解版，为了方便大家使用，会在网盘分享给大家，只需在评论的地方留下自己的<strong>百度云账号</strong>！！！</p>\n<h3 id=\"软件分类说明\"><a href=\"#软件分类说明\" class=\"headerlink\" title=\"软件分类说明\"></a>软件分类说明</h3><ol>\n<li>通用（开发者必备的软件）</li>\n<li>java类（java开发者必不可少）</li>\n<li>前端类（偏前端和nodejs）</li>\n<li>python类</li>\n<li>数据库类</li>\n<li>其他（php，ruby等等）</li>\n</ol>\n<h3 id=\"通用软件\"><a href=\"#通用软件\" class=\"headerlink\" title=\"通用软件\"></a>通用软件</h3><ol>\n<li>Alfred</li>\n<li>dash</li>\n<li>homebrew</li>\n<li>zsh（oh my zsh）</li>\n<li>sublime text3,</li>\n<li>vscode</li>\n<li>paste(剪切板工具)</li>\n<li>BetterSnapTool(分屏软件)</li>\n<li>cornerstone(svn)</li>\n<li>tower(git)</li>\n<li>alternote()</li>\n<li>paw</li>\n<li>chrome</li>\n<li>firefox</li>\n<li>pdf expert</li>\n<li>CheatSheet</li>\n<li>snippetslab</li>\n</ol>\n<h3 id=\"java软件\"><a href=\"#java软件\" class=\"headerlink\" title=\"java软件\"></a>java软件</h3><ol>\n<li>jdk</li>\n<li>idea</li>\n<li>eclipse</li>\n<li>maven</li>\n<li>zookeeper,dubbo</li>\n<li>tomcat</li>\n<li>apache</li>\n</ol>\n<h3 id=\"前端必备\"><a href=\"#前端必备\" class=\"headerlink\" title=\"前端必备\"></a>前端必备</h3><ol>\n<li>nvm(nodejs,npm,cnpm)</li>\n<li>webpack</li>\n<li>yo</li>\n<li>webstorm</li>\n</ol>\n<h3 id=\"python必备\"><a href=\"#python必备\" class=\"headerlink\" title=\"python必备\"></a>python必备</h3><ol>\n<li>pycharm</li>\n<li>sublime text（插件）</li>\n</ol>\n<h3 id=\"数据库类\"><a href=\"#数据库类\" class=\"headerlink\" title=\"数据库类\"></a>数据库类</h3><ol>\n<li>mysql</li>\n<li>mongodb</li>\n<li>sqllite</li>\n<li>navicate</li>\n<li>robomongo</li>\n<li>redis</li>\n</ol>\n<h3 id=\"其他软件\"><a href=\"#其他软件\" class=\"headerlink\" title=\"其他软件\"></a>其他软件</h3><ol>\n<li>office</li>\n<li>keynote,pages,number</li>\n<li>photoshop</li>\n</ol>\n<p>文章长期更新，请收藏</p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"mac下mysql5.6字符集设置","date":"2016-05-28T15:10:37.000Z","_content":"** mac下mysql5.6字符集设置：** <Excerpt in index | 首页摘要>\n    在mac下设置mysql5.6字符集时踩过的坑，百分百保证有效\n<!-- more -->\n<The rest of contents | 余下全文>\n### 为什么要设置字符集\n1. 设置字符集主要是解决乱码问题，由于中文和英文编码不同导致，中文出现乱码，所以一般都设置为utf8格式\n2. 不同的字符集和编码占用的字节不同，选择适合的编码会提高数据库性能\n\n### mac下设置\n- 在/etc/my.cnf文件进行设置，如果没有此文件可以从/usr/local/mysql/support-files/拷贝，命令如下\n```\ncd /usr/local/mysql/support-files\nsudo cp my.cnf /etc/my.cnf\n```\n查看文件的读写权限，如果为644（rw- r-- r--）则改为(664) (rw- rw- r--)\n如果改为(666)(rw- rw- rw-)则修改以后配置文件不会生效\n```\nsudo chmod 664 /etc/my.cnf\n```\n\n- my.cnf设置如下：\n```\n[client]\ndefault-character-set=utf8\n[mysqld]\ncollation-server = utf8_unicode_ci\ninit-connect='SET NAMES utf8'\ncharacter-set-server = utf8\n[mysql]\ndefault-character-set=utf8\n```\n\n### 查看设置是否成功\n在命令行输入mysql，如果提示没有命令的话，在bash或者zsh的文件里修改，我用的是zsh，设置~/.zshrc,\n```\nexport MYSQL=\"/usr/local/mysql/bin/\"\nexport PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$MYSQL\"\n```\n在命令行输入mysql,进入mysql命令行后，输入`status;`或者`show variables like '%char%';`\n```\n| character_set_client     | utf8                                                    |\n| character_set_connection | utf8                                                    |\n| character_set_database   | utf8                                                    |\n| character_set_filesystem | binary                                                  |\n| character_set_results    | utf8                                                    |\n| character_set_server     | utf8                                                    |\n| character_set_system     | utf8                                                    |\n| character_sets_dir       | /usr/local/mysql-5.6.30-osx10.11-x86_64/share/charsets/\n```\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/mac-mysql-unicode.md","raw":"title: mac下mysql5.6字符集设置\ndate: 2016-05-28 23:10:37\ntags: mysql\ncategories: 数据库\n---\n** mac下mysql5.6字符集设置：** <Excerpt in index | 首页摘要>\n    在mac下设置mysql5.6字符集时踩过的坑，百分百保证有效\n<!-- more -->\n<The rest of contents | 余下全文>\n### 为什么要设置字符集\n1. 设置字符集主要是解决乱码问题，由于中文和英文编码不同导致，中文出现乱码，所以一般都设置为utf8格式\n2. 不同的字符集和编码占用的字节不同，选择适合的编码会提高数据库性能\n\n### mac下设置\n- 在/etc/my.cnf文件进行设置，如果没有此文件可以从/usr/local/mysql/support-files/拷贝，命令如下\n```\ncd /usr/local/mysql/support-files\nsudo cp my.cnf /etc/my.cnf\n```\n查看文件的读写权限，如果为644（rw- r-- r--）则改为(664) (rw- rw- r--)\n如果改为(666)(rw- rw- rw-)则修改以后配置文件不会生效\n```\nsudo chmod 664 /etc/my.cnf\n```\n\n- my.cnf设置如下：\n```\n[client]\ndefault-character-set=utf8\n[mysqld]\ncollation-server = utf8_unicode_ci\ninit-connect='SET NAMES utf8'\ncharacter-set-server = utf8\n[mysql]\ndefault-character-set=utf8\n```\n\n### 查看设置是否成功\n在命令行输入mysql，如果提示没有命令的话，在bash或者zsh的文件里修改，我用的是zsh，设置~/.zshrc,\n```\nexport MYSQL=\"/usr/local/mysql/bin/\"\nexport PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$MYSQL\"\n```\n在命令行输入mysql,进入mysql命令行后，输入`status;`或者`show variables like '%char%';`\n```\n| character_set_client     | utf8                                                    |\n| character_set_connection | utf8                                                    |\n| character_set_database   | utf8                                                    |\n| character_set_filesystem | binary                                                  |\n| character_set_results    | utf8                                                    |\n| character_set_server     | utf8                                                    |\n| character_set_system     | utf8                                                    |\n| character_sets_dir       | /usr/local/mysql-5.6.30-osx10.11-x86_64/share/charsets/\n```\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"mac-mysql-unicode","published":1,"updated":"2016-11-13T05:48:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d8k001eohzjwukvevb6","content":"<p><strong> mac下mysql5.6字符集设置：</strong> <Excerpt in index | 首页摘要><br>    在mac下设置mysql5.6字符集时踩过的坑，百分百保证有效<br><a id=\"more\"></a></p>\n<p><The rest of contents | 余下全文></p>\n<h3 id=\"为什么要设置字符集\"><a href=\"#为什么要设置字符集\" class=\"headerlink\" title=\"为什么要设置字符集\"></a>为什么要设置字符集</h3><ol>\n<li>设置字符集主要是解决乱码问题，由于中文和英文编码不同导致，中文出现乱码，所以一般都设置为utf8格式</li>\n<li>不同的字符集和编码占用的字节不同，选择适合的编码会提高数据库性能</li>\n</ol>\n<h3 id=\"mac下设置\"><a href=\"#mac下设置\" class=\"headerlink\" title=\"mac下设置\"></a>mac下设置</h3><ul>\n<li>在/etc/my.cnf文件进行设置，如果没有此文件可以从/usr/local/mysql/support-files/拷贝，命令如下<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cd</span> /usr/local/mysql/support-<span class=\"keyword\">files</span></div><div class=\"line\">sudo <span class=\"keyword\">cp</span> my.<span class=\"keyword\">cnf</span> /etc/my.<span class=\"keyword\">cnf</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>查看文件的读写权限，如果为644（rw- r– r–）则改为(664) (rw- rw- r–)<br>如果改为(666)(rw- rw- rw-)则修改以后配置文件不会生效<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chmod <span class=\"number\">664</span> /etc/<span class=\"keyword\">my</span>.cnf</div></pre></td></tr></table></figure></p>\n<ul>\n<li>my.cnf设置如下：<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[client]</span></div><div class=\"line\"><span class=\"attr\">default-character-set</span>=utf8</div><div class=\"line\"><span class=\"section\">[mysqld]</span></div><div class=\"line\"><span class=\"attr\">collation-server</span> = utf8_unicode_ci</div><div class=\"line\"><span class=\"attr\">init-connect</span>=<span class=\"string\">'SET NAMES utf8'</span></div><div class=\"line\"><span class=\"attr\">character-set-server</span> = utf8</div><div class=\"line\"><span class=\"section\">[mysql]</span></div><div class=\"line\"><span class=\"attr\">default-character-set</span>=utf8</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"查看设置是否成功\"><a href=\"#查看设置是否成功\" class=\"headerlink\" title=\"查看设置是否成功\"></a>查看设置是否成功</h3><p>在命令行输入mysql，如果提示没有命令的话，在bash或者zsh的文件里修改，我用的是zsh，设置~/.zshrc,<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> MYSQL=<span class=\"string\">\"/usr/local/mysql/bin/\"</span></div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"string\">\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:<span class=\"variable\">$MYSQL</span>\"</span></div></pre></td></tr></table></figure></p>\n<p>在命令行输入mysql,进入mysql命令行后，输入<code>status;</code>或者<code>show variables like &#39;%char%&#39;;</code><br><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">|<span class=\"string\"> character_set_client     </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_connection </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_database   </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_filesystem </span>|<span class=\"string\"> binary                                                  </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_results    </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_server     </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_system     </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_sets_dir       </span>|<span class=\"string\"> /usr/local/mysql-5.6.30-osx10.11-x86_64/share/charsets/</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> mac下mysql5.6字符集设置：</strong> <Excerpt in index | 首页摘要><br>    在mac下设置mysql5.6字符集时踩过的坑，百分百保证有效<br>","more":"</p>\n<p><The rest of contents | 余下全文></p>\n<h3 id=\"为什么要设置字符集\"><a href=\"#为什么要设置字符集\" class=\"headerlink\" title=\"为什么要设置字符集\"></a>为什么要设置字符集</h3><ol>\n<li>设置字符集主要是解决乱码问题，由于中文和英文编码不同导致，中文出现乱码，所以一般都设置为utf8格式</li>\n<li>不同的字符集和编码占用的字节不同，选择适合的编码会提高数据库性能</li>\n</ol>\n<h3 id=\"mac下设置\"><a href=\"#mac下设置\" class=\"headerlink\" title=\"mac下设置\"></a>mac下设置</h3><ul>\n<li>在/etc/my.cnf文件进行设置，如果没有此文件可以从/usr/local/mysql/support-files/拷贝，命令如下<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cd</span> /usr/local/mysql/support-<span class=\"keyword\">files</span></div><div class=\"line\">sudo <span class=\"keyword\">cp</span> my.<span class=\"keyword\">cnf</span> /etc/my.<span class=\"keyword\">cnf</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>查看文件的读写权限，如果为644（rw- r– r–）则改为(664) (rw- rw- r–)<br>如果改为(666)(rw- rw- rw-)则修改以后配置文件不会生效<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chmod <span class=\"number\">664</span> /etc/<span class=\"keyword\">my</span>.cnf</div></pre></td></tr></table></figure></p>\n<ul>\n<li>my.cnf设置如下：<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">[client]</span></div><div class=\"line\"><span class=\"attr\">default-character-set</span>=utf8</div><div class=\"line\"><span class=\"section\">[mysqld]</span></div><div class=\"line\"><span class=\"attr\">collation-server</span> = utf8_unicode_ci</div><div class=\"line\"><span class=\"attr\">init-connect</span>=<span class=\"string\">'SET NAMES utf8'</span></div><div class=\"line\"><span class=\"attr\">character-set-server</span> = utf8</div><div class=\"line\"><span class=\"section\">[mysql]</span></div><div class=\"line\"><span class=\"attr\">default-character-set</span>=utf8</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"查看设置是否成功\"><a href=\"#查看设置是否成功\" class=\"headerlink\" title=\"查看设置是否成功\"></a>查看设置是否成功</h3><p>在命令行输入mysql，如果提示没有命令的话，在bash或者zsh的文件里修改，我用的是zsh，设置~/.zshrc,<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> MYSQL=<span class=\"string\">\"/usr/local/mysql/bin/\"</span></div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"string\">\"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:<span class=\"variable\">$MYSQL</span>\"</span></div></pre></td></tr></table></figure></p>\n<p>在命令行输入mysql,进入mysql命令行后，输入<code>status;</code>或者<code>show variables like &#39;%char%&#39;;</code><br><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">|<span class=\"string\"> character_set_client     </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_connection </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_database   </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_filesystem </span>|<span class=\"string\"> binary                                                  </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_results    </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_server     </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_set_system     </span>|<span class=\"string\"> utf8                                                    </span>|</div><div class=\"line\">|<span class=\"string\"> character_sets_dir       </span>|<span class=\"string\"> /usr/local/mysql-5.6.30-osx10.11-x86_64/share/charsets/</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Mongodb从入门到精通","date":"2015-12-19T15:21:23.000Z","_content":"** mongodb从入门到精通** <Excerpt in index | 首页摘要>\n    mongodb日常使用的一些知识，增删改查，索引，分片。\n <!-- more -->\n<The rest of contents | 余下全文>\n\n### mongodb学习\n## 1.mongodb特性\n    1）mongo是一个面向文档的数据库，它集合了nosql和sql数据库两方面的特性。\n    2）所有实体都是在首次使用时创建。\n    3）没有严格的事务特性，但是它保证任何一次数据变更都是原子性的。\n    4）也没有固定的数据模型\n    5）mongo以javascript作为命令行执行引擎，所以利用shell进行复杂的计算和查询时会相当的慢。\n    6）mongo本身支持集群和数据分片\n    7）mongo是c++实现的，支持windows mac linux等主流操作系统\n    8）性能优越，速度快\n## 2.mongo常用操作\n    1.增删操作\n       db.user.insert({name:'aaaa',age:30});\n       db.user.save({name:'aaaa',age:30});\n       db.collection.insertOne({});(3.2新特性)\n       db.collection.deleteOne(<filter>,{});(3.2新特性)\n       db.collection.remove({name:'aaa'});\n       db.collection.remove();(删除全部)\n\n    2.更新操作\n      db.users.update ({   \" name\"   :   \"joe\"   },   joe );\n\t  db.users.update ({   \" name\"   :   \"joe\"   },   joe,  true );------upsert模式\n\t  db.users.update ({   \" name\"   :   \"joe\"   },   joe,  true ，true);------MULTI模式\n\n\n> update是对文档替换，而不是局部修改默认情况update更新匹配的第一条文档，multi模式更新所有匹配的  \n\n    3.查询操作\n      -- 普通查询\n      db.user.find();\n      db.user.find({name:'aaa'});\n      db.user.findOne({name:'aaa'});\n\n      -- 模糊查询\n      db.UserInfo.find({userName :/A/}) （名称%A%）\n      db.UserInfo.find({userName :/^A/}) (名称A%)\n\n    4.操作符\n        1.$lt, $lte,$gt, $gte(<, <=, >, >= ) \t\n\t\t2.$all\t数组中的元素是否完全匹配  db.things.find( { a: { $all: [ 2, 3 ] } } );\n\t\t3.$exists  可选：true，false  db.things.find( { a : { $exists : true } } );\n\t\t4.$mod  取模：a % 10 == 1  db.things.find( { a : { $mod : [ 10 , 1 ] } } );\n\t\t5.$ne 取反：即not equals  db.things.find( { x : { $ne : 3 } } );\n\t\t6.$in 类似于SQL的IN操作  db.things.find({j:{$in: [2,4,6]}});\n\t\t7.$nin $in的反操作，即SQL的  NOT IN  db.things.find({j:{$nin: [2,4,6]}});\n\t\t8.$nor $or的反操作，即不匹配(a或b)  db.things.find( { name : \"bob\", $nor : [ { a : 1 },{ b : 2 }]})\n\t\t9.$or Or子句，注意$or不能嵌套使用  db.things.find( { name : \"bob\" , $or : [ { a : 1 },{ b : 2 }]})\n\t\t10.$size  匹配数组长度  db.things.find( { a : { $size: 1 } } );\n\t\t11.$type  匹配子键的数据类型，详情请看  db.things.find( { a : { $type : 2 } } );\n\n    5.数组查询\n        $size 用来匹配数组长度（即最大下标）  \n\t\t// 返回comments包含5个元素的文档   \n\t\tdb.posts.find({}, {comments:{‘$size’: 5}});  \n\t\t// 使用冗余字段来实现  \n\t\tdb.posts.find({}, {‘commentCount’: { ‘$gt’: 5 }});   \n\t\t$slice 操作符类似于子键筛选，只不过它筛选的是数组中的项  \n\t\t// 仅返回数组中的前5项  \n\t\tdb.posts.find({}, {comments:{‘$slice’: 5}});  \n\t\t// 仅返回数组中的最后5项  \n\t\tdb.posts.find({}, {comments:{‘$slice’: -5}});  \n\t\t// 跳过数组中的前20项，返回接下来的10项  \n\t\tdb.posts.find({}, {comments:{‘$slice’: [20, 10]}});  \n\t\t// 跳过数组中的最后20项，返回接下来的10项  \n\t\tdb.posts.find({}, {comments:{‘$slice’: [-20, 10]}});  \n\t\tMongoDB 允许在查询中指定数组的下标，以实现更加精确的匹配  \n\t\t// 返回comments中第1项的by子键为Abe的所有文档  \n\t\tdb.posts.find( { \"comments.0.by\" : \"Abe\" } );   \n## 3.索引的使用\n    1.创建索引\n\t\tdb.things.ensureIndex ({'j': 1});\n\t\t创建子文档 索引\n\t\tdb.things.ensureIndex ({'user.Name' : - 1});\n\t\t创建 复合 索引\n\t\tdb.things.ensureIndex ({\n\t\t'j' : 1 ,   //  升序\n\t\t'x' : - 1   //  降序\n\t\t});\n\t\t如果 您的 find 操作只用到了一个键，那么索引方向是无关紧要的  \n        当创建复合索引的时候，一定要谨慎斟酌每个键的排序方向\n\n\t2.修改索引\n\t\t修改索引，只需要重新 运行索引 命令即可  \n\t\t如果索引已经存在则会 重建， 不存在的索引会被 添加  \n\t\tdb . things . ensureIndex ({\n\t\t\t--- 原来的索引会 重建\n\t\t\t'user.Name ' :   - 1 ,\n\t\t\t--- 新增一个升序 索引\n\t\t\t'user.Name ' :   1 ,\n\t\t\t---  为 Age 新建降序 索引\n\t\t\t'user.Age ' :   - 1\n\t\t},\n\t\t打开后台执行\n\t\t{\t‘background' :   true}\n\t\t);\n\t\t重建索引\n\t\tdb. things .reIndex();\n\t3.删除索引\n\t\t删除集合中的所有 索引\n\t\tdb . things . dropIndexes ();  \n\t\t删除指定键的索引  \n\t\tdb.things.dropIndex ({\n\t\t\tx :   1 ,\n\t\t\ty :   - 1\n\t\t});  \n\t\t使用 command 删除指定键的 索引\n\t\tdb.runCommand ({\n\t\t\tdropIndexes : 'foo ' ,\n\t\t\tindex  :   {   y :   1   }\n\t\t});  \n\t\t使用 command 删除所有 索引\n\t\tdb . runCommand ({dropIndexes : 'foo ' ,index  :   '*‘})\n\t\t如果是删除集合中所有的文档（remove）则不会影响索引，当有新文档插入时，索引就会重建。\n\t4.唯一索引\n\t    创建唯一索引，同时这也是一个符合唯一索引  \n\t\tdb.things.ensureIndex (\n\t\t{\n\t\t\t'firstName ' :   1 ,\n\t\t\t'lastName ' :   1\n\t\t},   {\n\t\t指定为唯一索引\n\t\t'unique ' :   true ,\n\t\t删除重复 记录\n\t\t'dropDups ' :   true\n\t\t});\n\n\t5、强制使用索引\n\t  强制使用索引 a 和 b\n\t\tdb.collection.find ({\n\t\t\t'a ' :   4 ,\n\t\t\t'b ' :   5 ,\n\t\t\t'c ' :   6\n\t\t}). hint ({\n\t\t\t'a ' :   1 ,\n\t\t\t'b ' :   1\n\t\t});\n\t\t强制不使用任何 索引\n\t\tdb.collection.find ().hint ({\n\t\t\t'$ natural' :   1\n\t\t});\n----------\n索引总结:\n\t\t索引可以加速查询；\n\t\t单个索引无需在意其索引方向；\n\t\t多键索引需要慎重考虑每个索引的方向；\n\t\t做海量数据更新时应当先卸载所有索引，待数据更新完成后再重建索引；\n\t\t不要试图为每个键都创建索引，应考虑实际需要，并不是索引越多越好；\n\t\t唯一索引可以用来消除重复记录；\n\t\t地理空间索引是没有单位的，其内部实现是基本的勾股定理算法\n\n\n## 4.mongo数据库管理\n        - 安全与认证\n\t\t1、 默认为无认证，启动用登录 shell ；\n\t\t2、 添加账号；\n\t\t3、 关闭 shell 、关闭 MongoDB ；\n\t\t4、 为 MongoDB 增加 — auth 参数；\n\t\t5、 重 启 MongoDB ；\n\t\t6、 登录 shell ，此时就需要认证了\n\n\t\t- 冷备份\n\t\t1、关闭MongoDB引擎\n\t\t2、拷贝数据库文件夹及文件\n\t\t3、恢复时反向操作即可\t\t\n\t\t\t-- 优点：可以完全保证数据完整性；\n\t\t\t-- 缺点：需要数据库引擎离线 \t\n\t\t- 热备份\n\t\t1、 保持MongoDB为运行状态\n\t\t2、使用mongodump备份数据\n\t\t3、使用mongorestore恢复数据\n\t\t\t--\t优点：数据库引擎无须离线\n\t\t\t--缺点：不能保证数据完整性，操作时会降低MongoDB性能\n\n\t\t- 主从复制备份\n\t\t1、创建主从复制机制\n\t\t2、配置完成后数据会自动同步\n\t\t3、恢复途径很多\n\t\t\t-- 优点：可以保持MongoDB处于联机状态，不影响性能\n\t\t\t-- 缺点：在数据写入密集的情况下可能无法保证数据完整性\n\n\t\t- 修复\n\t\tdb.repairDatabase();\n\t\t  修复数据库还可以起到压缩数据的作用；\n\t\t  修复数据库的操作相当耗时，万不得已请不要使用；\n\t\t  建议经常做数据备份；\n## 5.mongo复制(集群)\n    1、主从复制\n\t\t选项  \t说明\n\t\t--only  作用是限定仅复制指定的某个数据库\n\t\t--slavedelay  为复制设置操作延迟，单位为秒\n\t\t--fastsync  以主节点的数据快照为基础启动从节点。\n\t\t--autoresync  当主从节点数据不一致时，是否自动重新同步\n\t\t--oplogSize  设定主节点中的oplog的容量，单位是MB\n\n\t2、副本集\n\t\t与普通主从复制集群相比，具有自动检测机制\n\t\t需要使用—replSet 选项指定副本同伴\n\t\t任何时候，副本集当中最多只允许有1个活跃节点\n\n\t3、读写分离\n\t\t将密集的读取操作分流到从节点上，降低主节点的负载\n\t\t默认情况下，从节点是不允许处理\n\t\t客户端请求的，需要使用—slaveOkay打开\n\t\t不适用于实时性要求非常高的应用\n\n\t4、工作原理—— OPLOG\n\t\toplog保存在local数据库中，oplog就在其中的\n\t\toplog.$main集合内保存。该集合的每个文档都记录了主节点上执行的一个操作，其键定义如下：\n\t\t ts：操作时间戳，占用4字节\n\t\t op：操作类型，占用1字节\n\t\t ns：操作对象的命名空间（或理解为集合全名）\n\t\t o：进一步指定所执行的操作，例如插入\n\n\t5、工作原理—— 同步\n\t\t 从节点首次启动时，做完整同步\n\t\t 主节点数据发生变化时，做增量同步\n\t\t 从节点与主节点数据严重不一致时，做完整同步\n\n\t6、复制管理—— 诊断\n\t\tdb.printReplicationInfo()\n\t\t在主节点上使用\n\t\t 返回信息是oplog的大小以及各种操作的耗时、空间占用等数据\n\t\t在从节点上使用\n\t\tdb.printSlaveReplicationInfo()\n\t\t 返回信息是从节点的数据源列表、同步延迟时间等\n\n\t7、复制管理—— 变更OPLOG 容量\n\t\t在主节点上使用\n\t\t  设定—oplogSize参数\n\t\t  重启MongoDB\n\n\t8、复制管理—— 复制认证\n\t\t主从节点皆须配置\n\t\t 存储在local.system.users\n\t\t 优先尝试repl用户\n\t\t 主从节点的用户配置必须保持一致\n## 6.MONGODB分片\n    - 1、分片与自动分片\n\t\t  分片是指将数据拆分，分散到不同的实例上进行负载分流的做法。我们常说的“分表”、“分\n\t\t\t库”、“分区”等概念都属于分片的实际体现。\n\t\t  传统分片做法是手工分表、分库。自动分片技术是根据指定的“片键”自动拆分数据并维护数据\n\t\t请求路由的过程。\n\n\t\t递增片键--连续 不均匀 写入集中 分流较差\n\t\t随机片键--不连续 均匀 写入分散 分流较好\n\t\t三个组成部分\n\t\t--片\n\t\t  保存子集数据的容器\n\t\t--mongos\n\t\t  MongoDB的路由器进程\n\t\t--配置服务器\n\t\t  分片集群的配置信息\n\t- 2、创建分片\n\t\t--启动配置服务器\n\t\t  可以创建一个或多个\n\t\t--添加片\n\t\t  每个片都应该是副本集\n\t\t--物理服务器\n\t\t  性能、安全和稳定性\n\t- 3、管理分片\n\t\t--查询分片\n\t\t  db.shards.find();\n\t\t--数据库\n\t\t  db.databases.find();\n\t\t--块\n\t\t  db.chunks.find();\n\t\t--分片状态\n\t\t  db.printShardingStatus();\n\t\t--删除片\n\t\t  db.runCommand({ “removeshard” : “ip:port” });\n\n\n\n\n\n----------\n","source":"_posts/mongodb-study.md","raw":"title: mongodb从入门到精通\ndate: 2015-12-19 23:21:23\ntags: mongodb\ncategories: 数据库\n---\n** mongodb从入门到精通** <Excerpt in index | 首页摘要>\n    mongodb日常使用的一些知识，增删改查，索引，分片。\n <!-- more -->\n<The rest of contents | 余下全文>\n\n### mongodb学习\n## 1.mongodb特性\n    1）mongo是一个面向文档的数据库，它集合了nosql和sql数据库两方面的特性。\n    2）所有实体都是在首次使用时创建。\n    3）没有严格的事务特性，但是它保证任何一次数据变更都是原子性的。\n    4）也没有固定的数据模型\n    5）mongo以javascript作为命令行执行引擎，所以利用shell进行复杂的计算和查询时会相当的慢。\n    6）mongo本身支持集群和数据分片\n    7）mongo是c++实现的，支持windows mac linux等主流操作系统\n    8）性能优越，速度快\n## 2.mongo常用操作\n    1.增删操作\n       db.user.insert({name:'aaaa',age:30});\n       db.user.save({name:'aaaa',age:30});\n       db.collection.insertOne({});(3.2新特性)\n       db.collection.deleteOne(<filter>,{});(3.2新特性)\n       db.collection.remove({name:'aaa'});\n       db.collection.remove();(删除全部)\n\n    2.更新操作\n      db.users.update ({   \" name\"   :   \"joe\"   },   joe );\n\t  db.users.update ({   \" name\"   :   \"joe\"   },   joe,  true );------upsert模式\n\t  db.users.update ({   \" name\"   :   \"joe\"   },   joe,  true ，true);------MULTI模式\n\n\n> update是对文档替换，而不是局部修改默认情况update更新匹配的第一条文档，multi模式更新所有匹配的  \n\n    3.查询操作\n      -- 普通查询\n      db.user.find();\n      db.user.find({name:'aaa'});\n      db.user.findOne({name:'aaa'});\n\n      -- 模糊查询\n      db.UserInfo.find({userName :/A/}) （名称%A%）\n      db.UserInfo.find({userName :/^A/}) (名称A%)\n\n    4.操作符\n        1.$lt, $lte,$gt, $gte(<, <=, >, >= ) \t\n\t\t2.$all\t数组中的元素是否完全匹配  db.things.find( { a: { $all: [ 2, 3 ] } } );\n\t\t3.$exists  可选：true，false  db.things.find( { a : { $exists : true } } );\n\t\t4.$mod  取模：a % 10 == 1  db.things.find( { a : { $mod : [ 10 , 1 ] } } );\n\t\t5.$ne 取反：即not equals  db.things.find( { x : { $ne : 3 } } );\n\t\t6.$in 类似于SQL的IN操作  db.things.find({j:{$in: [2,4,6]}});\n\t\t7.$nin $in的反操作，即SQL的  NOT IN  db.things.find({j:{$nin: [2,4,6]}});\n\t\t8.$nor $or的反操作，即不匹配(a或b)  db.things.find( { name : \"bob\", $nor : [ { a : 1 },{ b : 2 }]})\n\t\t9.$or Or子句，注意$or不能嵌套使用  db.things.find( { name : \"bob\" , $or : [ { a : 1 },{ b : 2 }]})\n\t\t10.$size  匹配数组长度  db.things.find( { a : { $size: 1 } } );\n\t\t11.$type  匹配子键的数据类型，详情请看  db.things.find( { a : { $type : 2 } } );\n\n    5.数组查询\n        $size 用来匹配数组长度（即最大下标）  \n\t\t// 返回comments包含5个元素的文档   \n\t\tdb.posts.find({}, {comments:{‘$size’: 5}});  \n\t\t// 使用冗余字段来实现  \n\t\tdb.posts.find({}, {‘commentCount’: { ‘$gt’: 5 }});   \n\t\t$slice 操作符类似于子键筛选，只不过它筛选的是数组中的项  \n\t\t// 仅返回数组中的前5项  \n\t\tdb.posts.find({}, {comments:{‘$slice’: 5}});  \n\t\t// 仅返回数组中的最后5项  \n\t\tdb.posts.find({}, {comments:{‘$slice’: -5}});  \n\t\t// 跳过数组中的前20项，返回接下来的10项  \n\t\tdb.posts.find({}, {comments:{‘$slice’: [20, 10]}});  \n\t\t// 跳过数组中的最后20项，返回接下来的10项  \n\t\tdb.posts.find({}, {comments:{‘$slice’: [-20, 10]}});  \n\t\tMongoDB 允许在查询中指定数组的下标，以实现更加精确的匹配  \n\t\t// 返回comments中第1项的by子键为Abe的所有文档  \n\t\tdb.posts.find( { \"comments.0.by\" : \"Abe\" } );   \n## 3.索引的使用\n    1.创建索引\n\t\tdb.things.ensureIndex ({'j': 1});\n\t\t创建子文档 索引\n\t\tdb.things.ensureIndex ({'user.Name' : - 1});\n\t\t创建 复合 索引\n\t\tdb.things.ensureIndex ({\n\t\t'j' : 1 ,   //  升序\n\t\t'x' : - 1   //  降序\n\t\t});\n\t\t如果 您的 find 操作只用到了一个键，那么索引方向是无关紧要的  \n        当创建复合索引的时候，一定要谨慎斟酌每个键的排序方向\n\n\t2.修改索引\n\t\t修改索引，只需要重新 运行索引 命令即可  \n\t\t如果索引已经存在则会 重建， 不存在的索引会被 添加  \n\t\tdb . things . ensureIndex ({\n\t\t\t--- 原来的索引会 重建\n\t\t\t'user.Name ' :   - 1 ,\n\t\t\t--- 新增一个升序 索引\n\t\t\t'user.Name ' :   1 ,\n\t\t\t---  为 Age 新建降序 索引\n\t\t\t'user.Age ' :   - 1\n\t\t},\n\t\t打开后台执行\n\t\t{\t‘background' :   true}\n\t\t);\n\t\t重建索引\n\t\tdb. things .reIndex();\n\t3.删除索引\n\t\t删除集合中的所有 索引\n\t\tdb . things . dropIndexes ();  \n\t\t删除指定键的索引  \n\t\tdb.things.dropIndex ({\n\t\t\tx :   1 ,\n\t\t\ty :   - 1\n\t\t});  \n\t\t使用 command 删除指定键的 索引\n\t\tdb.runCommand ({\n\t\t\tdropIndexes : 'foo ' ,\n\t\t\tindex  :   {   y :   1   }\n\t\t});  \n\t\t使用 command 删除所有 索引\n\t\tdb . runCommand ({dropIndexes : 'foo ' ,index  :   '*‘})\n\t\t如果是删除集合中所有的文档（remove）则不会影响索引，当有新文档插入时，索引就会重建。\n\t4.唯一索引\n\t    创建唯一索引，同时这也是一个符合唯一索引  \n\t\tdb.things.ensureIndex (\n\t\t{\n\t\t\t'firstName ' :   1 ,\n\t\t\t'lastName ' :   1\n\t\t},   {\n\t\t指定为唯一索引\n\t\t'unique ' :   true ,\n\t\t删除重复 记录\n\t\t'dropDups ' :   true\n\t\t});\n\n\t5、强制使用索引\n\t  强制使用索引 a 和 b\n\t\tdb.collection.find ({\n\t\t\t'a ' :   4 ,\n\t\t\t'b ' :   5 ,\n\t\t\t'c ' :   6\n\t\t}). hint ({\n\t\t\t'a ' :   1 ,\n\t\t\t'b ' :   1\n\t\t});\n\t\t强制不使用任何 索引\n\t\tdb.collection.find ().hint ({\n\t\t\t'$ natural' :   1\n\t\t});\n----------\n索引总结:\n\t\t索引可以加速查询；\n\t\t单个索引无需在意其索引方向；\n\t\t多键索引需要慎重考虑每个索引的方向；\n\t\t做海量数据更新时应当先卸载所有索引，待数据更新完成后再重建索引；\n\t\t不要试图为每个键都创建索引，应考虑实际需要，并不是索引越多越好；\n\t\t唯一索引可以用来消除重复记录；\n\t\t地理空间索引是没有单位的，其内部实现是基本的勾股定理算法\n\n\n## 4.mongo数据库管理\n        - 安全与认证\n\t\t1、 默认为无认证，启动用登录 shell ；\n\t\t2、 添加账号；\n\t\t3、 关闭 shell 、关闭 MongoDB ；\n\t\t4、 为 MongoDB 增加 — auth 参数；\n\t\t5、 重 启 MongoDB ；\n\t\t6、 登录 shell ，此时就需要认证了\n\n\t\t- 冷备份\n\t\t1、关闭MongoDB引擎\n\t\t2、拷贝数据库文件夹及文件\n\t\t3、恢复时反向操作即可\t\t\n\t\t\t-- 优点：可以完全保证数据完整性；\n\t\t\t-- 缺点：需要数据库引擎离线 \t\n\t\t- 热备份\n\t\t1、 保持MongoDB为运行状态\n\t\t2、使用mongodump备份数据\n\t\t3、使用mongorestore恢复数据\n\t\t\t--\t优点：数据库引擎无须离线\n\t\t\t--缺点：不能保证数据完整性，操作时会降低MongoDB性能\n\n\t\t- 主从复制备份\n\t\t1、创建主从复制机制\n\t\t2、配置完成后数据会自动同步\n\t\t3、恢复途径很多\n\t\t\t-- 优点：可以保持MongoDB处于联机状态，不影响性能\n\t\t\t-- 缺点：在数据写入密集的情况下可能无法保证数据完整性\n\n\t\t- 修复\n\t\tdb.repairDatabase();\n\t\t  修复数据库还可以起到压缩数据的作用；\n\t\t  修复数据库的操作相当耗时，万不得已请不要使用；\n\t\t  建议经常做数据备份；\n## 5.mongo复制(集群)\n    1、主从复制\n\t\t选项  \t说明\n\t\t--only  作用是限定仅复制指定的某个数据库\n\t\t--slavedelay  为复制设置操作延迟，单位为秒\n\t\t--fastsync  以主节点的数据快照为基础启动从节点。\n\t\t--autoresync  当主从节点数据不一致时，是否自动重新同步\n\t\t--oplogSize  设定主节点中的oplog的容量，单位是MB\n\n\t2、副本集\n\t\t与普通主从复制集群相比，具有自动检测机制\n\t\t需要使用—replSet 选项指定副本同伴\n\t\t任何时候，副本集当中最多只允许有1个活跃节点\n\n\t3、读写分离\n\t\t将密集的读取操作分流到从节点上，降低主节点的负载\n\t\t默认情况下，从节点是不允许处理\n\t\t客户端请求的，需要使用—slaveOkay打开\n\t\t不适用于实时性要求非常高的应用\n\n\t4、工作原理—— OPLOG\n\t\toplog保存在local数据库中，oplog就在其中的\n\t\toplog.$main集合内保存。该集合的每个文档都记录了主节点上执行的一个操作，其键定义如下：\n\t\t ts：操作时间戳，占用4字节\n\t\t op：操作类型，占用1字节\n\t\t ns：操作对象的命名空间（或理解为集合全名）\n\t\t o：进一步指定所执行的操作，例如插入\n\n\t5、工作原理—— 同步\n\t\t 从节点首次启动时，做完整同步\n\t\t 主节点数据发生变化时，做增量同步\n\t\t 从节点与主节点数据严重不一致时，做完整同步\n\n\t6、复制管理—— 诊断\n\t\tdb.printReplicationInfo()\n\t\t在主节点上使用\n\t\t 返回信息是oplog的大小以及各种操作的耗时、空间占用等数据\n\t\t在从节点上使用\n\t\tdb.printSlaveReplicationInfo()\n\t\t 返回信息是从节点的数据源列表、同步延迟时间等\n\n\t7、复制管理—— 变更OPLOG 容量\n\t\t在主节点上使用\n\t\t  设定—oplogSize参数\n\t\t  重启MongoDB\n\n\t8、复制管理—— 复制认证\n\t\t主从节点皆须配置\n\t\t 存储在local.system.users\n\t\t 优先尝试repl用户\n\t\t 主从节点的用户配置必须保持一致\n## 6.MONGODB分片\n    - 1、分片与自动分片\n\t\t  分片是指将数据拆分，分散到不同的实例上进行负载分流的做法。我们常说的“分表”、“分\n\t\t\t库”、“分区”等概念都属于分片的实际体现。\n\t\t  传统分片做法是手工分表、分库。自动分片技术是根据指定的“片键”自动拆分数据并维护数据\n\t\t请求路由的过程。\n\n\t\t递增片键--连续 不均匀 写入集中 分流较差\n\t\t随机片键--不连续 均匀 写入分散 分流较好\n\t\t三个组成部分\n\t\t--片\n\t\t  保存子集数据的容器\n\t\t--mongos\n\t\t  MongoDB的路由器进程\n\t\t--配置服务器\n\t\t  分片集群的配置信息\n\t- 2、创建分片\n\t\t--启动配置服务器\n\t\t  可以创建一个或多个\n\t\t--添加片\n\t\t  每个片都应该是副本集\n\t\t--物理服务器\n\t\t  性能、安全和稳定性\n\t- 3、管理分片\n\t\t--查询分片\n\t\t  db.shards.find();\n\t\t--数据库\n\t\t  db.databases.find();\n\t\t--块\n\t\t  db.chunks.find();\n\t\t--分片状态\n\t\t  db.printShardingStatus();\n\t\t--删除片\n\t\t  db.runCommand({ “removeshard” : “ip:port” });\n\n\n\n\n\n----------\n","slug":"mongodb-study","published":1,"updated":"2016-11-13T06:01:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d8m001hohzjhe4iy0wc","content":"<p><strong> mongodb从入门到精通</strong> <Excerpt in index | 首页摘要><br>    mongodb日常使用的一些知识，增删改查，索引，分片。<br> <a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"mongodb学习\"><a href=\"#mongodb学习\" class=\"headerlink\" title=\"mongodb学习\"></a>mongodb学习</h3><h2 id=\"1-mongodb特性\"><a href=\"#1-mongodb特性\" class=\"headerlink\" title=\"1.mongodb特性\"></a>1.mongodb特性</h2><pre><code>1）mongo是一个面向文档的数据库，它集合了nosql和sql数据库两方面的特性。\n2）所有实体都是在首次使用时创建。\n3）没有严格的事务特性，但是它保证任何一次数据变更都是原子性的。\n4）也没有固定的数据模型\n5）mongo以javascript作为命令行执行引擎，所以利用shell进行复杂的计算和查询时会相当的慢。\n6）mongo本身支持集群和数据分片\n7）mongo是c++实现的，支持windows mac linux等主流操作系统\n8）性能优越，速度快\n</code></pre><h2 id=\"2-mongo常用操作\"><a href=\"#2-mongo常用操作\" class=\"headerlink\" title=\"2.mongo常用操作\"></a>2.mongo常用操作</h2><pre><code>1.增删操作\n   db.user.insert({name:&apos;aaaa&apos;,age:30});\n   db.user.save({name:&apos;aaaa&apos;,age:30});\n   db.collection.insertOne({});(3.2新特性)\n   db.collection.deleteOne(&lt;filter&gt;,{});(3.2新特性)\n   db.collection.remove({name:&apos;aaa&apos;});\n   db.collection.remove();(删除全部)\n\n2.更新操作\n  db.users.update ({   &quot; name&quot;   :   &quot;joe&quot;   },   joe );\n  db.users.update ({   &quot; name&quot;   :   &quot;joe&quot;   },   joe,  true );------upsert模式\n  db.users.update ({   &quot; name&quot;   :   &quot;joe&quot;   },   joe,  true ，true);------MULTI模式\n</code></pre><blockquote>\n<p>update是对文档替换，而不是局部修改默认情况update更新匹配的第一条文档，multi模式更新所有匹配的  </p>\n</blockquote>\n<pre><code>3.查询操作\n  -- 普通查询\n  db.user.find();\n  db.user.find({name:&apos;aaa&apos;});\n  db.user.findOne({name:&apos;aaa&apos;});\n\n  -- 模糊查询\n  db.UserInfo.find({userName :/A/}) （名称%A%）\n  db.UserInfo.find({userName :/^A/}) (名称A%)\n\n4.操作符\n    1.$lt, $lte,$gt, $gte(&lt;, &lt;=, &gt;, &gt;= )     \n    2.$all    数组中的元素是否完全匹配  db.things.find( { a: { $all: [ 2, 3 ] } } );\n    3.$exists  可选：true，false  db.things.find( { a : { $exists : true } } );\n    4.$mod  取模：a % 10 == 1  db.things.find( { a : { $mod : [ 10 , 1 ] } } );\n    5.$ne 取反：即not equals  db.things.find( { x : { $ne : 3 } } );\n    6.$in 类似于SQL的IN操作  db.things.find({j:{$in: [2,4,6]}});\n    7.$nin $in的反操作，即SQL的  NOT IN  db.things.find({j:{$nin: [2,4,6]}});\n    8.$nor $or的反操作，即不匹配(a或b)  db.things.find( { name : &quot;bob&quot;, $nor : [ { a : 1 },{ b : 2 }]})\n    9.$or Or子句，注意$or不能嵌套使用  db.things.find( { name : &quot;bob&quot; , $or : [ { a : 1 },{ b : 2 }]})\n    10.$size  匹配数组长度  db.things.find( { a : { $size: 1 } } );\n    11.$type  匹配子键的数据类型，详情请看  db.things.find( { a : { $type : 2 } } );\n\n5.数组查询\n    $size 用来匹配数组长度（即最大下标）  \n    // 返回comments包含5个元素的文档   \n    db.posts.find({}, {comments:{‘$size’: 5}});  \n    // 使用冗余字段来实现  \n    db.posts.find({}, {‘commentCount’: { ‘$gt’: 5 }});   \n    $slice 操作符类似于子键筛选，只不过它筛选的是数组中的项  \n    // 仅返回数组中的前5项  \n    db.posts.find({}, {comments:{‘$slice’: 5}});  \n    // 仅返回数组中的最后5项  \n    db.posts.find({}, {comments:{‘$slice’: -5}});  \n    // 跳过数组中的前20项，返回接下来的10项  \n    db.posts.find({}, {comments:{‘$slice’: [20, 10]}});  \n    // 跳过数组中的最后20项，返回接下来的10项  \n    db.posts.find({}, {comments:{‘$slice’: [-20, 10]}});  \n    MongoDB 允许在查询中指定数组的下标，以实现更加精确的匹配  \n    // 返回comments中第1项的by子键为Abe的所有文档  \n    db.posts.find( { &quot;comments.0.by&quot; : &quot;Abe&quot; } );   \n</code></pre><h2 id=\"3-索引的使用\"><a href=\"#3-索引的使用\" class=\"headerlink\" title=\"3.索引的使用\"></a>3.索引的使用</h2><pre><code>1.创建索引\n    db.things.ensureIndex ({&apos;j&apos;: 1});\n    创建子文档 索引\n    db.things.ensureIndex ({&apos;user.Name&apos; : - 1});\n    创建 复合 索引\n    db.things.ensureIndex ({\n    &apos;j&apos; : 1 ,   //  升序\n    &apos;x&apos; : - 1   //  降序\n    });\n    如果 您的 find 操作只用到了一个键，那么索引方向是无关紧要的  \n    当创建复合索引的时候，一定要谨慎斟酌每个键的排序方向\n\n2.修改索引\n    修改索引，只需要重新 运行索引 命令即可  \n    如果索引已经存在则会 重建， 不存在的索引会被 添加  \n    db . things . ensureIndex ({\n        --- 原来的索引会 重建\n        &apos;user.Name &apos; :   - 1 ,\n        --- 新增一个升序 索引\n        &apos;user.Name &apos; :   1 ,\n        ---  为 Age 新建降序 索引\n        &apos;user.Age &apos; :   - 1\n    },\n    打开后台执行\n    {    ‘background&apos; :   true}\n    );\n    重建索引\n    db. things .reIndex();\n3.删除索引\n    删除集合中的所有 索引\n    db . things . dropIndexes ();  \n    删除指定键的索引  \n    db.things.dropIndex ({\n        x :   1 ,\n        y :   - 1\n    });  \n    使用 command 删除指定键的 索引\n    db.runCommand ({\n        dropIndexes : &apos;foo &apos; ,\n        index  :   {   y :   1   }\n    });  \n    使用 command 删除所有 索引\n    db . runCommand ({dropIndexes : &apos;foo &apos; ,index  :   &apos;*‘})\n    如果是删除集合中所有的文档（remove）则不会影响索引，当有新文档插入时，索引就会重建。\n4.唯一索引\n    创建唯一索引，同时这也是一个符合唯一索引  \n    db.things.ensureIndex (\n    {\n        &apos;firstName &apos; :   1 ,\n        &apos;lastName &apos; :   1\n    },   {\n    指定为唯一索引\n    &apos;unique &apos; :   true ,\n    删除重复 记录\n    &apos;dropDups &apos; :   true\n    });\n\n5、强制使用索引\n  强制使用索引 a 和 b\n    db.collection.find ({\n        &apos;a &apos; :   4 ,\n        &apos;b &apos; :   5 ,\n        &apos;c &apos; :   6\n    }). hint ({\n        &apos;a &apos; :   1 ,\n        &apos;b &apos; :   1\n    });\n    强制不使用任何 索引\n    db.collection.find ().hint ({\n        &apos;$ natural&apos; :   1\n    });\n</code></pre><hr>\n<p>索引总结:<br>        索引可以加速查询；<br>        单个索引无需在意其索引方向；<br>        多键索引需要慎重考虑每个索引的方向；<br>        做海量数据更新时应当先卸载所有索引，待数据更新完成后再重建索引；<br>        不要试图为每个键都创建索引，应考虑实际需要，并不是索引越多越好；<br>        唯一索引可以用来消除重复记录；<br>        地理空间索引是没有单位的，其内部实现是基本的勾股定理算法</p>\n<h2 id=\"4-mongo数据库管理\"><a href=\"#4-mongo数据库管理\" class=\"headerlink\" title=\"4.mongo数据库管理\"></a>4.mongo数据库管理</h2><pre><code>- 安全与认证\n1、 默认为无认证，启动用登录 shell ；\n2、 添加账号；\n3、 关闭 shell 、关闭 MongoDB ；\n4、 为 MongoDB 增加 — auth 参数；\n5、 重 启 MongoDB ；\n6、 登录 shell ，此时就需要认证了\n\n- 冷备份\n1、关闭MongoDB引擎\n2、拷贝数据库文件夹及文件\n3、恢复时反向操作即可        \n    -- 优点：可以完全保证数据完整性；\n    -- 缺点：需要数据库引擎离线     \n- 热备份\n1、 保持MongoDB为运行状态\n2、使用mongodump备份数据\n3、使用mongorestore恢复数据\n    --    优点：数据库引擎无须离线\n    --缺点：不能保证数据完整性，操作时会降低MongoDB性能\n\n- 主从复制备份\n1、创建主从复制机制\n2、配置完成后数据会自动同步\n3、恢复途径很多\n    -- 优点：可以保持MongoDB处于联机状态，不影响性能\n    -- 缺点：在数据写入密集的情况下可能无法保证数据完整性\n\n- 修复\ndb.repairDatabase();\n  修复数据库还可以起到压缩数据的作用；\n  修复数据库的操作相当耗时，万不得已请不要使用；\n  建议经常做数据备份；\n</code></pre><h2 id=\"5-mongo复制-集群\"><a href=\"#5-mongo复制-集群\" class=\"headerlink\" title=\"5.mongo复制(集群)\"></a>5.mongo复制(集群)</h2><pre><code>1、主从复制\n    选项      说明\n    --only  作用是限定仅复制指定的某个数据库\n    --slavedelay  为复制设置操作延迟，单位为秒\n    --fastsync  以主节点的数据快照为基础启动从节点。\n    --autoresync  当主从节点数据不一致时，是否自动重新同步\n    --oplogSize  设定主节点中的oplog的容量，单位是MB\n\n2、副本集\n    与普通主从复制集群相比，具有自动检测机制\n    需要使用—replSet 选项指定副本同伴\n    任何时候，副本集当中最多只允许有1个活跃节点\n\n3、读写分离\n    将密集的读取操作分流到从节点上，降低主节点的负载\n    默认情况下，从节点是不允许处理\n    客户端请求的，需要使用—slaveOkay打开\n    不适用于实时性要求非常高的应用\n\n4、工作原理—— OPLOG\n    oplog保存在local数据库中，oplog就在其中的\n    oplog.$main集合内保存。该集合的每个文档都记录了主节点上执行的一个操作，其键定义如下：\n     ts：操作时间戳，占用4字节\n     op：操作类型，占用1字节\n     ns：操作对象的命名空间（或理解为集合全名）\n     o：进一步指定所执行的操作，例如插入\n\n5、工作原理—— 同步\n     从节点首次启动时，做完整同步\n     主节点数据发生变化时，做增量同步\n     从节点与主节点数据严重不一致时，做完整同步\n\n6、复制管理—— 诊断\n    db.printReplicationInfo()\n    在主节点上使用\n     返回信息是oplog的大小以及各种操作的耗时、空间占用等数据\n    在从节点上使用\n    db.printSlaveReplicationInfo()\n     返回信息是从节点的数据源列表、同步延迟时间等\n\n7、复制管理—— 变更OPLOG 容量\n    在主节点上使用\n      设定—oplogSize参数\n      重启MongoDB\n\n8、复制管理—— 复制认证\n    主从节点皆须配置\n     存储在local.system.users\n     优先尝试repl用户\n     主从节点的用户配置必须保持一致\n</code></pre><h2 id=\"6-MONGODB分片\"><a href=\"#6-MONGODB分片\" class=\"headerlink\" title=\"6.MONGODB分片\"></a>6.MONGODB分片</h2><pre><code>- 1、分片与自动分片\n      分片是指将数据拆分，分散到不同的实例上进行负载分流的做法。我们常说的“分表”、“分\n        库”、“分区”等概念都属于分片的实际体现。\n      传统分片做法是手工分表、分库。自动分片技术是根据指定的“片键”自动拆分数据并维护数据\n    请求路由的过程。\n\n    递增片键--连续 不均匀 写入集中 分流较差\n    随机片键--不连续 均匀 写入分散 分流较好\n    三个组成部分\n    --片\n      保存子集数据的容器\n    --mongos\n      MongoDB的路由器进程\n    --配置服务器\n      分片集群的配置信息\n- 2、创建分片\n    --启动配置服务器\n      可以创建一个或多个\n    --添加片\n      每个片都应该是副本集\n    --物理服务器\n      性能、安全和稳定性\n- 3、管理分片\n    --查询分片\n      db.shards.find();\n    --数据库\n      db.databases.find();\n    --块\n      db.chunks.find();\n    --分片状态\n      db.printShardingStatus();\n    --删除片\n      db.runCommand({ “removeshard” : “ip:port” });\n</code></pre><hr>\n","excerpt":"<p><strong> mongodb从入门到精通</strong> <Excerpt in index | 首页摘要><br>    mongodb日常使用的一些知识，增删改查，索引，分片。<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"mongodb学习\"><a href=\"#mongodb学习\" class=\"headerlink\" title=\"mongodb学习\"></a>mongodb学习</h3><h2 id=\"1-mongodb特性\"><a href=\"#1-mongodb特性\" class=\"headerlink\" title=\"1.mongodb特性\"></a>1.mongodb特性</h2><pre><code>1）mongo是一个面向文档的数据库，它集合了nosql和sql数据库两方面的特性。\n2）所有实体都是在首次使用时创建。\n3）没有严格的事务特性，但是它保证任何一次数据变更都是原子性的。\n4）也没有固定的数据模型\n5）mongo以javascript作为命令行执行引擎，所以利用shell进行复杂的计算和查询时会相当的慢。\n6）mongo本身支持集群和数据分片\n7）mongo是c++实现的，支持windows mac linux等主流操作系统\n8）性能优越，速度快\n</code></pre><h2 id=\"2-mongo常用操作\"><a href=\"#2-mongo常用操作\" class=\"headerlink\" title=\"2.mongo常用操作\"></a>2.mongo常用操作</h2><pre><code>1.增删操作\n   db.user.insert({name:&apos;aaaa&apos;,age:30});\n   db.user.save({name:&apos;aaaa&apos;,age:30});\n   db.collection.insertOne({});(3.2新特性)\n   db.collection.deleteOne(&lt;filter&gt;,{});(3.2新特性)\n   db.collection.remove({name:&apos;aaa&apos;});\n   db.collection.remove();(删除全部)\n\n2.更新操作\n  db.users.update ({   &quot; name&quot;   :   &quot;joe&quot;   },   joe );\n  db.users.update ({   &quot; name&quot;   :   &quot;joe&quot;   },   joe,  true );------upsert模式\n  db.users.update ({   &quot; name&quot;   :   &quot;joe&quot;   },   joe,  true ，true);------MULTI模式\n</code></pre><blockquote>\n<p>update是对文档替换，而不是局部修改默认情况update更新匹配的第一条文档，multi模式更新所有匹配的  </p>\n</blockquote>\n<pre><code>3.查询操作\n  -- 普通查询\n  db.user.find();\n  db.user.find({name:&apos;aaa&apos;});\n  db.user.findOne({name:&apos;aaa&apos;});\n\n  -- 模糊查询\n  db.UserInfo.find({userName :/A/}) （名称%A%）\n  db.UserInfo.find({userName :/^A/}) (名称A%)\n\n4.操作符\n    1.$lt, $lte,$gt, $gte(&lt;, &lt;=, &gt;, &gt;= )     \n    2.$all    数组中的元素是否完全匹配  db.things.find( { a: { $all: [ 2, 3 ] } } );\n    3.$exists  可选：true，false  db.things.find( { a : { $exists : true } } );\n    4.$mod  取模：a % 10 == 1  db.things.find( { a : { $mod : [ 10 , 1 ] } } );\n    5.$ne 取反：即not equals  db.things.find( { x : { $ne : 3 } } );\n    6.$in 类似于SQL的IN操作  db.things.find({j:{$in: [2,4,6]}});\n    7.$nin $in的反操作，即SQL的  NOT IN  db.things.find({j:{$nin: [2,4,6]}});\n    8.$nor $or的反操作，即不匹配(a或b)  db.things.find( { name : &quot;bob&quot;, $nor : [ { a : 1 },{ b : 2 }]})\n    9.$or Or子句，注意$or不能嵌套使用  db.things.find( { name : &quot;bob&quot; , $or : [ { a : 1 },{ b : 2 }]})\n    10.$size  匹配数组长度  db.things.find( { a : { $size: 1 } } );\n    11.$type  匹配子键的数据类型，详情请看  db.things.find( { a : { $type : 2 } } );\n\n5.数组查询\n    $size 用来匹配数组长度（即最大下标）  \n    // 返回comments包含5个元素的文档   \n    db.posts.find({}, {comments:{‘$size’: 5}});  \n    // 使用冗余字段来实现  \n    db.posts.find({}, {‘commentCount’: { ‘$gt’: 5 }});   \n    $slice 操作符类似于子键筛选，只不过它筛选的是数组中的项  \n    // 仅返回数组中的前5项  \n    db.posts.find({}, {comments:{‘$slice’: 5}});  \n    // 仅返回数组中的最后5项  \n    db.posts.find({}, {comments:{‘$slice’: -5}});  \n    // 跳过数组中的前20项，返回接下来的10项  \n    db.posts.find({}, {comments:{‘$slice’: [20, 10]}});  \n    // 跳过数组中的最后20项，返回接下来的10项  \n    db.posts.find({}, {comments:{‘$slice’: [-20, 10]}});  \n    MongoDB 允许在查询中指定数组的下标，以实现更加精确的匹配  \n    // 返回comments中第1项的by子键为Abe的所有文档  \n    db.posts.find( { &quot;comments.0.by&quot; : &quot;Abe&quot; } );   \n</code></pre><h2 id=\"3-索引的使用\"><a href=\"#3-索引的使用\" class=\"headerlink\" title=\"3.索引的使用\"></a>3.索引的使用</h2><pre><code>1.创建索引\n    db.things.ensureIndex ({&apos;j&apos;: 1});\n    创建子文档 索引\n    db.things.ensureIndex ({&apos;user.Name&apos; : - 1});\n    创建 复合 索引\n    db.things.ensureIndex ({\n    &apos;j&apos; : 1 ,   //  升序\n    &apos;x&apos; : - 1   //  降序\n    });\n    如果 您的 find 操作只用到了一个键，那么索引方向是无关紧要的  \n    当创建复合索引的时候，一定要谨慎斟酌每个键的排序方向\n\n2.修改索引\n    修改索引，只需要重新 运行索引 命令即可  \n    如果索引已经存在则会 重建， 不存在的索引会被 添加  \n    db . things . ensureIndex ({\n        --- 原来的索引会 重建\n        &apos;user.Name &apos; :   - 1 ,\n        --- 新增一个升序 索引\n        &apos;user.Name &apos; :   1 ,\n        ---  为 Age 新建降序 索引\n        &apos;user.Age &apos; :   - 1\n    },\n    打开后台执行\n    {    ‘background&apos; :   true}\n    );\n    重建索引\n    db. things .reIndex();\n3.删除索引\n    删除集合中的所有 索引\n    db . things . dropIndexes ();  \n    删除指定键的索引  \n    db.things.dropIndex ({\n        x :   1 ,\n        y :   - 1\n    });  \n    使用 command 删除指定键的 索引\n    db.runCommand ({\n        dropIndexes : &apos;foo &apos; ,\n        index  :   {   y :   1   }\n    });  \n    使用 command 删除所有 索引\n    db . runCommand ({dropIndexes : &apos;foo &apos; ,index  :   &apos;*‘})\n    如果是删除集合中所有的文档（remove）则不会影响索引，当有新文档插入时，索引就会重建。\n4.唯一索引\n    创建唯一索引，同时这也是一个符合唯一索引  \n    db.things.ensureIndex (\n    {\n        &apos;firstName &apos; :   1 ,\n        &apos;lastName &apos; :   1\n    },   {\n    指定为唯一索引\n    &apos;unique &apos; :   true ,\n    删除重复 记录\n    &apos;dropDups &apos; :   true\n    });\n\n5、强制使用索引\n  强制使用索引 a 和 b\n    db.collection.find ({\n        &apos;a &apos; :   4 ,\n        &apos;b &apos; :   5 ,\n        &apos;c &apos; :   6\n    }). hint ({\n        &apos;a &apos; :   1 ,\n        &apos;b &apos; :   1\n    });\n    强制不使用任何 索引\n    db.collection.find ().hint ({\n        &apos;$ natural&apos; :   1\n    });\n</code></pre><hr>\n<p>索引总结:<br>        索引可以加速查询；<br>        单个索引无需在意其索引方向；<br>        多键索引需要慎重考虑每个索引的方向；<br>        做海量数据更新时应当先卸载所有索引，待数据更新完成后再重建索引；<br>        不要试图为每个键都创建索引，应考虑实际需要，并不是索引越多越好；<br>        唯一索引可以用来消除重复记录；<br>        地理空间索引是没有单位的，其内部实现是基本的勾股定理算法</p>\n<h2 id=\"4-mongo数据库管理\"><a href=\"#4-mongo数据库管理\" class=\"headerlink\" title=\"4.mongo数据库管理\"></a>4.mongo数据库管理</h2><pre><code>- 安全与认证\n1、 默认为无认证，启动用登录 shell ；\n2、 添加账号；\n3、 关闭 shell 、关闭 MongoDB ；\n4、 为 MongoDB 增加 — auth 参数；\n5、 重 启 MongoDB ；\n6、 登录 shell ，此时就需要认证了\n\n- 冷备份\n1、关闭MongoDB引擎\n2、拷贝数据库文件夹及文件\n3、恢复时反向操作即可        \n    -- 优点：可以完全保证数据完整性；\n    -- 缺点：需要数据库引擎离线     \n- 热备份\n1、 保持MongoDB为运行状态\n2、使用mongodump备份数据\n3、使用mongorestore恢复数据\n    --    优点：数据库引擎无须离线\n    --缺点：不能保证数据完整性，操作时会降低MongoDB性能\n\n- 主从复制备份\n1、创建主从复制机制\n2、配置完成后数据会自动同步\n3、恢复途径很多\n    -- 优点：可以保持MongoDB处于联机状态，不影响性能\n    -- 缺点：在数据写入密集的情况下可能无法保证数据完整性\n\n- 修复\ndb.repairDatabase();\n  修复数据库还可以起到压缩数据的作用；\n  修复数据库的操作相当耗时，万不得已请不要使用；\n  建议经常做数据备份；\n</code></pre><h2 id=\"5-mongo复制-集群\"><a href=\"#5-mongo复制-集群\" class=\"headerlink\" title=\"5.mongo复制(集群)\"></a>5.mongo复制(集群)</h2><pre><code>1、主从复制\n    选项      说明\n    --only  作用是限定仅复制指定的某个数据库\n    --slavedelay  为复制设置操作延迟，单位为秒\n    --fastsync  以主节点的数据快照为基础启动从节点。\n    --autoresync  当主从节点数据不一致时，是否自动重新同步\n    --oplogSize  设定主节点中的oplog的容量，单位是MB\n\n2、副本集\n    与普通主从复制集群相比，具有自动检测机制\n    需要使用—replSet 选项指定副本同伴\n    任何时候，副本集当中最多只允许有1个活跃节点\n\n3、读写分离\n    将密集的读取操作分流到从节点上，降低主节点的负载\n    默认情况下，从节点是不允许处理\n    客户端请求的，需要使用—slaveOkay打开\n    不适用于实时性要求非常高的应用\n\n4、工作原理—— OPLOG\n    oplog保存在local数据库中，oplog就在其中的\n    oplog.$main集合内保存。该集合的每个文档都记录了主节点上执行的一个操作，其键定义如下：\n     ts：操作时间戳，占用4字节\n     op：操作类型，占用1字节\n     ns：操作对象的命名空间（或理解为集合全名）\n     o：进一步指定所执行的操作，例如插入\n\n5、工作原理—— 同步\n     从节点首次启动时，做完整同步\n     主节点数据发生变化时，做增量同步\n     从节点与主节点数据严重不一致时，做完整同步\n\n6、复制管理—— 诊断\n    db.printReplicationInfo()\n    在主节点上使用\n     返回信息是oplog的大小以及各种操作的耗时、空间占用等数据\n    在从节点上使用\n    db.printSlaveReplicationInfo()\n     返回信息是从节点的数据源列表、同步延迟时间等\n\n7、复制管理—— 变更OPLOG 容量\n    在主节点上使用\n      设定—oplogSize参数\n      重启MongoDB\n\n8、复制管理—— 复制认证\n    主从节点皆须配置\n     存储在local.system.users\n     优先尝试repl用户\n     主从节点的用户配置必须保持一致\n</code></pre><h2 id=\"6-MONGODB分片\"><a href=\"#6-MONGODB分片\" class=\"headerlink\" title=\"6.MONGODB分片\"></a>6.MONGODB分片</h2><pre><code>- 1、分片与自动分片\n      分片是指将数据拆分，分散到不同的实例上进行负载分流的做法。我们常说的“分表”、“分\n        库”、“分区”等概念都属于分片的实际体现。\n      传统分片做法是手工分表、分库。自动分片技术是根据指定的“片键”自动拆分数据并维护数据\n    请求路由的过程。\n\n    递增片键--连续 不均匀 写入集中 分流较差\n    随机片键--不连续 均匀 写入分散 分流较好\n    三个组成部分\n    --片\n      保存子集数据的容器\n    --mongos\n      MongoDB的路由器进程\n    --配置服务器\n      分片集群的配置信息\n- 2、创建分片\n    --启动配置服务器\n      可以创建一个或多个\n    --添加片\n      每个片都应该是副本集\n    --物理服务器\n      性能、安全和稳定性\n- 3、管理分片\n    --查询分片\n      db.shards.find();\n    --数据库\n      db.databases.find();\n    --块\n      db.chunks.find();\n    --分片状态\n      db.printShardingStatus();\n    --删除片\n      db.runCommand({ “removeshard” : “ip:port” });\n</code></pre><hr>"},{"title":"Mysql优化","date":"2016-06-10T23:25:13.000Z","_content":"** mysql优化：** <Excerpt in index | 首页摘要>\n    mysql的优化措施，从sql优化做起\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### 优化sql的一般步骤\n1. 通过show status了解各种sql的执行频率\n2. 定位执行效率低的sql语句\n3. 通过explain分析效率低的sql\n4. 通过show profile分析sql\n5. 通过trace分析优化器如何选择执行计划\n6. 确定问题，采取措施优化\n\n### 索引优化措施\n1. mysql中使用索引的典型场景\n    1. 匹配全值，条件所有列都在索引中而且是等值匹配\n    2. 匹配值的范围查找，字段必须在索引中\n    3. 匹配最左前缀，复合索引只会根据最左列进行查找\n    4. 仅仅对索引进行查询，即查询的所有字段都在索引上\n    5. 匹配列前缀，比如like 'ABC%',如果是like '%aaa'就不可以\n    6. 如果列名是索引，使用column is null会使用索引\n\n2. 存在索引但不会使用索引的典型场景\n    1. 以%开头的like查询不能使用b树索引\n    2. 数据类型出现隐式转换不能使用索引\n    3. 复合索引，查询条件不符合最左列原则\n    4. 用or分割的条件，如果前面的条件有索引，而后面的条件没有索引\n\n3. 查看索引使用的情况\n```\nshow status like 'Handler_read%';\n```\n如果Handler_read_rnd_next的值比较高，说明索引不正确或者查询没有使用到索引\n\n### 简单实用的优化方法\n1. 定期检查表和分析表\n分析表语法：\n```\nanalyze table 表名；\n```\n检查表语法：\n```\ncheck table 表名；\n```\n2. 定期优化表\n    - 对于字节大小不固定的字段，数据更新和删除会造成磁盘空间不释放，这时候就行优化表，可以整理磁盘碎片，提高性能\n语法如下：\n```\noptimize table user(表名)；\n```\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/mysql-optimize.md","raw":"title: mysql优化\ndate: 2016-06-11 07:25:13\ntags: mysql\ncategories: 数据库\n---\n** mysql优化：** <Excerpt in index | 首页摘要>\n    mysql的优化措施，从sql优化做起\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### 优化sql的一般步骤\n1. 通过show status了解各种sql的执行频率\n2. 定位执行效率低的sql语句\n3. 通过explain分析效率低的sql\n4. 通过show profile分析sql\n5. 通过trace分析优化器如何选择执行计划\n6. 确定问题，采取措施优化\n\n### 索引优化措施\n1. mysql中使用索引的典型场景\n    1. 匹配全值，条件所有列都在索引中而且是等值匹配\n    2. 匹配值的范围查找，字段必须在索引中\n    3. 匹配最左前缀，复合索引只会根据最左列进行查找\n    4. 仅仅对索引进行查询，即查询的所有字段都在索引上\n    5. 匹配列前缀，比如like 'ABC%',如果是like '%aaa'就不可以\n    6. 如果列名是索引，使用column is null会使用索引\n\n2. 存在索引但不会使用索引的典型场景\n    1. 以%开头的like查询不能使用b树索引\n    2. 数据类型出现隐式转换不能使用索引\n    3. 复合索引，查询条件不符合最左列原则\n    4. 用or分割的条件，如果前面的条件有索引，而后面的条件没有索引\n\n3. 查看索引使用的情况\n```\nshow status like 'Handler_read%';\n```\n如果Handler_read_rnd_next的值比较高，说明索引不正确或者查询没有使用到索引\n\n### 简单实用的优化方法\n1. 定期检查表和分析表\n分析表语法：\n```\nanalyze table 表名；\n```\n检查表语法：\n```\ncheck table 表名；\n```\n2. 定期优化表\n    - 对于字节大小不固定的字段，数据更新和删除会造成磁盘空间不释放，这时候就行优化表，可以整理磁盘碎片，提高性能\n语法如下：\n```\noptimize table user(表名)；\n```\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"mysql-optimize","published":1,"updated":"2016-11-13T05:48:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d8n001lohzjgfr7hhoe","content":"<p><strong> mysql优化：</strong> <Excerpt in index | 首页摘要><br>    mysql的优化措施，从sql优化做起<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"优化sql的一般步骤\"><a href=\"#优化sql的一般步骤\" class=\"headerlink\" title=\"优化sql的一般步骤\"></a>优化sql的一般步骤</h3><ol>\n<li>通过show status了解各种sql的执行频率</li>\n<li>定位执行效率低的sql语句</li>\n<li>通过explain分析效率低的sql</li>\n<li>通过show profile分析sql</li>\n<li>通过trace分析优化器如何选择执行计划</li>\n<li>确定问题，采取措施优化</li>\n</ol>\n<h3 id=\"索引优化措施\"><a href=\"#索引优化措施\" class=\"headerlink\" title=\"索引优化措施\"></a>索引优化措施</h3><ol>\n<li><p>mysql中使用索引的典型场景</p>\n<ol>\n<li>匹配全值，条件所有列都在索引中而且是等值匹配</li>\n<li>匹配值的范围查找，字段必须在索引中</li>\n<li>匹配最左前缀，复合索引只会根据最左列进行查找</li>\n<li>仅仅对索引进行查询，即查询的所有字段都在索引上</li>\n<li>匹配列前缀，比如like ‘ABC%’,如果是like ‘%aaa’就不可以</li>\n<li>如果列名是索引，使用column is null会使用索引</li>\n</ol>\n</li>\n<li><p>存在索引但不会使用索引的典型场景</p>\n<ol>\n<li>以%开头的like查询不能使用b树索引</li>\n<li>数据类型出现隐式转换不能使用索引</li>\n<li>复合索引，查询条件不符合最左列原则</li>\n<li>用or分割的条件，如果前面的条件有索引，而后面的条件没有索引</li>\n</ol>\n</li>\n<li><p>查看索引使用的情况</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Handler_read%'</span>;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果Handler_read_rnd_next的值比较高，说明索引不正确或者查询没有使用到索引</p>\n<h3 id=\"简单实用的优化方法\"><a href=\"#简单实用的优化方法\" class=\"headerlink\" title=\"简单实用的优化方法\"></a>简单实用的优化方法</h3><ol>\n<li>定期检查表和分析表<br>分析表语法：<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">analyze <span class=\"keyword\">table</span> 表名；</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>检查表语法：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">check <span class=\"keyword\">table</span> 表名；</div></pre></td></tr></table></figure></p>\n<ol>\n<li>定期优化表<ul>\n<li>对于字节大小不固定的字段，数据更新和删除会造成磁盘空间不释放，这时候就行优化表，可以整理磁盘碎片，提高性能<br>语法如下：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">optimize</span> <span class=\"keyword\">table</span> <span class=\"keyword\">user</span>(表名)；</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> mysql优化：</strong> <Excerpt in index | 首页摘要><br>    mysql的优化措施，从sql优化做起<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"优化sql的一般步骤\"><a href=\"#优化sql的一般步骤\" class=\"headerlink\" title=\"优化sql的一般步骤\"></a>优化sql的一般步骤</h3><ol>\n<li>通过show status了解各种sql的执行频率</li>\n<li>定位执行效率低的sql语句</li>\n<li>通过explain分析效率低的sql</li>\n<li>通过show profile分析sql</li>\n<li>通过trace分析优化器如何选择执行计划</li>\n<li>确定问题，采取措施优化</li>\n</ol>\n<h3 id=\"索引优化措施\"><a href=\"#索引优化措施\" class=\"headerlink\" title=\"索引优化措施\"></a>索引优化措施</h3><ol>\n<li><p>mysql中使用索引的典型场景</p>\n<ol>\n<li>匹配全值，条件所有列都在索引中而且是等值匹配</li>\n<li>匹配值的范围查找，字段必须在索引中</li>\n<li>匹配最左前缀，复合索引只会根据最左列进行查找</li>\n<li>仅仅对索引进行查询，即查询的所有字段都在索引上</li>\n<li>匹配列前缀，比如like ‘ABC%’,如果是like ‘%aaa’就不可以</li>\n<li>如果列名是索引，使用column is null会使用索引</li>\n</ol>\n</li>\n<li><p>存在索引但不会使用索引的典型场景</p>\n<ol>\n<li>以%开头的like查询不能使用b树索引</li>\n<li>数据类型出现隐式转换不能使用索引</li>\n<li>复合索引，查询条件不符合最左列原则</li>\n<li>用or分割的条件，如果前面的条件有索引，而后面的条件没有索引</li>\n</ol>\n</li>\n<li><p>查看索引使用的情况</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">status</span> <span class=\"keyword\">like</span> <span class=\"string\">'Handler_read%'</span>;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>如果Handler_read_rnd_next的值比较高，说明索引不正确或者查询没有使用到索引</p>\n<h3 id=\"简单实用的优化方法\"><a href=\"#简单实用的优化方法\" class=\"headerlink\" title=\"简单实用的优化方法\"></a>简单实用的优化方法</h3><ol>\n<li>定期检查表和分析表<br>分析表语法：<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">analyze <span class=\"keyword\">table</span> 表名；</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>检查表语法：<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">check <span class=\"keyword\">table</span> 表名；</div></pre></td></tr></table></figure></p>\n<ol>\n<li>定期优化表<ul>\n<li>对于字节大小不固定的字段，数据更新和删除会造成磁盘空间不释放，这时候就行优化表，可以整理磁盘碎片，提高性能<br>语法如下：<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">optimize</span> <span class=\"keyword\">table</span> <span class=\"keyword\">user</span>(表名)；</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Mysql学习笔记","date":"2016-05-28T14:24:56.000Z","_content":"** mysql学习笔记：** <Excerpt in index | 首页摘要>\n\tmysql学习，基础的增删改查，数据库优化，索引，分片，集群搭建等等。\n<!-- more -->\n<The rest of contents | 余下全文\\>\n \n### mysql的特点\n1. 关系型数据库，免费使用，\n2. 插入式存储引擎，\n3. 性能高，\n\n### 基础的增删改查\n1. ddl语句，数据定义语句\n\t```\n\tcreate database test1;\n\tdrop database test1;\n\tuse test1;\n\tcreate table emp(ename varchar(10),hiredate date,sal decimal(10,2),deptno int(2));\n\tdrop table emp;\n\talter table emp modify ename varchar(20);\n\talter table emp add column age int(3);\n\talter table emp drop column age;\n\talter table emp change age age1 int(4);\n\talter table emp add birth date after ename;\n\talter table emp modify age int(3) first;\n\talter table emp rename emp1;\n\t```\n2. dml语句，数据操纵语句\n\t```\n\tinsert into emp(ename,hiredate,sal,deptno) values('zzx1','2000-10-11',2000,1);\n\tinsert into emp values('lisa','2004-05-09',3000,2);\n\tinsert into dept values(5,'dept5'),(6,'dept6');\n\tupdate emp set sal=4000 where ename='lisa';\n\tupdate emp a,dept b set a.sal=a.sal*b.deptno,b.deptname=a.ename where a.deptno=b.deptno;\n\tdelete from emp where ename='dony';\n\tdelete a,b from emp a,dept b where a.deptno=b.deptno and a.deptno=3;\n\tselect * from emp where ename='lisa';\n\tselect distinct deptno from emp;\n\tselect * from emp order by sal(desc);\n\tselect * from emp order by sal limit 5;\n\tselect * from emp order by sal limit 1,5;ss\n\n\t```\n3. dcl语句，数据控制语句\n\n### sql优化\n1. 尽量使用 prepareStatement(java)，利用预处理功能。\n2. 在进行多条记录的增加、修改、删除时，建议使用批处理功能，批处理的次数以整\n个 SQL 语句不超过相应数据库的 SQL 语句大小的限制为准。\n3. 建议每条 SQL 语句中 in 中的元素个数在 200 以下，如果个数超过时，应拆分为多\n条 SQL 语句。禁止使用 xx in(‘’,’’….) or xx in(‘’,’’,’’)。 ★\n4. 禁止使用 or 超过 200，如 xx =’123’ or xx=’456’。 ★\n5. 尽量不使用外连接。\n6. 禁止使用 not in 语句，建议用 not exist。 ★\n7. 禁止使用 Union, 如果有业务需要，请拆分为两个查询。 ★\n8. 禁止在一条 SQL 语句中使用 3 层以上的嵌套查询，如果有，请考虑使用临时表或\n中间结果集。\n9. 尽量避免在一条 SQL 语句中从>= 4 个表中同时取数， 对于仅是作为过滤条件关联，\n但不涉及取数的表，不参与表个数计算\n10. 查询条件里任何对列的操作都将导致表扫描，所以应尽量将数据库函数、计算表达\n式写在逻辑操作符右边。\n11. 在对 char 类型比较时,建议不要使用 rtrim()函数,应该在程序中将不足的长度补\n齐。\n12. 用多表连接代替 EXISTS 子句。\n13. 如果有多表连接时， 应该有主从之分， 并尽量从一个表取数， 如 select a.col1, a.col2\nfrom a join b on a.col3=b.col4 where b.col5 = ‘a’。\n14. 在使用 Like 时，建议 Like 的一边是字符串，表列在一边出现。\n15. 不允许将 where 子句的条件放到 having 中。\n16. 将更新操作放到事务的最后执行。如\n17. 一个事务需更新多个对象时，需保证更新的顺序一致以避免死锁的发生。如总是先\n更新子表再更新主表，根据存货档案批量更新现存量时，对传入的存货档案 PK 进\n行排序，再做更新处理等。\n18. 禁止随意使用临时表，在临时数据不超过 200 行的情况下禁止使用临时表。\n29. 禁止随意使用 distinct，避免造成不必要的排序。\n\n### 索引优化\n1. 创建索引，删除索引\n```\ncreate index cityname on city(city(10));\ndrop index cityname on city;\n```\n2. 搜索的索引列最好在where的字句或者连接子句\n3. 使用唯一索引\n4. 使用短索引，对于较长的字段，使用其前缀做索引\n5. 不要过度使用索引，索引引起额外的性能开销和维护\n\n### 高级优化措施\n\n### 集群搭建\n","source":"_posts/mysql-study.md","raw":"title: mysql学习笔记\ndate: 2016-05-28 22:24:56\ntags: mysql\ncategories: 数据库\n---\n** mysql学习笔记：** <Excerpt in index | 首页摘要>\n\tmysql学习，基础的增删改查，数据库优化，索引，分片，集群搭建等等。\n<!-- more -->\n<The rest of contents | 余下全文\\>\n \n### mysql的特点\n1. 关系型数据库，免费使用，\n2. 插入式存储引擎，\n3. 性能高，\n\n### 基础的增删改查\n1. ddl语句，数据定义语句\n\t```\n\tcreate database test1;\n\tdrop database test1;\n\tuse test1;\n\tcreate table emp(ename varchar(10),hiredate date,sal decimal(10,2),deptno int(2));\n\tdrop table emp;\n\talter table emp modify ename varchar(20);\n\talter table emp add column age int(3);\n\talter table emp drop column age;\n\talter table emp change age age1 int(4);\n\talter table emp add birth date after ename;\n\talter table emp modify age int(3) first;\n\talter table emp rename emp1;\n\t```\n2. dml语句，数据操纵语句\n\t```\n\tinsert into emp(ename,hiredate,sal,deptno) values('zzx1','2000-10-11',2000,1);\n\tinsert into emp values('lisa','2004-05-09',3000,2);\n\tinsert into dept values(5,'dept5'),(6,'dept6');\n\tupdate emp set sal=4000 where ename='lisa';\n\tupdate emp a,dept b set a.sal=a.sal*b.deptno,b.deptname=a.ename where a.deptno=b.deptno;\n\tdelete from emp where ename='dony';\n\tdelete a,b from emp a,dept b where a.deptno=b.deptno and a.deptno=3;\n\tselect * from emp where ename='lisa';\n\tselect distinct deptno from emp;\n\tselect * from emp order by sal(desc);\n\tselect * from emp order by sal limit 5;\n\tselect * from emp order by sal limit 1,5;ss\n\n\t```\n3. dcl语句，数据控制语句\n\n### sql优化\n1. 尽量使用 prepareStatement(java)，利用预处理功能。\n2. 在进行多条记录的增加、修改、删除时，建议使用批处理功能，批处理的次数以整\n个 SQL 语句不超过相应数据库的 SQL 语句大小的限制为准。\n3. 建议每条 SQL 语句中 in 中的元素个数在 200 以下，如果个数超过时，应拆分为多\n条 SQL 语句。禁止使用 xx in(‘’,’’….) or xx in(‘’,’’,’’)。 ★\n4. 禁止使用 or 超过 200，如 xx =’123’ or xx=’456’。 ★\n5. 尽量不使用外连接。\n6. 禁止使用 not in 语句，建议用 not exist。 ★\n7. 禁止使用 Union, 如果有业务需要，请拆分为两个查询。 ★\n8. 禁止在一条 SQL 语句中使用 3 层以上的嵌套查询，如果有，请考虑使用临时表或\n中间结果集。\n9. 尽量避免在一条 SQL 语句中从>= 4 个表中同时取数， 对于仅是作为过滤条件关联，\n但不涉及取数的表，不参与表个数计算\n10. 查询条件里任何对列的操作都将导致表扫描，所以应尽量将数据库函数、计算表达\n式写在逻辑操作符右边。\n11. 在对 char 类型比较时,建议不要使用 rtrim()函数,应该在程序中将不足的长度补\n齐。\n12. 用多表连接代替 EXISTS 子句。\n13. 如果有多表连接时， 应该有主从之分， 并尽量从一个表取数， 如 select a.col1, a.col2\nfrom a join b on a.col3=b.col4 where b.col5 = ‘a’。\n14. 在使用 Like 时，建议 Like 的一边是字符串，表列在一边出现。\n15. 不允许将 where 子句的条件放到 having 中。\n16. 将更新操作放到事务的最后执行。如\n17. 一个事务需更新多个对象时，需保证更新的顺序一致以避免死锁的发生。如总是先\n更新子表再更新主表，根据存货档案批量更新现存量时，对传入的存货档案 PK 进\n行排序，再做更新处理等。\n18. 禁止随意使用临时表，在临时数据不超过 200 行的情况下禁止使用临时表。\n29. 禁止随意使用 distinct，避免造成不必要的排序。\n\n### 索引优化\n1. 创建索引，删除索引\n```\ncreate index cityname on city(city(10));\ndrop index cityname on city;\n```\n2. 搜索的索引列最好在where的字句或者连接子句\n3. 使用唯一索引\n4. 使用短索引，对于较长的字段，使用其前缀做索引\n5. 不要过度使用索引，索引引起额外的性能开销和维护\n\n### 高级优化措施\n\n### 集群搭建\n","slug":"mysql-study","published":1,"updated":"2016-11-13T05:48:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d8p001oohzjrdw8rbuf","content":"<p><strong> mysql学习笔记：</strong> <Excerpt in index | 首页摘要><br>    mysql学习，基础的增删改查，数据库优化，索引，分片，集群搭建等等。<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文\\>\n\n<h3 id=\"mysql的特点\"><a href=\"#mysql的特点\" class=\"headerlink\" title=\"mysql的特点\"></a>mysql的特点</h3><ol>\n<li>关系型数据库，免费使用，</li>\n<li>插入式存储引擎，</li>\n<li>性能高，</li>\n</ol>\n<h3 id=\"基础的增删改查\"><a href=\"#基础的增删改查\" class=\"headerlink\" title=\"基础的增删改查\"></a>基础的增删改查</h3><ol>\n<li><p>ddl语句，数据定义语句</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> test1;</div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">database</span> test1;</div><div class=\"line\"><span class=\"keyword\">use</span> test1;</div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> emp(ename <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>),hiredate <span class=\"built_in\">date</span>,sal <span class=\"built_in\">decimal</span>(<span class=\"number\">10</span>,<span class=\"number\">2</span>),deptno <span class=\"built_in\">int</span>(<span class=\"number\">2</span>));</div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> emp;</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">modify</span> ename <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>);</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">add</span> <span class=\"keyword\">column</span> age <span class=\"built_in\">int</span>(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> age;</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">change</span> age age1 <span class=\"built_in\">int</span>(<span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">add</span> birth <span class=\"built_in\">date</span> <span class=\"keyword\">after</span> ename;</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">modify</span> age <span class=\"built_in\">int</span>(<span class=\"number\">3</span>) <span class=\"keyword\">first</span>;</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">rename</span> emp1;</div></pre></td></tr></table></figure>\n</li>\n<li><p>dml语句，数据操纵语句</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> emp(ename,hiredate,sal,deptno) <span class=\"keyword\">values</span>(<span class=\"string\">'zzx1'</span>,<span class=\"string\">'2000-10-11'</span>,<span class=\"number\">2000</span>,<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> emp <span class=\"keyword\">values</span>(<span class=\"string\">'lisa'</span>,<span class=\"string\">'2004-05-09'</span>,<span class=\"number\">3000</span>,<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">5</span>,<span class=\"string\">'dept5'</span>),(<span class=\"number\">6</span>,<span class=\"string\">'dept6'</span>);</div><div class=\"line\"><span class=\"keyword\">update</span> emp <span class=\"keyword\">set</span> sal=<span class=\"number\">4000</span> <span class=\"keyword\">where</span> ename=<span class=\"string\">'lisa'</span>;</div><div class=\"line\"><span class=\"keyword\">update</span> emp a,dept b <span class=\"keyword\">set</span> a.sal=a.sal*b.deptno,b.deptname=a.ename <span class=\"keyword\">where</span> a.deptno=b.deptno;</div><div class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> ename=<span class=\"string\">'dony'</span>;</div><div class=\"line\"><span class=\"keyword\">delete</span> a,b <span class=\"keyword\">from</span> emp a,dept b <span class=\"keyword\">where</span> a.deptno=b.deptno <span class=\"keyword\">and</span> a.deptno=<span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> ename=<span class=\"string\">'lisa'</span>;</div><div class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> deptno <span class=\"keyword\">from</span> emp;</div><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sal(<span class=\"keyword\">desc</span>);</div><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sal <span class=\"keyword\">limit</span> <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sal <span class=\"keyword\">limit</span> <span class=\"number\">1</span>,<span class=\"number\">5</span>;ss</div></pre></td></tr></table></figure>\n</li>\n<li><p>dcl语句，数据控制语句</p>\n</li>\n</ol>\n<h3 id=\"sql优化\"><a href=\"#sql优化\" class=\"headerlink\" title=\"sql优化\"></a>sql优化</h3><ol>\n<li>尽量使用 prepareStatement(java)，利用预处理功能。</li>\n<li>在进行多条记录的增加、修改、删除时，建议使用批处理功能，批处理的次数以整<br>个 SQL 语句不超过相应数据库的 SQL 语句大小的限制为准。</li>\n<li>建议每条 SQL 语句中 in 中的元素个数在 200 以下，如果个数超过时，应拆分为多<br>条 SQL 语句。禁止使用 xx in(‘’,’’….) or xx in(‘’,’’,’’)。 ★</li>\n<li>禁止使用 or 超过 200，如 xx =’123’ or xx=’456’。 ★</li>\n<li>尽量不使用外连接。</li>\n<li>禁止使用 not in 语句，建议用 not exist。 ★</li>\n<li>禁止使用 Union, 如果有业务需要，请拆分为两个查询。 ★</li>\n<li>禁止在一条 SQL 语句中使用 3 层以上的嵌套查询，如果有，请考虑使用临时表或<br>中间结果集。</li>\n<li>尽量避免在一条 SQL 语句中从&gt;= 4 个表中同时取数， 对于仅是作为过滤条件关联，<br>但不涉及取数的表，不参与表个数计算</li>\n<li>查询条件里任何对列的操作都将导致表扫描，所以应尽量将数据库函数、计算表达<br>式写在逻辑操作符右边。</li>\n<li>在对 char 类型比较时,建议不要使用 rtrim()函数,应该在程序中将不足的长度补<br>齐。</li>\n<li>用多表连接代替 EXISTS 子句。</li>\n<li>如果有多表连接时， 应该有主从之分， 并尽量从一个表取数， 如 select a.col1, a.col2<br>from a join b on a.col3=b.col4 where b.col5 = ‘a’。</li>\n<li>在使用 Like 时，建议 Like 的一边是字符串，表列在一边出现。</li>\n<li>不允许将 where 子句的条件放到 having 中。</li>\n<li>将更新操作放到事务的最后执行。如</li>\n<li>一个事务需更新多个对象时，需保证更新的顺序一致以避免死锁的发生。如总是先<br>更新子表再更新主表，根据存货档案批量更新现存量时，对传入的存货档案 PK 进<br>行排序，再做更新处理等。</li>\n<li>禁止随意使用临时表，在临时数据不超过 200 行的情况下禁止使用临时表。</li>\n<li>禁止随意使用 distinct，避免造成不必要的排序。</li>\n</ol>\n<h3 id=\"索引优化\"><a href=\"#索引优化\" class=\"headerlink\" title=\"索引优化\"></a>索引优化</h3><ol>\n<li><p>创建索引，删除索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">index</span> cityname <span class=\"keyword\">on</span> city(city(<span class=\"number\">10</span>));</div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">index</span> cityname <span class=\"keyword\">on</span> city;</div></pre></td></tr></table></figure>\n</li>\n<li><p>搜索的索引列最好在where的字句或者连接子句</p>\n</li>\n<li>使用唯一索引</li>\n<li>使用短索引，对于较长的字段，使用其前缀做索引</li>\n<li>不要过度使用索引，索引引起额外的性能开销和维护</li>\n</ol>\n<h3 id=\"高级优化措施\"><a href=\"#高级优化措施\" class=\"headerlink\" title=\"高级优化措施\"></a>高级优化措施</h3><h3 id=\"集群搭建\"><a href=\"#集群搭建\" class=\"headerlink\" title=\"集群搭建\"></a>集群搭建</h3>","excerpt":"<p><strong> mysql学习笔记：</strong> <Excerpt in index | 首页摘要><br>    mysql学习，基础的增删改查，数据库优化，索引，分片，集群搭建等等。<br>","more":"</p>\n<The rest of contents | 余下全文\\>\n\n<h3 id=\"mysql的特点\"><a href=\"#mysql的特点\" class=\"headerlink\" title=\"mysql的特点\"></a>mysql的特点</h3><ol>\n<li>关系型数据库，免费使用，</li>\n<li>插入式存储引擎，</li>\n<li>性能高，</li>\n</ol>\n<h3 id=\"基础的增删改查\"><a href=\"#基础的增删改查\" class=\"headerlink\" title=\"基础的增删改查\"></a>基础的增删改查</h3><ol>\n<li><p>ddl语句，数据定义语句</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> test1;</div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">database</span> test1;</div><div class=\"line\"><span class=\"keyword\">use</span> test1;</div><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> emp(ename <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>),hiredate <span class=\"built_in\">date</span>,sal <span class=\"built_in\">decimal</span>(<span class=\"number\">10</span>,<span class=\"number\">2</span>),deptno <span class=\"built_in\">int</span>(<span class=\"number\">2</span>));</div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> emp;</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">modify</span> ename <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>);</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">add</span> <span class=\"keyword\">column</span> age <span class=\"built_in\">int</span>(<span class=\"number\">3</span>);</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">drop</span> <span class=\"keyword\">column</span> age;</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">change</span> age age1 <span class=\"built_in\">int</span>(<span class=\"number\">4</span>);</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">add</span> birth <span class=\"built_in\">date</span> <span class=\"keyword\">after</span> ename;</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">modify</span> age <span class=\"built_in\">int</span>(<span class=\"number\">3</span>) <span class=\"keyword\">first</span>;</div><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> emp <span class=\"keyword\">rename</span> emp1;</div></pre></td></tr></table></figure>\n</li>\n<li><p>dml语句，数据操纵语句</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> emp(ename,hiredate,sal,deptno) <span class=\"keyword\">values</span>(<span class=\"string\">'zzx1'</span>,<span class=\"string\">'2000-10-11'</span>,<span class=\"number\">2000</span>,<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> emp <span class=\"keyword\">values</span>(<span class=\"string\">'lisa'</span>,<span class=\"string\">'2004-05-09'</span>,<span class=\"number\">3000</span>,<span class=\"number\">2</span>);</div><div class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> dept <span class=\"keyword\">values</span>(<span class=\"number\">5</span>,<span class=\"string\">'dept5'</span>),(<span class=\"number\">6</span>,<span class=\"string\">'dept6'</span>);</div><div class=\"line\"><span class=\"keyword\">update</span> emp <span class=\"keyword\">set</span> sal=<span class=\"number\">4000</span> <span class=\"keyword\">where</span> ename=<span class=\"string\">'lisa'</span>;</div><div class=\"line\"><span class=\"keyword\">update</span> emp a,dept b <span class=\"keyword\">set</span> a.sal=a.sal*b.deptno,b.deptname=a.ename <span class=\"keyword\">where</span> a.deptno=b.deptno;</div><div class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> ename=<span class=\"string\">'dony'</span>;</div><div class=\"line\"><span class=\"keyword\">delete</span> a,b <span class=\"keyword\">from</span> emp a,dept b <span class=\"keyword\">where</span> a.deptno=b.deptno <span class=\"keyword\">and</span> a.deptno=<span class=\"number\">3</span>;</div><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> ename=<span class=\"string\">'lisa'</span>;</div><div class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> deptno <span class=\"keyword\">from</span> emp;</div><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sal(<span class=\"keyword\">desc</span>);</div><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sal <span class=\"keyword\">limit</span> <span class=\"number\">5</span>;</div><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> sal <span class=\"keyword\">limit</span> <span class=\"number\">1</span>,<span class=\"number\">5</span>;ss</div></pre></td></tr></table></figure>\n</li>\n<li><p>dcl语句，数据控制语句</p>\n</li>\n</ol>\n<h3 id=\"sql优化\"><a href=\"#sql优化\" class=\"headerlink\" title=\"sql优化\"></a>sql优化</h3><ol>\n<li>尽量使用 prepareStatement(java)，利用预处理功能。</li>\n<li>在进行多条记录的增加、修改、删除时，建议使用批处理功能，批处理的次数以整<br>个 SQL 语句不超过相应数据库的 SQL 语句大小的限制为准。</li>\n<li>建议每条 SQL 语句中 in 中的元素个数在 200 以下，如果个数超过时，应拆分为多<br>条 SQL 语句。禁止使用 xx in(‘’,’’….) or xx in(‘’,’’,’’)。 ★</li>\n<li>禁止使用 or 超过 200，如 xx =’123’ or xx=’456’。 ★</li>\n<li>尽量不使用外连接。</li>\n<li>禁止使用 not in 语句，建议用 not exist。 ★</li>\n<li>禁止使用 Union, 如果有业务需要，请拆分为两个查询。 ★</li>\n<li>禁止在一条 SQL 语句中使用 3 层以上的嵌套查询，如果有，请考虑使用临时表或<br>中间结果集。</li>\n<li>尽量避免在一条 SQL 语句中从&gt;= 4 个表中同时取数， 对于仅是作为过滤条件关联，<br>但不涉及取数的表，不参与表个数计算</li>\n<li>查询条件里任何对列的操作都将导致表扫描，所以应尽量将数据库函数、计算表达<br>式写在逻辑操作符右边。</li>\n<li>在对 char 类型比较时,建议不要使用 rtrim()函数,应该在程序中将不足的长度补<br>齐。</li>\n<li>用多表连接代替 EXISTS 子句。</li>\n<li>如果有多表连接时， 应该有主从之分， 并尽量从一个表取数， 如 select a.col1, a.col2<br>from a join b on a.col3=b.col4 where b.col5 = ‘a’。</li>\n<li>在使用 Like 时，建议 Like 的一边是字符串，表列在一边出现。</li>\n<li>不允许将 where 子句的条件放到 having 中。</li>\n<li>将更新操作放到事务的最后执行。如</li>\n<li>一个事务需更新多个对象时，需保证更新的顺序一致以避免死锁的发生。如总是先<br>更新子表再更新主表，根据存货档案批量更新现存量时，对传入的存货档案 PK 进<br>行排序，再做更新处理等。</li>\n<li>禁止随意使用临时表，在临时数据不超过 200 行的情况下禁止使用临时表。</li>\n<li>禁止随意使用 distinct，避免造成不必要的排序。</li>\n</ol>\n<h3 id=\"索引优化\"><a href=\"#索引优化\" class=\"headerlink\" title=\"索引优化\"></a>索引优化</h3><ol>\n<li><p>创建索引，删除索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">index</span> cityname <span class=\"keyword\">on</span> city(city(<span class=\"number\">10</span>));</div><div class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">index</span> cityname <span class=\"keyword\">on</span> city;</div></pre></td></tr></table></figure>\n</li>\n<li><p>搜索的索引列最好在where的字句或者连接子句</p>\n</li>\n<li>使用唯一索引</li>\n<li>使用短索引，对于较长的字段，使用其前缀做索引</li>\n<li>不要过度使用索引，索引引起额外的性能开销和维护</li>\n</ol>\n<h3 id=\"高级优化措施\"><a href=\"#高级优化措施\" class=\"headerlink\" title=\"高级优化措施\"></a>高级优化措施</h3><h3 id=\"集群搭建\"><a href=\"#集群搭建\" class=\"headerlink\" title=\"集群搭建\"></a>集群搭建</h3>"},{"title":"Nodejs开发规范","date":"2016-05-23T06:18:02.000Z","_content":"** nodejs开发规范：** <Excerpt in index | 首页摘要>\n    nodejs开发中应当遵循的规范，以及最佳实践\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### node开发需要编程规范吗？\n1. js的灵活性非常大，如果开发人员每个人都按自己的习惯随意编写，js的代码会非常混乱不堪。js程序员需要更强的自律性和规范，才能写出易读性，易维护的代码。\n2. 随着前端mvc的崛起，前端的js代码会更加庞大难以管理，如果没有统一的规范，后期维护会比登天还难。\n\n### 编码规范\n\n1. 缩进\n采用两个空格缩进，在编辑器中设置tab为两个空格\n\n2. 变量声明\n- 用var声明变量\nvar assert = require('assert');\nvar fork = require('child_process').fork;\nvar net = require('net');\n\n错误实例：\nvar assert = require('assert')\n, fork = require('child_process').fork\n, net = require('net')；\n\n- 用字面量声明方式\nvar num = 123;\nvar aaa = {};\nvar arr = [];\nvar isAdmin = true;\n- 避免使用：\nvar obj =new Object();\nvar arr = new Array();\nvar test  =new String(\"\");\nvar size = new Number();\n\n- 不要在for循环等循环里声明var变量\n首先var是函数作用域，在循环声明以后只有等函数声明周期结束这些资源才会释放\n\n\n3. 空格\n在操作符前后需要加上空格,= 、% 、* 、- 、+ 前后都应该加一个空格\n比如：var foo = 'bar' + baz;\n错误实例：var foo='bar'+baz;\n\n4. 单双引号的使用\n在node中尽量使用单引号，\nvar html = '<a href=\"http://cnodejs.org\">CNode</a>';\n 在json中使用双引号\n\n5. 分号\n给表达式结尾加分号，尽管js会自动在行尾加上分号，但是会产生一些误解\n\n### 命名规范\n在编码中，命名是重头戏。好的命名可以使代码赏心悦目，具有良好的维护性。\n\n1. 变量命名\n变量名采用小驼峰命名，单词之间没有任何符号如：\nvar adminUser = {};\nvar callNum = 2134323;\n2. 方法命名\n也是采用小驼峰命名，与变量不同的是采用动词或判断行词汇，如：\nvar getUser = function(){};\nvar isAdmin = function(){};\nvar findUser = function(){};\n\n3. 类命名\n类名采用大驼峰，所有单词首字母大写，如：\nfunction User{}\n\n4. 常量命名\n作为常量，单词所有字母大写，用下划线分割，如：\nvar PINK_COLOR = \"PINK\";\n\n5. 文件命名\n命名文件时，尽量使用下划线分割单词，比如child_process.js和string_decode.js\n\n6. 包名\n在包名中尽量不要包含js和node的字样，应当适当短并且有意义\n\n### 其它要点\n\n1. 作用域\n慎用with和eval（），容易引起作用域混乱\n\n2. 比较操作\n尽量使用===代替==,否则会遇到下面的情况，'0'==0;//true;\n ''==0;//true;\n '0'===''//false;\n\n3. 严格模式\n在node后台中尽量全使用严格模式\n'use strict';\n\n4. 对象和数组遍历\n数组遍历使用普通for循环，避免使用for in对数组遍历，\n对象的遍历使用for in\n\n### 项目中实践\n1. sublime和webstorm都有JSLint,JSHint这样的代码质量工具，在配置文件中制定好模板规范即可\n\n2. 在版本控制工具中设置hook，在precommit的脚本中设置，如果代码不符合标准，就无法提交\n\n###  参考文献\n1. 深入浅出nodejs\n2. js秘密花园\n3. js高级编程\n","source":"_posts/node-develop.md","raw":"title: nodejs开发规范\ndate: 2016-05-23 14:18:02\ntags: node\ncategories: 编程语言\n---\n** nodejs开发规范：** <Excerpt in index | 首页摘要>\n    nodejs开发中应当遵循的规范，以及最佳实践\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### node开发需要编程规范吗？\n1. js的灵活性非常大，如果开发人员每个人都按自己的习惯随意编写，js的代码会非常混乱不堪。js程序员需要更强的自律性和规范，才能写出易读性，易维护的代码。\n2. 随着前端mvc的崛起，前端的js代码会更加庞大难以管理，如果没有统一的规范，后期维护会比登天还难。\n\n### 编码规范\n\n1. 缩进\n采用两个空格缩进，在编辑器中设置tab为两个空格\n\n2. 变量声明\n- 用var声明变量\nvar assert = require('assert');\nvar fork = require('child_process').fork;\nvar net = require('net');\n\n错误实例：\nvar assert = require('assert')\n, fork = require('child_process').fork\n, net = require('net')；\n\n- 用字面量声明方式\nvar num = 123;\nvar aaa = {};\nvar arr = [];\nvar isAdmin = true;\n- 避免使用：\nvar obj =new Object();\nvar arr = new Array();\nvar test  =new String(\"\");\nvar size = new Number();\n\n- 不要在for循环等循环里声明var变量\n首先var是函数作用域，在循环声明以后只有等函数声明周期结束这些资源才会释放\n\n\n3. 空格\n在操作符前后需要加上空格,= 、% 、* 、- 、+ 前后都应该加一个空格\n比如：var foo = 'bar' + baz;\n错误实例：var foo='bar'+baz;\n\n4. 单双引号的使用\n在node中尽量使用单引号，\nvar html = '<a href=\"http://cnodejs.org\">CNode</a>';\n 在json中使用双引号\n\n5. 分号\n给表达式结尾加分号，尽管js会自动在行尾加上分号，但是会产生一些误解\n\n### 命名规范\n在编码中，命名是重头戏。好的命名可以使代码赏心悦目，具有良好的维护性。\n\n1. 变量命名\n变量名采用小驼峰命名，单词之间没有任何符号如：\nvar adminUser = {};\nvar callNum = 2134323;\n2. 方法命名\n也是采用小驼峰命名，与变量不同的是采用动词或判断行词汇，如：\nvar getUser = function(){};\nvar isAdmin = function(){};\nvar findUser = function(){};\n\n3. 类命名\n类名采用大驼峰，所有单词首字母大写，如：\nfunction User{}\n\n4. 常量命名\n作为常量，单词所有字母大写，用下划线分割，如：\nvar PINK_COLOR = \"PINK\";\n\n5. 文件命名\n命名文件时，尽量使用下划线分割单词，比如child_process.js和string_decode.js\n\n6. 包名\n在包名中尽量不要包含js和node的字样，应当适当短并且有意义\n\n### 其它要点\n\n1. 作用域\n慎用with和eval（），容易引起作用域混乱\n\n2. 比较操作\n尽量使用===代替==,否则会遇到下面的情况，'0'==0;//true;\n ''==0;//true;\n '0'===''//false;\n\n3. 严格模式\n在node后台中尽量全使用严格模式\n'use strict';\n\n4. 对象和数组遍历\n数组遍历使用普通for循环，避免使用for in对数组遍历，\n对象的遍历使用for in\n\n### 项目中实践\n1. sublime和webstorm都有JSLint,JSHint这样的代码质量工具，在配置文件中制定好模板规范即可\n\n2. 在版本控制工具中设置hook，在precommit的脚本中设置，如果代码不符合标准，就无法提交\n\n###  参考文献\n1. 深入浅出nodejs\n2. js秘密花园\n3. js高级编程\n","slug":"node-develop","published":1,"updated":"2016-11-13T05:48:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d8v001sohzj9d6id20f","content":"<p><strong> nodejs开发规范：</strong> <Excerpt in index | 首页摘要><br>    nodejs开发中应当遵循的规范，以及最佳实践<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"node开发需要编程规范吗？\"><a href=\"#node开发需要编程规范吗？\" class=\"headerlink\" title=\"node开发需要编程规范吗？\"></a>node开发需要编程规范吗？</h3><ol>\n<li>js的灵活性非常大，如果开发人员每个人都按自己的习惯随意编写，js的代码会非常混乱不堪。js程序员需要更强的自律性和规范，才能写出易读性，易维护的代码。</li>\n<li>随着前端mvc的崛起，前端的js代码会更加庞大难以管理，如果没有统一的规范，后期维护会比登天还难。</li>\n</ol>\n<h3 id=\"编码规范\"><a href=\"#编码规范\" class=\"headerlink\" title=\"编码规范\"></a>编码规范</h3><ol>\n<li><p>缩进<br>采用两个空格缩进，在编辑器中设置tab为两个空格</p>\n</li>\n<li><p>变量声明</p>\n</li>\n</ol>\n<ul>\n<li>用var声明变量<br>var assert = require(‘assert’);<br>var fork = require(‘child_process’).fork;<br>var net = require(‘net’);</li>\n</ul>\n<p>错误实例：<br>var assert = require(‘assert’)<br>, fork = require(‘child_process’).fork<br>, net = require(‘net’)；</p>\n<ul>\n<li>用字面量声明方式<br>var num = 123;<br>var aaa = {};<br>var arr = [];<br>var isAdmin = true;</li>\n<li><p>避免使用：<br>var obj =new Object();<br>var arr = new Array();<br>var test  =new String(“”);<br>var size = new Number();</p>\n</li>\n<li><p>不要在for循环等循环里声明var变量<br>首先var是函数作用域，在循环声明以后只有等函数声明周期结束这些资源才会释放</p>\n</li>\n</ul>\n<ol>\n<li><p>空格<br>在操作符前后需要加上空格,= 、% 、* 、- 、+ 前后都应该加一个空格<br>比如：var foo = ‘bar’ + baz;<br>错误实例：var foo=’bar’+baz;</p>\n</li>\n<li><p>单双引号的使用<br>在node中尽量使用单引号，<br>var html = ‘<a href=\"http://cnodejs.org\">CNode</a>‘;<br>在json中使用双引号</p>\n</li>\n<li><p>分号<br>给表达式结尾加分号，尽管js会自动在行尾加上分号，但是会产生一些误解</p>\n</li>\n</ol>\n<h3 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h3><p>在编码中，命名是重头戏。好的命名可以使代码赏心悦目，具有良好的维护性。</p>\n<ol>\n<li>变量命名<br>变量名采用小驼峰命名，单词之间没有任何符号如：<br>var adminUser = {};<br>var callNum = 2134323;</li>\n<li><p>方法命名<br>也是采用小驼峰命名，与变量不同的是采用动词或判断行词汇，如：<br>var getUser = function(){};<br>var isAdmin = function(){};<br>var findUser = function(){};</p>\n</li>\n<li><p>类命名<br>类名采用大驼峰，所有单词首字母大写，如：<br>function User{}</p>\n</li>\n<li><p>常量命名<br>作为常量，单词所有字母大写，用下划线分割，如：<br>var PINK_COLOR = “PINK”;</p>\n</li>\n<li><p>文件命名<br>命名文件时，尽量使用下划线分割单词，比如child_process.js和string_decode.js</p>\n</li>\n<li><p>包名<br>在包名中尽量不要包含js和node的字样，应当适当短并且有意义</p>\n</li>\n</ol>\n<h3 id=\"其它要点\"><a href=\"#其它要点\" class=\"headerlink\" title=\"其它要点\"></a>其它要点</h3><ol>\n<li><p>作用域<br>慎用with和eval（），容易引起作用域混乱</p>\n</li>\n<li><p>比较操作<br>尽量使用===代替==,否则会遇到下面的情况，’0’==0;//true;<br>‘’==0;//true;<br>‘0’===’’//false;</p>\n</li>\n<li><p>严格模式<br>在node后台中尽量全使用严格模式<br>‘use strict’;</p>\n</li>\n<li><p>对象和数组遍历<br>数组遍历使用普通for循环，避免使用for in对数组遍历，<br>对象的遍历使用for in</p>\n</li>\n</ol>\n<h3 id=\"项目中实践\"><a href=\"#项目中实践\" class=\"headerlink\" title=\"项目中实践\"></a>项目中实践</h3><ol>\n<li><p>sublime和webstorm都有JSLint,JSHint这样的代码质量工具，在配置文件中制定好模板规范即可</p>\n</li>\n<li><p>在版本控制工具中设置hook，在precommit的脚本中设置，如果代码不符合标准，就无法提交</p>\n</li>\n</ol>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><ol>\n<li>深入浅出nodejs</li>\n<li>js秘密花园</li>\n<li>js高级编程</li>\n</ol>\n","excerpt":"<p><strong> nodejs开发规范：</strong> <Excerpt in index | 首页摘要><br>    nodejs开发中应当遵循的规范，以及最佳实践<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"node开发需要编程规范吗？\"><a href=\"#node开发需要编程规范吗？\" class=\"headerlink\" title=\"node开发需要编程规范吗？\"></a>node开发需要编程规范吗？</h3><ol>\n<li>js的灵活性非常大，如果开发人员每个人都按自己的习惯随意编写，js的代码会非常混乱不堪。js程序员需要更强的自律性和规范，才能写出易读性，易维护的代码。</li>\n<li>随着前端mvc的崛起，前端的js代码会更加庞大难以管理，如果没有统一的规范，后期维护会比登天还难。</li>\n</ol>\n<h3 id=\"编码规范\"><a href=\"#编码规范\" class=\"headerlink\" title=\"编码规范\"></a>编码规范</h3><ol>\n<li><p>缩进<br>采用两个空格缩进，在编辑器中设置tab为两个空格</p>\n</li>\n<li><p>变量声明</p>\n</li>\n</ol>\n<ul>\n<li>用var声明变量<br>var assert = require(‘assert’);<br>var fork = require(‘child_process’).fork;<br>var net = require(‘net’);</li>\n</ul>\n<p>错误实例：<br>var assert = require(‘assert’)<br>, fork = require(‘child_process’).fork<br>, net = require(‘net’)；</p>\n<ul>\n<li>用字面量声明方式<br>var num = 123;<br>var aaa = {};<br>var arr = [];<br>var isAdmin = true;</li>\n<li><p>避免使用：<br>var obj =new Object();<br>var arr = new Array();<br>var test  =new String(“”);<br>var size = new Number();</p>\n</li>\n<li><p>不要在for循环等循环里声明var变量<br>首先var是函数作用域，在循环声明以后只有等函数声明周期结束这些资源才会释放</p>\n</li>\n</ul>\n<ol>\n<li><p>空格<br>在操作符前后需要加上空格,= 、% 、* 、- 、+ 前后都应该加一个空格<br>比如：var foo = ‘bar’ + baz;<br>错误实例：var foo=’bar’+baz;</p>\n</li>\n<li><p>单双引号的使用<br>在node中尽量使用单引号，<br>var html = ‘<a href=\"http://cnodejs.org\">CNode</a>‘;<br>在json中使用双引号</p>\n</li>\n<li><p>分号<br>给表达式结尾加分号，尽管js会自动在行尾加上分号，但是会产生一些误解</p>\n</li>\n</ol>\n<h3 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h3><p>在编码中，命名是重头戏。好的命名可以使代码赏心悦目，具有良好的维护性。</p>\n<ol>\n<li>变量命名<br>变量名采用小驼峰命名，单词之间没有任何符号如：<br>var adminUser = {};<br>var callNum = 2134323;</li>\n<li><p>方法命名<br>也是采用小驼峰命名，与变量不同的是采用动词或判断行词汇，如：<br>var getUser = function(){};<br>var isAdmin = function(){};<br>var findUser = function(){};</p>\n</li>\n<li><p>类命名<br>类名采用大驼峰，所有单词首字母大写，如：<br>function User{}</p>\n</li>\n<li><p>常量命名<br>作为常量，单词所有字母大写，用下划线分割，如：<br>var PINK_COLOR = “PINK”;</p>\n</li>\n<li><p>文件命名<br>命名文件时，尽量使用下划线分割单词，比如child_process.js和string_decode.js</p>\n</li>\n<li><p>包名<br>在包名中尽量不要包含js和node的字样，应当适当短并且有意义</p>\n</li>\n</ol>\n<h3 id=\"其它要点\"><a href=\"#其它要点\" class=\"headerlink\" title=\"其它要点\"></a>其它要点</h3><ol>\n<li><p>作用域<br>慎用with和eval（），容易引起作用域混乱</p>\n</li>\n<li><p>比较操作<br>尽量使用===代替==,否则会遇到下面的情况，’0’==0;//true;<br>‘’==0;//true;<br>‘0’===’’//false;</p>\n</li>\n<li><p>严格模式<br>在node后台中尽量全使用严格模式<br>‘use strict’;</p>\n</li>\n<li><p>对象和数组遍历<br>数组遍历使用普通for循环，避免使用for in对数组遍历，<br>对象的遍历使用for in</p>\n</li>\n</ol>\n<h3 id=\"项目中实践\"><a href=\"#项目中实践\" class=\"headerlink\" title=\"项目中实践\"></a>项目中实践</h3><ol>\n<li><p>sublime和webstorm都有JSLint,JSHint这样的代码质量工具，在配置文件中制定好模板规范即可</p>\n</li>\n<li><p>在版本控制工具中设置hook，在precommit的脚本中设置，如果代码不符合标准，就无法提交</p>\n</li>\n</ol>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><ol>\n<li>深入浅出nodejs</li>\n<li>js秘密花园</li>\n<li>js高级编程</li>\n</ol>"},{"title":"深入浅出Nodejs笔记","date":"2016-11-11T11:52:23.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n    node学习重点，深入浅出nodejs学习笔记\n<!-- more -->\n<The rest of contents | 余下全文>\n### node简介：\n\t1. 异步IO，适合io密集型的\n\t2. 单线程，通过childnode实现多线程\n\t3. 跨平台，通过electron编写跨平台客户端\n\t4. 上手简单,功能强大\n### node模块\n\t1. node模块分为两类，一是node的内建模块（核心模块），二是用户编写的文件模块\n\t2. 核心模块在node编译时加载到内存，文件模块在运行时动态加载\n\t3. node的每一个文件模块都是一个对象\n\t4. 文件模块需要经过路径分析，文件定位，编译执行3个过程\n\t5. node对引入过的模块都进行缓存，require会优先使用缓存\n### 异步IO\n\t1. node中都是异步的，实现同步的话要通过回调函数或者同步框架\n\t2. 异步的方案：事件发布/事件监听，Promise/Deferred模式,流程控制库\n\t3. 事件监听模式：Node自身的events模块提供了简单的实现，具有addListener/on(). once(). remove\t\tListener(). removeAllListeners()和emit()方法。\n\t```js\n\temitter.on(\"event1\", function (message) {\n\t\tconsole.log(message);\n\t});\n\t// 发布\n\temitter.emit('event1', \"I am message!\");\n\t```\n### 内存控制\n\t1. 在node中内存限制为64位1.4G（32位0.7G）\n\t2. 限制内存的原因：V8做垃圾回收如果以1.5G为例，做一次小的垃圾回收需要50ms,做一次非增量式内存回收耗时1s以上\n\t3. node在启动时可以更改内存大小，--max-old-space-size=或者--max-new-space-size=\n\t4. v8的内存回收机制：内存分代为新生代（生命周期短）和老生代（生命周期长），\n\t5. 堆外内存不受内存限制，如buffer对象的使用\n### 理解buffer\n\n\n### 网络编程\n\t1. tcp服务\n\t\t服务端：\n```js\n\t\tvar net = require('net');\n\t\tvar server = net.createServer(function (socket) {\n\t\tsocket.on('data', function (data) {\n\t\t\tsocket.write(\"你好\");\n\t\t});\n\t\tsocket.on('end', function () {\n\t\t\tconsole.log('断开连接');\n\t\t});\n\t\tsocket.write(\"欢迎光临：\\n\");\n\t\t});\n\t\tserver.listen(8124, function () {\n\t\t\tconsole.log('server bound');\n\t\t});\n```\n\t\t客户端：\n```js\n\t\tvar net = require('net');\n\t\tvar client = net.connect({port: 8124}, function () { //'connect' listener\n\t\t\tconsole.log('client connected');\n\t\t\tclient.write('world!\\r\\n');\n\t\t});\n\t\tclient.on('data', function (data) {\n\t\t\tconsole.log(data.toString());\n\t\t\tclient.end();\n\t\t});\n\t\tclient.on('end', function () {\n\t\t\tconsole.log('client disconnected');\n\t\t});\n```\n\t2. udp服务\n\n```js\n\t\t// 服务端：\n\t\tvar dgram = require(\"dgram\");\n\t\tvar server = dgram.createSocket(\"udp4\");\n\t\tserver.on(\"message\", function (msg, rinfo) {\n\t\t\tconsole.log(\"server got: \" + msg + \" from \" +\n\t\t\trinfo.address + \":\" + rinfo.port);\n\t\t});\n\t\tserver.on(\"listening\", function () {\n\t\tvar address = server.address();\n\t\tconsole.log(\"server listening \" +\n\t\t\taddress.address + \":\" + address.port);\n\t\t});\n\t\tserver.bind(41234);\n\t\t// 客户端：\n\t\tvar dgram = require('dgram');\n\t\tvar message = new Buffer(”nodejs“);\n\t\tvar client = dgram.createSocket(\"udp4\");\n\t\tclient.send(message, 0, message.length, 41234, \"localhost\", function(err, bytes) {\n\t\t\tclient.close();\n\t\t});\n```\n\t3. http服务\n\n```js\n\t\t// 服务端：\n\t\tvar http = require('http');\n\t\thttp.createServer(function (req, res) {\n\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\t\tres.end('Hello World\\n');\n\t\t}).listen(1337, '127.0.0.1');\n\t\tconsole.log('Server running at http://127.0.0.1:1337/');\n\t\t// 客户端：\n\t\tvar options = {\n\t\t\thostname: '127.0.0.1',\n\t\t\tport: 1334,\n\t\t\tpath: '/',\n\t\t\tmethod: 'GET'\n\t\t};\n\t\tvar req = http.request(options, function(res) {\n\t\t\tconsole.log('STATUS: ' + res.statusCode);\n\t\t\tconsole.log('HEADERS: ' + JSON.stringify(res.headers));\n\t\t\tres.setEncoding('utf8');\n\t\t\tres.on('data', function (chunk) {\n\t\t\tconsole.log(chunk);\n\t\t\t});\n\t\t});\n\t\treq.end();\n```\n\t4. websocket服务\n```js\n\t\t// 客户端：\n\t\tvar socket = new WebSocket('ws://127.0.0.1:12010/updates');\n\t\tsocket.onopen = function () {\n\t\t\tsetInterval(function() {\n\t\t\tif (socket.bufferedAmount == 0)\n\t\t\t\tsocket.send(getUpdateData());\n\t\t\t}, 50);\n\t\t};\n\t\tsocket.onmessage = function (event) {\n\t\t\t// TODO：event.data\n\t\t};\n\t\t// <!-- 模拟浏览器： -->\n\n\t\tvar WebSocket = function (url) {\n\t\t// 代码?解析ws://127.0.0.1:12010/updates\n\t\t\tthis.options = parseUrl(url);\n\t\t\tthis.connect();\n\t\t};\n\t\tWebSocket.prototype.onopen = function () {\n\t\t// TODO\n\t\t};\n\t\tWebSocket.prototype.setSocket = function (socket) {\n\t\tthis.socket = socket;\n\t\t};\n\t\tWebSocket.prototype.connect = function () {\n\t\t\tvar this = that;\n\t\t\tvar key = new Buffer(this.options.protocolVersion + '-' + Date.now()).toString('base64');\n\t\t\tvar shasum = crypto.createHash('sha1');\n\t\t\tvar expected = shasum.update(key + '258EAFA5-E914-47DA-95CA-C5AB0DC85B11').digest('base64');\n\t\t\tvar options = {\n\t\t\t\tport: this.options.port, //12010\n\t\t\t\thost: this.options.hostname, // 127.0.0.1\n\t\t\theaders: {\n\t\t\t\t'Connection': 'Upgrade',\n\t\t\t\t'Upgrade': 'websocket',\n\t\t\t\t'Sec-WebSocket-Version': this.options.protocolVersion,\n\t\t\t\t'Sec-WebSocket-Key': key\n\t\t\t}\n\t\t};\n\t\tvar req = http.request(options);\n\t\t\treq.end();\n\t\t\treq.on('upgrade', function(res, socket, upgradeHead) {\n\t\t\t// 连接成功\n\t\t\tthat.setSocket(socket);\n\t\t\t// 触发open事件\n\t\t\tthat.onopen();\n\t\t});\n\t\t};\n```\n\n```js\n\t\t// 服务端响应：\n\t\tvar server = http.createServer(function (req, res) {\n\t\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\t\tres.end('Hello World\\n');\n\t\t});\n\t\tserver.listen(12010);\n\t\t// 在收到upgrade请求之后，告知客户端允许切换协议\n\t\tserver.on('upgrade', function (req, socket, upgradeHead) {\n\t\t\tvar head = new Buffer(upgradeHead.length);\n\t\t\tupgradeHead.copy(head);\n\t\t\tvar key = req.headers['sec-websocket-key'];\n\t\t\tvar shasum = crypto.createHash('sha1');\n\t\t\tkey = shasum.update(key + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\").digest('base64');\n\t\t\tvar headers = [\n\t\t\t\t'HTTP/1.1 101 Switching Protocols',\n\t\t\t\t'Upgrade: websocket',\n\t\t\t\t'Connection: Upgrade',\n\t\t\t\t'Sec-WebSocket-Accept: ' + key,\n\t\t\t\t'Sec-WebSocket-Protocol: ' + protocol\n\t\t\t];\n\t\t\t// 让数据立即发送\n\t\t\tsocket.setNoDelay(true);\n\t\t\tsocket.write(headers.concat('', '').join('\\r\\n'));\n\t\t\t// 建立服务器端WebSocket连接\n\t\t\tvar websocket = new WebSocket();\n\t\t\twebsocket.setSocket(socket);\n\t\t});\n```\n\t\t5. TLS服务（安全方面）\n```js\n\t\t// 服务端：\n\t\tvar tls = require('tls');\n\t\tvar fs = require('fs');\n\t\tvar options = {\n\t\t\tkey: fs.readFileSync('./keys/server.key'),\n\t\t\tcert: fs.readFileSync('./keys/server.crt'),\n\t\t\trequestCert: true,\n\t\t\tca: [ fs.readFileSync('./keys/ca.crt') ]\n\t\t};\n\t\tvar server = tls.createServer(options, function (stream) {\n\t\t\tconsole.log('server connected', stream.authorized ? 'authorized' : 'unauthorized');\n\t\t\tstream.write(\"welcome!\\n\");\n\t\t\tstream.setEncoding('utf8');\n\t\t\tstream.pipe(stream);\n\t\t});\n\t\tserver.listen(8000, function() {\n\t\t\tconsole.log('server bound');\n\t\t});\n```\n\t\t\t// 测试证书是否正常\n\t\t\t`$ openssl s_client -connect 127.0.0.1:8000`\n\n\t\t\t客户端：\n\t\t\t// 创建私钥\n\t\t\t`$ openssl genrsa -out client.key 1024`\n\t\t\t// 生成CSR\n\t\t\t`$ openssl req -new -key client.key -out client.csr`\n\t\t\t// 生成签名证书\n\t\t\t`$ openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in client.csr -out client.crt`\n```js\n\t\t\tvar tls = require('tls');\n\t\t\tvar fs = require('fs');\n\t\t\tvar options = {\n\t\t\t\tkey: fs.readFileSync('./keys/client.key'),\n\t\t\t\tcert: fs.readFileSync('./keys/client.crt'),\n\t\t\t\tca: [ fs.readFileSync('./keys/ca.crt') ]\n\t\t\t};\n\t\t\tvar stream = tls.connect(8000, options, function () {\n\t\t\t\tconsole.log('client connected', stream.authorized ? 'authorized' : 'unauthorized');\n\t\t\t\tprocess.stdin.pipe(stream);\n\t\t\t});\n\t\t\tstream.setEncoding('utf8');\n\t\t\tstream.on('data', function(data) {\n\t\t\t\tconsole.log(data);\n\t\t\t});\n\t\t\tstream.on('end', function() {\n\t\t\t\tserver.close();\n\t\t\t});\n```\n\t\t6. HTTPS服务\n\t\t\t服务端：\n```js\n\t\t\tvar https = require('https');\n\t\t\tvar fs = require('fs');\n\t\t\tvar options = {\n\t\t\t\tkey: fs.readFileSync('./keys/server.key'),\n\t\t\t\tcert: fs.readFileSync('./keys/server.crt')\n\t\t\t};\n\t\t\thttps.createServer(options, function (req, res) {\n\t\t\tres.writeHead(200);\n\t\t\t\tres.end(\"hello world\\n\");\n\t\t\t}).listen(8000);\n\t\t\t```\n\t\t\t客户端：\n```js\n\t\t\tvar https = require('https');\n\t\t\tvar fs = require('fs');\n\t\t\tvar options = {\n\t\t\t\thostname: 'localhost',\n\t\t\t\tport: 8000,\n\t\t\t\tpath: '/',\n\t\t\t\tmethod: 'GET',\n\t\t\t\tkey: fs.readFileSync('./keys/client.key'),\n\t\t\t\tcert: fs.readFileSync('./keys/client.crt'),\n\t\t\t\tca: [fs.readFileSync('./keys/ca.crt')]\n\t\t\t};\n\t\t\toptions.agent = new https.Agent(options);\n\t\t\tvar req = https.request(options, function(res) {\n\t\t\t\tres.setEncoding('utf-8');\n\t\t\t\tres.on('data', function(d) {\n\t\t\t\t\tconsole.log(d);\n\t\t\t\t});\n\t\t\t});\n\t\t\treq.end();\n\t\t\treq.on('error', function(e) {\n\t\t\t\tconsole.log(e);\n\t\t\t});\n```\n### 玩转进程\n\tnode提供了child_process.fork()实现进程的复制\n```js\n\tvar http = require('http');\n\thttp.createServer(function (req, res) {\n\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\tres.end('Hello World\\n');\n\t}).listen(Math.round((1 + Math.random()) * 1000), '127.0.0.1');\n```\n\t运行node worker.js，监听?1000到2000之间的端口。\n\n\t以下是master.js\n```js\n\tvar fork = require('child_process').fork;\n\tvar cpus = require('os').cpus();\n\tfor (var i = 0; i < cpus.length; i++) {\n\t\tfork('./worker.js');\n\t}\n```\n\t这是著名的master-worker模式，主从模式\n\n\t//创建子进程\n\tchild_process模块提供了四个方法创建子进程\n\tspawn()\t\t执行命令\n\texec()\t\t\t执行命令\t\t可设置时间\n\texecFile()\t\t执行文件\t\t可设置时间\n\tfork()\t\t\t执行javascript\n\t后面3中方法都是spawn()的延伸\n\t//实例work.js\n```js\n\tvar cp = require('child_process');\n\tcp.spawn('node', ['worker.js']);\n\tcp.exec('node worker.js', function (err, stdout, stderr) {\n\t// some code\n\t});\n\tcp.execFile('worker.js', function (err, stdout, stderr) {\n\t// some code\n\t});\n\tcp.fork('./worker.js')\n```\n\t//进程间通信\n\t在浏览器中，javascript主线程和UI渲染是一个线程，渲染UI和执行js是互相阻塞的\n\thtml5提出来webworker API，创建工作线程在后台运行\n```js\n\tvar worker = new Worker('worker.js');\n\tworker.onmessage = function (event) {\n\t\tdocument.getElementById('result').textContent = event.data;\n\t};\n```\n\twork.js代码如下\n```js\n\tvar n = 1;\n\tsearch: while (true) {\n\t\tn += 1;\n\t\tfor (var i = 2; i <= Math.sqrt(n); i += 1)\n\t\t\tif (n  i == 0) %\n\t\t\t\tcontinue search;\n\t\t// found a prime\n\t\tpostMessage(n);\n\t}\n```\n\t主线程和工作线程通过onmessage()和postMessage()进行通信，子进程对象由send方法\n\t// parent.js\n```js\n\tvar cp = require('child_process');\n\tvar n = cp.fork(__dirname + '/sub.js');\n\tn.on('message', function (m) {\n\t\tconsole.log('PARENT got message:', m);\n\t});\n\tn.send({hello: 'world'});\n\t// sub.js\n\tprocess.on('message', function (m) {\n\t\tconsole.log('CHILD got message:', m);\n\t});\n\tprocess.send({foo: 'bar'});\n```\n\t//进程间通信原理\n\t实现进程间的技术有：管道，tcp，socket，共享内存，等。\n\t//句柄传递\n\t一个端口只能由一个工作进程监听，解决方案是有主进程监听一个80端口，然后\n\t分发到其他子线程去\n\n```js\n\t// parent.js\n\tvar child = require('child_process').fork('child.js');\n\t// Open up the server object and send the handle\n\tvar server = require('net').createServer();\n\tserver.on('connection', function (socket) {\n\t\tsocket.end('handled by parent\\n');\n\t});\n\tserver.listen(1337, function () {\n\t\tchild.send('server', server);\n\t});\n\t//child.js\n\tprocess.on('message', function (m, server) {\n\t\tif (m === 'server') {\n\t\t\tserver.on('connection', function (socket) {\n\t\t\t\tsocket.end('handled by child\\n');\n\t\t\t});\n\t\t}\n\t});\n\n\t//将服务发送到多个子进程实例\n\t//parent.js\n\tvar cp = require('child_process');\n\tvar child1 = cp.fork('child.js');\n\tvar child2 = cp.fork('child.js');\n\t// Open up the server object and send the handle\n\tvar server = require('net').createServer();\n\tserver.on('connection', function (socket) {\n\t\tsocket.end('handled by parent\\n');\n\t});\n\tserver.listen(1337, function () {\n\t\tchild1.send('server', server);\n\t\tchild2.send('server', server);\n\t});\n\t//child.js\n\tprocess.on('message', function (m, server) {\n\tif (m === 'server') {\n\t\tserver.on('connection', function (socket) {\n\t\t\tsocket.end('handled by child, pid is ' + process.pid + '\\n');\n\t\t});\n\t}\n\t})\n\t//最终版，请求全部由子进程处理，\n\t//parent,js\n\tvar cp = require('child_process');\n\tvar child1 = cp.fork('child.js');\n\tvar child2 = cp.fork('child.js');\n\t// Open up the server object and send the handle\n\tvar server = require('net').createServer();\n\tserver.listen(1337, function () {\n\t\tchild1.send('server', server);\n\t\tchild2.send('server', server);\n\t\tserver.close(); //关闭主线程的服务\n\t});\n\t//child.js\n\tvar http = require('http');\n\tvar server = http.createServer(function (req, res) {\n\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\tres.end('handled by child, pid is ' + process.pid + '\\n');\n\t});\n\tprocess.on('message', function (m, tcp) {\n\t\tif (m === 'server') {\n\t\t\ttcp.on('connection', function (socket) {\n\t\t\t\tserver.emit('connection', socket);\n\t\t\t});\n\t\t}\n\t});\n```\n\t<p>\n\tsend发送的句柄类型：\n\t\tnet.Socket。TCP\n\t\tnet.Server。TCP服务\n\n\t\tnet.Native。C++\n\t\tdgram.Socket。UDP\n\t\tdgram.Native。C++\n\t//进程事件\n\terror：\n\texit：\n\tclose：\n\tdisconnect：\n\t</p>\n```js\n\t//自动重启线程\n\t//master.js\n\tvar fork = require('child_process').fork;\n\tvar cpus = require('os').cpus();\n\tvar server = require('net').createServer();\n\tserver.listen(1337);\n\tvar workers = {};\n\tvar createWorker = function () {\n\tvar worker = fork(__dirname + '/worker.js');\n\t//退出时重新启动新的线程\n\tworker.on('exit', function () {\n\t\tconsole.log('Worker ' + worker.pid + ' exited.');\n\t\tdelete workers[worker.pid];\n\t\tcreateWorker();\n\t});\n\t// 句柄转发\n\tworker.send('server', server);\n\tworkers[worker.pid] = worker;\n\tconsole.log('Create worker. pid: ' + worker.pid);\n\t};\n\tfor (var i = 0; i < cpus.length; i++) {\n\tcreateWorker();\n\t}\n\t// 进程自己退出让所有工作进程退出\n\tprocess.on('exit', function () {\n\t\tfor (var pid in workers) {\n\t\t\tworkers[pid].kill();\n\t\t}\n\t});\n\t//work.js  考虑处理异常\n\tvar http = require('http');\n\tvar server = http.createServer(function (req, res) {\n\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\tres.end('handled by child, pid is ' + process.pid + '\\n');\n\t});\n\tvar worker;\n\tprocess.on('message', function (m, tcp) {\n\t\tif (m === 'server') {\n\t\t\tworker = tcp;\n\t\t\tworker.on('connection', function (socket) {\n\t\t\t\tserver.emit('connection', socket);\n\t\t\t});\n\t\t}\n\t});\n\tprocess.on('uncaughtException', function () {\n\t\tprocess.send({act: 'suicide'});\n\t// 停止接收新的连接\n\t\tworker.close(function () {\n\t// 连接断开后退出进程\n\t\t\tprocess.exit(1);\n\t\t});\n\t});\n```\n\n\n\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/node-notes.md","raw":"title: 深入浅出nodejs笔记\ndate: 2016-11-11 19:52:23\ntags: node\ncategories: 编程语言\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n    node学习重点，深入浅出nodejs学习笔记\n<!-- more -->\n<The rest of contents | 余下全文>\n### node简介：\n\t1. 异步IO，适合io密集型的\n\t2. 单线程，通过childnode实现多线程\n\t3. 跨平台，通过electron编写跨平台客户端\n\t4. 上手简单,功能强大\n### node模块\n\t1. node模块分为两类，一是node的内建模块（核心模块），二是用户编写的文件模块\n\t2. 核心模块在node编译时加载到内存，文件模块在运行时动态加载\n\t3. node的每一个文件模块都是一个对象\n\t4. 文件模块需要经过路径分析，文件定位，编译执行3个过程\n\t5. node对引入过的模块都进行缓存，require会优先使用缓存\n### 异步IO\n\t1. node中都是异步的，实现同步的话要通过回调函数或者同步框架\n\t2. 异步的方案：事件发布/事件监听，Promise/Deferred模式,流程控制库\n\t3. 事件监听模式：Node自身的events模块提供了简单的实现，具有addListener/on(). once(). remove\t\tListener(). removeAllListeners()和emit()方法。\n\t```js\n\temitter.on(\"event1\", function (message) {\n\t\tconsole.log(message);\n\t});\n\t// 发布\n\temitter.emit('event1', \"I am message!\");\n\t```\n### 内存控制\n\t1. 在node中内存限制为64位1.4G（32位0.7G）\n\t2. 限制内存的原因：V8做垃圾回收如果以1.5G为例，做一次小的垃圾回收需要50ms,做一次非增量式内存回收耗时1s以上\n\t3. node在启动时可以更改内存大小，--max-old-space-size=或者--max-new-space-size=\n\t4. v8的内存回收机制：内存分代为新生代（生命周期短）和老生代（生命周期长），\n\t5. 堆外内存不受内存限制，如buffer对象的使用\n### 理解buffer\n\n\n### 网络编程\n\t1. tcp服务\n\t\t服务端：\n```js\n\t\tvar net = require('net');\n\t\tvar server = net.createServer(function (socket) {\n\t\tsocket.on('data', function (data) {\n\t\t\tsocket.write(\"你好\");\n\t\t});\n\t\tsocket.on('end', function () {\n\t\t\tconsole.log('断开连接');\n\t\t});\n\t\tsocket.write(\"欢迎光临：\\n\");\n\t\t});\n\t\tserver.listen(8124, function () {\n\t\t\tconsole.log('server bound');\n\t\t});\n```\n\t\t客户端：\n```js\n\t\tvar net = require('net');\n\t\tvar client = net.connect({port: 8124}, function () { //'connect' listener\n\t\t\tconsole.log('client connected');\n\t\t\tclient.write('world!\\r\\n');\n\t\t});\n\t\tclient.on('data', function (data) {\n\t\t\tconsole.log(data.toString());\n\t\t\tclient.end();\n\t\t});\n\t\tclient.on('end', function () {\n\t\t\tconsole.log('client disconnected');\n\t\t});\n```\n\t2. udp服务\n\n```js\n\t\t// 服务端：\n\t\tvar dgram = require(\"dgram\");\n\t\tvar server = dgram.createSocket(\"udp4\");\n\t\tserver.on(\"message\", function (msg, rinfo) {\n\t\t\tconsole.log(\"server got: \" + msg + \" from \" +\n\t\t\trinfo.address + \":\" + rinfo.port);\n\t\t});\n\t\tserver.on(\"listening\", function () {\n\t\tvar address = server.address();\n\t\tconsole.log(\"server listening \" +\n\t\t\taddress.address + \":\" + address.port);\n\t\t});\n\t\tserver.bind(41234);\n\t\t// 客户端：\n\t\tvar dgram = require('dgram');\n\t\tvar message = new Buffer(”nodejs“);\n\t\tvar client = dgram.createSocket(\"udp4\");\n\t\tclient.send(message, 0, message.length, 41234, \"localhost\", function(err, bytes) {\n\t\t\tclient.close();\n\t\t});\n```\n\t3. http服务\n\n```js\n\t\t// 服务端：\n\t\tvar http = require('http');\n\t\thttp.createServer(function (req, res) {\n\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\t\tres.end('Hello World\\n');\n\t\t}).listen(1337, '127.0.0.1');\n\t\tconsole.log('Server running at http://127.0.0.1:1337/');\n\t\t// 客户端：\n\t\tvar options = {\n\t\t\thostname: '127.0.0.1',\n\t\t\tport: 1334,\n\t\t\tpath: '/',\n\t\t\tmethod: 'GET'\n\t\t};\n\t\tvar req = http.request(options, function(res) {\n\t\t\tconsole.log('STATUS: ' + res.statusCode);\n\t\t\tconsole.log('HEADERS: ' + JSON.stringify(res.headers));\n\t\t\tres.setEncoding('utf8');\n\t\t\tres.on('data', function (chunk) {\n\t\t\tconsole.log(chunk);\n\t\t\t});\n\t\t});\n\t\treq.end();\n```\n\t4. websocket服务\n```js\n\t\t// 客户端：\n\t\tvar socket = new WebSocket('ws://127.0.0.1:12010/updates');\n\t\tsocket.onopen = function () {\n\t\t\tsetInterval(function() {\n\t\t\tif (socket.bufferedAmount == 0)\n\t\t\t\tsocket.send(getUpdateData());\n\t\t\t}, 50);\n\t\t};\n\t\tsocket.onmessage = function (event) {\n\t\t\t// TODO：event.data\n\t\t};\n\t\t// <!-- 模拟浏览器： -->\n\n\t\tvar WebSocket = function (url) {\n\t\t// 代码?解析ws://127.0.0.1:12010/updates\n\t\t\tthis.options = parseUrl(url);\n\t\t\tthis.connect();\n\t\t};\n\t\tWebSocket.prototype.onopen = function () {\n\t\t// TODO\n\t\t};\n\t\tWebSocket.prototype.setSocket = function (socket) {\n\t\tthis.socket = socket;\n\t\t};\n\t\tWebSocket.prototype.connect = function () {\n\t\t\tvar this = that;\n\t\t\tvar key = new Buffer(this.options.protocolVersion + '-' + Date.now()).toString('base64');\n\t\t\tvar shasum = crypto.createHash('sha1');\n\t\t\tvar expected = shasum.update(key + '258EAFA5-E914-47DA-95CA-C5AB0DC85B11').digest('base64');\n\t\t\tvar options = {\n\t\t\t\tport: this.options.port, //12010\n\t\t\t\thost: this.options.hostname, // 127.0.0.1\n\t\t\theaders: {\n\t\t\t\t'Connection': 'Upgrade',\n\t\t\t\t'Upgrade': 'websocket',\n\t\t\t\t'Sec-WebSocket-Version': this.options.protocolVersion,\n\t\t\t\t'Sec-WebSocket-Key': key\n\t\t\t}\n\t\t};\n\t\tvar req = http.request(options);\n\t\t\treq.end();\n\t\t\treq.on('upgrade', function(res, socket, upgradeHead) {\n\t\t\t// 连接成功\n\t\t\tthat.setSocket(socket);\n\t\t\t// 触发open事件\n\t\t\tthat.onopen();\n\t\t});\n\t\t};\n```\n\n```js\n\t\t// 服务端响应：\n\t\tvar server = http.createServer(function (req, res) {\n\t\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\t\tres.end('Hello World\\n');\n\t\t});\n\t\tserver.listen(12010);\n\t\t// 在收到upgrade请求之后，告知客户端允许切换协议\n\t\tserver.on('upgrade', function (req, socket, upgradeHead) {\n\t\t\tvar head = new Buffer(upgradeHead.length);\n\t\t\tupgradeHead.copy(head);\n\t\t\tvar key = req.headers['sec-websocket-key'];\n\t\t\tvar shasum = crypto.createHash('sha1');\n\t\t\tkey = shasum.update(key + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\").digest('base64');\n\t\t\tvar headers = [\n\t\t\t\t'HTTP/1.1 101 Switching Protocols',\n\t\t\t\t'Upgrade: websocket',\n\t\t\t\t'Connection: Upgrade',\n\t\t\t\t'Sec-WebSocket-Accept: ' + key,\n\t\t\t\t'Sec-WebSocket-Protocol: ' + protocol\n\t\t\t];\n\t\t\t// 让数据立即发送\n\t\t\tsocket.setNoDelay(true);\n\t\t\tsocket.write(headers.concat('', '').join('\\r\\n'));\n\t\t\t// 建立服务器端WebSocket连接\n\t\t\tvar websocket = new WebSocket();\n\t\t\twebsocket.setSocket(socket);\n\t\t});\n```\n\t\t5. TLS服务（安全方面）\n```js\n\t\t// 服务端：\n\t\tvar tls = require('tls');\n\t\tvar fs = require('fs');\n\t\tvar options = {\n\t\t\tkey: fs.readFileSync('./keys/server.key'),\n\t\t\tcert: fs.readFileSync('./keys/server.crt'),\n\t\t\trequestCert: true,\n\t\t\tca: [ fs.readFileSync('./keys/ca.crt') ]\n\t\t};\n\t\tvar server = tls.createServer(options, function (stream) {\n\t\t\tconsole.log('server connected', stream.authorized ? 'authorized' : 'unauthorized');\n\t\t\tstream.write(\"welcome!\\n\");\n\t\t\tstream.setEncoding('utf8');\n\t\t\tstream.pipe(stream);\n\t\t});\n\t\tserver.listen(8000, function() {\n\t\t\tconsole.log('server bound');\n\t\t});\n```\n\t\t\t// 测试证书是否正常\n\t\t\t`$ openssl s_client -connect 127.0.0.1:8000`\n\n\t\t\t客户端：\n\t\t\t// 创建私钥\n\t\t\t`$ openssl genrsa -out client.key 1024`\n\t\t\t// 生成CSR\n\t\t\t`$ openssl req -new -key client.key -out client.csr`\n\t\t\t// 生成签名证书\n\t\t\t`$ openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in client.csr -out client.crt`\n```js\n\t\t\tvar tls = require('tls');\n\t\t\tvar fs = require('fs');\n\t\t\tvar options = {\n\t\t\t\tkey: fs.readFileSync('./keys/client.key'),\n\t\t\t\tcert: fs.readFileSync('./keys/client.crt'),\n\t\t\t\tca: [ fs.readFileSync('./keys/ca.crt') ]\n\t\t\t};\n\t\t\tvar stream = tls.connect(8000, options, function () {\n\t\t\t\tconsole.log('client connected', stream.authorized ? 'authorized' : 'unauthorized');\n\t\t\t\tprocess.stdin.pipe(stream);\n\t\t\t});\n\t\t\tstream.setEncoding('utf8');\n\t\t\tstream.on('data', function(data) {\n\t\t\t\tconsole.log(data);\n\t\t\t});\n\t\t\tstream.on('end', function() {\n\t\t\t\tserver.close();\n\t\t\t});\n```\n\t\t6. HTTPS服务\n\t\t\t服务端：\n```js\n\t\t\tvar https = require('https');\n\t\t\tvar fs = require('fs');\n\t\t\tvar options = {\n\t\t\t\tkey: fs.readFileSync('./keys/server.key'),\n\t\t\t\tcert: fs.readFileSync('./keys/server.crt')\n\t\t\t};\n\t\t\thttps.createServer(options, function (req, res) {\n\t\t\tres.writeHead(200);\n\t\t\t\tres.end(\"hello world\\n\");\n\t\t\t}).listen(8000);\n\t\t\t```\n\t\t\t客户端：\n```js\n\t\t\tvar https = require('https');\n\t\t\tvar fs = require('fs');\n\t\t\tvar options = {\n\t\t\t\thostname: 'localhost',\n\t\t\t\tport: 8000,\n\t\t\t\tpath: '/',\n\t\t\t\tmethod: 'GET',\n\t\t\t\tkey: fs.readFileSync('./keys/client.key'),\n\t\t\t\tcert: fs.readFileSync('./keys/client.crt'),\n\t\t\t\tca: [fs.readFileSync('./keys/ca.crt')]\n\t\t\t};\n\t\t\toptions.agent = new https.Agent(options);\n\t\t\tvar req = https.request(options, function(res) {\n\t\t\t\tres.setEncoding('utf-8');\n\t\t\t\tres.on('data', function(d) {\n\t\t\t\t\tconsole.log(d);\n\t\t\t\t});\n\t\t\t});\n\t\t\treq.end();\n\t\t\treq.on('error', function(e) {\n\t\t\t\tconsole.log(e);\n\t\t\t});\n```\n### 玩转进程\n\tnode提供了child_process.fork()实现进程的复制\n```js\n\tvar http = require('http');\n\thttp.createServer(function (req, res) {\n\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\tres.end('Hello World\\n');\n\t}).listen(Math.round((1 + Math.random()) * 1000), '127.0.0.1');\n```\n\t运行node worker.js，监听?1000到2000之间的端口。\n\n\t以下是master.js\n```js\n\tvar fork = require('child_process').fork;\n\tvar cpus = require('os').cpus();\n\tfor (var i = 0; i < cpus.length; i++) {\n\t\tfork('./worker.js');\n\t}\n```\n\t这是著名的master-worker模式，主从模式\n\n\t//创建子进程\n\tchild_process模块提供了四个方法创建子进程\n\tspawn()\t\t执行命令\n\texec()\t\t\t执行命令\t\t可设置时间\n\texecFile()\t\t执行文件\t\t可设置时间\n\tfork()\t\t\t执行javascript\n\t后面3中方法都是spawn()的延伸\n\t//实例work.js\n```js\n\tvar cp = require('child_process');\n\tcp.spawn('node', ['worker.js']);\n\tcp.exec('node worker.js', function (err, stdout, stderr) {\n\t// some code\n\t});\n\tcp.execFile('worker.js', function (err, stdout, stderr) {\n\t// some code\n\t});\n\tcp.fork('./worker.js')\n```\n\t//进程间通信\n\t在浏览器中，javascript主线程和UI渲染是一个线程，渲染UI和执行js是互相阻塞的\n\thtml5提出来webworker API，创建工作线程在后台运行\n```js\n\tvar worker = new Worker('worker.js');\n\tworker.onmessage = function (event) {\n\t\tdocument.getElementById('result').textContent = event.data;\n\t};\n```\n\twork.js代码如下\n```js\n\tvar n = 1;\n\tsearch: while (true) {\n\t\tn += 1;\n\t\tfor (var i = 2; i <= Math.sqrt(n); i += 1)\n\t\t\tif (n  i == 0) %\n\t\t\t\tcontinue search;\n\t\t// found a prime\n\t\tpostMessage(n);\n\t}\n```\n\t主线程和工作线程通过onmessage()和postMessage()进行通信，子进程对象由send方法\n\t// parent.js\n```js\n\tvar cp = require('child_process');\n\tvar n = cp.fork(__dirname + '/sub.js');\n\tn.on('message', function (m) {\n\t\tconsole.log('PARENT got message:', m);\n\t});\n\tn.send({hello: 'world'});\n\t// sub.js\n\tprocess.on('message', function (m) {\n\t\tconsole.log('CHILD got message:', m);\n\t});\n\tprocess.send({foo: 'bar'});\n```\n\t//进程间通信原理\n\t实现进程间的技术有：管道，tcp，socket，共享内存，等。\n\t//句柄传递\n\t一个端口只能由一个工作进程监听，解决方案是有主进程监听一个80端口，然后\n\t分发到其他子线程去\n\n```js\n\t// parent.js\n\tvar child = require('child_process').fork('child.js');\n\t// Open up the server object and send the handle\n\tvar server = require('net').createServer();\n\tserver.on('connection', function (socket) {\n\t\tsocket.end('handled by parent\\n');\n\t});\n\tserver.listen(1337, function () {\n\t\tchild.send('server', server);\n\t});\n\t//child.js\n\tprocess.on('message', function (m, server) {\n\t\tif (m === 'server') {\n\t\t\tserver.on('connection', function (socket) {\n\t\t\t\tsocket.end('handled by child\\n');\n\t\t\t});\n\t\t}\n\t});\n\n\t//将服务发送到多个子进程实例\n\t//parent.js\n\tvar cp = require('child_process');\n\tvar child1 = cp.fork('child.js');\n\tvar child2 = cp.fork('child.js');\n\t// Open up the server object and send the handle\n\tvar server = require('net').createServer();\n\tserver.on('connection', function (socket) {\n\t\tsocket.end('handled by parent\\n');\n\t});\n\tserver.listen(1337, function () {\n\t\tchild1.send('server', server);\n\t\tchild2.send('server', server);\n\t});\n\t//child.js\n\tprocess.on('message', function (m, server) {\n\tif (m === 'server') {\n\t\tserver.on('connection', function (socket) {\n\t\t\tsocket.end('handled by child, pid is ' + process.pid + '\\n');\n\t\t});\n\t}\n\t})\n\t//最终版，请求全部由子进程处理，\n\t//parent,js\n\tvar cp = require('child_process');\n\tvar child1 = cp.fork('child.js');\n\tvar child2 = cp.fork('child.js');\n\t// Open up the server object and send the handle\n\tvar server = require('net').createServer();\n\tserver.listen(1337, function () {\n\t\tchild1.send('server', server);\n\t\tchild2.send('server', server);\n\t\tserver.close(); //关闭主线程的服务\n\t});\n\t//child.js\n\tvar http = require('http');\n\tvar server = http.createServer(function (req, res) {\n\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\tres.end('handled by child, pid is ' + process.pid + '\\n');\n\t});\n\tprocess.on('message', function (m, tcp) {\n\t\tif (m === 'server') {\n\t\t\ttcp.on('connection', function (socket) {\n\t\t\t\tserver.emit('connection', socket);\n\t\t\t});\n\t\t}\n\t});\n```\n\t<p>\n\tsend发送的句柄类型：\n\t\tnet.Socket。TCP\n\t\tnet.Server。TCP服务\n\n\t\tnet.Native。C++\n\t\tdgram.Socket。UDP\n\t\tdgram.Native。C++\n\t//进程事件\n\terror：\n\texit：\n\tclose：\n\tdisconnect：\n\t</p>\n```js\n\t//自动重启线程\n\t//master.js\n\tvar fork = require('child_process').fork;\n\tvar cpus = require('os').cpus();\n\tvar server = require('net').createServer();\n\tserver.listen(1337);\n\tvar workers = {};\n\tvar createWorker = function () {\n\tvar worker = fork(__dirname + '/worker.js');\n\t//退出时重新启动新的线程\n\tworker.on('exit', function () {\n\t\tconsole.log('Worker ' + worker.pid + ' exited.');\n\t\tdelete workers[worker.pid];\n\t\tcreateWorker();\n\t});\n\t// 句柄转发\n\tworker.send('server', server);\n\tworkers[worker.pid] = worker;\n\tconsole.log('Create worker. pid: ' + worker.pid);\n\t};\n\tfor (var i = 0; i < cpus.length; i++) {\n\tcreateWorker();\n\t}\n\t// 进程自己退出让所有工作进程退出\n\tprocess.on('exit', function () {\n\t\tfor (var pid in workers) {\n\t\t\tworkers[pid].kill();\n\t\t}\n\t});\n\t//work.js  考虑处理异常\n\tvar http = require('http');\n\tvar server = http.createServer(function (req, res) {\n\t\tres.writeHead(200, {'Content-Type': 'text/plain'});\n\t\tres.end('handled by child, pid is ' + process.pid + '\\n');\n\t});\n\tvar worker;\n\tprocess.on('message', function (m, tcp) {\n\t\tif (m === 'server') {\n\t\t\tworker = tcp;\n\t\t\tworker.on('connection', function (socket) {\n\t\t\t\tserver.emit('connection', socket);\n\t\t\t});\n\t\t}\n\t});\n\tprocess.on('uncaughtException', function () {\n\t\tprocess.send({act: 'suicide'});\n\t// 停止接收新的连接\n\t\tworker.close(function () {\n\t// 连接断开后退出进程\n\t\t\tprocess.exit(1);\n\t\t});\n\t});\n```\n\n\n\n\n\n\n\n\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"node-notes","published":1,"updated":"2016-11-27T07:19:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d8z001vohzj1ehh03fg","content":"<p><strong> 深入浅出Nodejs笔记：</strong> <Excerpt in index | 首页摘要><br>    node学习重点，深入浅出nodejs学习笔记<br><a id=\"more\"></a></p>\n<p><The rest of contents | 余下全文></p>\n<h3 id=\"node简介：\"><a href=\"#node简介：\" class=\"headerlink\" title=\"node简介：\"></a>node简介：</h3><pre><code>1. 异步IO，适合io密集型的\n2. 单线程，通过childnode实现多线程\n3. 跨平台，通过electron编写跨平台客户端\n4. 上手简单,功能强大\n</code></pre><h3 id=\"node模块\"><a href=\"#node模块\" class=\"headerlink\" title=\"node模块\"></a>node模块</h3><pre><code>1. node模块分为两类，一是node的内建模块（核心模块），二是用户编写的文件模块\n2. 核心模块在node编译时加载到内存，文件模块在运行时动态加载\n3. node的每一个文件模块都是一个对象\n4. 文件模块需要经过路径分析，文件定位，编译执行3个过程\n5. node对引入过的模块都进行缓存，require会优先使用缓存\n</code></pre><h3 id=\"异步IO\"><a href=\"#异步IO\" class=\"headerlink\" title=\"异步IO\"></a>异步IO</h3><pre><code>1. node中都是异步的，实现同步的话要通过回调函数或者同步框架\n2. 异步的方案：事件发布/事件监听，Promise/Deferred模式,流程控制库\n3. 事件监听模式：Node自身的events模块提供了简单的实现，具有addListener/on(). once(). remove        Listener(). removeAllListeners()和emit()方法。\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">emitter.on(<span class=\"string\">\"event1\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">message</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(message);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 发布</span></div><div class=\"line\">emitter.emit(<span class=\"string\">'event1'</span>, <span class=\"string\">\"I am message!\"</span>);</div></pre></td></tr></table></figure>\n</code></pre><h3 id=\"内存控制\"><a href=\"#内存控制\" class=\"headerlink\" title=\"内存控制\"></a>内存控制</h3><pre><code>1. 在node中内存限制为64位1.4G（32位0.7G）\n2. 限制内存的原因：V8做垃圾回收如果以1.5G为例，做一次小的垃圾回收需要50ms,做一次非增量式内存回收耗时1s以上\n3. node在启动时可以更改内存大小，--max-old-space-size=或者--max-new-space-size=\n4. v8的内存回收机制：内存分代为新生代（生命周期短）和老生代（生命周期长），\n5. 堆外内存不受内存限制，如buffer对象的使用\n</code></pre><h3 id=\"理解buffer\"><a href=\"#理解buffer\" class=\"headerlink\" title=\"理解buffer\"></a>理解buffer</h3><h3 id=\"网络编程\"><a href=\"#网络编程\" class=\"headerlink\" title=\"网络编程\"></a>网络编程</h3><pre><code>1. tcp服务\n    服务端：\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = net.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">socket.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">\tsocket.write(<span class=\"string\">\"你好\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">socket.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'断开连接'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">socket.write(<span class=\"string\">\"欢迎光临：\\n\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">8124</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'server bound'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>客户端：\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> client = net.connect(&#123;port: <span class=\"number\">8124</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//'connect' listener</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'client connected'</span>);</div><div class=\"line\">\tclient.write(<span class=\"string\">'world!\\r\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">client.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(data.toString());</div><div class=\"line\">\tclient.end();</div><div class=\"line\">&#125;);</div><div class=\"line\">client.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'client disconnected'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>2. udp服务\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 服务端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> dgram = <span class=\"built_in\">require</span>(<span class=\"string\">\"dgram\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = dgram.createSocket(<span class=\"string\">\"udp4\"</span>);</div><div class=\"line\">server.on(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg, rinfo</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"server got: \"</span> + msg + <span class=\"string\">\" from \"</span> +</div><div class=\"line\">\trinfo.address + <span class=\"string\">\":\"</span> + rinfo.port);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.on(<span class=\"string\">\"listening\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">var</span> address = server.address();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"server listening \"</span> +</div><div class=\"line\">\taddress.address + <span class=\"string\">\":\"</span> + address.port);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.bind(<span class=\"number\">41234</span>);</div><div class=\"line\"><span class=\"comment\">// 客户端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> dgram = <span class=\"built_in\">require</span>(<span class=\"string\">'dgram'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"keyword\">new</span> Buffer(”nodejs“);</div><div class=\"line\"><span class=\"keyword\">var</span> client = dgram.createSocket(<span class=\"string\">\"udp4\"</span>);</div><div class=\"line\">client.send(message, <span class=\"number\">0</span>, message.length, <span class=\"number\">41234</span>, <span class=\"string\">\"localhost\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, bytes</span>) </span>&#123;</div><div class=\"line\">\tclient.close();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>3. http服务\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 服务端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'Hello World\\n'</span>);</div><div class=\"line\">&#125;).listen(<span class=\"number\">1337</span>, <span class=\"string\">'127.0.0.1'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Server running at http://127.0.0.1:1337/'</span>);</div><div class=\"line\"><span class=\"comment\">// 客户端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\thostname: <span class=\"string\">'127.0.0.1'</span>,</div><div class=\"line\">\tport: <span class=\"number\">1334</span>,</div><div class=\"line\">\tpath: <span class=\"string\">'/'</span>,</div><div class=\"line\">\tmethod: <span class=\"string\">'GET'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> req = http.request(options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'STATUS: '</span> + res.statusCode);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'HEADERS: '</span> + <span class=\"built_in\">JSON</span>.stringify(res.headers));</div><div class=\"line\">\tres.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">\tres.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">chunk</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(chunk);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">req.end();</div></pre></td></tr></table></figure>\n<pre><code>4. websocket服务\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 客户端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> socket = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">'ws://127.0.0.1:12010/updates'</span>);</div><div class=\"line\">socket.onopen = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tsetInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (socket.bufferedAmount == <span class=\"number\">0</span>)</div><div class=\"line\">\t\tsocket.send(getUpdateData());</div><div class=\"line\">\t&#125;, <span class=\"number\">50</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">socket.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// TODO：event.data</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// &lt;!-- 模拟浏览器： --&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> WebSocket = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// 代码?解析ws://127.0.0.1:12010/updates</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.options = parseUrl(url);</div><div class=\"line\">\t<span class=\"keyword\">this</span>.connect();</div><div class=\"line\">&#125;;</div><div class=\"line\">WebSocket.prototype.onopen = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// TODO</span></div><div class=\"line\">&#125;;</div><div class=\"line\">WebSocket.prototype.setSocket = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">this</span>.socket = socket;</div><div class=\"line\">&#125;;</div><div class=\"line\">WebSocket.prototype.connect = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> <span class=\"keyword\">this</span> = that;</div><div class=\"line\">\t<span class=\"keyword\">var</span> key = <span class=\"keyword\">new</span> Buffer(<span class=\"keyword\">this</span>.options.protocolVersion + <span class=\"string\">'-'</span> + <span class=\"built_in\">Date</span>.now()).toString(<span class=\"string\">'base64'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> shasum = crypto.createHash(<span class=\"string\">'sha1'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> expected = shasum.update(key + <span class=\"string\">'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'</span>).digest(<span class=\"string\">'base64'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\t\tport: <span class=\"keyword\">this</span>.options.port, <span class=\"comment\">//12010</span></div><div class=\"line\">\t\thost: <span class=\"keyword\">this</span>.options.hostname, <span class=\"comment\">// 127.0.0.1</span></div><div class=\"line\">\theaders: &#123;</div><div class=\"line\">\t\t<span class=\"string\">'Connection'</span>: <span class=\"string\">'Upgrade'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'Upgrade'</span>: <span class=\"string\">'websocket'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'Sec-WebSocket-Version'</span>: <span class=\"keyword\">this</span>.options.protocolVersion,</div><div class=\"line\">\t\t<span class=\"string\">'Sec-WebSocket-Key'</span>: key</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> req = http.request(options);</div><div class=\"line\">\treq.end();</div><div class=\"line\">\treq.on(<span class=\"string\">'upgrade'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res, socket, upgradeHead</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 连接成功</span></div><div class=\"line\">\tthat.setSocket(socket);</div><div class=\"line\">\t<span class=\"comment\">// 触发open事件</span></div><div class=\"line\">\tthat.onopen();</div><div class=\"line\">&#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 服务端响应：</span></div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">\tres.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'Hello World\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">12010</span>);</div><div class=\"line\"><span class=\"comment\">// 在收到upgrade请求之后，告知客户端允许切换协议</span></div><div class=\"line\">server.on(<span class=\"string\">'upgrade'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, socket, upgradeHead</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> head = <span class=\"keyword\">new</span> Buffer(upgradeHead.length);</div><div class=\"line\">\tupgradeHead.copy(head);</div><div class=\"line\">\t<span class=\"keyword\">var</span> key = req.headers[<span class=\"string\">'sec-websocket-key'</span>];</div><div class=\"line\">\t<span class=\"keyword\">var</span> shasum = crypto.createHash(<span class=\"string\">'sha1'</span>);</div><div class=\"line\">\tkey = shasum.update(key + <span class=\"string\">\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"</span>).digest(<span class=\"string\">'base64'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> headers = [</div><div class=\"line\">\t\t<span class=\"string\">'HTTP/1.1 101 Switching Protocols'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'Upgrade: websocket'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'Connection: Upgrade'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'Sec-WebSocket-Accept: '</span> + key,</div><div class=\"line\">\t\t<span class=\"string\">'Sec-WebSocket-Protocol: '</span> + protocol</div><div class=\"line\">\t];</div><div class=\"line\">\t<span class=\"comment\">// 让数据立即发送</span></div><div class=\"line\">\tsocket.setNoDelay(<span class=\"literal\">true</span>);</div><div class=\"line\">\tsocket.write(headers.concat(<span class=\"string\">''</span>, <span class=\"string\">''</span>).join(<span class=\"string\">'\\r\\n'</span>));</div><div class=\"line\">\t<span class=\"comment\">// 建立服务器端WebSocket连接</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> websocket = <span class=\"keyword\">new</span> WebSocket();</div><div class=\"line\">\twebsocket.setSocket(socket);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>5. TLS服务（安全方面）\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 服务端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> tls = <span class=\"built_in\">require</span>(<span class=\"string\">'tls'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\tkey: fs.readFileSync(<span class=\"string\">'./keys/server.key'</span>),</div><div class=\"line\">\tcert: fs.readFileSync(<span class=\"string\">'./keys/server.crt'</span>),</div><div class=\"line\">\trequestCert: <span class=\"literal\">true</span>,</div><div class=\"line\">\tca: [ fs.readFileSync(<span class=\"string\">'./keys/ca.crt'</span>) ]</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> server = tls.createServer(options, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stream</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'server connected'</span>, stream.authorized ? <span class=\"string\">'authorized'</span> : <span class=\"string\">'unauthorized'</span>);</div><div class=\"line\">\tstream.write(<span class=\"string\">\"welcome!\\n\"</span>);</div><div class=\"line\">\tstream.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">\tstream.pipe(stream);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">8000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'server bound'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>// 测试证书是否正常\n`$ openssl s_client -connect 127.0.0.1:8000`\n\n客户端：\n// 创建私钥\n`$ openssl genrsa -out client.key 1024`\n// 生成CSR\n`$ openssl req -new -key client.key -out client.csr`\n// 生成签名证书\n`$ openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in client.csr -out client.crt`\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tls = <span class=\"built_in\">require</span>(<span class=\"string\">'tls'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\tkey: fs.readFileSync(<span class=\"string\">'./keys/client.key'</span>),</div><div class=\"line\">\tcert: fs.readFileSync(<span class=\"string\">'./keys/client.crt'</span>),</div><div class=\"line\">\tca: [ fs.readFileSync(<span class=\"string\">'./keys/ca.crt'</span>) ]</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> stream = tls.connect(<span class=\"number\">8000</span>, options, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'client connected'</span>, stream.authorized ? <span class=\"string\">'authorized'</span> : <span class=\"string\">'unauthorized'</span>);</div><div class=\"line\">\tprocess.stdin.pipe(stream);</div><div class=\"line\">&#125;);</div><div class=\"line\">stream.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">stream.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;);</div><div class=\"line\">stream.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tserver.close();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>6. HTTPS服务\n    服务端：\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\tkey: fs.readFileSync(<span class=\"string\">'./keys/server.key'</span>),</div><div class=\"line\">\tcert: fs.readFileSync(<span class=\"string\">'./keys/server.crt'</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\">https.createServer(options, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">res.writeHead(<span class=\"number\">200</span>);</div><div class=\"line\">\tres.end(<span class=\"string\">\"hello world\\n\"</span>);</div><div class=\"line\">&#125;).listen(<span class=\"number\">8000</span>);</div></pre></td></tr></table></figure>\n<pre><code>客户端：\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\thostname: <span class=\"string\">'localhost'</span>,</div><div class=\"line\">\tport: <span class=\"number\">8000</span>,</div><div class=\"line\">\tpath: <span class=\"string\">'/'</span>,</div><div class=\"line\">\tmethod: <span class=\"string\">'GET'</span>,</div><div class=\"line\">\tkey: fs.readFileSync(<span class=\"string\">'./keys/client.key'</span>),</div><div class=\"line\">\tcert: fs.readFileSync(<span class=\"string\">'./keys/client.crt'</span>),</div><div class=\"line\">\tca: [fs.readFileSync(<span class=\"string\">'./keys/ca.crt'</span>)]</div><div class=\"line\">&#125;;</div><div class=\"line\">options.agent = <span class=\"keyword\">new</span> https.Agent(options);</div><div class=\"line\"><span class=\"keyword\">var</span> req = https.request(options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">\tres.setEncoding(<span class=\"string\">'utf-8'</span>);</div><div class=\"line\">\tres.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(d);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">req.end();</div><div class=\"line\">req.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(e);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"玩转进程\"><a href=\"#玩转进程\" class=\"headerlink\" title=\"玩转进程\"></a>玩转进程</h3><pre><code>node提供了child_process.fork()实现进程的复制\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">\tres.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'Hello World\\n'</span>);</div><div class=\"line\">&#125;).listen(<span class=\"built_in\">Math</span>.round((<span class=\"number\">1</span> + <span class=\"built_in\">Math</span>.random()) * <span class=\"number\">1000</span>), <span class=\"string\">'127.0.0.1'</span>);</div></pre></td></tr></table></figure>\n<pre><code>运行node worker.js，监听?1000到2000之间的端口。\n\n以下是master.js\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fork = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).fork;</div><div class=\"line\"><span class=\"keyword\">var</span> cpus = <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>).cpus();</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; cpus.length; i++) &#123;</div><div class=\"line\">\tfork(<span class=\"string\">'./worker.js'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>这是著名的master-worker模式，主从模式\n\n//创建子进程\nchild_process模块提供了四个方法创建子进程\nspawn()        执行命令\nexec()            执行命令        可设置时间\nexecFile()        执行文件        可设置时间\nfork()            执行javascript\n后面3中方法都是spawn()的延伸\n//实例work.js\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cp = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\">cp.spawn(<span class=\"string\">'node'</span>, [<span class=\"string\">'worker.js'</span>]);</div><div class=\"line\">cp.exec(<span class=\"string\">'node worker.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, stdout, stderr</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// some code</span></div><div class=\"line\">&#125;);</div><div class=\"line\">cp.execFile(<span class=\"string\">'worker.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, stdout, stderr</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// some code</span></div><div class=\"line\">&#125;);</div><div class=\"line\">cp.fork(<span class=\"string\">'./worker.js'</span>)</div></pre></td></tr></table></figure>\n<pre><code>//进程间通信\n在浏览器中，javascript主线程和UI渲染是一个线程，渲染UI和执行js是互相阻塞的\nhtml5提出来webworker API，创建工作线程在后台运行\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'worker.js'</span>);</div><div class=\"line\">worker.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'result'</span>).textContent = event.data;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<pre><code>work.js代码如下\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">1</span>;</div><div class=\"line\">search: <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">\tn += <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"built_in\">Math</span>.sqrt(n); i += <span class=\"number\">1</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n  i == <span class=\"number\">0</span>) %</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span> search;</div><div class=\"line\">\t<span class=\"comment\">// found a prime</span></div><div class=\"line\">\tpostMessage(n);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>主线程和工作线程通过onmessage()和postMessage()进行通信，子进程对象由send方法\n// parent.js\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cp = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> n = cp.fork(__dirname + <span class=\"string\">'/sub.js'</span>);</div><div class=\"line\">n.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'PARENT got message:'</span>, m);</div><div class=\"line\">&#125;);</div><div class=\"line\">n.send(&#123;hello: <span class=\"string\">'world'</span>&#125;);</div><div class=\"line\"><span class=\"comment\">// sub.js</span></div><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'CHILD got message:'</span>, m);</div><div class=\"line\">&#125;);</div><div class=\"line\">process.send(&#123;foo: <span class=\"string\">'bar'</span>&#125;);</div></pre></td></tr></table></figure>\n<pre><code>//进程间通信原理\n实现进程间的技术有：管道，tcp，socket，共享内存，等。\n//句柄传递\n一个端口只能由一个工作进程监听，解决方案是有主进程监听一个80端口，然后\n分发到其他子线程去\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// parent.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).fork(<span class=\"string\">'child.js'</span>);</div><div class=\"line\"><span class=\"comment\">// Open up the server object and send the handle</span></div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>).createServer();</div><div class=\"line\">server.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\tsocket.end(<span class=\"string\">'handled by parent\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">1337</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tchild.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//child.js</span></div><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m, server</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (m === <span class=\"string\">'server'</span>) &#123;</div><div class=\"line\">\t\tserver.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\t\t\tsocket.end(<span class=\"string\">'handled by child\\n'</span>);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将服务发送到多个子进程实例</span></div><div class=\"line\"><span class=\"comment\">//parent.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> cp = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> child1 = cp.fork(<span class=\"string\">'child.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> child2 = cp.fork(<span class=\"string\">'child.js'</span>);</div><div class=\"line\"><span class=\"comment\">// Open up the server object and send the handle</span></div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>).createServer();</div><div class=\"line\">server.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\tsocket.end(<span class=\"string\">'handled by parent\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">1337</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tchild1.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">\tchild2.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//child.js</span></div><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m, server</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">if</span> (m === <span class=\"string\">'server'</span>) &#123;</div><div class=\"line\">\tserver.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\t\tsocket.end(<span class=\"string\">'handled by child, pid is '</span> + process.pid + <span class=\"string\">'\\n'</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//最终版，请求全部由子进程处理，</span></div><div class=\"line\"><span class=\"comment\">//parent,js</span></div><div class=\"line\"><span class=\"keyword\">var</span> cp = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> child1 = cp.fork(<span class=\"string\">'child.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> child2 = cp.fork(<span class=\"string\">'child.js'</span>);</div><div class=\"line\"><span class=\"comment\">// Open up the server object and send the handle</span></div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>).createServer();</div><div class=\"line\">server.listen(<span class=\"number\">1337</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tchild1.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">\tchild2.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">\tserver.close(); <span class=\"comment\">//关闭主线程的服务</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//child.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">\tres.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'handled by child, pid is '</span> + process.pid + <span class=\"string\">'\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m, tcp</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (m === <span class=\"string\">'server'</span>) &#123;</div><div class=\"line\">\t\ttcp.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\t\t\tserver.emit(<span class=\"string\">'connection'</span>, socket);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>&lt;p&gt;\nsend发送的句柄类型：\n    net.Socket。TCP\n    net.Server。TCP服务\n\n    net.Native。C++\n    dgram.Socket。UDP\n    dgram.Native。C++\n//进程事件\nerror：\nexit：\nclose：\ndisconnect：\n&lt;/p&gt;\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//自动重启线程</span></div><div class=\"line\"><span class=\"comment\">//master.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> fork = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).fork;</div><div class=\"line\"><span class=\"keyword\">var</span> cpus = <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>).cpus();</div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>).createServer();</div><div class=\"line\">server.listen(<span class=\"number\">1337</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> workers = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> createWorker = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">var</span> worker = fork(__dirname + <span class=\"string\">'/worker.js'</span>);</div><div class=\"line\"><span class=\"comment\">//退出时重新启动新的线程</span></div><div class=\"line\">worker.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Worker '</span> + worker.pid + <span class=\"string\">' exited.'</span>);</div><div class=\"line\">\t<span class=\"keyword\">delete</span> workers[worker.pid];</div><div class=\"line\">\tcreateWorker();</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 句柄转发</span></div><div class=\"line\">worker.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">workers[worker.pid] = worker;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Create worker. pid: '</span> + worker.pid);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; cpus.length; i++) &#123;</div><div class=\"line\">createWorker();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 进程自己退出让所有工作进程退出</span></div><div class=\"line\">process.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> pid <span class=\"keyword\">in</span> workers) &#123;</div><div class=\"line\">\t\tworkers[pid].kill();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//work.js  考虑处理异常</span></div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">\tres.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'handled by child, pid is '</span> + process.pid + <span class=\"string\">'\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> worker;</div><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m, tcp</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (m === <span class=\"string\">'server'</span>) &#123;</div><div class=\"line\">\t\tworker = tcp;</div><div class=\"line\">\t\tworker.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\t\t\tserver.emit(<span class=\"string\">'connection'</span>, socket);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">process.on(<span class=\"string\">'uncaughtException'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tprocess.send(&#123;act: <span class=\"string\">'suicide'</span>&#125;);</div><div class=\"line\"><span class=\"comment\">// 停止接收新的连接</span></div><div class=\"line\">\tworker.close(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// 连接断开后退出进程</span></div><div class=\"line\">\t\tprocess.exit(<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> 深入浅出Nodejs笔记：</strong> <Excerpt in index | 首页摘要><br>    node学习重点，深入浅出nodejs学习笔记<br>","more":"</p>\n<p><The rest of contents | 余下全文></p>\n<h3 id=\"node简介：\"><a href=\"#node简介：\" class=\"headerlink\" title=\"node简介：\"></a>node简介：</h3><pre><code>1. 异步IO，适合io密集型的\n2. 单线程，通过childnode实现多线程\n3. 跨平台，通过electron编写跨平台客户端\n4. 上手简单,功能强大\n</code></pre><h3 id=\"node模块\"><a href=\"#node模块\" class=\"headerlink\" title=\"node模块\"></a>node模块</h3><pre><code>1. node模块分为两类，一是node的内建模块（核心模块），二是用户编写的文件模块\n2. 核心模块在node编译时加载到内存，文件模块在运行时动态加载\n3. node的每一个文件模块都是一个对象\n4. 文件模块需要经过路径分析，文件定位，编译执行3个过程\n5. node对引入过的模块都进行缓存，require会优先使用缓存\n</code></pre><h3 id=\"异步IO\"><a href=\"#异步IO\" class=\"headerlink\" title=\"异步IO\"></a>异步IO</h3><pre><code>1. node中都是异步的，实现同步的话要通过回调函数或者同步框架\n2. 异步的方案：事件发布/事件监听，Promise/Deferred模式,流程控制库\n3. 事件监听模式：Node自身的events模块提供了简单的实现，具有addListener/on(). once(). remove        Listener(). removeAllListeners()和emit()方法。\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">emitter.on(<span class=\"string\">\"event1\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">message</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(message);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 发布</span></div><div class=\"line\">emitter.emit(<span class=\"string\">'event1'</span>, <span class=\"string\">\"I am message!\"</span>);</div></pre></td></tr></table></figure>\n</code></pre><h3 id=\"内存控制\"><a href=\"#内存控制\" class=\"headerlink\" title=\"内存控制\"></a>内存控制</h3><pre><code>1. 在node中内存限制为64位1.4G（32位0.7G）\n2. 限制内存的原因：V8做垃圾回收如果以1.5G为例，做一次小的垃圾回收需要50ms,做一次非增量式内存回收耗时1s以上\n3. node在启动时可以更改内存大小，--max-old-space-size=或者--max-new-space-size=\n4. v8的内存回收机制：内存分代为新生代（生命周期短）和老生代（生命周期长），\n5. 堆外内存不受内存限制，如buffer对象的使用\n</code></pre><h3 id=\"理解buffer\"><a href=\"#理解buffer\" class=\"headerlink\" title=\"理解buffer\"></a>理解buffer</h3><h3 id=\"网络编程\"><a href=\"#网络编程\" class=\"headerlink\" title=\"网络编程\"></a>网络编程</h3><pre><code>1. tcp服务\n    服务端：\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = net.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">socket.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">\tsocket.write(<span class=\"string\">\"你好\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">socket.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'断开连接'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">socket.write(<span class=\"string\">\"欢迎光临：\\n\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">8124</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'server bound'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>客户端：\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> net = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> client = net.connect(&#123;port: <span class=\"number\">8124</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">//'connect' listener</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'client connected'</span>);</div><div class=\"line\">\tclient.write(<span class=\"string\">'world!\\r\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">client.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(data.toString());</div><div class=\"line\">\tclient.end();</div><div class=\"line\">&#125;);</div><div class=\"line\">client.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'client disconnected'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>2. udp服务\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 服务端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> dgram = <span class=\"built_in\">require</span>(<span class=\"string\">\"dgram\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = dgram.createSocket(<span class=\"string\">\"udp4\"</span>);</div><div class=\"line\">server.on(<span class=\"string\">\"message\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">msg, rinfo</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"server got: \"</span> + msg + <span class=\"string\">\" from \"</span> +</div><div class=\"line\">\trinfo.address + <span class=\"string\">\":\"</span> + rinfo.port);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.on(<span class=\"string\">\"listening\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">var</span> address = server.address();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"server listening \"</span> +</div><div class=\"line\">\taddress.address + <span class=\"string\">\":\"</span> + address.port);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.bind(<span class=\"number\">41234</span>);</div><div class=\"line\"><span class=\"comment\">// 客户端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> dgram = <span class=\"built_in\">require</span>(<span class=\"string\">'dgram'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> message = <span class=\"keyword\">new</span> Buffer(”nodejs“);</div><div class=\"line\"><span class=\"keyword\">var</span> client = dgram.createSocket(<span class=\"string\">\"udp4\"</span>);</div><div class=\"line\">client.send(message, <span class=\"number\">0</span>, message.length, <span class=\"number\">41234</span>, <span class=\"string\">\"localhost\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, bytes</span>) </span>&#123;</div><div class=\"line\">\tclient.close();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>3. http服务\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 服务端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'Hello World\\n'</span>);</div><div class=\"line\">&#125;).listen(<span class=\"number\">1337</span>, <span class=\"string\">'127.0.0.1'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Server running at http://127.0.0.1:1337/'</span>);</div><div class=\"line\"><span class=\"comment\">// 客户端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\thostname: <span class=\"string\">'127.0.0.1'</span>,</div><div class=\"line\">\tport: <span class=\"number\">1334</span>,</div><div class=\"line\">\tpath: <span class=\"string\">'/'</span>,</div><div class=\"line\">\tmethod: <span class=\"string\">'GET'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> req = http.request(options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'STATUS: '</span> + res.statusCode);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'HEADERS: '</span> + <span class=\"built_in\">JSON</span>.stringify(res.headers));</div><div class=\"line\">\tres.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">\tres.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">chunk</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(chunk);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">req.end();</div></pre></td></tr></table></figure>\n<pre><code>4. websocket服务\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 客户端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> socket = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">'ws://127.0.0.1:12010/updates'</span>);</div><div class=\"line\">socket.onopen = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tsetInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (socket.bufferedAmount == <span class=\"number\">0</span>)</div><div class=\"line\">\t\tsocket.send(getUpdateData());</div><div class=\"line\">\t&#125;, <span class=\"number\">50</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">socket.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// TODO：event.data</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// &lt;!-- 模拟浏览器： --&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> WebSocket = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// 代码?解析ws://127.0.0.1:12010/updates</span></div><div class=\"line\">\t<span class=\"keyword\">this</span>.options = parseUrl(url);</div><div class=\"line\">\t<span class=\"keyword\">this</span>.connect();</div><div class=\"line\">&#125;;</div><div class=\"line\">WebSocket.prototype.onopen = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// TODO</span></div><div class=\"line\">&#125;;</div><div class=\"line\">WebSocket.prototype.setSocket = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">this</span>.socket = socket;</div><div class=\"line\">&#125;;</div><div class=\"line\">WebSocket.prototype.connect = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> <span class=\"keyword\">this</span> = that;</div><div class=\"line\">\t<span class=\"keyword\">var</span> key = <span class=\"keyword\">new</span> Buffer(<span class=\"keyword\">this</span>.options.protocolVersion + <span class=\"string\">'-'</span> + <span class=\"built_in\">Date</span>.now()).toString(<span class=\"string\">'base64'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> shasum = crypto.createHash(<span class=\"string\">'sha1'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> expected = shasum.update(key + <span class=\"string\">'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'</span>).digest(<span class=\"string\">'base64'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\t\tport: <span class=\"keyword\">this</span>.options.port, <span class=\"comment\">//12010</span></div><div class=\"line\">\t\thost: <span class=\"keyword\">this</span>.options.hostname, <span class=\"comment\">// 127.0.0.1</span></div><div class=\"line\">\theaders: &#123;</div><div class=\"line\">\t\t<span class=\"string\">'Connection'</span>: <span class=\"string\">'Upgrade'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'Upgrade'</span>: <span class=\"string\">'websocket'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'Sec-WebSocket-Version'</span>: <span class=\"keyword\">this</span>.options.protocolVersion,</div><div class=\"line\">\t\t<span class=\"string\">'Sec-WebSocket-Key'</span>: key</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> req = http.request(options);</div><div class=\"line\">\treq.end();</div><div class=\"line\">\treq.on(<span class=\"string\">'upgrade'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res, socket, upgradeHead</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">// 连接成功</span></div><div class=\"line\">\tthat.setSocket(socket);</div><div class=\"line\">\t<span class=\"comment\">// 触发open事件</span></div><div class=\"line\">\tthat.onopen();</div><div class=\"line\">&#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 服务端响应：</span></div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">\tres.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'Hello World\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">12010</span>);</div><div class=\"line\"><span class=\"comment\">// 在收到upgrade请求之后，告知客户端允许切换协议</span></div><div class=\"line\">server.on(<span class=\"string\">'upgrade'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, socket, upgradeHead</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> head = <span class=\"keyword\">new</span> Buffer(upgradeHead.length);</div><div class=\"line\">\tupgradeHead.copy(head);</div><div class=\"line\">\t<span class=\"keyword\">var</span> key = req.headers[<span class=\"string\">'sec-websocket-key'</span>];</div><div class=\"line\">\t<span class=\"keyword\">var</span> shasum = crypto.createHash(<span class=\"string\">'sha1'</span>);</div><div class=\"line\">\tkey = shasum.update(key + <span class=\"string\">\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\"</span>).digest(<span class=\"string\">'base64'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> headers = [</div><div class=\"line\">\t\t<span class=\"string\">'HTTP/1.1 101 Switching Protocols'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'Upgrade: websocket'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'Connection: Upgrade'</span>,</div><div class=\"line\">\t\t<span class=\"string\">'Sec-WebSocket-Accept: '</span> + key,</div><div class=\"line\">\t\t<span class=\"string\">'Sec-WebSocket-Protocol: '</span> + protocol</div><div class=\"line\">\t];</div><div class=\"line\">\t<span class=\"comment\">// 让数据立即发送</span></div><div class=\"line\">\tsocket.setNoDelay(<span class=\"literal\">true</span>);</div><div class=\"line\">\tsocket.write(headers.concat(<span class=\"string\">''</span>, <span class=\"string\">''</span>).join(<span class=\"string\">'\\r\\n'</span>));</div><div class=\"line\">\t<span class=\"comment\">// 建立服务器端WebSocket连接</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> websocket = <span class=\"keyword\">new</span> WebSocket();</div><div class=\"line\">\twebsocket.setSocket(socket);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>5. TLS服务（安全方面）\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 服务端：</span></div><div class=\"line\"><span class=\"keyword\">var</span> tls = <span class=\"built_in\">require</span>(<span class=\"string\">'tls'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\tkey: fs.readFileSync(<span class=\"string\">'./keys/server.key'</span>),</div><div class=\"line\">\tcert: fs.readFileSync(<span class=\"string\">'./keys/server.crt'</span>),</div><div class=\"line\">\trequestCert: <span class=\"literal\">true</span>,</div><div class=\"line\">\tca: [ fs.readFileSync(<span class=\"string\">'./keys/ca.crt'</span>) ]</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> server = tls.createServer(options, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">stream</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'server connected'</span>, stream.authorized ? <span class=\"string\">'authorized'</span> : <span class=\"string\">'unauthorized'</span>);</div><div class=\"line\">\tstream.write(<span class=\"string\">\"welcome!\\n\"</span>);</div><div class=\"line\">\tstream.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">\tstream.pipe(stream);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">8000</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'server bound'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>// 测试证书是否正常\n`$ openssl s_client -connect 127.0.0.1:8000`\n\n客户端：\n// 创建私钥\n`$ openssl genrsa -out client.key 1024`\n// 生成CSR\n`$ openssl req -new -key client.key -out client.csr`\n// 生成签名证书\n`$ openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in client.csr -out client.crt`\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tls = <span class=\"built_in\">require</span>(<span class=\"string\">'tls'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\tkey: fs.readFileSync(<span class=\"string\">'./keys/client.key'</span>),</div><div class=\"line\">\tcert: fs.readFileSync(<span class=\"string\">'./keys/client.crt'</span>),</div><div class=\"line\">\tca: [ fs.readFileSync(<span class=\"string\">'./keys/ca.crt'</span>) ]</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> stream = tls.connect(<span class=\"number\">8000</span>, options, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'client connected'</span>, stream.authorized ? <span class=\"string\">'authorized'</span> : <span class=\"string\">'unauthorized'</span>);</div><div class=\"line\">\tprocess.stdin.pipe(stream);</div><div class=\"line\">&#125;);</div><div class=\"line\">stream.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">stream.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;);</div><div class=\"line\">stream.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tserver.close();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>6. HTTPS服务\n    服务端：\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\tkey: fs.readFileSync(<span class=\"string\">'./keys/server.key'</span>),</div><div class=\"line\">\tcert: fs.readFileSync(<span class=\"string\">'./keys/server.crt'</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\">https.createServer(options, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">res.writeHead(<span class=\"number\">200</span>);</div><div class=\"line\">\tres.end(<span class=\"string\">\"hello world\\n\"</span>);</div><div class=\"line\">&#125;).listen(<span class=\"number\">8000</span>);</div></pre></td></tr></table></figure>\n<pre><code>客户端：\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">'https'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\thostname: <span class=\"string\">'localhost'</span>,</div><div class=\"line\">\tport: <span class=\"number\">8000</span>,</div><div class=\"line\">\tpath: <span class=\"string\">'/'</span>,</div><div class=\"line\">\tmethod: <span class=\"string\">'GET'</span>,</div><div class=\"line\">\tkey: fs.readFileSync(<span class=\"string\">'./keys/client.key'</span>),</div><div class=\"line\">\tcert: fs.readFileSync(<span class=\"string\">'./keys/client.crt'</span>),</div><div class=\"line\">\tca: [fs.readFileSync(<span class=\"string\">'./keys/ca.crt'</span>)]</div><div class=\"line\">&#125;;</div><div class=\"line\">options.agent = <span class=\"keyword\">new</span> https.Agent(options);</div><div class=\"line\"><span class=\"keyword\">var</span> req = https.request(options, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">\tres.setEncoding(<span class=\"string\">'utf-8'</span>);</div><div class=\"line\">\tres.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(d);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">req.end();</div><div class=\"line\">req.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(e);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"玩转进程\"><a href=\"#玩转进程\" class=\"headerlink\" title=\"玩转进程\"></a>玩转进程</h3><pre><code>node提供了child_process.fork()实现进程的复制\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">\tres.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'Hello World\\n'</span>);</div><div class=\"line\">&#125;).listen(<span class=\"built_in\">Math</span>.round((<span class=\"number\">1</span> + <span class=\"built_in\">Math</span>.random()) * <span class=\"number\">1000</span>), <span class=\"string\">'127.0.0.1'</span>);</div></pre></td></tr></table></figure>\n<pre><code>运行node worker.js，监听?1000到2000之间的端口。\n\n以下是master.js\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fork = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).fork;</div><div class=\"line\"><span class=\"keyword\">var</span> cpus = <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>).cpus();</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; cpus.length; i++) &#123;</div><div class=\"line\">\tfork(<span class=\"string\">'./worker.js'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>这是著名的master-worker模式，主从模式\n\n//创建子进程\nchild_process模块提供了四个方法创建子进程\nspawn()        执行命令\nexec()            执行命令        可设置时间\nexecFile()        执行文件        可设置时间\nfork()            执行javascript\n后面3中方法都是spawn()的延伸\n//实例work.js\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cp = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\">cp.spawn(<span class=\"string\">'node'</span>, [<span class=\"string\">'worker.js'</span>]);</div><div class=\"line\">cp.exec(<span class=\"string\">'node worker.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, stdout, stderr</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// some code</span></div><div class=\"line\">&#125;);</div><div class=\"line\">cp.execFile(<span class=\"string\">'worker.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, stdout, stderr</span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// some code</span></div><div class=\"line\">&#125;);</div><div class=\"line\">cp.fork(<span class=\"string\">'./worker.js'</span>)</div></pre></td></tr></table></figure>\n<pre><code>//进程间通信\n在浏览器中，javascript主线程和UI渲染是一个线程，渲染UI和执行js是互相阻塞的\nhtml5提出来webworker API，创建工作线程在后台运行\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'worker.js'</span>);</div><div class=\"line\">worker.onmessage = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'result'</span>).textContent = event.data;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<pre><code>work.js代码如下\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">1</span>;</div><div class=\"line\">search: <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">\tn += <span class=\"number\">1</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"built_in\">Math</span>.sqrt(n); i += <span class=\"number\">1</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (n  i == <span class=\"number\">0</span>) %</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span> search;</div><div class=\"line\">\t<span class=\"comment\">// found a prime</span></div><div class=\"line\">\tpostMessage(n);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<pre><code>主线程和工作线程通过onmessage()和postMessage()进行通信，子进程对象由send方法\n// parent.js\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cp = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> n = cp.fork(__dirname + <span class=\"string\">'/sub.js'</span>);</div><div class=\"line\">n.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'PARENT got message:'</span>, m);</div><div class=\"line\">&#125;);</div><div class=\"line\">n.send(&#123;hello: <span class=\"string\">'world'</span>&#125;);</div><div class=\"line\"><span class=\"comment\">// sub.js</span></div><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'CHILD got message:'</span>, m);</div><div class=\"line\">&#125;);</div><div class=\"line\">process.send(&#123;foo: <span class=\"string\">'bar'</span>&#125;);</div></pre></td></tr></table></figure>\n<pre><code>//进程间通信原理\n实现进程间的技术有：管道，tcp，socket，共享内存，等。\n//句柄传递\n一个端口只能由一个工作进程监听，解决方案是有主进程监听一个80端口，然后\n分发到其他子线程去\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// parent.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).fork(<span class=\"string\">'child.js'</span>);</div><div class=\"line\"><span class=\"comment\">// Open up the server object and send the handle</span></div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>).createServer();</div><div class=\"line\">server.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\tsocket.end(<span class=\"string\">'handled by parent\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">1337</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tchild.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//child.js</span></div><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m, server</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (m === <span class=\"string\">'server'</span>) &#123;</div><div class=\"line\">\t\tserver.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\t\t\tsocket.end(<span class=\"string\">'handled by child\\n'</span>);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//将服务发送到多个子进程实例</span></div><div class=\"line\"><span class=\"comment\">//parent.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> cp = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> child1 = cp.fork(<span class=\"string\">'child.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> child2 = cp.fork(<span class=\"string\">'child.js'</span>);</div><div class=\"line\"><span class=\"comment\">// Open up the server object and send the handle</span></div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>).createServer();</div><div class=\"line\">server.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\tsocket.end(<span class=\"string\">'handled by parent\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.listen(<span class=\"number\">1337</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tchild1.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">\tchild2.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//child.js</span></div><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m, server</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">if</span> (m === <span class=\"string\">'server'</span>) &#123;</div><div class=\"line\">\tserver.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\t\tsocket.end(<span class=\"string\">'handled by child, pid is '</span> + process.pid + <span class=\"string\">'\\n'</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//最终版，请求全部由子进程处理，</span></div><div class=\"line\"><span class=\"comment\">//parent,js</span></div><div class=\"line\"><span class=\"keyword\">var</span> cp = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> child1 = cp.fork(<span class=\"string\">'child.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> child2 = cp.fork(<span class=\"string\">'child.js'</span>);</div><div class=\"line\"><span class=\"comment\">// Open up the server object and send the handle</span></div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>).createServer();</div><div class=\"line\">server.listen(<span class=\"number\">1337</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tchild1.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">\tchild2.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">\tserver.close(); <span class=\"comment\">//关闭主线程的服务</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//child.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">\tres.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'handled by child, pid is '</span> + process.pid + <span class=\"string\">'\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m, tcp</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (m === <span class=\"string\">'server'</span>) &#123;</div><div class=\"line\">\t\ttcp.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\t\t\tserver.emit(<span class=\"string\">'connection'</span>, socket);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<pre><code>&lt;p&gt;\nsend发送的句柄类型：\n    net.Socket。TCP\n    net.Server。TCP服务\n\n    net.Native。C++\n    dgram.Socket。UDP\n    dgram.Native。C++\n//进程事件\nerror：\nexit：\nclose：\ndisconnect：\n&lt;/p&gt;\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//自动重启线程</span></div><div class=\"line\"><span class=\"comment\">//master.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> fork = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).fork;</div><div class=\"line\"><span class=\"keyword\">var</span> cpus = <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>).cpus();</div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>).createServer();</div><div class=\"line\">server.listen(<span class=\"number\">1337</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> workers = &#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> createWorker = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">var</span> worker = fork(__dirname + <span class=\"string\">'/worker.js'</span>);</div><div class=\"line\"><span class=\"comment\">//退出时重新启动新的线程</span></div><div class=\"line\">worker.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Worker '</span> + worker.pid + <span class=\"string\">' exited.'</span>);</div><div class=\"line\">\t<span class=\"keyword\">delete</span> workers[worker.pid];</div><div class=\"line\">\tcreateWorker();</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// 句柄转发</span></div><div class=\"line\">worker.send(<span class=\"string\">'server'</span>, server);</div><div class=\"line\">workers[worker.pid] = worker;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Create worker. pid: '</span> + worker.pid);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; cpus.length; i++) &#123;</div><div class=\"line\">createWorker();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 进程自己退出让所有工作进程退出</span></div><div class=\"line\">process.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> pid <span class=\"keyword\">in</span> workers) &#123;</div><div class=\"line\">\t\tworkers[pid].kill();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//work.js  考虑处理异常</span></div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">\tres.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'handled by child, pid is '</span> + process.pid + <span class=\"string\">'\\n'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> worker;</div><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">m, tcp</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (m === <span class=\"string\">'server'</span>) &#123;</div><div class=\"line\">\t\tworker = tcp;</div><div class=\"line\">\t\tworker.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">socket</span>) </span>&#123;</div><div class=\"line\">\t\t\tserver.emit(<span class=\"string\">'connection'</span>, socket);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">process.on(<span class=\"string\">'uncaughtException'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\tprocess.send(&#123;act: <span class=\"string\">'suicide'</span>&#125;);</div><div class=\"line\"><span class=\"comment\">// 停止接收新的连接</span></div><div class=\"line\">\tworker.close(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"comment\">// 连接断开后退出进程</span></div><div class=\"line\">\t\tprocess.exit(<span class=\"number\">1</span>);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Node学习","date":"2015-12-19T10:58:56.000Z","_content":"** node学习： ** <Excerpt in index | 首页摘要>\n    nodejs学习的方法，进阶路线\n <!-- more -->\n<The rest of contents | 余下全文>\n\n### 一 学习内容\n1. node的常用模块,buffer,fs,http,net等.\n2. node常用框架express,mongoose,koa,mocha,should\n3. 部署上线,pm2,grunt,\n\n### 二 学习要点\n1. 了解node的特性和语法\n2. 编写扩展node模块\n3. 用异步的思想编程\n4. 常用框架的使用\n5. 回调的解决方案(promise)\n\n### 三 入门实战\n1. 参照nodejs实战上的微博系统,使用express4.x+ mongoose实现\n2. 使用socket.io实现一个简单的即时聊天的系统\n3. 使用mongoose+express+node开发一个论坛系统\n4. 使用koa+mongoose做一个简单的cms或者权限系统\n\n### 四 学习方法\n * 建议有基础的直接开始入门实战,在练习中熟悉node的api,做完一个项目再去看书\n * 不要一直看书,没什么效果的,实战永远是最有效的\n","source":"_posts/node-study.md","raw":"title: node学习\ndate: 2015-12-19 18:58:56\ntags: node\ncategories: 编程语言\n---\n** node学习： ** <Excerpt in index | 首页摘要>\n    nodejs学习的方法，进阶路线\n <!-- more -->\n<The rest of contents | 余下全文>\n\n### 一 学习内容\n1. node的常用模块,buffer,fs,http,net等.\n2. node常用框架express,mongoose,koa,mocha,should\n3. 部署上线,pm2,grunt,\n\n### 二 学习要点\n1. 了解node的特性和语法\n2. 编写扩展node模块\n3. 用异步的思想编程\n4. 常用框架的使用\n5. 回调的解决方案(promise)\n\n### 三 入门实战\n1. 参照nodejs实战上的微博系统,使用express4.x+ mongoose实现\n2. 使用socket.io实现一个简单的即时聊天的系统\n3. 使用mongoose+express+node开发一个论坛系统\n4. 使用koa+mongoose做一个简单的cms或者权限系统\n\n### 四 学习方法\n * 建议有基础的直接开始入门实战,在练习中熟悉node的api,做完一个项目再去看书\n * 不要一直看书,没什么效果的,实战永远是最有效的\n","slug":"node-study","published":1,"updated":"2016-11-13T06:01:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d91001zohzjuffzxv9u","content":"<p><strong> node学习： </strong> <Excerpt in index | 首页摘要><br>    nodejs学习的方法，进阶路线<br> <a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"一-学习内容\"><a href=\"#一-学习内容\" class=\"headerlink\" title=\"一 学习内容\"></a>一 学习内容</h3><ol>\n<li>node的常用模块,buffer,fs,http,net等.</li>\n<li>node常用框架express,mongoose,koa,mocha,should</li>\n<li>部署上线,pm2,grunt,</li>\n</ol>\n<h3 id=\"二-学习要点\"><a href=\"#二-学习要点\" class=\"headerlink\" title=\"二 学习要点\"></a>二 学习要点</h3><ol>\n<li>了解node的特性和语法</li>\n<li>编写扩展node模块</li>\n<li>用异步的思想编程</li>\n<li>常用框架的使用</li>\n<li>回调的解决方案(promise)</li>\n</ol>\n<h3 id=\"三-入门实战\"><a href=\"#三-入门实战\" class=\"headerlink\" title=\"三 入门实战\"></a>三 入门实战</h3><ol>\n<li>参照nodejs实战上的微博系统,使用express4.x+ mongoose实现</li>\n<li>使用socket.io实现一个简单的即时聊天的系统</li>\n<li>使用mongoose+express+node开发一个论坛系统</li>\n<li>使用koa+mongoose做一个简单的cms或者权限系统</li>\n</ol>\n<h3 id=\"四-学习方法\"><a href=\"#四-学习方法\" class=\"headerlink\" title=\"四 学习方法\"></a>四 学习方法</h3><ul>\n<li>建议有基础的直接开始入门实战,在练习中熟悉node的api,做完一个项目再去看书</li>\n<li>不要一直看书,没什么效果的,实战永远是最有效的</li>\n</ul>\n","excerpt":"<p><strong> node学习： </strong> <Excerpt in index | 首页摘要><br>    nodejs学习的方法，进阶路线<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"一-学习内容\"><a href=\"#一-学习内容\" class=\"headerlink\" title=\"一 学习内容\"></a>一 学习内容</h3><ol>\n<li>node的常用模块,buffer,fs,http,net等.</li>\n<li>node常用框架express,mongoose,koa,mocha,should</li>\n<li>部署上线,pm2,grunt,</li>\n</ol>\n<h3 id=\"二-学习要点\"><a href=\"#二-学习要点\" class=\"headerlink\" title=\"二 学习要点\"></a>二 学习要点</h3><ol>\n<li>了解node的特性和语法</li>\n<li>编写扩展node模块</li>\n<li>用异步的思想编程</li>\n<li>常用框架的使用</li>\n<li>回调的解决方案(promise)</li>\n</ol>\n<h3 id=\"三-入门实战\"><a href=\"#三-入门实战\" class=\"headerlink\" title=\"三 入门实战\"></a>三 入门实战</h3><ol>\n<li>参照nodejs实战上的微博系统,使用express4.x+ mongoose实现</li>\n<li>使用socket.io实现一个简单的即时聊天的系统</li>\n<li>使用mongoose+express+node开发一个论坛系统</li>\n<li>使用koa+mongoose做一个简单的cms或者权限系统</li>\n</ol>\n<h3 id=\"四-学习方法\"><a href=\"#四-学习方法\" class=\"headerlink\" title=\"四 学习方法\"></a>四 学习方法</h3><ul>\n<li>建议有基础的直接开始入门实战,在练习中熟悉node的api,做完一个项目再去看书</li>\n<li>不要一直看书,没什么效果的,实战永远是最有效的</li>\n</ul>"},{"title":"Npm使用详解","date":"2016-11-17T12:05:56.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n    npm所有的常用知识都在这里，没错，所有的！！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## node版本控制\n1. 使用nvm进行版本控制\n```\n<!-- unix -->\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash\n<!-- windows -->\nhttps://github.com/coreybutler/nvm-windows需要自己下载\n<!-- 安装node -->\nnvm install v4.4\n<!-- 选择默认版本 -->\nnvm alias default v4.4\n```\n2. 镜像管理,使用cnpm进行加速\n```\n<!-- 使用cnpm命令 -->\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n<!-- 使用npm别名 -->\nalias cnpm=\"npm --registry=https://registry.npm.taobao.org \\\n--cache=$HOME/.npm/.cache/cnpm \\\n--disturl=https://npm.taobao.org/dist \\\n--userconfig=$HOME/.cnpmrc\"\n```\n3. 修改nvm镜像地址进行下载加速\n```\nexport NVM_NODEJS_ORG_MIRROR=https://nodejs.org/dist\nnvm install node\n\nNVM_NODEJS_ORG_MIRROR=https://nodejs.org/dist nvm install 4.2\n```\n\n## 常用命令\n1. 安装命令,\n```\nnpm install;\nnpm install --save-dev;\nnpm install -g;\nnpm uninstall name;\n```\n2. npm命令\nnpm可以运行package.json的script命令\n```\n<!-- 集成命令 -->\nnpm start\nnpm restart\nnpm test\nnpm stop\nnpm init（初始化项目时使用）\nnpm publish(发布模块需要使用)\nnpm update\nnpm search\nnpm list\nnpm view moduleName(查看模块依赖)\n<!-- script命令 ,在script中定义好-->\nnpm run build\nnpm run dev\n```\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/npm-detail.md","raw":"title: npm使用详解\ndate: 2016-11-17 20:05:56\ntags: node\ncategories: 编程语言\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n    npm所有的常用知识都在这里，没错，所有的！！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n## node版本控制\n1. 使用nvm进行版本控制\n```\n<!-- unix -->\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash\n<!-- windows -->\nhttps://github.com/coreybutler/nvm-windows需要自己下载\n<!-- 安装node -->\nnvm install v4.4\n<!-- 选择默认版本 -->\nnvm alias default v4.4\n```\n2. 镜像管理,使用cnpm进行加速\n```\n<!-- 使用cnpm命令 -->\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n<!-- 使用npm别名 -->\nalias cnpm=\"npm --registry=https://registry.npm.taobao.org \\\n--cache=$HOME/.npm/.cache/cnpm \\\n--disturl=https://npm.taobao.org/dist \\\n--userconfig=$HOME/.cnpmrc\"\n```\n3. 修改nvm镜像地址进行下载加速\n```\nexport NVM_NODEJS_ORG_MIRROR=https://nodejs.org/dist\nnvm install node\n\nNVM_NODEJS_ORG_MIRROR=https://nodejs.org/dist nvm install 4.2\n```\n\n## 常用命令\n1. 安装命令,\n```\nnpm install;\nnpm install --save-dev;\nnpm install -g;\nnpm uninstall name;\n```\n2. npm命令\nnpm可以运行package.json的script命令\n```\n<!-- 集成命令 -->\nnpm start\nnpm restart\nnpm test\nnpm stop\nnpm init（初始化项目时使用）\nnpm publish(发布模块需要使用)\nnpm update\nnpm search\nnpm list\nnpm view moduleName(查看模块依赖)\n<!-- script命令 ,在script中定义好-->\nnpm run build\nnpm run dev\n```\n\n\n\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"npm-detail","published":1,"updated":"2016-11-27T07:18:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d930022ohzjoouesrcj","content":"<p><strong> Npm使用详解：</strong> <Excerpt in index | 首页摘要><br>    npm所有的常用知识都在这里，没错，所有的！！<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"node版本控制\"><a href=\"#node版本控制\" class=\"headerlink\" title=\"node版本控制\"></a>node版本控制</h2><ol>\n<li><p>使用nvm进行版本控制</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- unix --&gt;</span></div><div class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</div><div class=\"line\"><span class=\"comment\">&lt;!-- windows --&gt;</span></div><div class=\"line\">https://github.com/coreybutler/nvm-windows需要自己下载</div><div class=\"line\"><span class=\"comment\">&lt;!-- 安装node --&gt;</span></div><div class=\"line\">nvm install v4.4</div><div class=\"line\"><span class=\"comment\">&lt;!-- 选择默认版本 --&gt;</span></div><div class=\"line\">nvm alias default v4.4</div></pre></td></tr></table></figure>\n</li>\n<li><p>镜像管理,使用cnpm进行加速</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 使用cnpm命令 --&gt;</span></div><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class=\"line\"><span class=\"comment\">&lt;!-- 使用npm别名 --&gt;</span></div><div class=\"line\">alias cnpm=\"npm --registry=https://registry.npm.taobao.org \\</div><div class=\"line\">--cache=$HOME/.npm/.cache/cnpm \\</div><div class=\"line\">--disturl=https://npm.taobao.org/dist \\</div><div class=\"line\">--userconfig=$HOME/.cnpmrc\"</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改nvm镜像地址进行下载加速</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">export <span class=\"attr\">NVM_NODEJS_ORG_MIRROR=</span>https://nodejs.org/dist</div><div class=\"line\">nvm install <span class=\"keyword\">node</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">NVM_NODEJS_ORG_MIRROR</span>=https://nodejs.org/dist nvm install <span class=\"number\">4.2</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ol>\n<li><p>安装命令,</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span>;</div><div class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save-dev;</span></div><div class=\"line\">npm <span class=\"keyword\">install</span> -g;</div><div class=\"line\">npm <span class=\"keyword\">uninstall</span> <span class=\"keyword\">name</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>npm命令<br>npm可以运行package.json的script命令</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 集成命令 --&gt;</span></div><div class=\"line\">npm start</div><div class=\"line\">npm restart</div><div class=\"line\">npm test</div><div class=\"line\">npm stop</div><div class=\"line\">npm init（初始化项目时使用）</div><div class=\"line\">npm publish(发布模块需要使用)</div><div class=\"line\">npm update</div><div class=\"line\">npm search</div><div class=\"line\">npm list</div><div class=\"line\">npm view moduleName(查看模块依赖)</div><div class=\"line\"><span class=\"comment\">&lt;!-- script命令 ,在script中定义好--&gt;</span></div><div class=\"line\">npm run build</div><div class=\"line\">npm run dev</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> Npm使用详解：</strong> <Excerpt in index | 首页摘要><br>    npm所有的常用知识都在这里，没错，所有的！！<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"node版本控制\"><a href=\"#node版本控制\" class=\"headerlink\" title=\"node版本控制\"></a>node版本控制</h2><ol>\n<li><p>使用nvm进行版本控制</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- unix --&gt;</span></div><div class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</div><div class=\"line\"><span class=\"comment\">&lt;!-- windows --&gt;</span></div><div class=\"line\">https://github.com/coreybutler/nvm-windows需要自己下载</div><div class=\"line\"><span class=\"comment\">&lt;!-- 安装node --&gt;</span></div><div class=\"line\">nvm install v4.4</div><div class=\"line\"><span class=\"comment\">&lt;!-- 选择默认版本 --&gt;</span></div><div class=\"line\">nvm alias default v4.4</div></pre></td></tr></table></figure>\n</li>\n<li><p>镜像管理,使用cnpm进行加速</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 使用cnpm命令 --&gt;</span></div><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class=\"line\"><span class=\"comment\">&lt;!-- 使用npm别名 --&gt;</span></div><div class=\"line\">alias cnpm=\"npm --registry=https://registry.npm.taobao.org \\</div><div class=\"line\">--cache=$HOME/.npm/.cache/cnpm \\</div><div class=\"line\">--disturl=https://npm.taobao.org/dist \\</div><div class=\"line\">--userconfig=$HOME/.cnpmrc\"</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改nvm镜像地址进行下载加速</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">export <span class=\"attr\">NVM_NODEJS_ORG_MIRROR=</span>https://nodejs.org/dist</div><div class=\"line\">nvm install <span class=\"keyword\">node</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">NVM_NODEJS_ORG_MIRROR</span>=https://nodejs.org/dist nvm install <span class=\"number\">4.2</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ol>\n<li><p>安装命令,</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm <span class=\"keyword\">install</span>;</div><div class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save-dev;</span></div><div class=\"line\">npm <span class=\"keyword\">install</span> -g;</div><div class=\"line\">npm <span class=\"keyword\">uninstall</span> <span class=\"keyword\">name</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>npm命令<br>npm可以运行package.json的script命令</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 集成命令 --&gt;</span></div><div class=\"line\">npm start</div><div class=\"line\">npm restart</div><div class=\"line\">npm test</div><div class=\"line\">npm stop</div><div class=\"line\">npm init（初始化项目时使用）</div><div class=\"line\">npm publish(发布模块需要使用)</div><div class=\"line\">npm update</div><div class=\"line\">npm search</div><div class=\"line\">npm list</div><div class=\"line\">npm view moduleName(查看模块依赖)</div><div class=\"line\"><span class=\"comment\">&lt;!-- script命令 ,在script中定义好--&gt;</span></div><div class=\"line\">npm run build</div><div class=\"line\">npm run dev</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"Redis学习笔记","date":"2016-05-23T00:25:57.000Z","_content":"** redis学习笔记：** <Excerpt in index | 首页摘要>\n    redis数据库的基本操作，增删改查\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### keys\nredis本质上是一个key-value数据库\n1. 设置：set key value\n2. 获取：get key\n3. 判断存在：exists key\n4. 删除：del key\t\tdel  test:fan:age\n5. 重命名：rename  oldkey newkey\t\t\n6. 数量：dbsize  返回数据\n7. 获取所有key（通配符）：`Keys test:*:age`\n`Keys test:?:age`\n8. 清空：flushdb\tflushall\n9. 设置有效时间：expire test:fan:age 30\n10. 查询有效时间：ttl test:fan:age\n\n### String类型\n1. 设置：\n\tset key value\n\tsetnx ky value(nx是not exist)\n\tmset key1 value1 keyN valueN\n\tmsetnx key1 value1 keyN valueN\n2. 获取：\n\tget\t\t\t不存在返回nil\n\tgetset\t\t设置key的值，并返回key的旧值，不存在返回nil\n\tmget\t\t\n3. 自增减：\n\tincr key   对key的值进行++操作，返回新的值\n\tdecr key\n\tincrby key integer\t\t对key加上一个数值\n\tdecrby key integer\n4. 截取：\n\tsubstr key indexStart indexEnd \t\t\t下标从0开始\n5. 追加：\n\tappend key value\n\n### list类型\nredis的list其实就是一个每个元素都是string 的双向链表，所以push和pop的时间复杂度都是O（1）\n1. 添加\n\tlpush key string \t\t在头部添加\n\trpush key string\t\t在尾部添加\n2. 修改\n\tlset key index value  修改指定下标的key的值\n3. 删除\n\tlpop key \t从头部返回删除\n\trpop key  从尾部\n\tlrem key count value  删除count个相同的value，count为0删除全部\n\tblpop key ...keyN timeout\n\tbrpop 从尾部删除\n4. 获取\n\tlrange key indexStart indexEnd\n5. 数量\n\tllen key\t\t返回key对应的list长度\n6. 截取\n\tltrim key start end\n7. 转移\n\trpoplpush key1 key2\t从key1尾部移到key2头部\n\n### set集合\nredis的set就是String的无序集合，通过hashtable实现\n1. 添加\n\tsadd key member\n2. 删除\n\tsrem key member\t\t移除指定的元素\n\tspop key \t\t\t\t\t删除并返回一个随机的\n3. 获取\n\tsmembers key\t\t\t返回所有\n\tsrandmember\t\t\t随机取一个不删除\n4. 判断存在\n\tsismember key member\n5. 数量\n\tscard key \t\t\t\t\t返回元素个数\n6. 转移\n\tsmove srckey dstkey member\n7. 取交集\n\tsinter key1 key2 keyN\n\tsinterstore dstkey key1 keyN\t\t将交集存在dstkey\n8. 取并集\n\tsunion key1 key2 keyN\n\tsunionstore dstkey key1 keyN\t将并集存在dstkey\n9. 取差集\n\tsdiff key1 key2 keyN\n\tsdiffstore dstkey key1 keyN\t\t将差集存在dstkey\n\n### 有序set类型\n和set一样，不同的是每个元素关联一个double类型的score，根据score排序，sorted set的实现由skip list和hashtable\n1. 添加\n\tzadd key score member\n2. 删除\n\tzrem key member\n\tzremrangebyrank key min max\n\tzremrangebyscore key min max \t删除集合score在给定区间的元素\n3. 获取\n\tzrange key start end\n\tzrevrange\tkey start end\t\t\t按score的逆序\n\tzrangebyscore key min max\t\t\n4. 判断存在\n\tzrank key member\t\t返回下标\n\tzrerank key member\t\t返回逆序的下标\n5. 数量\n\tzcard key\t\t\t\t\t\t总数\n\tzcount key min max \t\t区间的数量\n6. 修改\n\tzincrby key incr member\t增加member的score值并排序\n\n### hash类型\nredis的hash是一个string类型的field和value的映射表，hash特别适合存储对象，\n1. 设置：\n\thset key field value\n\thmset key field1 value1 field2 value2\n2. 获取：\n\thget key field\n\thmget key field1 field2\n3. 判断存在\n\thexists key field\n4. 删除\n\thdel key field\n5. 查找\n\thkeys key\t\t\t返回所有 field\n\thvals key\t\t\t返回所有的value\n\thgetall key\t\t返回所有field和value\n6. 数量\n\thlen key\n7. 值加减\n\thincrby key field integer\t将指定的hash field加上定值\n","source":"_posts/redis-study.md","raw":"title: redis学习笔记\ndate: 2016-05-23 08:25:57\ntags: redis\ncategories: 数据库\n---\n** redis学习笔记：** <Excerpt in index | 首页摘要>\n    redis数据库的基本操作，增删改查\n<!-- more -->\n<The rest of contents | 余下全文>\n\n### keys\nredis本质上是一个key-value数据库\n1. 设置：set key value\n2. 获取：get key\n3. 判断存在：exists key\n4. 删除：del key\t\tdel  test:fan:age\n5. 重命名：rename  oldkey newkey\t\t\n6. 数量：dbsize  返回数据\n7. 获取所有key（通配符）：`Keys test:*:age`\n`Keys test:?:age`\n8. 清空：flushdb\tflushall\n9. 设置有效时间：expire test:fan:age 30\n10. 查询有效时间：ttl test:fan:age\n\n### String类型\n1. 设置：\n\tset key value\n\tsetnx ky value(nx是not exist)\n\tmset key1 value1 keyN valueN\n\tmsetnx key1 value1 keyN valueN\n2. 获取：\n\tget\t\t\t不存在返回nil\n\tgetset\t\t设置key的值，并返回key的旧值，不存在返回nil\n\tmget\t\t\n3. 自增减：\n\tincr key   对key的值进行++操作，返回新的值\n\tdecr key\n\tincrby key integer\t\t对key加上一个数值\n\tdecrby key integer\n4. 截取：\n\tsubstr key indexStart indexEnd \t\t\t下标从0开始\n5. 追加：\n\tappend key value\n\n### list类型\nredis的list其实就是一个每个元素都是string 的双向链表，所以push和pop的时间复杂度都是O（1）\n1. 添加\n\tlpush key string \t\t在头部添加\n\trpush key string\t\t在尾部添加\n2. 修改\n\tlset key index value  修改指定下标的key的值\n3. 删除\n\tlpop key \t从头部返回删除\n\trpop key  从尾部\n\tlrem key count value  删除count个相同的value，count为0删除全部\n\tblpop key ...keyN timeout\n\tbrpop 从尾部删除\n4. 获取\n\tlrange key indexStart indexEnd\n5. 数量\n\tllen key\t\t返回key对应的list长度\n6. 截取\n\tltrim key start end\n7. 转移\n\trpoplpush key1 key2\t从key1尾部移到key2头部\n\n### set集合\nredis的set就是String的无序集合，通过hashtable实现\n1. 添加\n\tsadd key member\n2. 删除\n\tsrem key member\t\t移除指定的元素\n\tspop key \t\t\t\t\t删除并返回一个随机的\n3. 获取\n\tsmembers key\t\t\t返回所有\n\tsrandmember\t\t\t随机取一个不删除\n4. 判断存在\n\tsismember key member\n5. 数量\n\tscard key \t\t\t\t\t返回元素个数\n6. 转移\n\tsmove srckey dstkey member\n7. 取交集\n\tsinter key1 key2 keyN\n\tsinterstore dstkey key1 keyN\t\t将交集存在dstkey\n8. 取并集\n\tsunion key1 key2 keyN\n\tsunionstore dstkey key1 keyN\t将并集存在dstkey\n9. 取差集\n\tsdiff key1 key2 keyN\n\tsdiffstore dstkey key1 keyN\t\t将差集存在dstkey\n\n### 有序set类型\n和set一样，不同的是每个元素关联一个double类型的score，根据score排序，sorted set的实现由skip list和hashtable\n1. 添加\n\tzadd key score member\n2. 删除\n\tzrem key member\n\tzremrangebyrank key min max\n\tzremrangebyscore key min max \t删除集合score在给定区间的元素\n3. 获取\n\tzrange key start end\n\tzrevrange\tkey start end\t\t\t按score的逆序\n\tzrangebyscore key min max\t\t\n4. 判断存在\n\tzrank key member\t\t返回下标\n\tzrerank key member\t\t返回逆序的下标\n5. 数量\n\tzcard key\t\t\t\t\t\t总数\n\tzcount key min max \t\t区间的数量\n6. 修改\n\tzincrby key incr member\t增加member的score值并排序\n\n### hash类型\nredis的hash是一个string类型的field和value的映射表，hash特别适合存储对象，\n1. 设置：\n\thset key field value\n\thmset key field1 value1 field2 value2\n2. 获取：\n\thget key field\n\thmget key field1 field2\n3. 判断存在\n\thexists key field\n4. 删除\n\thdel key field\n5. 查找\n\thkeys key\t\t\t返回所有 field\n\thvals key\t\t\t返回所有的value\n\thgetall key\t\t返回所有field和value\n6. 数量\n\thlen key\n7. 值加减\n\thincrby key field integer\t将指定的hash field加上定值\n","slug":"redis-study","published":1,"updated":"2016-11-13T05:48:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d970026ohzj4chlv82m","content":"<p><strong> redis学习笔记：</strong> <Excerpt in index | 首页摘要><br>    redis数据库的基本操作，增删改查<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys\"></a>keys</h3><p>redis本质上是一个key-value数据库</p>\n<ol>\n<li>设置：set key value</li>\n<li>获取：get key</li>\n<li>判断存在：exists key</li>\n<li>删除：del key        del  test:fan:age</li>\n<li>重命名：rename  oldkey newkey        </li>\n<li>数量：dbsize  返回数据</li>\n<li>获取所有key（通配符）：<code>Keys test:*:age</code><br><code>Keys test:?:age</code></li>\n<li>清空：flushdb    flushall</li>\n<li>设置有效时间：expire test:fan:age 30</li>\n<li>查询有效时间：ttl test:fan:age</li>\n</ol>\n<h3 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h3><ol>\n<li>设置：<br> set key value<br> setnx ky value(nx是not exist)<br> mset key1 value1 keyN valueN<br> msetnx key1 value1 keyN valueN</li>\n<li>获取：<br> get            不存在返回nil<br> getset        设置key的值，并返回key的旧值，不存在返回nil<br> mget        </li>\n<li>自增减：<br> incr key   对key的值进行++操作，返回新的值<br> decr key<br> incrby key integer        对key加上一个数值<br> decrby key integer</li>\n<li>截取：<br> substr key indexStart indexEnd             下标从0开始</li>\n<li>追加：<br> append key value</li>\n</ol>\n<h3 id=\"list类型\"><a href=\"#list类型\" class=\"headerlink\" title=\"list类型\"></a>list类型</h3><p>redis的list其实就是一个每个元素都是string 的双向链表，所以push和pop的时间复杂度都是O（1）</p>\n<ol>\n<li>添加<br> lpush key string         在头部添加<br> rpush key string        在尾部添加</li>\n<li>修改<br> lset key index value  修改指定下标的key的值</li>\n<li>删除<br> lpop key     从头部返回删除<br> rpop key  从尾部<br> lrem key count value  删除count个相同的value，count为0删除全部<br> blpop key …keyN timeout<br> brpop 从尾部删除</li>\n<li>获取<br> lrange key indexStart indexEnd</li>\n<li>数量<br> llen key        返回key对应的list长度</li>\n<li>截取<br> ltrim key start end</li>\n<li>转移<br> rpoplpush key1 key2    从key1尾部移到key2头部</li>\n</ol>\n<h3 id=\"set集合\"><a href=\"#set集合\" class=\"headerlink\" title=\"set集合\"></a>set集合</h3><p>redis的set就是String的无序集合，通过hashtable实现</p>\n<ol>\n<li>添加<br> sadd key member</li>\n<li>删除<br> srem key member        移除指定的元素<br> spop key                     删除并返回一个随机的</li>\n<li>获取<br> smembers key            返回所有<br> srandmember            随机取一个不删除</li>\n<li>判断存在<br> sismember key member</li>\n<li>数量<br> scard key                     返回元素个数</li>\n<li>转移<br> smove srckey dstkey member</li>\n<li>取交集<br> sinter key1 key2 keyN<br> sinterstore dstkey key1 keyN        将交集存在dstkey</li>\n<li>取并集<br> sunion key1 key2 keyN<br> sunionstore dstkey key1 keyN    将并集存在dstkey</li>\n<li>取差集<br> sdiff key1 key2 keyN<br> sdiffstore dstkey key1 keyN        将差集存在dstkey</li>\n</ol>\n<h3 id=\"有序set类型\"><a href=\"#有序set类型\" class=\"headerlink\" title=\"有序set类型\"></a>有序set类型</h3><p>和set一样，不同的是每个元素关联一个double类型的score，根据score排序，sorted set的实现由skip list和hashtable</p>\n<ol>\n<li>添加<br> zadd key score member</li>\n<li>删除<br> zrem key member<br> zremrangebyrank key min max<br> zremrangebyscore key min max     删除集合score在给定区间的元素</li>\n<li>获取<br> zrange key start end<br> zrevrange    key start end            按score的逆序<br> zrangebyscore key min max        </li>\n<li>判断存在<br> zrank key member        返回下标<br> zrerank key member        返回逆序的下标</li>\n<li>数量<br> zcard key                        总数<br> zcount key min max         区间的数量</li>\n<li>修改<br> zincrby key incr member    增加member的score值并排序</li>\n</ol>\n<h3 id=\"hash类型\"><a href=\"#hash类型\" class=\"headerlink\" title=\"hash类型\"></a>hash类型</h3><p>redis的hash是一个string类型的field和value的映射表，hash特别适合存储对象，</p>\n<ol>\n<li>设置：<br> hset key field value<br> hmset key field1 value1 field2 value2</li>\n<li>获取：<br> hget key field<br> hmget key field1 field2</li>\n<li>判断存在<br> hexists key field</li>\n<li>删除<br> hdel key field</li>\n<li>查找<br> hkeys key            返回所有 field<br> hvals key            返回所有的value<br> hgetall key        返回所有field和value</li>\n<li>数量<br> hlen key</li>\n<li>值加减<br> hincrby key field integer    将指定的hash field加上定值</li>\n</ol>\n","excerpt":"<p><strong> redis学习笔记：</strong> <Excerpt in index | 首页摘要><br>    redis数据库的基本操作，增删改查<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys\"></a>keys</h3><p>redis本质上是一个key-value数据库</p>\n<ol>\n<li>设置：set key value</li>\n<li>获取：get key</li>\n<li>判断存在：exists key</li>\n<li>删除：del key        del  test:fan:age</li>\n<li>重命名：rename  oldkey newkey        </li>\n<li>数量：dbsize  返回数据</li>\n<li>获取所有key（通配符）：<code>Keys test:*:age</code><br><code>Keys test:?:age</code></li>\n<li>清空：flushdb    flushall</li>\n<li>设置有效时间：expire test:fan:age 30</li>\n<li>查询有效时间：ttl test:fan:age</li>\n</ol>\n<h3 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h3><ol>\n<li>设置：<br> set key value<br> setnx ky value(nx是not exist)<br> mset key1 value1 keyN valueN<br> msetnx key1 value1 keyN valueN</li>\n<li>获取：<br> get            不存在返回nil<br> getset        设置key的值，并返回key的旧值，不存在返回nil<br> mget        </li>\n<li>自增减：<br> incr key   对key的值进行++操作，返回新的值<br> decr key<br> incrby key integer        对key加上一个数值<br> decrby key integer</li>\n<li>截取：<br> substr key indexStart indexEnd             下标从0开始</li>\n<li>追加：<br> append key value</li>\n</ol>\n<h3 id=\"list类型\"><a href=\"#list类型\" class=\"headerlink\" title=\"list类型\"></a>list类型</h3><p>redis的list其实就是一个每个元素都是string 的双向链表，所以push和pop的时间复杂度都是O（1）</p>\n<ol>\n<li>添加<br> lpush key string         在头部添加<br> rpush key string        在尾部添加</li>\n<li>修改<br> lset key index value  修改指定下标的key的值</li>\n<li>删除<br> lpop key     从头部返回删除<br> rpop key  从尾部<br> lrem key count value  删除count个相同的value，count为0删除全部<br> blpop key …keyN timeout<br> brpop 从尾部删除</li>\n<li>获取<br> lrange key indexStart indexEnd</li>\n<li>数量<br> llen key        返回key对应的list长度</li>\n<li>截取<br> ltrim key start end</li>\n<li>转移<br> rpoplpush key1 key2    从key1尾部移到key2头部</li>\n</ol>\n<h3 id=\"set集合\"><a href=\"#set集合\" class=\"headerlink\" title=\"set集合\"></a>set集合</h3><p>redis的set就是String的无序集合，通过hashtable实现</p>\n<ol>\n<li>添加<br> sadd key member</li>\n<li>删除<br> srem key member        移除指定的元素<br> spop key                     删除并返回一个随机的</li>\n<li>获取<br> smembers key            返回所有<br> srandmember            随机取一个不删除</li>\n<li>判断存在<br> sismember key member</li>\n<li>数量<br> scard key                     返回元素个数</li>\n<li>转移<br> smove srckey dstkey member</li>\n<li>取交集<br> sinter key1 key2 keyN<br> sinterstore dstkey key1 keyN        将交集存在dstkey</li>\n<li>取并集<br> sunion key1 key2 keyN<br> sunionstore dstkey key1 keyN    将并集存在dstkey</li>\n<li>取差集<br> sdiff key1 key2 keyN<br> sdiffstore dstkey key1 keyN        将差集存在dstkey</li>\n</ol>\n<h3 id=\"有序set类型\"><a href=\"#有序set类型\" class=\"headerlink\" title=\"有序set类型\"></a>有序set类型</h3><p>和set一样，不同的是每个元素关联一个double类型的score，根据score排序，sorted set的实现由skip list和hashtable</p>\n<ol>\n<li>添加<br> zadd key score member</li>\n<li>删除<br> zrem key member<br> zremrangebyrank key min max<br> zremrangebyscore key min max     删除集合score在给定区间的元素</li>\n<li>获取<br> zrange key start end<br> zrevrange    key start end            按score的逆序<br> zrangebyscore key min max        </li>\n<li>判断存在<br> zrank key member        返回下标<br> zrerank key member        返回逆序的下标</li>\n<li>数量<br> zcard key                        总数<br> zcount key min max         区间的数量</li>\n<li>修改<br> zincrby key incr member    增加member的score值并排序</li>\n</ol>\n<h3 id=\"hash类型\"><a href=\"#hash类型\" class=\"headerlink\" title=\"hash类型\"></a>hash类型</h3><p>redis的hash是一个string类型的field和value的映射表，hash特别适合存储对象，</p>\n<ol>\n<li>设置：<br> hset key field value<br> hmset key field1 value1 field2 value2</li>\n<li>获取：<br> hget key field<br> hmget key field1 field2</li>\n<li>判断存在<br> hexists key field</li>\n<li>删除<br> hdel key field</li>\n<li>查找<br> hkeys key            返回所有 field<br> hvals key            返回所有的value<br> hgetall key        返回所有field和value</li>\n<li>数量<br> hlen key</li>\n<li>值加减<br> hincrby key field integer    将指定的hash field加上定值</li>\n</ol>"},{"title":"Ubuntu服务器私人定制","date":"2016-11-28T12:36:03.000Z","_content":"** ubuntu服务器私人定制：** <Excerpt in index | 首页摘要>\n把ubuntu服务器打造成自己的个性服务器，装逼必备！！！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n###　说明\n**此教程针对Ubuntu14,其他版本仅作参考**\n\n###　用户密码管理\n`sudo passwd root`\n1. 添加一个用户组并指定id为1002\n`sudo groupadd －g 1002 www`\n2. 添加一个用户到www组并指定id为1003\n`sudo useradd wyx -g 1002 -u 1003 -m`\n\n3. 修改用户的密码\n`sudo passwd wyx`\n4. 删除一个用户\n`sudo userdel wyx`\n\n5. 为该用户添加sudo权限\n\n```bash\nsudo usermod -a -G adm wyx\nsudo usermod -a -G sudo wyx\n```\n\n6. 查看所有用户和用户组：\n```bash\ncat /etc/passwd\ncat /etc/group\n```\n### 安装nodejs\n1. 安装nvm`curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash`\n2. 安装node`nvm install v4.4.4`,安装`nvm install v6.9.1`\n3. 设置默认的node版本`nvm alias default v4.4.4`\n4. 安装npm3  `npm install -g npm@3`\n5. 设置淘宝的cnpm源  `npm install -g cnpm --registry=https://registry.npm.taobao.org`\n6. 验证安装`node -v,npm -v,cnpm -v`\n### 安装node常用包\n1. 安装pm2`cnpm install -g pm2`\n2. 安装hexo博客`cnpm install -g hexo-cli`\n3. 安装同步插件rsync`cnpm install -g rsync`\n\n### 安装docker\n1. apt安装\n\n```bash\nsudo apt-get update\nsudo apt-get install -y docker.io\nsudo ln -sf /usr/bin/docker.io /usr/local/bin/docker\nsudo sed -i '$acomplete -F _docker docker' /etc/bash_completion.d/docker.io\n```\n\n2. 源码安装最新版本\n\n```bash\nsudo apt-get install apt-transport-https\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9\nsudo bash -c \"echo deb https://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list\"\nsudo apt-get update\nsudo apt-get install lxc-docker\n```\n\n3. 验证安装版本\n` docker -v`\n\n### 安装nginx\n`sudo apt-get install nginx`\n启动和配置nginx\n### 安装redis\n`sudo apt-get install redis-server`\n启动和配置文件:\n### 安装mongodb\n1. 安装3.0\n\n```bash\napt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\necho \"deb http://repo.mongodb.org/apt/debian wheezy/mongodb-org/3.0 main\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list\napt-get update  \napt-get install mongodb-org\n```\n\n2. 安装3.2最新版\n\n```bash\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927\necho \"deb http://repo.mongodb.org/apt/ubuntu \"$(lsb_release -sc)\"/mongodb-org/3.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb.list\nsudo apt-get update\nsudo apt-get install mongodb-org\n```\n\n3. 制定版本\n`apt-get install mongodb-org=3.2.0 mongodb-org-server=3.2.0 mongodb-org-shell=3.2.0 mongodb-org-mongos=3.2.0 mongodb-org-tools=3.2.0`\n\n4. 启动服务\n\n```bash\nsudo service mongod start\nsudo service mongod stop\n```\n\n5. 验证安装\n`mongod --version`\n\n配置\n\n### 安装jdk\n安装jdk1.7`sudo apt-get install openjdk-7-jdk`\n源码安装\n\n```bash\nsudo mkdir /usr/lib/jvm\nsudo tar zxvf jdk-7u21-linux-i586.tar.gz -C /usr/lib/jvm\ncd /usr/lib/jvm\nsudo mv jdk1.7.0_21 java\n\nsudo vim ~/.bashrc\n\nexport JAVA_HOME=/usr/lib/jvm/java\nexport JRE_HOME=${JAVA_HOME}/jre  \nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  \nexport PATH=${JAVA_HOME}/bin:$PATH  \n```\n### 安装mysql\n实用ubuntu自带的工具下载\n`sudo apt-get install mysql-server`\n\n### 环境变量\n常见的方法有两种。\n\n1. 在用户主目录下有一个 .bashrc 文件，可以在此文件中加入 PATH 的设置如下： \n`export PATH=”$PATH:/your path1/:/your path2/…..” `\n\n2. 在 /etc/profile中增加\n```bash\nPATH=\"$PATH:/home/zhengb66/bin\" \nexport PATH\n``` \n\n### 开机自启动\n1. 方法一，编辑rc.loacl脚本\nUbuntu开机之后会执行/etc/rc.local文件中的脚本，\n所以我们可以直接在/etc/rc.local中添加启动脚本。\n当然要添加到语句：exit 0 前面才行。代码如下:\n`sudo vi /etc/rc.local`\n然后在 exit 0 前面添加好脚本代码。\n\n2. 方法二，添加一个Ubuntu的开机启动服务。\n如果要添加为开机启动执行的脚本文件，\n可先将脚本复制或者软连接到/etc/init.d/目录下，\n然后用：update-rc.d xxx defaults NN命令(NN为启动顺序)，\n将脚本添加到初始化执行的队列中去。\n注意如果脚本需要用到网络，则NN需设置一个比较大的数字，如99。\n1) 将你的启动脚本复制到 /etc/init.d目录下\n 以下假设你的脚本文件名为 test。\n2) 设置脚本文件的权限\n\n代码如下:\n`sudo chmod 755 /etc/init.d/test`\n3) 执行如下命令将脚本放到启动脚本中去：\n代码如下:\n`cd /etc/init.d`  `sudo update-rc.d test defaults 95`\n 注：其中数字95是脚本启动的顺序号，按照自己的需要相应修改即可。在你有多个启动脚本，而它们之间又有先后启动的依赖关系时你就知道这个数字的具体作用了。该命令的输出信息参考如下：\n卸载启动脚本的方法：\n代码如下:\n`cd /etc/init.d`\n`sudo update-rc.d -f test remove`\n\n### 定时任务\n在Ubuntu下，cron是被默认安装并启动的。通过查看/etc/crontab\n推荐使用crontab -e命令添加自定义的任务（编辑的是/var/spool/cron下对应用户的cron文件，在/var/spool/cron下的crontab文件 不可以直接创建或者直接修改，crontab文件是通过crontab命令得到的）。\n`crontab -e`\n\n1. 直接执行命令行\n每2分钟打印一个字符串“Hello World”，保存至文件/home/laigw/cron/HelloWorld.txt中，cron 格式如下：\n`*/2 * * * * echo “Hello World.” >> /home/HelloWorld.txt`\n\n2. shell 文件\n每3分钟调用一次 /home/laigw/cron/test.sh 文件，cron 格式如下：\n`*/3 * * * * /home/laigw/cron/test.sh`\n### ftp和rsync配置\n\n### 持续集成环境\n1. jenkens配置\n2. gitlab配置\n3. git服务器\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","source":"_posts/server-config.md","raw":"title: ubuntu服务器私人定制\ndate: 2016-11-28 20:36:03\ntags: linux\ncategories: 开发工具\n---\n** ubuntu服务器私人定制：** <Excerpt in index | 首页摘要>\n把ubuntu服务器打造成自己的个性服务器，装逼必备！！！\n<!-- more -->\n<The rest of contents | 余下全文>\n\n###　说明\n**此教程针对Ubuntu14,其他版本仅作参考**\n\n###　用户密码管理\n`sudo passwd root`\n1. 添加一个用户组并指定id为1002\n`sudo groupadd －g 1002 www`\n2. 添加一个用户到www组并指定id为1003\n`sudo useradd wyx -g 1002 -u 1003 -m`\n\n3. 修改用户的密码\n`sudo passwd wyx`\n4. 删除一个用户\n`sudo userdel wyx`\n\n5. 为该用户添加sudo权限\n\n```bash\nsudo usermod -a -G adm wyx\nsudo usermod -a -G sudo wyx\n```\n\n6. 查看所有用户和用户组：\n```bash\ncat /etc/passwd\ncat /etc/group\n```\n### 安装nodejs\n1. 安装nvm`curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash`\n2. 安装node`nvm install v4.4.4`,安装`nvm install v6.9.1`\n3. 设置默认的node版本`nvm alias default v4.4.4`\n4. 安装npm3  `npm install -g npm@3`\n5. 设置淘宝的cnpm源  `npm install -g cnpm --registry=https://registry.npm.taobao.org`\n6. 验证安装`node -v,npm -v,cnpm -v`\n### 安装node常用包\n1. 安装pm2`cnpm install -g pm2`\n2. 安装hexo博客`cnpm install -g hexo-cli`\n3. 安装同步插件rsync`cnpm install -g rsync`\n\n### 安装docker\n1. apt安装\n\n```bash\nsudo apt-get update\nsudo apt-get install -y docker.io\nsudo ln -sf /usr/bin/docker.io /usr/local/bin/docker\nsudo sed -i '$acomplete -F _docker docker' /etc/bash_completion.d/docker.io\n```\n\n2. 源码安装最新版本\n\n```bash\nsudo apt-get install apt-transport-https\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9\nsudo bash -c \"echo deb https://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list\"\nsudo apt-get update\nsudo apt-get install lxc-docker\n```\n\n3. 验证安装版本\n` docker -v`\n\n### 安装nginx\n`sudo apt-get install nginx`\n启动和配置nginx\n### 安装redis\n`sudo apt-get install redis-server`\n启动和配置文件:\n### 安装mongodb\n1. 安装3.0\n\n```bash\napt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\necho \"deb http://repo.mongodb.org/apt/debian wheezy/mongodb-org/3.0 main\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list\napt-get update  \napt-get install mongodb-org\n```\n\n2. 安装3.2最新版\n\n```bash\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927\necho \"deb http://repo.mongodb.org/apt/ubuntu \"$(lsb_release -sc)\"/mongodb-org/3.2 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb.list\nsudo apt-get update\nsudo apt-get install mongodb-org\n```\n\n3. 制定版本\n`apt-get install mongodb-org=3.2.0 mongodb-org-server=3.2.0 mongodb-org-shell=3.2.0 mongodb-org-mongos=3.2.0 mongodb-org-tools=3.2.0`\n\n4. 启动服务\n\n```bash\nsudo service mongod start\nsudo service mongod stop\n```\n\n5. 验证安装\n`mongod --version`\n\n配置\n\n### 安装jdk\n安装jdk1.7`sudo apt-get install openjdk-7-jdk`\n源码安装\n\n```bash\nsudo mkdir /usr/lib/jvm\nsudo tar zxvf jdk-7u21-linux-i586.tar.gz -C /usr/lib/jvm\ncd /usr/lib/jvm\nsudo mv jdk1.7.0_21 java\n\nsudo vim ~/.bashrc\n\nexport JAVA_HOME=/usr/lib/jvm/java\nexport JRE_HOME=${JAVA_HOME}/jre  \nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  \nexport PATH=${JAVA_HOME}/bin:$PATH  \n```\n### 安装mysql\n实用ubuntu自带的工具下载\n`sudo apt-get install mysql-server`\n\n### 环境变量\n常见的方法有两种。\n\n1. 在用户主目录下有一个 .bashrc 文件，可以在此文件中加入 PATH 的设置如下： \n`export PATH=”$PATH:/your path1/:/your path2/…..” `\n\n2. 在 /etc/profile中增加\n```bash\nPATH=\"$PATH:/home/zhengb66/bin\" \nexport PATH\n``` \n\n### 开机自启动\n1. 方法一，编辑rc.loacl脚本\nUbuntu开机之后会执行/etc/rc.local文件中的脚本，\n所以我们可以直接在/etc/rc.local中添加启动脚本。\n当然要添加到语句：exit 0 前面才行。代码如下:\n`sudo vi /etc/rc.local`\n然后在 exit 0 前面添加好脚本代码。\n\n2. 方法二，添加一个Ubuntu的开机启动服务。\n如果要添加为开机启动执行的脚本文件，\n可先将脚本复制或者软连接到/etc/init.d/目录下，\n然后用：update-rc.d xxx defaults NN命令(NN为启动顺序)，\n将脚本添加到初始化执行的队列中去。\n注意如果脚本需要用到网络，则NN需设置一个比较大的数字，如99。\n1) 将你的启动脚本复制到 /etc/init.d目录下\n 以下假设你的脚本文件名为 test。\n2) 设置脚本文件的权限\n\n代码如下:\n`sudo chmod 755 /etc/init.d/test`\n3) 执行如下命令将脚本放到启动脚本中去：\n代码如下:\n`cd /etc/init.d`  `sudo update-rc.d test defaults 95`\n 注：其中数字95是脚本启动的顺序号，按照自己的需要相应修改即可。在你有多个启动脚本，而它们之间又有先后启动的依赖关系时你就知道这个数字的具体作用了。该命令的输出信息参考如下：\n卸载启动脚本的方法：\n代码如下:\n`cd /etc/init.d`\n`sudo update-rc.d -f test remove`\n\n### 定时任务\n在Ubuntu下，cron是被默认安装并启动的。通过查看/etc/crontab\n推荐使用crontab -e命令添加自定义的任务（编辑的是/var/spool/cron下对应用户的cron文件，在/var/spool/cron下的crontab文件 不可以直接创建或者直接修改，crontab文件是通过crontab命令得到的）。\n`crontab -e`\n\n1. 直接执行命令行\n每2分钟打印一个字符串“Hello World”，保存至文件/home/laigw/cron/HelloWorld.txt中，cron 格式如下：\n`*/2 * * * * echo “Hello World.” >> /home/HelloWorld.txt`\n\n2. shell 文件\n每3分钟调用一次 /home/laigw/cron/test.sh 文件，cron 格式如下：\n`*/3 * * * * /home/laigw/cron/test.sh`\n### ftp和rsync配置\n\n### 持续集成环境\n1. jenkens配置\n2. gitlab配置\n3. git服务器\n\n> 如果文章对你有帮助,请去我的博客留个言吧! [我的博客][1]\n\n[1]: http://geeksblog.cc\n","slug":"server-config","published":1,"updated":"2016-11-28T13:06:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d990029ohzjv5gvmwn9","content":"<p><strong> ubuntu服务器私人定制：</strong> <Excerpt in index | 首页摘要><br>把ubuntu服务器打造成自己的个性服务器，装逼必备！！！<br><a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<p>###　说明<br><strong>此教程针对Ubuntu14,其他版本仅作参考</strong></p>\n<p>###　用户密码管理<br><code>sudo passwd root</code></p>\n<ol>\n<li>添加一个用户组并指定id为1002<br><code>sudo groupadd －g 1002 www</code></li>\n<li><p>添加一个用户到www组并指定id为1003<br><code>sudo useradd wyx -g 1002 -u 1003 -m</code></p>\n</li>\n<li><p>修改用户的密码<br><code>sudo passwd wyx</code></p>\n</li>\n<li><p>删除一个用户<br><code>sudo userdel wyx</code></p>\n</li>\n<li><p>为该用户添加sudo权限</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo usermod <span class=\"_\">-a</span> -G adm wyx</div><div class=\"line\">sudo usermod <span class=\"_\">-a</span> -G sudo wyx</div></pre></td></tr></table></figure>\n<ol>\n<li>查看所有用户和用户组：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/passwd</div><div class=\"line\">cat /etc/group</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h3><ol>\n<li>安装nvm<code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</code></li>\n<li>安装node<code>nvm install v4.4.4</code>,安装<code>nvm install v6.9.1</code></li>\n<li>设置默认的node版本<code>nvm alias default v4.4.4</code></li>\n<li>安装npm3  <code>npm install -g npm@3</code></li>\n<li>设置淘宝的cnpm源  <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li>\n<li>验证安装<code>node -v,npm -v,cnpm -v</code><h3 id=\"安装node常用包\"><a href=\"#安装node常用包\" class=\"headerlink\" title=\"安装node常用包\"></a>安装node常用包</h3></li>\n<li>安装pm2<code>cnpm install -g pm2</code></li>\n<li>安装hexo博客<code>cnpm install -g hexo-cli</code></li>\n<li>安装同步插件rsync<code>cnpm install -g rsync</code></li>\n</ol>\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><ol>\n<li>apt安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install -y docker.io</div><div class=\"line\">sudo ln -sf /usr/bin/docker.io /usr/<span class=\"built_in\">local</span>/bin/docker</div><div class=\"line\">sudo sed -i <span class=\"string\">'$acomplete -F _docker docker'</span> /etc/bash_completion.d/docker.io</div></pre></td></tr></table></figure>\n<ol>\n<li>源码安装最新版本</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install apt-transport-https</div><div class=\"line\">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9</div><div class=\"line\">sudo bash -c <span class=\"string\">\"echo deb https://get.docker.io/ubuntu docker main &gt; /etc/apt/sources.list.d/docker.list\"</span></div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install lxc-docker</div></pre></td></tr></table></figure>\n<ol>\n<li>验证安装版本<br><code>docker -v</code></li>\n</ol>\n<h3 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h3><p><code>sudo apt-get install nginx</code><br>启动和配置nginx</p>\n<h3 id=\"安装redis\"><a href=\"#安装redis\" class=\"headerlink\" title=\"安装redis\"></a>安装redis</h3><p><code>sudo apt-get install redis-server</code><br>启动和配置文件:</p>\n<h3 id=\"安装mongodb\"><a href=\"#安装mongodb\" class=\"headerlink\" title=\"安装mongodb\"></a>安装mongodb</h3><ol>\n<li>安装3.0</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb http://repo.mongodb.org/apt/debian wheezy/mongodb-org/3.0 main\"</span> | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list</div><div class=\"line\">apt-get update  </div><div class=\"line\">apt-get install mongodb-org</div></pre></td></tr></table></figure>\n<ol>\n<li>安装3.2最新版</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb http://repo.mongodb.org/apt/ubuntu \"</span>$(lsb_release -sc)<span class=\"string\">\"/mongodb-org/3.2 multiverse\"</span> | sudo tee /etc/apt/sources.list.d/mongodb.list</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install mongodb-org</div></pre></td></tr></table></figure>\n<ol>\n<li><p>制定版本<br><code>apt-get install mongodb-org=3.2.0 mongodb-org-server=3.2.0 mongodb-org-shell=3.2.0 mongodb-org-mongos=3.2.0 mongodb-org-tools=3.2.0</code></p>\n</li>\n<li><p>启动服务</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo service mongod start</div><div class=\"line\">sudo service mongod stop</div></pre></td></tr></table></figure>\n<ol>\n<li>验证安装<br><code>mongod --version</code></li>\n</ol>\n<p>配置</p>\n<h3 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h3><p>安装jdk1.7<code>sudo apt-get install openjdk-7-jdk</code><br>源码安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mkdir /usr/lib/jvm</div><div class=\"line\">sudo tar zxvf jdk-7u21-linux-i586.tar.gz -C /usr/lib/jvm</div><div class=\"line\"><span class=\"built_in\">cd</span> /usr/lib/jvm</div><div class=\"line\">sudo mv jdk1.7.0_21 java</div><div class=\"line\"></div><div class=\"line\">sudo vim ~/.bashrc</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/lib/jvm/java</div><div class=\"line\"><span class=\"built_in\">export</span> JRE_HOME=<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/jre  </div><div class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/lib:<span class=\"variable\">$&#123;JRE_HOME&#125;</span>/lib  </div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/bin:<span class=\"variable\">$PATH</span></div></pre></td></tr></table></figure>\n<h3 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h3><p>实用ubuntu自带的工具下载<br><code>sudo apt-get install mysql-server</code></p>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><p>常见的方法有两种。</p>\n<ol>\n<li><p>在用户主目录下有一个 .bashrc 文件，可以在此文件中加入 PATH 的设置如下：<br><code>export PATH=”$PATH:/your path1/:/your path2/…..”</code></p>\n</li>\n<li><p>在 /etc/profile中增加</p>\n<pre><code class=\"bash\">PATH=<span class=\"string\">\"<span class=\"variable\">$PATH</span>:/home/zhengb66/bin\"</span> \n<span class=\"built_in\">export</span> PATH\n</code></pre>\n</li>\n</ol>\n<h3 id=\"开机自启动\"><a href=\"#开机自启动\" class=\"headerlink\" title=\"开机自启动\"></a>开机自启动</h3><ol>\n<li><p>方法一，编辑rc.loacl脚本<br>Ubuntu开机之后会执行/etc/rc.local文件中的脚本，<br>所以我们可以直接在/etc/rc.local中添加启动脚本。<br>当然要添加到语句：exit 0 前面才行。代码如下:<br><code>sudo vi /etc/rc.local</code><br>然后在 exit 0 前面添加好脚本代码。</p>\n</li>\n<li><p>方法二，添加一个Ubuntu的开机启动服务。<br>如果要添加为开机启动执行的脚本文件，<br>可先将脚本复制或者软连接到/etc/init.d/目录下，<br>然后用：update-rc.d xxx defaults NN命令(NN为启动顺序)，<br>将脚本添加到初始化执行的队列中去。<br>注意如果脚本需要用到网络，则NN需设置一个比较大的数字，如99。<br>1) 将你的启动脚本复制到 /etc/init.d目录下<br>以下假设你的脚本文件名为 test。<br>2) 设置脚本文件的权限</p>\n</li>\n</ol>\n<p>代码如下:<br><code>sudo chmod 755 /etc/init.d/test</code><br>3) 执行如下命令将脚本放到启动脚本中去：<br>代码如下:<br><code>cd /etc/init.d</code>  <code>sudo update-rc.d test defaults 95</code><br> 注：其中数字95是脚本启动的顺序号，按照自己的需要相应修改即可。在你有多个启动脚本，而它们之间又有先后启动的依赖关系时你就知道这个数字的具体作用了。该命令的输出信息参考如下：<br>卸载启动脚本的方法：<br>代码如下:<br><code>cd /etc/init.d</code><br><code>sudo update-rc.d -f test remove</code></p>\n<h3 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h3><p>在Ubuntu下，cron是被默认安装并启动的。通过查看/etc/crontab<br>推荐使用crontab -e命令添加自定义的任务（编辑的是/var/spool/cron下对应用户的cron文件，在/var/spool/cron下的crontab文件 不可以直接创建或者直接修改，crontab文件是通过crontab命令得到的）。<br><code>crontab -e</code></p>\n<ol>\n<li><p>直接执行命令行<br>每2分钟打印一个字符串“Hello World”，保存至文件/home/laigw/cron/HelloWorld.txt中，cron 格式如下：<br><code>*/2 * * * * echo “Hello World.” &gt;&gt; /home/HelloWorld.txt</code></p>\n</li>\n<li><p>shell 文件<br>每3分钟调用一次 /home/laigw/cron/test.sh 文件，cron 格式如下：<br><code>*/3 * * * * /home/laigw/cron/test.sh</code></p>\n<h3 id=\"ftp和rsync配置\"><a href=\"#ftp和rsync配置\" class=\"headerlink\" title=\"ftp和rsync配置\"></a>ftp和rsync配置</h3></li>\n</ol>\n<h3 id=\"持续集成环境\"><a href=\"#持续集成环境\" class=\"headerlink\" title=\"持续集成环境\"></a>持续集成环境</h3><ol>\n<li>jenkens配置</li>\n<li>gitlab配置</li>\n<li>git服务器</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>\n","excerpt":"<p><strong> ubuntu服务器私人定制：</strong> <Excerpt in index | 首页摘要><br>把ubuntu服务器打造成自己的个性服务器，装逼必备！！！<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<p>###　说明<br><strong>此教程针对Ubuntu14,其他版本仅作参考</strong></p>\n<p>###　用户密码管理<br><code>sudo passwd root</code></p>\n<ol>\n<li>添加一个用户组并指定id为1002<br><code>sudo groupadd －g 1002 www</code></li>\n<li><p>添加一个用户到www组并指定id为1003<br><code>sudo useradd wyx -g 1002 -u 1003 -m</code></p>\n</li>\n<li><p>修改用户的密码<br><code>sudo passwd wyx</code></p>\n</li>\n<li><p>删除一个用户<br><code>sudo userdel wyx</code></p>\n</li>\n<li><p>为该用户添加sudo权限</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo usermod <span class=\"_\">-a</span> -G adm wyx</div><div class=\"line\">sudo usermod <span class=\"_\">-a</span> -G sudo wyx</div></pre></td></tr></table></figure>\n<ol>\n<li>查看所有用户和用户组：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/passwd</div><div class=\"line\">cat /etc/group</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h3><ol>\n<li>安装nvm<code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</code></li>\n<li>安装node<code>nvm install v4.4.4</code>,安装<code>nvm install v6.9.1</code></li>\n<li>设置默认的node版本<code>nvm alias default v4.4.4</code></li>\n<li>安装npm3  <code>npm install -g npm@3</code></li>\n<li>设置淘宝的cnpm源  <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li>\n<li>验证安装<code>node -v,npm -v,cnpm -v</code><h3 id=\"安装node常用包\"><a href=\"#安装node常用包\" class=\"headerlink\" title=\"安装node常用包\"></a>安装node常用包</h3></li>\n<li>安装pm2<code>cnpm install -g pm2</code></li>\n<li>安装hexo博客<code>cnpm install -g hexo-cli</code></li>\n<li>安装同步插件rsync<code>cnpm install -g rsync</code></li>\n</ol>\n<h3 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h3><ol>\n<li>apt安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install -y docker.io</div><div class=\"line\">sudo ln -sf /usr/bin/docker.io /usr/<span class=\"built_in\">local</span>/bin/docker</div><div class=\"line\">sudo sed -i <span class=\"string\">'$acomplete -F _docker docker'</span> /etc/bash_completion.d/docker.io</div></pre></td></tr></table></figure>\n<ol>\n<li>源码安装最新版本</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install apt-transport-https</div><div class=\"line\">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9</div><div class=\"line\">sudo bash -c <span class=\"string\">\"echo deb https://get.docker.io/ubuntu docker main &gt; /etc/apt/sources.list.d/docker.list\"</span></div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install lxc-docker</div></pre></td></tr></table></figure>\n<ol>\n<li>验证安装版本<br><code>docker -v</code></li>\n</ol>\n<h3 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h3><p><code>sudo apt-get install nginx</code><br>启动和配置nginx</p>\n<h3 id=\"安装redis\"><a href=\"#安装redis\" class=\"headerlink\" title=\"安装redis\"></a>安装redis</h3><p><code>sudo apt-get install redis-server</code><br>启动和配置文件:</p>\n<h3 id=\"安装mongodb\"><a href=\"#安装mongodb\" class=\"headerlink\" title=\"安装mongodb\"></a>安装mongodb</h3><ol>\n<li>安装3.0</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb http://repo.mongodb.org/apt/debian wheezy/mongodb-org/3.0 main\"</span> | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list</div><div class=\"line\">apt-get update  </div><div class=\"line\">apt-get install mongodb-org</div></pre></td></tr></table></figure>\n<ol>\n<li>安装3.2最新版</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"deb http://repo.mongodb.org/apt/ubuntu \"</span>$(lsb_release -sc)<span class=\"string\">\"/mongodb-org/3.2 multiverse\"</span> | sudo tee /etc/apt/sources.list.d/mongodb.list</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install mongodb-org</div></pre></td></tr></table></figure>\n<ol>\n<li><p>制定版本<br><code>apt-get install mongodb-org=3.2.0 mongodb-org-server=3.2.0 mongodb-org-shell=3.2.0 mongodb-org-mongos=3.2.0 mongodb-org-tools=3.2.0</code></p>\n</li>\n<li><p>启动服务</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo service mongod start</div><div class=\"line\">sudo service mongod stop</div></pre></td></tr></table></figure>\n<ol>\n<li>验证安装<br><code>mongod --version</code></li>\n</ol>\n<p>配置</p>\n<h3 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h3><p>安装jdk1.7<code>sudo apt-get install openjdk-7-jdk</code><br>源码安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mkdir /usr/lib/jvm</div><div class=\"line\">sudo tar zxvf jdk-7u21-linux-i586.tar.gz -C /usr/lib/jvm</div><div class=\"line\"><span class=\"built_in\">cd</span> /usr/lib/jvm</div><div class=\"line\">sudo mv jdk1.7.0_21 java</div><div class=\"line\"></div><div class=\"line\">sudo vim ~/.bashrc</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/lib/jvm/java</div><div class=\"line\"><span class=\"built_in\">export</span> JRE_HOME=<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/jre  </div><div class=\"line\"><span class=\"built_in\">export</span> CLASSPATH=.:<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/lib:<span class=\"variable\">$&#123;JRE_HOME&#125;</span>/lib  </div><div class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$&#123;JAVA_HOME&#125;</span>/bin:<span class=\"variable\">$PATH</span></div></pre></td></tr></table></figure>\n<h3 id=\"安装mysql\"><a href=\"#安装mysql\" class=\"headerlink\" title=\"安装mysql\"></a>安装mysql</h3><p>实用ubuntu自带的工具下载<br><code>sudo apt-get install mysql-server</code></p>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><p>常见的方法有两种。</p>\n<ol>\n<li><p>在用户主目录下有一个 .bashrc 文件，可以在此文件中加入 PATH 的设置如下：<br><code>export PATH=”$PATH:/your path1/:/your path2/…..”</code></p>\n</li>\n<li><p>在 /etc/profile中增加</p>\n<pre><code class=\"bash\">PATH=<span class=\"string\">\"<span class=\"variable\">$PATH</span>:/home/zhengb66/bin\"</span> \n<span class=\"built_in\">export</span> PATH\n</code></pre>\n</li>\n</ol>\n<h3 id=\"开机自启动\"><a href=\"#开机自启动\" class=\"headerlink\" title=\"开机自启动\"></a>开机自启动</h3><ol>\n<li><p>方法一，编辑rc.loacl脚本<br>Ubuntu开机之后会执行/etc/rc.local文件中的脚本，<br>所以我们可以直接在/etc/rc.local中添加启动脚本。<br>当然要添加到语句：exit 0 前面才行。代码如下:<br><code>sudo vi /etc/rc.local</code><br>然后在 exit 0 前面添加好脚本代码。</p>\n</li>\n<li><p>方法二，添加一个Ubuntu的开机启动服务。<br>如果要添加为开机启动执行的脚本文件，<br>可先将脚本复制或者软连接到/etc/init.d/目录下，<br>然后用：update-rc.d xxx defaults NN命令(NN为启动顺序)，<br>将脚本添加到初始化执行的队列中去。<br>注意如果脚本需要用到网络，则NN需设置一个比较大的数字，如99。<br>1) 将你的启动脚本复制到 /etc/init.d目录下<br>以下假设你的脚本文件名为 test。<br>2) 设置脚本文件的权限</p>\n</li>\n</ol>\n<p>代码如下:<br><code>sudo chmod 755 /etc/init.d/test</code><br>3) 执行如下命令将脚本放到启动脚本中去：<br>代码如下:<br><code>cd /etc/init.d</code>  <code>sudo update-rc.d test defaults 95</code><br> 注：其中数字95是脚本启动的顺序号，按照自己的需要相应修改即可。在你有多个启动脚本，而它们之间又有先后启动的依赖关系时你就知道这个数字的具体作用了。该命令的输出信息参考如下：<br>卸载启动脚本的方法：<br>代码如下:<br><code>cd /etc/init.d</code><br><code>sudo update-rc.d -f test remove</code></p>\n<h3 id=\"定时任务\"><a href=\"#定时任务\" class=\"headerlink\" title=\"定时任务\"></a>定时任务</h3><p>在Ubuntu下，cron是被默认安装并启动的。通过查看/etc/crontab<br>推荐使用crontab -e命令添加自定义的任务（编辑的是/var/spool/cron下对应用户的cron文件，在/var/spool/cron下的crontab文件 不可以直接创建或者直接修改，crontab文件是通过crontab命令得到的）。<br><code>crontab -e</code></p>\n<ol>\n<li><p>直接执行命令行<br>每2分钟打印一个字符串“Hello World”，保存至文件/home/laigw/cron/HelloWorld.txt中，cron 格式如下：<br><code>*/2 * * * * echo “Hello World.” &gt;&gt; /home/HelloWorld.txt</code></p>\n</li>\n<li><p>shell 文件<br>每3分钟调用一次 /home/laigw/cron/test.sh 文件，cron 格式如下：<br><code>*/3 * * * * /home/laigw/cron/test.sh</code></p>\n<h3 id=\"ftp和rsync配置\"><a href=\"#ftp和rsync配置\" class=\"headerlink\" title=\"ftp和rsync配置\"></a>ftp和rsync配置</h3></li>\n</ol>\n<h3 id=\"持续集成环境\"><a href=\"#持续集成环境\" class=\"headerlink\" title=\"持续集成环境\"></a>持续集成环境</h3><ol>\n<li>jenkens配置</li>\n<li>gitlab配置</li>\n<li>git服务器</li>\n</ol>\n<blockquote>\n<p>如果文章对你有帮助,请去我的博客留个言吧! <a href=\"http://geeksblog.cc\">我的博客</a></p>\n</blockquote>"},{"title":"排序算法学习","date":"2016-05-03T14:39:24.000Z","_content":"** {{ title }}：** <Excerpt in index | 首页摘要>\n    各种排序算法，算法的实现和分析\n <!-- more -->\n<The rest of contents | 余下全文>\n\n## 排序算法的分类\n1. 排序分内排序和外排序。\n2. 内排序:指在排序期间数据对象全部存放在内存的排序。\n3. 外排序:指在排序期间全部对象个数太多,不能同时存放在内存,必须根据排序过程的要求,不断在内、外存之间移动的排序。\n4. 内排序的方法有许多种,按所用策略不同,可归纳为五类:插入排序、选择排序、交换排序、归并排序、分配排序和计数排序。\n5. 插入排序主要包括直接插入排序，折半插入排序和希尔排序两种;\n6. 选择排序主要包括直接选择排序和堆排序;\n7. 交换排序主要包括冒泡排序和快速排序;\n8. 归并排序主要包括二路归并(常用的归并排序)和自然归并。\n9. 分配排序主要包括箱排序和基数排序\n\n\n## 冒泡排序\n- 冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，是不用交换的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法\n```\n// js代码\nfunction sort(arr) {\nif (arr.length == 0) {\n    return [];\n}\nvar length = arr.length;\nfor (var i = 0; i < length; i++) {\n        for (var j = 0; j < length - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                var temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n                console.log(arr);\n            }\n        }\n    }\n}\n\n```\n\n\n## 快速排序\n- 快速排序是对冒泡排序的一种改进。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列.\n- 时间复杂度：O（n*lgn）最坏：O（n^2）空间复杂度：O（n*lgn）\n\n```\n// js递归实现\nfunction quickSort(arr) {\n    if (arr.length == 0) {\n        return [];\n    }\n    var left = [];\n    var right = [];\n    var pivot = arr[0];\n    for (var i = 1; i < arr.length; i++) {\n        if (arr[i] < pivot) {\n            left.push(arr[i]);\n        } else {\n            right.push(arr[i]);\n        }\n    }\n    return quickSort(left).concat(pivot, quickSort(right));\n}\nvar a = [];\nfor (var i = 0; i < 10; ++i) {\n    a[i] = Math.floor((Math.random() * 100) + 1);\n}\nconsole.log(a);\nconsole.log(quickSort(a));\n```\n## 直接插入排序  \n- 直接插入排序(straight insertion sort)的作法是：每次从无序表中取出第一个元素，把它插入到有序表的合适位置，使有序表仍然有序.\n\n```\nfunction insertionSort(arr) {\n    var temp, inner;\n    for (var outer = 1; outer <= arr.length - 1; ++outer) {\n        temp = arr[outer];\n        inner = outer;\n        while (inner > 0 && (arr[inner - 1] >= temp)) {\n            arr[inner] = arr[inner - 1];\n            --inner;\n        }\n        arr[inner] = temp;\n    }\n    return arr;\n}\nvar a = [];\nfor (var i = 0; i < 10; ++i) {\n    a[i] = Math.floor((Math.random() * 100) + 1);\n}\nconsole.log(a);\nconsole.log(insertionSort(a));\n```\n\n## 折半插入排序\n- 折半插入排序算法的具体操作为：在将一个新元素插入已排好序的数组的过程中，寻找插入点时，将待插入区域的首元素设置为a[low],末元素设置为 a[high]，则轮比较时将待插入元素与a[m],其中m=(low+high)/2相比较,如果比参考元素小，则选择a[low]到a[m-1]为新 的插入区域(即high=m-1)，否则选择a[m+1]到a[high]为新的插入区域（即low=m+1），如此直至low<=high不成 立，即将此位置之后所有元素后移一位，并将新元素插入a[high+1]\n\n\n## 希尔排序\n- 先取一个小于n的整数d1作为第一个增量，把文件的全部记录分成d1个组。所有距离为dl的倍数的记录放在同一个组中。先在各组内进行直接插入 排序；然后，取第二个增量d2<d1重复上述的分组和排序，直至所取的增量dt=1(dt<dt-l<…<d2<d1)， 即所有记录放在同一组中进行直接插入排序为止。\n- 该方法实质上是一种分组插入方法。插入排序（Insertion Sort）的一个重要的特点是，如果原始数据的大部分元素已经排序，那么插入排序的速度很快（因为需要移动的元素很少）。从这个事实我们可以想到，如果原 始数据只有很少元素，那么排序的速度也很快。－－希尔排序就是基于这两点对插入排序作出了改进。\n\n\n## 直接选择排序\n- 直接选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第n个 元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么 交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。时间复杂度是O(n^2)\n\n\n## 堆排序\n- 我们知道堆的结构是节点i的孩子为2*i和2*i+1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n/2开始和其子节点共3个值选择最大(大顶堆)或者最小(小顶堆),这3个元素之间的选择当然不会破坏稳定性。但当为n /2-1, n/2-2, ...1这些个父节点选择元素时，就会破坏稳定性。有可能第n/2个父节点交换把后面一个元素交换过去了，而第n/2-1个父节点把后面一个相同的元素没 有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。\n\n\n\n## 二路归并排序\n- 归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素(认为直接有序)或者2个序列(1次比较和交换),然后把各个有序的段序列合并成一个有 序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定 性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结 果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。\n","source":"_posts/sort-study.md","raw":"title: 排序算法学习\ndate: 2016-05-03 22:39:24\ntags: others\ncategories: 算法\n---\n** {{ title }}：** <Excerpt in index | 首页摘要>\n    各种排序算法，算法的实现和分析\n <!-- more -->\n<The rest of contents | 余下全文>\n\n## 排序算法的分类\n1. 排序分内排序和外排序。\n2. 内排序:指在排序期间数据对象全部存放在内存的排序。\n3. 外排序:指在排序期间全部对象个数太多,不能同时存放在内存,必须根据排序过程的要求,不断在内、外存之间移动的排序。\n4. 内排序的方法有许多种,按所用策略不同,可归纳为五类:插入排序、选择排序、交换排序、归并排序、分配排序和计数排序。\n5. 插入排序主要包括直接插入排序，折半插入排序和希尔排序两种;\n6. 选择排序主要包括直接选择排序和堆排序;\n7. 交换排序主要包括冒泡排序和快速排序;\n8. 归并排序主要包括二路归并(常用的归并排序)和自然归并。\n9. 分配排序主要包括箱排序和基数排序\n\n\n## 冒泡排序\n- 冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，是不用交换的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法\n```\n// js代码\nfunction sort(arr) {\nif (arr.length == 0) {\n    return [];\n}\nvar length = arr.length;\nfor (var i = 0; i < length; i++) {\n        for (var j = 0; j < length - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                var temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n                console.log(arr);\n            }\n        }\n    }\n}\n\n```\n\n\n## 快速排序\n- 快速排序是对冒泡排序的一种改进。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列.\n- 时间复杂度：O（n*lgn）最坏：O（n^2）空间复杂度：O（n*lgn）\n\n```\n// js递归实现\nfunction quickSort(arr) {\n    if (arr.length == 0) {\n        return [];\n    }\n    var left = [];\n    var right = [];\n    var pivot = arr[0];\n    for (var i = 1; i < arr.length; i++) {\n        if (arr[i] < pivot) {\n            left.push(arr[i]);\n        } else {\n            right.push(arr[i]);\n        }\n    }\n    return quickSort(left).concat(pivot, quickSort(right));\n}\nvar a = [];\nfor (var i = 0; i < 10; ++i) {\n    a[i] = Math.floor((Math.random() * 100) + 1);\n}\nconsole.log(a);\nconsole.log(quickSort(a));\n```\n## 直接插入排序  \n- 直接插入排序(straight insertion sort)的作法是：每次从无序表中取出第一个元素，把它插入到有序表的合适位置，使有序表仍然有序.\n\n```\nfunction insertionSort(arr) {\n    var temp, inner;\n    for (var outer = 1; outer <= arr.length - 1; ++outer) {\n        temp = arr[outer];\n        inner = outer;\n        while (inner > 0 && (arr[inner - 1] >= temp)) {\n            arr[inner] = arr[inner - 1];\n            --inner;\n        }\n        arr[inner] = temp;\n    }\n    return arr;\n}\nvar a = [];\nfor (var i = 0; i < 10; ++i) {\n    a[i] = Math.floor((Math.random() * 100) + 1);\n}\nconsole.log(a);\nconsole.log(insertionSort(a));\n```\n\n## 折半插入排序\n- 折半插入排序算法的具体操作为：在将一个新元素插入已排好序的数组的过程中，寻找插入点时，将待插入区域的首元素设置为a[low],末元素设置为 a[high]，则轮比较时将待插入元素与a[m],其中m=(low+high)/2相比较,如果比参考元素小，则选择a[low]到a[m-1]为新 的插入区域(即high=m-1)，否则选择a[m+1]到a[high]为新的插入区域（即low=m+1），如此直至low<=high不成 立，即将此位置之后所有元素后移一位，并将新元素插入a[high+1]\n\n\n## 希尔排序\n- 先取一个小于n的整数d1作为第一个增量，把文件的全部记录分成d1个组。所有距离为dl的倍数的记录放在同一个组中。先在各组内进行直接插入 排序；然后，取第二个增量d2<d1重复上述的分组和排序，直至所取的增量dt=1(dt<dt-l<…<d2<d1)， 即所有记录放在同一组中进行直接插入排序为止。\n- 该方法实质上是一种分组插入方法。插入排序（Insertion Sort）的一个重要的特点是，如果原始数据的大部分元素已经排序，那么插入排序的速度很快（因为需要移动的元素很少）。从这个事实我们可以想到，如果原 始数据只有很少元素，那么排序的速度也很快。－－希尔排序就是基于这两点对插入排序作出了改进。\n\n\n## 直接选择排序\n- 直接选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第n个 元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么 交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。时间复杂度是O(n^2)\n\n\n## 堆排序\n- 我们知道堆的结构是节点i的孩子为2*i和2*i+1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n/2开始和其子节点共3个值选择最大(大顶堆)或者最小(小顶堆),这3个元素之间的选择当然不会破坏稳定性。但当为n /2-1, n/2-2, ...1这些个父节点选择元素时，就会破坏稳定性。有可能第n/2个父节点交换把后面一个元素交换过去了，而第n/2-1个父节点把后面一个相同的元素没 有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。\n\n\n\n## 二路归并排序\n- 归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素(认为直接有序)或者2个序列(1次比较和交换),然后把各个有序的段序列合并成一个有 序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定 性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结 果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。\n","slug":"sort-study","published":1,"updated":"2016-11-13T06:00:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d9b002dohzjef5xjxwk","content":"<p><strong> 排序算法学习：</strong> <Excerpt in index | 首页摘要><br>    各种排序算法，算法的实现和分析<br> <a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"排序算法的分类\"><a href=\"#排序算法的分类\" class=\"headerlink\" title=\"排序算法的分类\"></a>排序算法的分类</h2><ol>\n<li>排序分内排序和外排序。</li>\n<li>内排序:指在排序期间数据对象全部存放在内存的排序。</li>\n<li>外排序:指在排序期间全部对象个数太多,不能同时存放在内存,必须根据排序过程的要求,不断在内、外存之间移动的排序。</li>\n<li>内排序的方法有许多种,按所用策略不同,可归纳为五类:插入排序、选择排序、交换排序、归并排序、分配排序和计数排序。</li>\n<li>插入排序主要包括直接插入排序，折半插入排序和希尔排序两种;</li>\n<li>选择排序主要包括直接选择排序和堆排序;</li>\n<li>交换排序主要包括冒泡排序和快速排序;</li>\n<li>归并排序主要包括二路归并(常用的归并排序)和自然归并。</li>\n<li>分配排序主要包括箱排序和基数排序</li>\n</ol>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><ul>\n<li>冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，是不用交换的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// js代码</div><div class=\"line\">function <span class=\"built_in\">sort</span>(arr) &#123;</div><div class=\"line\"><span class=\"keyword\">if</span> (arr.<span class=\"built_in\">length</span> == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">return</span> [];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">length</span> = arr.<span class=\"built_in\">length</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"built_in\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">length</span>; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">length</span> - i - <span class=\"number\">1</span>; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">                <span class=\"built_in\">var</span> temp = arr[j];</div><div class=\"line\">                arr[j] = arr[j + <span class=\"number\">1</span>];</div><div class=\"line\">                arr[j + <span class=\"number\">1</span>] = temp;</div><div class=\"line\">                console.<span class=\"built_in\">log</span>(arr);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><ul>\n<li>快速排序是对冒泡排序的一种改进。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列.</li>\n<li>时间复杂度：O（n<em>lgn）最坏：O（n^2）空间复杂度：O（n</em>lgn）</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// js递归实现</span></div><div class=\"line\">function <span class=\"built_in\">quickSort</span>(arr) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (arr.length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">left</span> = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">right</span> = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> pivot = arr[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &lt; pivot) &#123;</div><div class=\"line\">            <span class=\"keyword\">left</span>.push(arr[i]);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">right</span>.push(arr[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">quickSort</span>(<span class=\"keyword\">left</span>).concat(pivot, <span class=\"built_in\">quickSort</span>(<span class=\"keyword\">right</span>));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;</div><div class=\"line\">    a[i] = <span class=\"type\">Math</span>.floor((<span class=\"type\">Math</span>.random() * <span class=\"number\">100</span>) + <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(a);</div><div class=\"line\">console.log(<span class=\"built_in\">quickSort</span>(a));</div></pre></td></tr></table></figure>\n<h2 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h2><ul>\n<li>直接插入排序(straight insertion sort)的作法是：每次从无序表中取出第一个元素，把它插入到有序表的合适位置，使有序表仍然有序.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> temp, inner;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> outer = <span class=\"number\">1</span>; outer &lt;= arr.length - <span class=\"number\">1</span>; ++outer) &#123;</div><div class=\"line\">        temp = arr[outer];</div><div class=\"line\">        inner = outer;</div><div class=\"line\">        <span class=\"keyword\">while</span> (inner &gt; <span class=\"number\">0</span> &amp;&amp; (arr[inner - <span class=\"number\">1</span>] &gt;= temp)) &#123;</div><div class=\"line\">            arr[inner] = arr[inner - <span class=\"number\">1</span>];</div><div class=\"line\">            --inner;</div><div class=\"line\">        &#125;</div><div class=\"line\">        arr[inner] = temp;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;</div><div class=\"line\">    a[i] = <span class=\"built_in\">Math</span>.floor((<span class=\"built_in\">Math</span>.random() * <span class=\"number\">100</span>) + <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(insertionSort(a));</div></pre></td></tr></table></figure>\n<h2 id=\"折半插入排序\"><a href=\"#折半插入排序\" class=\"headerlink\" title=\"折半插入排序\"></a>折半插入排序</h2><ul>\n<li>折半插入排序算法的具体操作为：在将一个新元素插入已排好序的数组的过程中，寻找插入点时，将待插入区域的首元素设置为a[low],末元素设置为 a[high]，则轮比较时将待插入元素与a[m],其中m=(low+high)/2相比较,如果比参考元素小，则选择a[low]到a[m-1]为新 的插入区域(即high=m-1)，否则选择a[m+1]到a[high]为新的插入区域（即low=m+1），如此直至low&lt;=high不成 立，即将此位置之后所有元素后移一位，并将新元素插入a[high+1]</li>\n</ul>\n<h2 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h2><ul>\n<li>先取一个小于n的整数d1作为第一个增量，把文件的全部记录分成d1个组。所有距离为dl的倍数的记录放在同一个组中。先在各组内进行直接插入 排序；然后，取第二个增量d2&lt;d1重复上述的分组和排序，直至所取的增量dt=1(dt&lt;dt-l&lt;…&lt;d2&lt;d1)， 即所有记录放在同一组中进行直接插入排序为止。</li>\n<li>该方法实质上是一种分组插入方法。插入排序（Insertion Sort）的一个重要的特点是，如果原始数据的大部分元素已经排序，那么插入排序的速度很快（因为需要移动的元素很少）。从这个事实我们可以想到，如果原 始数据只有很少元素，那么排序的速度也很快。－－希尔排序就是基于这两点对插入排序作出了改进。</li>\n</ul>\n<h2 id=\"直接选择排序\"><a href=\"#直接选择排序\" class=\"headerlink\" title=\"直接选择排序\"></a>直接选择排序</h2><ul>\n<li>直接选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第n个 元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么 交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。时间复杂度是O(n^2)</li>\n</ul>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><ul>\n<li>我们知道堆的结构是节点i的孩子为2<em>i和2</em>i+1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n/2开始和其子节点共3个值选择最大(大顶堆)或者最小(小顶堆),这3个元素之间的选择当然不会破坏稳定性。但当为n /2-1, n/2-2, …1这些个父节点选择元素时，就会破坏稳定性。有可能第n/2个父节点交换把后面一个元素交换过去了，而第n/2-1个父节点把后面一个相同的元素没 有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。</li>\n</ul>\n<h2 id=\"二路归并排序\"><a href=\"#二路归并排序\" class=\"headerlink\" title=\"二路归并排序\"></a>二路归并排序</h2><ul>\n<li>归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素(认为直接有序)或者2个序列(1次比较和交换),然后把各个有序的段序列合并成一个有 序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定 性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结 果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。</li>\n</ul>\n","excerpt":"<p><strong> 排序算法学习：</strong> <Excerpt in index | 首页摘要><br>    各种排序算法，算法的实现和分析<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h2 id=\"排序算法的分类\"><a href=\"#排序算法的分类\" class=\"headerlink\" title=\"排序算法的分类\"></a>排序算法的分类</h2><ol>\n<li>排序分内排序和外排序。</li>\n<li>内排序:指在排序期间数据对象全部存放在内存的排序。</li>\n<li>外排序:指在排序期间全部对象个数太多,不能同时存放在内存,必须根据排序过程的要求,不断在内、外存之间移动的排序。</li>\n<li>内排序的方法有许多种,按所用策略不同,可归纳为五类:插入排序、选择排序、交换排序、归并排序、分配排序和计数排序。</li>\n<li>插入排序主要包括直接插入排序，折半插入排序和希尔排序两种;</li>\n<li>选择排序主要包括直接选择排序和堆排序;</li>\n<li>交换排序主要包括冒泡排序和快速排序;</li>\n<li>归并排序主要包括二路归并(常用的归并排序)和自然归并。</li>\n<li>分配排序主要包括箱排序和基数排序</li>\n</ol>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><ul>\n<li>冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，是不用交换的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// js代码</div><div class=\"line\">function <span class=\"built_in\">sort</span>(arr) &#123;</div><div class=\"line\"><span class=\"keyword\">if</span> (arr.<span class=\"built_in\">length</span> == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">return</span> [];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">length</span> = arr.<span class=\"built_in\">length</span>;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"built_in\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">length</span>; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"built_in\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">length</span> - i - <span class=\"number\">1</span>; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</div><div class=\"line\">                <span class=\"built_in\">var</span> temp = arr[j];</div><div class=\"line\">                arr[j] = arr[j + <span class=\"number\">1</span>];</div><div class=\"line\">                arr[j + <span class=\"number\">1</span>] = temp;</div><div class=\"line\">                console.<span class=\"built_in\">log</span>(arr);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><ul>\n<li>快速排序是对冒泡排序的一种改进。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列.</li>\n<li>时间复杂度：O（n<em>lgn）最坏：O（n^2）空间复杂度：O（n</em>lgn）</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// js递归实现</span></div><div class=\"line\">function <span class=\"built_in\">quickSort</span>(arr) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (arr.length == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">left</span> = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"keyword\">right</span> = [];</div><div class=\"line\">    <span class=\"keyword\">var</span> pivot = arr[<span class=\"number\">0</span>];</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &lt; pivot) &#123;</div><div class=\"line\">            <span class=\"keyword\">left</span>.push(arr[i]);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">right</span>.push(arr[i]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">quickSort</span>(<span class=\"keyword\">left</span>).concat(pivot, <span class=\"built_in\">quickSort</span>(<span class=\"keyword\">right</span>));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;</div><div class=\"line\">    a[i] = <span class=\"type\">Math</span>.floor((<span class=\"type\">Math</span>.random() * <span class=\"number\">100</span>) + <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">console.log(a);</div><div class=\"line\">console.log(<span class=\"built_in\">quickSort</span>(a));</div></pre></td></tr></table></figure>\n<h2 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h2><ul>\n<li>直接插入排序(straight insertion sort)的作法是：每次从无序表中取出第一个元素，把它插入到有序表的合适位置，使有序表仍然有序.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> temp, inner;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> outer = <span class=\"number\">1</span>; outer &lt;= arr.length - <span class=\"number\">1</span>; ++outer) &#123;</div><div class=\"line\">        temp = arr[outer];</div><div class=\"line\">        inner = outer;</div><div class=\"line\">        <span class=\"keyword\">while</span> (inner &gt; <span class=\"number\">0</span> &amp;&amp; (arr[inner - <span class=\"number\">1</span>] &gt;= temp)) &#123;</div><div class=\"line\">            arr[inner] = arr[inner - <span class=\"number\">1</span>];</div><div class=\"line\">            --inner;</div><div class=\"line\">        &#125;</div><div class=\"line\">        arr[inner] = temp;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> arr;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;</div><div class=\"line\">    a[i] = <span class=\"built_in\">Math</span>.floor((<span class=\"built_in\">Math</span>.random() * <span class=\"number\">100</span>) + <span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(insertionSort(a));</div></pre></td></tr></table></figure>\n<h2 id=\"折半插入排序\"><a href=\"#折半插入排序\" class=\"headerlink\" title=\"折半插入排序\"></a>折半插入排序</h2><ul>\n<li>折半插入排序算法的具体操作为：在将一个新元素插入已排好序的数组的过程中，寻找插入点时，将待插入区域的首元素设置为a[low],末元素设置为 a[high]，则轮比较时将待插入元素与a[m],其中m=(low+high)/2相比较,如果比参考元素小，则选择a[low]到a[m-1]为新 的插入区域(即high=m-1)，否则选择a[m+1]到a[high]为新的插入区域（即low=m+1），如此直至low&lt;=high不成 立，即将此位置之后所有元素后移一位，并将新元素插入a[high+1]</li>\n</ul>\n<h2 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h2><ul>\n<li>先取一个小于n的整数d1作为第一个增量，把文件的全部记录分成d1个组。所有距离为dl的倍数的记录放在同一个组中。先在各组内进行直接插入 排序；然后，取第二个增量d2&lt;d1重复上述的分组和排序，直至所取的增量dt=1(dt&lt;dt-l&lt;…&lt;d2&lt;d1)， 即所有记录放在同一组中进行直接插入排序为止。</li>\n<li>该方法实质上是一种分组插入方法。插入排序（Insertion Sort）的一个重要的特点是，如果原始数据的大部分元素已经排序，那么插入排序的速度很快（因为需要移动的元素很少）。从这个事实我们可以想到，如果原 始数据只有很少元素，那么排序的速度也很快。－－希尔排序就是基于这两点对插入排序作出了改进。</li>\n</ul>\n<h2 id=\"直接选择排序\"><a href=\"#直接选择排序\" class=\"headerlink\" title=\"直接选择排序\"></a>直接选择排序</h2><ul>\n<li>直接选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第n个 元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么 交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。时间复杂度是O(n^2)</li>\n</ul>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><ul>\n<li>我们知道堆的结构是节点i的孩子为2<em>i和2</em>i+1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n/2开始和其子节点共3个值选择最大(大顶堆)或者最小(小顶堆),这3个元素之间的选择当然不会破坏稳定性。但当为n /2-1, n/2-2, …1这些个父节点选择元素时，就会破坏稳定性。有可能第n/2个父节点交换把后面一个元素交换过去了，而第n/2-1个父节点把后面一个相同的元素没 有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。</li>\n</ul>\n<h2 id=\"二路归并排序\"><a href=\"#二路归并排序\" class=\"headerlink\" title=\"二路归并排序\"></a>二路归并排序</h2><ul>\n<li>归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素(认为直接有序)或者2个序列(1次比较和交换),然后把各个有序的段序列合并成一个有 序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定 性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结 果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。</li>\n</ul>"},{"title":"制定学习目标和计划","date":"2016-05-06T02:20:45.000Z","_content":"** 制定学习目标和计划：** <Excerpt in index | 首页摘要>\n\t近期的学习目标和学习重点,提高自己的能力\n <!-- more -->\n<The rest of contents | 余下全文>\n\n### 找到自己的兴趣\n- 自己主动学习一定要基于自己的兴趣,不要看什么框架流行,什么语言火,就去学,学的不温不火,然后放弃.\n- 一定看自己的兴趣,比如你对色彩,对布局,对特效比较痴迷,那你去css3,html5做出特酷的效果,肯定能让你肯定自己,\n收获知识和自信.\n- 没有兴趣的时候,可以适当的多接触一些东西,在最短的时间多接触一些领域,让自己的心去做选择,\n\n### 制定目标\n1. 为什么要制定目标?\n- 制定目标是对自己学习能力的检验,同时也是提高学习效率的关键,而不是自己没有目的的瞎看,\n2. 如何制定目标?\n- 结合自身的能力,定制比自己能力稍高的目标,这样自己通过一定程度的努力可以实现目标.这样自己的能力能一次一次提高.\n\n### 及时反馈\n- 古人说的好,吾日三省吾身,对待学习目标也是一样,要时不时的看自己的目标完成的如何,进度如何,是不是需要调整,不能闷着头蛮干,方向错了,再多的努力也是白搭了.\n\n### 总结\n- 我在刚开始学编程的时候,每天都给自己定制了目标,一天完成多少课时,完成多少练习,都是按量完成,在最初的几个月收到了立竿见影的效果,让我也在短短三个月的时间学会了java,所以,目标的制定对于结果的影响是非常大.\n","source":"_posts/study-goals.md","raw":"title: 制定学习目标和计划\ndate: 2016-05-06 10:20:45\ntags: others\ncategories: 个人随笔\n---\n** 制定学习目标和计划：** <Excerpt in index | 首页摘要>\n\t近期的学习目标和学习重点,提高自己的能力\n <!-- more -->\n<The rest of contents | 余下全文>\n\n### 找到自己的兴趣\n- 自己主动学习一定要基于自己的兴趣,不要看什么框架流行,什么语言火,就去学,学的不温不火,然后放弃.\n- 一定看自己的兴趣,比如你对色彩,对布局,对特效比较痴迷,那你去css3,html5做出特酷的效果,肯定能让你肯定自己,\n收获知识和自信.\n- 没有兴趣的时候,可以适当的多接触一些东西,在最短的时间多接触一些领域,让自己的心去做选择,\n\n### 制定目标\n1. 为什么要制定目标?\n- 制定目标是对自己学习能力的检验,同时也是提高学习效率的关键,而不是自己没有目的的瞎看,\n2. 如何制定目标?\n- 结合自身的能力,定制比自己能力稍高的目标,这样自己通过一定程度的努力可以实现目标.这样自己的能力能一次一次提高.\n\n### 及时反馈\n- 古人说的好,吾日三省吾身,对待学习目标也是一样,要时不时的看自己的目标完成的如何,进度如何,是不是需要调整,不能闷着头蛮干,方向错了,再多的努力也是白搭了.\n\n### 总结\n- 我在刚开始学编程的时候,每天都给自己定制了目标,一天完成多少课时,完成多少练习,都是按量完成,在最初的几个月收到了立竿见影的效果,让我也在短短三个月的时间学会了java,所以,目标的制定对于结果的影响是非常大.\n","slug":"study-goals","published":1,"updated":"2016-11-13T06:00:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d9f002fohzj8ytwhjuq","content":"<p><strong> 制定学习目标和计划：</strong> <Excerpt in index | 首页摘要><br>    近期的学习目标和学习重点,提高自己的能力<br> <a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"找到自己的兴趣\"><a href=\"#找到自己的兴趣\" class=\"headerlink\" title=\"找到自己的兴趣\"></a>找到自己的兴趣</h3><ul>\n<li>自己主动学习一定要基于自己的兴趣,不要看什么框架流行,什么语言火,就去学,学的不温不火,然后放弃.</li>\n<li>一定看自己的兴趣,比如你对色彩,对布局,对特效比较痴迷,那你去css3,html5做出特酷的效果,肯定能让你肯定自己,<br>收获知识和自信.</li>\n<li>没有兴趣的时候,可以适当的多接触一些东西,在最短的时间多接触一些领域,让自己的心去做选择,</li>\n</ul>\n<h3 id=\"制定目标\"><a href=\"#制定目标\" class=\"headerlink\" title=\"制定目标\"></a>制定目标</h3><ol>\n<li>为什么要制定目标?</li>\n</ol>\n<ul>\n<li>制定目标是对自己学习能力的检验,同时也是提高学习效率的关键,而不是自己没有目的的瞎看,</li>\n</ul>\n<ol>\n<li>如何制定目标?</li>\n</ol>\n<ul>\n<li>结合自身的能力,定制比自己能力稍高的目标,这样自己通过一定程度的努力可以实现目标.这样自己的能力能一次一次提高.</li>\n</ul>\n<h3 id=\"及时反馈\"><a href=\"#及时反馈\" class=\"headerlink\" title=\"及时反馈\"></a>及时反馈</h3><ul>\n<li>古人说的好,吾日三省吾身,对待学习目标也是一样,要时不时的看自己的目标完成的如何,进度如何,是不是需要调整,不能闷着头蛮干,方向错了,再多的努力也是白搭了.</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>我在刚开始学编程的时候,每天都给自己定制了目标,一天完成多少课时,完成多少练习,都是按量完成,在最初的几个月收到了立竿见影的效果,让我也在短短三个月的时间学会了java,所以,目标的制定对于结果的影响是非常大.</li>\n</ul>\n","excerpt":"<p><strong> 制定学习目标和计划：</strong> <Excerpt in index | 首页摘要><br>    近期的学习目标和学习重点,提高自己的能力<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"找到自己的兴趣\"><a href=\"#找到自己的兴趣\" class=\"headerlink\" title=\"找到自己的兴趣\"></a>找到自己的兴趣</h3><ul>\n<li>自己主动学习一定要基于自己的兴趣,不要看什么框架流行,什么语言火,就去学,学的不温不火,然后放弃.</li>\n<li>一定看自己的兴趣,比如你对色彩,对布局,对特效比较痴迷,那你去css3,html5做出特酷的效果,肯定能让你肯定自己,<br>收获知识和自信.</li>\n<li>没有兴趣的时候,可以适当的多接触一些东西,在最短的时间多接触一些领域,让自己的心去做选择,</li>\n</ul>\n<h3 id=\"制定目标\"><a href=\"#制定目标\" class=\"headerlink\" title=\"制定目标\"></a>制定目标</h3><ol>\n<li>为什么要制定目标?</li>\n</ol>\n<ul>\n<li>制定目标是对自己学习能力的检验,同时也是提高学习效率的关键,而不是自己没有目的的瞎看,</li>\n</ul>\n<ol>\n<li>如何制定目标?</li>\n</ol>\n<ul>\n<li>结合自身的能力,定制比自己能力稍高的目标,这样自己通过一定程度的努力可以实现目标.这样自己的能力能一次一次提高.</li>\n</ul>\n<h3 id=\"及时反馈\"><a href=\"#及时反馈\" class=\"headerlink\" title=\"及时反馈\"></a>及时反馈</h3><ul>\n<li>古人说的好,吾日三省吾身,对待学习目标也是一样,要时不时的看自己的目标完成的如何,进度如何,是不是需要调整,不能闷着头蛮干,方向错了,再多的努力也是白搭了.</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>我在刚开始学编程的时候,每天都给自己定制了目标,一天完成多少课时,完成多少练习,都是按量完成,在最初的几个月收到了立竿见影的效果,让我也在短短三个月的时间学会了java,所以,目标的制定对于结果的影响是非常大.</li>\n</ul>"},{"title":"Sublime详细配置","date":"2016-04-26T10:47:46.000Z","_content":"** sublime详细配置：** <Excerpt in index | 首页摘要>\n\tsubime的常用配置应有尽有，快快来看吧\n <!-- more -->\n<The rest of contents | 余下全文>\n\n### 安装sublime text3\n- 去官网或者搜索一下，然后进行自行破解，建议安装sublime3083版本\n\n### 安装package管理工具\n- 使用通过View->Show Console菜单打开命令行，粘贴如下代码：\n\t```\n\timport urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())\n\t```\n\n- 手动安装\n\t1. 点击Preferences > Browse Packages菜单\n\t2. 进入打开的目录的上层目录，然后再进入Installed Packages/目录\n\t3. 下载[package controle](https://sublime.wbond.net/Package%20Control.sublime-package)并复制到Installed Packages/目录\n\t4. 重启Sublime Text。\n\n### 安装常用插件\n1. 点击Preferences > package controle菜单输入install package,输入插件名称\n2. 常用插件名称：\n\t1. emmet,git,sidebar\n\n\n### 主题和配色设置\n-　推荐seti主题，配色主题推荐one dark（和atom一样）\n\n### 侧边栏高级设置\n- 修改侧边栏字体大小 用sublime编辑主题文件，搜索sidebar_label，找到font,把相关的字体调大\n\n### 开发环境配置\n\n### 快捷键设置\n\n### over\n","source":"_posts/sublime-config.md","raw":"title: sublime详细配置\ndate: 2016-04-26 18:47:46\ntags: others\ncategories: 开发工具\n---\n** sublime详细配置：** <Excerpt in index | 首页摘要>\n\tsubime的常用配置应有尽有，快快来看吧\n <!-- more -->\n<The rest of contents | 余下全文>\n\n### 安装sublime text3\n- 去官网或者搜索一下，然后进行自行破解，建议安装sublime3083版本\n\n### 安装package管理工具\n- 使用通过View->Show Console菜单打开命令行，粘贴如下代码：\n\t```\n\timport urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())\n\t```\n\n- 手动安装\n\t1. 点击Preferences > Browse Packages菜单\n\t2. 进入打开的目录的上层目录，然后再进入Installed Packages/目录\n\t3. 下载[package controle](https://sublime.wbond.net/Package%20Control.sublime-package)并复制到Installed Packages/目录\n\t4. 重启Sublime Text。\n\n### 安装常用插件\n1. 点击Preferences > package controle菜单输入install package,输入插件名称\n2. 常用插件名称：\n\t1. emmet,git,sidebar\n\n\n### 主题和配色设置\n-　推荐seti主题，配色主题推荐one dark（和atom一样）\n\n### 侧边栏高级设置\n- 修改侧边栏字体大小 用sublime编辑主题文件，搜索sidebar_label，找到font,把相关的字体调大\n\n### 开发环境配置\n\n### 快捷键设置\n\n### over\n","slug":"sublime-config","published":1,"updated":"2016-11-13T06:00:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d9i002kohzjmrr7qqac","content":"<p><strong> sublime详细配置：</strong> <Excerpt in index | 首页摘要><br>    subime的常用配置应有尽有，快快来看吧<br> <a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"安装sublime-text3\"><a href=\"#安装sublime-text3\" class=\"headerlink\" title=\"安装sublime text3\"></a>安装sublime text3</h3><ul>\n<li>去官网或者搜索一下，然后进行自行破解，建议安装sublime3083版本</li>\n</ul>\n<h3 id=\"安装package管理工具\"><a href=\"#安装package管理工具\" class=\"headerlink\" title=\"安装package管理工具\"></a>安装package管理工具</h3><ul>\n<li><p>使用通过View-&gt;Show Console菜单打开命令行，粘贴如下代码：</p>\n  <figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> urllib.request,os; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.<span class=\"keyword\">join</span>(ipp, pf), <span class=\"string\">'wb'</span>).<span class=\"keyword\">write</span>(urllib.request.urlopen( <span class=\"string\">'http://sublime.wbond.net/'</span> + pf.replace(<span class=\"string\">' '</span>,<span class=\"string\">'%20'</span>)).<span class=\"keyword\">read</span>())</div></pre></td></tr></table></figure>\n</li>\n<li><p>手动安装</p>\n<ol>\n<li>点击Preferences &gt; Browse Packages菜单</li>\n<li>进入打开的目录的上层目录，然后再进入Installed Packages/目录</li>\n<li>下载<a href=\"https://sublime.wbond.net/Package%20Control.sublime-package\">package controle</a>并复制到Installed Packages/目录</li>\n<li>重启Sublime Text。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"安装常用插件\"><a href=\"#安装常用插件\" class=\"headerlink\" title=\"安装常用插件\"></a>安装常用插件</h3><ol>\n<li>点击Preferences &gt; package controle菜单输入install package,输入插件名称</li>\n<li>常用插件名称：<ol>\n<li>emmet,git,sidebar</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"主题和配色设置\"><a href=\"#主题和配色设置\" class=\"headerlink\" title=\"主题和配色设置\"></a>主题和配色设置</h3><p>-　推荐seti主题，配色主题推荐one dark（和atom一样）</p>\n<h3 id=\"侧边栏高级设置\"><a href=\"#侧边栏高级设置\" class=\"headerlink\" title=\"侧边栏高级设置\"></a>侧边栏高级设置</h3><ul>\n<li>修改侧边栏字体大小 用sublime编辑主题文件，搜索sidebar_label，找到font,把相关的字体调大</li>\n</ul>\n<h3 id=\"开发环境配置\"><a href=\"#开发环境配置\" class=\"headerlink\" title=\"开发环境配置\"></a>开发环境配置</h3><h3 id=\"快捷键设置\"><a href=\"#快捷键设置\" class=\"headerlink\" title=\"快捷键设置\"></a>快捷键设置</h3><h3 id=\"over\"><a href=\"#over\" class=\"headerlink\" title=\"over\"></a>over</h3>","excerpt":"<p><strong> sublime详细配置：</strong> <Excerpt in index | 首页摘要><br>    subime的常用配置应有尽有，快快来看吧<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"安装sublime-text3\"><a href=\"#安装sublime-text3\" class=\"headerlink\" title=\"安装sublime text3\"></a>安装sublime text3</h3><ul>\n<li>去官网或者搜索一下，然后进行自行破解，建议安装sublime3083版本</li>\n</ul>\n<h3 id=\"安装package管理工具\"><a href=\"#安装package管理工具\" class=\"headerlink\" title=\"安装package管理工具\"></a>安装package管理工具</h3><ul>\n<li><p>使用通过View-&gt;Show Console菜单打开命令行，粘贴如下代码：</p>\n  <figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> urllib.request,os; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.<span class=\"keyword\">join</span>(ipp, pf), <span class=\"string\">'wb'</span>).<span class=\"keyword\">write</span>(urllib.request.urlopen( <span class=\"string\">'http://sublime.wbond.net/'</span> + pf.replace(<span class=\"string\">' '</span>,<span class=\"string\">'%20'</span>)).<span class=\"keyword\">read</span>())</div></pre></td></tr></table></figure>\n</li>\n<li><p>手动安装</p>\n<ol>\n<li>点击Preferences &gt; Browse Packages菜单</li>\n<li>进入打开的目录的上层目录，然后再进入Installed Packages/目录</li>\n<li>下载<a href=\"https://sublime.wbond.net/Package%20Control.sublime-package\">package controle</a>并复制到Installed Packages/目录</li>\n<li>重启Sublime Text。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"安装常用插件\"><a href=\"#安装常用插件\" class=\"headerlink\" title=\"安装常用插件\"></a>安装常用插件</h3><ol>\n<li>点击Preferences &gt; package controle菜单输入install package,输入插件名称</li>\n<li>常用插件名称：<ol>\n<li>emmet,git,sidebar</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"主题和配色设置\"><a href=\"#主题和配色设置\" class=\"headerlink\" title=\"主题和配色设置\"></a>主题和配色设置</h3><p>-　推荐seti主题，配色主题推荐one dark（和atom一样）</p>\n<h3 id=\"侧边栏高级设置\"><a href=\"#侧边栏高级设置\" class=\"headerlink\" title=\"侧边栏高级设置\"></a>侧边栏高级设置</h3><ul>\n<li>修改侧边栏字体大小 用sublime编辑主题文件，搜索sidebar_label，找到font,把相关的字体调大</li>\n</ul>\n<h3 id=\"开发环境配置\"><a href=\"#开发环境配置\" class=\"headerlink\" title=\"开发环境配置\"></a>开发环境配置</h3><h3 id=\"快捷键设置\"><a href=\"#快捷键设置\" class=\"headerlink\" title=\"快捷键设置\"></a>快捷键设置</h3><h3 id=\"over\"><a href=\"#over\" class=\"headerlink\" title=\"over\"></a>over</h3>"},{"title":"Ubuntu16开发环境配置","date":"2016-04-26T10:48:11.000Z","_content":"** ubuntu开发环境配置：** <Excerpt in index | 首页摘要>\n    ubuntu16下node,java开发环境配置\n <!-- more -->\n<The rest of contents | 余下全文>\n\n### 安装系统软件\n1. 更新系统和软件\n   ```\n   sudo apt-get update\n   sudo apt-get upgade\n   ```\n2. 谷歌浏览器，火狐浏览器，atom编辑器，sublime编辑器，webstome,idea,eclipse\n3. 安装搜狗输入法（官网），安装fcitx配置搜狗输入法\n\n### 安装jdk\n1. 下载jdk并新建一个文件夹\n    ```\n    sudo mkdir /usr/lib/jvm\n    ```\n2. 解压文件\n    ```\n    sudo tar zxvf jdk-7u71-linux-x64.tar.gz -C /usr/lib/jvm/jdk1.7\n    ```\n3. 设置环境变量,设置~/.zshrc文件,或者编辑/etc/profile（全局）文件\n    ```\n    export JAVA_HOME=/usr/lib/jvm/jdk1.7\n    export JRE_HOME=${JAVA_HOME}/jre  \n    export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  \n    export PATH=${JAVA_HOME}/bin:$PATH\n    ```\n4. 检查是否安装成功\n    打开shell,\n    ```\n    java --version\n    ```\n\n### 安装nodejs\n1. nodejs版本迭代较快，有时候需要检查在不同版本下的兼容性问题，用nvm来控制版本\n2. 安装nvm,source的时候根据自己的shell版本，~/.bashrc, ~/.profile, 或者 ~/.zshrc\n    ```\n    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash\n    export NVM_DIR=\"$HOME/.nvm\"\n    [ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\" # This loads nvm\n    source ~/.profile\n    ```\n3. 安装不同版本的nodejs\n　　```\n    nvm ls-remote\n    nvm install v0.12.9\n    nvm install 5.0\n    nvm use 0.12.9\n    nvm alias default 0.12.9\n    ```\n\n### 安装mongodb\n1. 配置公钥\n    ```\n    sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\n    echo \"deb http://repo.mongodb.org/apt/ubuntu \"$(lsb_release -sc)\"/mongodb-org/3.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list\n    ```\n2. 更新软件列表\n    ```\n    sudo apt-get update\n    sudo apt-get install -y mongodb-org\n    ```\n3. 完成上面的安装步骤配置mongodb的数据库的位置\n    ```\n    sudo mongod --dbpath /data/db\n    ```\n4. 启动mongod\n    ```\n    sudo service mongod start\n    sudo service mongod stop\n    sudo service mongod restart\n    ```\n\n### 安装redis\n1. 下载软件\n    ```\n    wget http://download.redis.io/releases/redis-2.8.11.tar.gz\n    ```\n2. 解压安装\n    ```\n    tar xvfz redis-2.8.11.tar.gz\n    cd redis-2.8.11 && sudo make && sudo make install\n    ```\n3. 配置使用\n    1. 下载配置文件和init启动脚本\n    ```\n    wget https://github.com/ijonas/dotfiles/raw/master/etc/init.d/redis-server\n    wget https://github.com/ijonas/dotfiles/raw/master/etc/redis.conf\n    sudo mv redis-server /etc/init.d/redis-server\n    sudo chmod +x /etc/init.d/redis-server\n    sudo mv redis.conf /etc/redis.conf\n    ```\n    2. 初始化用户和日志路径\n    ```\n    sudo useradd redis\n    sudo mkdir -p /var/lib/redis\n    sudo mkdir -p /var/log/redis\n    sudo chown redis.redis /var/lib/redis\n    sudo chown redis.redis /var/log/redis\n    ```\n    3. 设置开机自动启动，关机自动关闭\n    ```\n    sudo update-rc.d redis-server defaults\n    ```\n\n### 环境变量配置\n1. 认识环境变量相关的文件\n- /etc/profile —— 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.并从/etc/profile.d目录的配置文件中搜集shell的设置；\n- /etc/environment —— 在登录时操作系统使用的第二个文件,系统在读取你自己的profile前,设置环境文件的环境变量；\n- /etc/bashrc —— 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取；\n- ~/.profile —— 每个用户都可使用该文件输入专用于自己使用的shell信息，当用户登录时，该文件仅仅执行一次！默认情况下,它设置一些环境变量,执行用户的.bashrc文件；\n- ~/.bashrc —— 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取；\n2. 配置环境变量\n    - 在Ubuntu14.04的~/.bashrc中添加的环境变量,在文件添加\n    ```\n    export PATH=$PATH:/home/qtcreator-2.6.1/bin\n    ```\n    - 修改profile文件,vim编辑/etc/profile\n    ```\n    sudo vim /etc/profile\n    source /etc/profile\n    ```\n\n### 安装开发工具\n1. zsh命令行工具\n2. mysql客户端workbench，mongo客户端工具robomongo\n3. 安装git,svn版本控制工具\n    ```\n    sudo apt-get install git\n    sudo apt-get install subversion\n    ```\n","source":"_posts/ubuntu-dev-config.md","raw":"title: ubuntu16开发环境配置\ndate: 2016-04-26 18:48:11\ntags: linux\ncategories: 开发工具\n---\n** ubuntu开发环境配置：** <Excerpt in index | 首页摘要>\n    ubuntu16下node,java开发环境配置\n <!-- more -->\n<The rest of contents | 余下全文>\n\n### 安装系统软件\n1. 更新系统和软件\n   ```\n   sudo apt-get update\n   sudo apt-get upgade\n   ```\n2. 谷歌浏览器，火狐浏览器，atom编辑器，sublime编辑器，webstome,idea,eclipse\n3. 安装搜狗输入法（官网），安装fcitx配置搜狗输入法\n\n### 安装jdk\n1. 下载jdk并新建一个文件夹\n    ```\n    sudo mkdir /usr/lib/jvm\n    ```\n2. 解压文件\n    ```\n    sudo tar zxvf jdk-7u71-linux-x64.tar.gz -C /usr/lib/jvm/jdk1.7\n    ```\n3. 设置环境变量,设置~/.zshrc文件,或者编辑/etc/profile（全局）文件\n    ```\n    export JAVA_HOME=/usr/lib/jvm/jdk1.7\n    export JRE_HOME=${JAVA_HOME}/jre  \n    export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  \n    export PATH=${JAVA_HOME}/bin:$PATH\n    ```\n4. 检查是否安装成功\n    打开shell,\n    ```\n    java --version\n    ```\n\n### 安装nodejs\n1. nodejs版本迭代较快，有时候需要检查在不同版本下的兼容性问题，用nvm来控制版本\n2. 安装nvm,source的时候根据自己的shell版本，~/.bashrc, ~/.profile, 或者 ~/.zshrc\n    ```\n    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash\n    export NVM_DIR=\"$HOME/.nvm\"\n    [ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\" # This loads nvm\n    source ~/.profile\n    ```\n3. 安装不同版本的nodejs\n　　```\n    nvm ls-remote\n    nvm install v0.12.9\n    nvm install 5.0\n    nvm use 0.12.9\n    nvm alias default 0.12.9\n    ```\n\n### 安装mongodb\n1. 配置公钥\n    ```\n    sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10\n    echo \"deb http://repo.mongodb.org/apt/ubuntu \"$(lsb_release -sc)\"/mongodb-org/3.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list\n    ```\n2. 更新软件列表\n    ```\n    sudo apt-get update\n    sudo apt-get install -y mongodb-org\n    ```\n3. 完成上面的安装步骤配置mongodb的数据库的位置\n    ```\n    sudo mongod --dbpath /data/db\n    ```\n4. 启动mongod\n    ```\n    sudo service mongod start\n    sudo service mongod stop\n    sudo service mongod restart\n    ```\n\n### 安装redis\n1. 下载软件\n    ```\n    wget http://download.redis.io/releases/redis-2.8.11.tar.gz\n    ```\n2. 解压安装\n    ```\n    tar xvfz redis-2.8.11.tar.gz\n    cd redis-2.8.11 && sudo make && sudo make install\n    ```\n3. 配置使用\n    1. 下载配置文件和init启动脚本\n    ```\n    wget https://github.com/ijonas/dotfiles/raw/master/etc/init.d/redis-server\n    wget https://github.com/ijonas/dotfiles/raw/master/etc/redis.conf\n    sudo mv redis-server /etc/init.d/redis-server\n    sudo chmod +x /etc/init.d/redis-server\n    sudo mv redis.conf /etc/redis.conf\n    ```\n    2. 初始化用户和日志路径\n    ```\n    sudo useradd redis\n    sudo mkdir -p /var/lib/redis\n    sudo mkdir -p /var/log/redis\n    sudo chown redis.redis /var/lib/redis\n    sudo chown redis.redis /var/log/redis\n    ```\n    3. 设置开机自动启动，关机自动关闭\n    ```\n    sudo update-rc.d redis-server defaults\n    ```\n\n### 环境变量配置\n1. 认识环境变量相关的文件\n- /etc/profile —— 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.并从/etc/profile.d目录的配置文件中搜集shell的设置；\n- /etc/environment —— 在登录时操作系统使用的第二个文件,系统在读取你自己的profile前,设置环境文件的环境变量；\n- /etc/bashrc —— 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取；\n- ~/.profile —— 每个用户都可使用该文件输入专用于自己使用的shell信息，当用户登录时，该文件仅仅执行一次！默认情况下,它设置一些环境变量,执行用户的.bashrc文件；\n- ~/.bashrc —— 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取；\n2. 配置环境变量\n    - 在Ubuntu14.04的~/.bashrc中添加的环境变量,在文件添加\n    ```\n    export PATH=$PATH:/home/qtcreator-2.6.1/bin\n    ```\n    - 修改profile文件,vim编辑/etc/profile\n    ```\n    sudo vim /etc/profile\n    source /etc/profile\n    ```\n\n### 安装开发工具\n1. zsh命令行工具\n2. mysql客户端workbench，mongo客户端工具robomongo\n3. 安装git,svn版本控制工具\n    ```\n    sudo apt-get install git\n    sudo apt-get install subversion\n    ```\n","slug":"ubuntu-dev-config","published":1,"updated":"2016-11-13T06:01:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciw296d9j002nohzj04ian7dm","content":"<p><strong> ubuntu开发环境配置：</strong> <Excerpt in index | 首页摘要><br>    ubuntu16下node,java开发环境配置<br> <a id=\"more\"></a></p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"安装系统软件\"><a href=\"#安装系统软件\" class=\"headerlink\" title=\"安装系统软件\"></a>安装系统软件</h3><ol>\n<li><p>更新系统和软件</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> upgade</div></pre></td></tr></table></figure>\n</li>\n<li><p>谷歌浏览器，火狐浏览器，atom编辑器，sublime编辑器，webstome,idea,eclipse</p>\n</li>\n<li>安装搜狗输入法（官网），安装fcitx配置搜狗输入法</li>\n</ol>\n<h3 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h3><ol>\n<li><p>下载jdk并新建一个文件夹</p>\n <figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mkdir /usr/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">jvm</span></span></div></pre></td></tr></table></figure>\n</li>\n<li><p>解压文件</p>\n <figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo tar zxvf jdk-<span class=\"number\">7</span>u71-linux-x64.tar.gz -C /usr/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">jvm</span>/<span class=\"title\">jdk1</span>.7</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>设置环境变量,设置~/.zshrc文件,或者编辑/etc/profile（全局）文件</p>\n <figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=<span class=\"regexp\">/usr/lib</span><span class=\"regexp\">/jvm/jdk</span>1.<span class=\"number\">7</span></div><div class=\"line\">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre  </div><div class=\"line\">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/<span class=\"class\"><span class=\"keyword\">lib</span>:$&#123;<span class=\"title\">JRE_HOME</span>&#125;/<span class=\"title\">lib</span>  </span></div><div class=\"line\">export PATH=$&#123;JAVA_HOME&#125;/<span class=\"symbol\">bin:</span>$PATH</div></pre></td></tr></table></figure>\n</li>\n<li><p>检查是否安装成功<br> 打开shell,</p>\n <figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java <span class=\"comment\">--version</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h3><ol>\n<li>nodejs版本迭代较快，有时候需要检查在不同版本下的兼容性问题，用nvm来控制版本</li>\n<li><p>安装nvm,source的时候根据自己的shell版本，~/.bashrc, ~/.profile, 或者 ~/.zshrc</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash</div><div class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></div><div class=\"line\">[ <span class=\"_\">-s</span> <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; . <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> <span class=\"comment\"># This loads nvm</span></div><div class=\"line\"><span class=\"built_in\">source</span> ~/.profile</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装不同版本的nodejs<br>　　<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm ls-remote</div><div class=\"line\">nvm install v0<span class=\"number\">.12</span><span class=\"number\">.9</span></div><div class=\"line\">nvm install <span class=\"number\">5.0</span></div><div class=\"line\">nvm use <span class=\"number\">0.12</span><span class=\"number\">.9</span></div><div class=\"line\">nvm alias <span class=\"section\">default</span> <span class=\"number\">0.12</span><span class=\"number\">.9</span></div></pre></td></tr></table></figure></p>\n</li>\n</ol>\n<h3 id=\"安装mongodb\"><a href=\"#安装mongodb\" class=\"headerlink\" title=\"安装mongodb\"></a>安装mongodb</h3><ol>\n<li><p>配置公钥</p>\n <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-key adv --keyserver <span class=\"string\">hkp:</span><span class=\"comment\">//keyserver.ubuntu.com:80 --recv 7F0CEB10</span></div><div class=\"line\">echo <span class=\"string\">\"deb http://repo.mongodb.org/apt/ubuntu \"</span>$(lsb_release -sc)<span class=\"string\">\"/mongodb-org/3.0 multiverse\"</span> | sudo tee <span class=\"regexp\">/etc/</span>apt<span class=\"regexp\">/sources.list.d/</span>mongodb-org<span class=\"number\">-3.0</span>.list</div></pre></td></tr></table></figure>\n</li>\n<li><p>更新软件列表</p>\n <figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install -y mongodb-org</div></pre></td></tr></table></figure>\n</li>\n<li><p>完成上面的安装步骤配置mongodb的数据库的位置</p>\n <figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mongod <span class=\"comment\">--dbpath /data/db</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>启动mongod</p>\n <figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo service mongod <span class=\"literal\">start</span></div><div class=\"line\">sudo service mongod <span class=\"literal\">stop</span></div><div class=\"line\">sudo service mongod restart</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"安装redis\"><a href=\"#安装redis\" class=\"headerlink\" title=\"安装redis\"></a>安装redis</h3><ol>\n<li><p>下载软件</p>\n <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget <span class=\"string\">http:</span><span class=\"comment\">//download.redis.io/releases/redis-2.8.11.tar.gz</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>解压安装</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">tar</span> <span class=\"selector-tag\">xvfz</span> <span class=\"selector-tag\">redis-2</span><span class=\"selector-class\">.8</span><span class=\"selector-class\">.11</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></div><div class=\"line\"><span class=\"selector-tag\">cd</span> <span class=\"selector-tag\">redis-2</span><span class=\"selector-class\">.8</span><span class=\"selector-class\">.11</span> &amp;&amp; <span class=\"selector-tag\">sudo</span> <span class=\"selector-tag\">make</span> &amp;&amp; <span class=\"selector-tag\">sudo</span> <span class=\"selector-tag\">make</span> <span class=\"selector-tag\">install</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置使用</p>\n<ol>\n<li><p>下载配置文件和init启动脚本</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget <span class=\"symbol\">https:</span>/<span class=\"regexp\">/github.com/ijonas</span><span class=\"regexp\">/dotfiles/raw</span><span class=\"regexp\">/master/etc</span><span class=\"regexp\">/init.d/redis</span>-server</div><div class=\"line\">wget <span class=\"symbol\">https:</span>/<span class=\"regexp\">/github.com/ijonas</span><span class=\"regexp\">/dotfiles/raw</span><span class=\"regexp\">/master/etc</span><span class=\"regexp\">/redis.conf</div><div class=\"line\">sudo mv redis-server /etc</span><span class=\"regexp\">/init.d/redis</span>-server</div><div class=\"line\">sudo chmod +x /etc/init.d/redis-server</div><div class=\"line\">sudo mv redis.conf /etc/redis.conf</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化用户和日志路径</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo useradd redis</div><div class=\"line\">sudo mkdir -p /var/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">redis</span></span></div><div class=\"line\">sudo mkdir -p /var/log/redis</div><div class=\"line\">sudo chown redis.redis /var/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">redis</span></span></div><div class=\"line\">sudo chown redis.redis /var/log/redis</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置开机自动启动，关机自动关闭</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo <span class=\"keyword\">update</span>-rc.d redis-<span class=\"keyword\">server</span> <span class=\"keyword\">defaults</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"环境变量配置\"><a href=\"#环境变量配置\" class=\"headerlink\" title=\"环境变量配置\"></a>环境变量配置</h3><ol>\n<li>认识环境变量相关的文件</li>\n</ol>\n<ul>\n<li>/etc/profile —— 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.并从/etc/profile.d目录的配置文件中搜集shell的设置；</li>\n<li>/etc/environment —— 在登录时操作系统使用的第二个文件,系统在读取你自己的profile前,设置环境文件的环境变量；</li>\n<li>/etc/bashrc —— 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取；</li>\n<li>~/.profile —— 每个用户都可使用该文件输入专用于自己使用的shell信息，当用户登录时，该文件仅仅执行一次！默认情况下,它设置一些环境变量,执行用户的.bashrc文件；</li>\n<li>~/.bashrc —— 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取；</li>\n</ul>\n<ol>\n<li><p>配置环境变量</p>\n<ul>\n<li><p>在Ubuntu14.04的~/.bashrc中添加的环境变量,在文件添加</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PATH=<span class=\"variable\">$PATH</span><span class=\"symbol\">:/home/qtcreator-</span><span class=\"number\">2.6</span>.<span class=\"number\">1</span>/bin</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改profile文件,vim编辑/etc/profile</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo <span class=\"keyword\">vim</span> /etc/<span class=\"keyword\">profile</span></div><div class=\"line\"><span class=\"keyword\">source</span> /etc/<span class=\"keyword\">profile</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"安装开发工具\"><a href=\"#安装开发工具\" class=\"headerlink\" title=\"安装开发工具\"></a>安装开发工具</h3><ol>\n<li>zsh命令行工具</li>\n<li>mysql客户端workbench，mongo客户端工具robomongo</li>\n<li>安装git,svn版本控制工具 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get <span class=\"keyword\">install</span> git</div><div class=\"line\">sudo apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> subversion</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"<p><strong> ubuntu开发环境配置：</strong> <Excerpt in index | 首页摘要><br>    ubuntu16下node,java开发环境配置<br>","more":"</p>\n<The rest of contents | 余下全文>\n\n<h3 id=\"安装系统软件\"><a href=\"#安装系统软件\" class=\"headerlink\" title=\"安装系统软件\"></a>安装系统软件</h3><ol>\n<li><p>更新系统和软件</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> upgade</div></pre></td></tr></table></figure>\n</li>\n<li><p>谷歌浏览器，火狐浏览器，atom编辑器，sublime编辑器，webstome,idea,eclipse</p>\n</li>\n<li>安装搜狗输入法（官网），安装fcitx配置搜狗输入法</li>\n</ol>\n<h3 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h3><ol>\n<li><p>下载jdk并新建一个文件夹</p>\n <figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mkdir /usr/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">jvm</span></span></div></pre></td></tr></table></figure>\n</li>\n<li><p>解压文件</p>\n <figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo tar zxvf jdk-<span class=\"number\">7</span>u71-linux-x64.tar.gz -C /usr/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">jvm</span>/<span class=\"title\">jdk1</span>.7</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>设置环境变量,设置~/.zshrc文件,或者编辑/etc/profile（全局）文件</p>\n <figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=<span class=\"regexp\">/usr/lib</span><span class=\"regexp\">/jvm/jdk</span>1.<span class=\"number\">7</span></div><div class=\"line\">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre  </div><div class=\"line\">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/<span class=\"class\"><span class=\"keyword\">lib</span>:$&#123;<span class=\"title\">JRE_HOME</span>&#125;/<span class=\"title\">lib</span>  </span></div><div class=\"line\">export PATH=$&#123;JAVA_HOME&#125;/<span class=\"symbol\">bin:</span>$PATH</div></pre></td></tr></table></figure>\n</li>\n<li><p>检查是否安装成功<br> 打开shell,</p>\n <figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java <span class=\"comment\">--version</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h3><ol>\n<li>nodejs版本迭代较快，有时候需要检查在不同版本下的兼容性问题，用nvm来控制版本</li>\n<li><p>安装nvm,source的时候根据自己的shell版本，~/.bashrc, ~/.profile, 或者 ~/.zshrc</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash</div><div class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=<span class=\"string\">\"<span class=\"variable\">$HOME</span>/.nvm\"</span></div><div class=\"line\">[ <span class=\"_\">-s</span> <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> ] &amp;&amp; . <span class=\"string\">\"<span class=\"variable\">$NVM_DIR</span>/nvm.sh\"</span> <span class=\"comment\"># This loads nvm</span></div><div class=\"line\"><span class=\"built_in\">source</span> ~/.profile</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装不同版本的nodejs<br>　　<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm ls-remote</div><div class=\"line\">nvm install v0<span class=\"number\">.12</span><span class=\"number\">.9</span></div><div class=\"line\">nvm install <span class=\"number\">5.0</span></div><div class=\"line\">nvm use <span class=\"number\">0.12</span><span class=\"number\">.9</span></div><div class=\"line\">nvm alias <span class=\"section\">default</span> <span class=\"number\">0.12</span><span class=\"number\">.9</span></div></pre></td></tr></table></figure></p>\n</li>\n</ol>\n<h3 id=\"安装mongodb\"><a href=\"#安装mongodb\" class=\"headerlink\" title=\"安装mongodb\"></a>安装mongodb</h3><ol>\n<li><p>配置公钥</p>\n <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-key adv --keyserver <span class=\"string\">hkp:</span><span class=\"comment\">//keyserver.ubuntu.com:80 --recv 7F0CEB10</span></div><div class=\"line\">echo <span class=\"string\">\"deb http://repo.mongodb.org/apt/ubuntu \"</span>$(lsb_release -sc)<span class=\"string\">\"/mongodb-org/3.0 multiverse\"</span> | sudo tee <span class=\"regexp\">/etc/</span>apt<span class=\"regexp\">/sources.list.d/</span>mongodb-org<span class=\"number\">-3.0</span>.list</div></pre></td></tr></table></figure>\n</li>\n<li><p>更新软件列表</p>\n <figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install -y mongodb-org</div></pre></td></tr></table></figure>\n</li>\n<li><p>完成上面的安装步骤配置mongodb的数据库的位置</p>\n <figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mongod <span class=\"comment\">--dbpath /data/db</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>启动mongod</p>\n <figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo service mongod <span class=\"literal\">start</span></div><div class=\"line\">sudo service mongod <span class=\"literal\">stop</span></div><div class=\"line\">sudo service mongod restart</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"安装redis\"><a href=\"#安装redis\" class=\"headerlink\" title=\"安装redis\"></a>安装redis</h3><ol>\n<li><p>下载软件</p>\n <figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget <span class=\"string\">http:</span><span class=\"comment\">//download.redis.io/releases/redis-2.8.11.tar.gz</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>解压安装</p>\n <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">tar</span> <span class=\"selector-tag\">xvfz</span> <span class=\"selector-tag\">redis-2</span><span class=\"selector-class\">.8</span><span class=\"selector-class\">.11</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></div><div class=\"line\"><span class=\"selector-tag\">cd</span> <span class=\"selector-tag\">redis-2</span><span class=\"selector-class\">.8</span><span class=\"selector-class\">.11</span> &amp;&amp; <span class=\"selector-tag\">sudo</span> <span class=\"selector-tag\">make</span> &amp;&amp; <span class=\"selector-tag\">sudo</span> <span class=\"selector-tag\">make</span> <span class=\"selector-tag\">install</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>配置使用</p>\n<ol>\n<li><p>下载配置文件和init启动脚本</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget <span class=\"symbol\">https:</span>/<span class=\"regexp\">/github.com/ijonas</span><span class=\"regexp\">/dotfiles/raw</span><span class=\"regexp\">/master/etc</span><span class=\"regexp\">/init.d/redis</span>-server</div><div class=\"line\">wget <span class=\"symbol\">https:</span>/<span class=\"regexp\">/github.com/ijonas</span><span class=\"regexp\">/dotfiles/raw</span><span class=\"regexp\">/master/etc</span><span class=\"regexp\">/redis.conf</div><div class=\"line\">sudo mv redis-server /etc</span><span class=\"regexp\">/init.d/redis</span>-server</div><div class=\"line\">sudo chmod +x /etc/init.d/redis-server</div><div class=\"line\">sudo mv redis.conf /etc/redis.conf</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化用户和日志路径</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo useradd redis</div><div class=\"line\">sudo mkdir -p /var/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">redis</span></span></div><div class=\"line\">sudo mkdir -p /var/log/redis</div><div class=\"line\">sudo chown redis.redis /var/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">redis</span></span></div><div class=\"line\">sudo chown redis.redis /var/log/redis</div></pre></td></tr></table></figure>\n</li>\n<li><p>设置开机自动启动，关机自动关闭</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo <span class=\"keyword\">update</span>-rc.d redis-<span class=\"keyword\">server</span> <span class=\"keyword\">defaults</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"环境变量配置\"><a href=\"#环境变量配置\" class=\"headerlink\" title=\"环境变量配置\"></a>环境变量配置</h3><ol>\n<li>认识环境变量相关的文件</li>\n</ol>\n<ul>\n<li>/etc/profile —— 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.并从/etc/profile.d目录的配置文件中搜集shell的设置；</li>\n<li>/etc/environment —— 在登录时操作系统使用的第二个文件,系统在读取你自己的profile前,设置环境文件的环境变量；</li>\n<li>/etc/bashrc —— 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取；</li>\n<li>~/.profile —— 每个用户都可使用该文件输入专用于自己使用的shell信息，当用户登录时，该文件仅仅执行一次！默认情况下,它设置一些环境变量,执行用户的.bashrc文件；</li>\n<li>~/.bashrc —— 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取；</li>\n</ul>\n<ol>\n<li><p>配置环境变量</p>\n<ul>\n<li><p>在Ubuntu14.04的~/.bashrc中添加的环境变量,在文件添加</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PATH=<span class=\"variable\">$PATH</span><span class=\"symbol\">:/home/qtcreator-</span><span class=\"number\">2.6</span>.<span class=\"number\">1</span>/bin</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改profile文件,vim编辑/etc/profile</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo <span class=\"keyword\">vim</span> /etc/<span class=\"keyword\">profile</span></div><div class=\"line\"><span class=\"keyword\">source</span> /etc/<span class=\"keyword\">profile</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"安装开发工具\"><a href=\"#安装开发工具\" class=\"headerlink\" title=\"安装开发工具\"></a>安装开发工具</h3><ol>\n<li>zsh命令行工具</li>\n<li>mysql客户端workbench，mongo客户端工具robomongo</li>\n<li>安装git,svn版本控制工具 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get <span class=\"keyword\">install</span> git</div><div class=\"line\">sudo apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> subversion</div></pre></td></tr></table></figure>\n</li>\n</ol>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciw296d780001ohzjpdognqq0","category_id":"ciw296d7m0005ohzj3plknt0u","_id":"ciw296d7y000dohzjszcztjn2"},{"post_id":"ciw296d7q0009ohzjkmkrrdzm","category_id":"ciw296d7m0005ohzj3plknt0u","_id":"ciw296d81000iohzjbetfv6d2"},{"post_id":"ciw296d7e0003ohzjg05u6fx5","category_id":"ciw296d7m0005ohzj3plknt0u","_id":"ciw296d82000kohzjmm8lwngt"},{"post_id":"ciw296d7n0006ohzj7q3yzzd8","category_id":"ciw296d80000gohzjthc7hi4u","_id":"ciw296d87000sohzj7qqaeoe5"},{"post_id":"ciw296d82000lohzjm883urhs","category_id":"ciw296d80000gohzjthc7hi4u","_id":"ciw296d8a000xohzj11pxjlbo"},{"post_id":"ciw296d7p0007ohzjk8a4v1cz","category_id":"ciw296d83000nohzjak0sflt0","_id":"ciw296d8c0010ohzjahx8u5ek"},{"post_id":"ciw296d85000rohzj8vc63mxt","category_id":"ciw296d80000gohzjthc7hi4u","_id":"ciw296d8f0015ohzjz8kz9k6w"},{"post_id":"ciw296d88000wohzjhwwocbb6","category_id":"ciw296d80000gohzjthc7hi4u","_id":"ciw296d8h0018ohzj6gyfsvbk"},{"post_id":"ciw296d7w000cohzjff4bl48g","category_id":"ciw296d87000vohzj7wk44vx3","_id":"ciw296d8j001dohzj1eki1580"},{"post_id":"ciw296d8b000zohzjavd9rqq4","category_id":"ciw296d80000gohzjthc7hi4u","_id":"ciw296d8l001fohzjy39uzgeb"},{"post_id":"ciw296d7y000fohzj9ywsfycz","category_id":"ciw296d80000gohzjthc7hi4u","_id":"ciw296d8n001kohzjglbbwppu"},{"post_id":"ciw296d8g0017ohzjrhqj786u","category_id":"ciw296d7m0005ohzj3plknt0u","_id":"ciw296d8o001mohzjx6822cnj"},{"post_id":"ciw296d8i001bohzj4y7n25hn","category_id":"ciw296d80000gohzjthc7hi4u","_id":"ciw296d8t001qohzjvy9zve06"},{"post_id":"ciw296d81000johzj5rpnfxy2","category_id":"ciw296d8i001aohzjo8vobi4b","_id":"ciw296d8y001tohzj6sr6f95x"},{"post_id":"ciw296d8e0014ohzj3ljudpp7","category_id":"ciw296d8i001aohzjo8vobi4b","_id":"ciw296d90001xohzjb625blfb"},{"post_id":"ciw296d8v001sohzj9d6id20f","category_id":"ciw296d7m0005ohzj3plknt0u","_id":"ciw296d930021ohzjchb51vwj"},{"post_id":"ciw296d8k001eohzjwukvevb6","category_id":"ciw296d8t001pohzjxtyw6z6p","_id":"ciw296d970025ohzjcacsgp9g"},{"post_id":"ciw296d8z001vohzj1ehh03fg","category_id":"ciw296d7m0005ohzj3plknt0u","_id":"ciw296d980027ohzjbbzpz3k5"},{"post_id":"ciw296d91001zohzjuffzxv9u","category_id":"ciw296d7m0005ohzj3plknt0u","_id":"ciw296d9b002cohzj0t9bqk4g"},{"post_id":"ciw296d8m001hohzjhe4iy0wc","category_id":"ciw296d8t001pohzjxtyw6z6p","_id":"ciw296d9f002eohzj4hi0nbmy"},{"post_id":"ciw296d930022ohzjoouesrcj","category_id":"ciw296d7m0005ohzj3plknt0u","_id":"ciw296d9h002johzjvkgvnjdd"},{"post_id":"ciw296d970026ohzj4chlv82m","category_id":"ciw296d8t001pohzjxtyw6z6p","_id":"ciw296d9j002mohzjdl9dhwak"},{"post_id":"ciw296d8n001lohzjgfr7hhoe","category_id":"ciw296d8t001pohzjxtyw6z6p","_id":"ciw296d9n002qohzjy9wkvsqo"},{"post_id":"ciw296d990029ohzjv5gvmwn9","category_id":"ciw296d80000gohzjthc7hi4u","_id":"ciw296d9o002sohzjsmsn1868"},{"post_id":"ciw296d8p001oohzjrdw8rbuf","category_id":"ciw296d8t001pohzjxtyw6z6p","_id":"ciw296d9o002vohzj2a05tprw"},{"post_id":"ciw296d9f002fohzj8ytwhjuq","category_id":"ciw296d87000vohzj7wk44vx3","_id":"ciw296d9o002xohzj7tldqglz"},{"post_id":"ciw296d9i002kohzjmrr7qqac","category_id":"ciw296d80000gohzjthc7hi4u","_id":"ciw296d9o002yohzj14lo3guj"},{"post_id":"ciw296d9j002nohzj04ian7dm","category_id":"ciw296d80000gohzjthc7hi4u","_id":"ciw296d9p0031ohzj4pxhf492"},{"post_id":"ciw296d9b002dohzjef5xjxwk","category_id":"ciw296d9h002iohzjtiy3sp9a","_id":"ciw296d9p0032ohzjnez25yy5"}],"PostTag":[{"post_id":"ciw296d780001ohzjpdognqq0","tag_id":"ciw296d7i0004ohzjqnkfjzd1","_id":"ciw296d7v000bohzjhcdowmp0"},{"post_id":"ciw296d7e0003ohzjg05u6fx5","tag_id":"ciw296d7i0004ohzjqnkfjzd1","_id":"ciw296d81000hohzj03i35tig"},{"post_id":"ciw296d81000johzj5rpnfxy2","tag_id":"ciw296d7y000eohzjnxvli6cd","_id":"ciw296d84000oohzjb3vxurgz"},{"post_id":"ciw296d7n0006ohzj7q3yzzd8","tag_id":"ciw296d7y000eohzjnxvli6cd","_id":"ciw296d85000qohzj5f742qsp"},{"post_id":"ciw296d82000lohzjm883urhs","tag_id":"ciw296d7y000eohzjnxvli6cd","_id":"ciw296d87000uohzj284j39ag"},{"post_id":"ciw296d84000pohzj9rdwfx60","tag_id":"ciw296d7y000eohzjnxvli6cd","_id":"ciw296d8b000yohzjqw0lkl1b"},{"post_id":"ciw296d7p0007ohzjk8a4v1cz","tag_id":"ciw296d83000mohzjwblpp286","_id":"ciw296d8d0012ohzjmxvthadt"},{"post_id":"ciw296d7q0009ohzjkmkrrdzm","tag_id":"ciw296d7y000eohzjnxvli6cd","_id":"ciw296d8f0016ohzjc3hb87pl"},{"post_id":"ciw296d7w000cohzjff4bl48g","tag_id":"ciw296d7y000eohzjnxvli6cd","_id":"ciw296d8j001cohzja0nw2zbc"},{"post_id":"ciw296d7y000fohzj9ywsfycz","tag_id":"ciw296d7y000eohzjnxvli6cd","_id":"ciw296d8n001johzjj9gqjqhp"},{"post_id":"ciw296d85000rohzj8vc63mxt","tag_id":"ciw296d8l001gohzjyw9qs82x","_id":"ciw296d8u001rohzjy45x6wr4"},{"post_id":"ciw296d88000wohzjhwwocbb6","tag_id":"ciw296d8l001gohzjyw9qs82x","_id":"ciw296d90001yohzjbqqhd5pg"},{"post_id":"ciw296d8b000zohzjavd9rqq4","tag_id":"ciw296d8l001gohzjyw9qs82x","_id":"ciw296d960024ohzjfvq5eimn"},{"post_id":"ciw296d8e0014ohzj3ljudpp7","tag_id":"ciw296d930020ohzjxebu81uq","_id":"ciw296d9a002bohzjtbc8vt2c"},{"post_id":"ciw296d9b002dohzjef5xjxwk","tag_id":"ciw296d7y000eohzjnxvli6cd","_id":"ciw296d9h002hohzjc7s4r7cf"},{"post_id":"ciw296d8g0017ohzjrhqj786u","tag_id":"ciw296d980028ohzjgtpnbdne","_id":"ciw296d9j002lohzjyahsjpry"},{"post_id":"ciw296d9f002fohzj8ytwhjuq","tag_id":"ciw296d7y000eohzjnxvli6cd","_id":"ciw296d9n002pohzjzokwg35t"},{"post_id":"ciw296d9i002kohzjmrr7qqac","tag_id":"ciw296d7y000eohzjnxvli6cd","_id":"ciw296d9o002rohzjc6ics2am"},{"post_id":"ciw296d8i001bohzj4y7n25hn","tag_id":"ciw296d9g002gohzjklk4438b","_id":"ciw296d9o002tohzjdzea7tk1"},{"post_id":"ciw296d8k001eohzjwukvevb6","tag_id":"ciw296d9n002oohzjt8wjyjyz","_id":"ciw296d9o002wohzj7j2mpsgy"},{"post_id":"ciw296d8m001hohzjhe4iy0wc","tag_id":"ciw296d9o002uohzj2yv1a3ix","_id":"ciw296d9p0030ohzjxhrmrufn"},{"post_id":"ciw296d8n001lohzjgfr7hhoe","tag_id":"ciw296d9n002oohzjt8wjyjyz","_id":"ciw296d9p0034ohzj5avwezg6"},{"post_id":"ciw296d8p001oohzjrdw8rbuf","tag_id":"ciw296d9n002oohzjt8wjyjyz","_id":"ciw296d9q0036ohzjrcanrc4r"},{"post_id":"ciw296d8v001sohzj9d6id20f","tag_id":"ciw296d9p0035ohzjwojim4cy","_id":"ciw296d9q0038ohzjflmr83ev"},{"post_id":"ciw296d8z001vohzj1ehh03fg","tag_id":"ciw296d9p0035ohzjwojim4cy","_id":"ciw296d9r003aohzjhduhlh4s"},{"post_id":"ciw296d91001zohzjuffzxv9u","tag_id":"ciw296d9p0035ohzjwojim4cy","_id":"ciw296d9r003cohzjrj2dijy7"},{"post_id":"ciw296d930022ohzjoouesrcj","tag_id":"ciw296d9p0035ohzjwojim4cy","_id":"ciw296d9s003eohzjv6poj8g3"},{"post_id":"ciw296d970026ohzj4chlv82m","tag_id":"ciw296d9s003dohzjxbljog03","_id":"ciw296d9s003gohzjdh8l3hw8"},{"post_id":"ciw296d990029ohzjv5gvmwn9","tag_id":"ciw296d9s003fohzj58fcrgxt","_id":"ciw296d9t003iohzjsd5lq7p0"},{"post_id":"ciw296d9j002nohzj04ian7dm","tag_id":"ciw296d9s003fohzj58fcrgxt","_id":"ciw296d9t003johzjiuuwmaqw"}],"Tag":[{"name":"http","_id":"ciw296d7i0004ohzjqnkfjzd1"},{"name":"others","_id":"ciw296d7y000eohzjnxvli6cd"},{"name":"开发工具","_id":"ciw296d83000mohzjwblpp286"},{"name":"hexo","_id":"ciw296d8l001gohzjyw9qs82x"},{"name":"javacript","_id":"ciw296d930020ohzjxebu81uq"},{"name":"java","_id":"ciw296d980028ohzjgtpnbdne"},{"name":"mac","_id":"ciw296d9g002gohzjklk4438b"},{"name":"mysql","_id":"ciw296d9n002oohzjt8wjyjyz"},{"name":"mongodb","_id":"ciw296d9o002uohzj2yv1a3ix"},{"name":"node","_id":"ciw296d9p0035ohzjwojim4cy"},{"name":"redis","_id":"ciw296d9s003dohzjxbljog03"},{"name":"linux","_id":"ciw296d9s003fohzj58fcrgxt"}]}}