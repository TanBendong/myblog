<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://geeksblog.cc/"/>
  <updated>2016-11-28T15:23:35.000Z</updated>
  <id>http://geeksblog.cc/</id>
  
  <author>
    <name>Tommy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo配置和优化记录</title>
    <link href="http://geeksblog.cc/hexo-config.html"/>
    <id>http://geeksblog.cc/hexo-config.html</id>
    <published>2016-11-28T15:07:12.000Z</published>
    <updated>2016-11-28T15:23:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> hexo配置和优化高级篇：</strong> <Excerpt in index | 首页摘要><br>本文章不讲解hexo的基础配置，只针对hexo的高级配置，性能优化，seo配置进行讲解。<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>仔细想想，使用hexo搭建博客也有半年多了，但是发现访问量一直几乎没有，特别是经历几次迁移之后，之前从github到coding，<br>现在迁移到了云服务器，研究了一下如何进行seo和网站性能优化，便有了这篇文章。</p>
<h3 id="实用的功能"><a href="#实用的功能" class="headerlink" title="实用的功能"></a>实用的功能</h3><ol>
<li>站内搜索（百度的）</li>
<li>本地搜索（本地插件）</li>
<li>网站统计</li>
<li>留言功能</li>
<li>rss订阅功能</li>
</ol>
<h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ol>
<li>html压缩</li>
<li>css压缩</li>
<li>js压缩</li>
<li>img压缩</li>
<li>nginx代理，开启gzip压缩</li>
<li>cdn代理css和图片</li>
<li>删除主题无用的js和css</li>
</ol>
<h3 id="seo优化"><a href="#seo优化" class="headerlink" title="seo优化"></a>seo优化</h3><ol>
<li>sitemap</li>
<li>a标签添加<code>rel=&quot;external nofollow&quot;</code></li>
<li>使用meta标签</li>
<li>使用robots文件</li>
<li>主动提交sitemap到搜索引擎</li>
<li>添加外链和内链</li>
</ol>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; hexo配置和优化高级篇：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;本文章不讲解hexo的基础配置，只针对hexo的高级配置，性能优化，seo配置进行讲解。&lt;br&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://geeksblog.cc/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="hexo" scheme="http://geeksblog.cc/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu服务器私人定制</title>
    <link href="http://geeksblog.cc/server-config.html"/>
    <id>http://geeksblog.cc/server-config.html</id>
    <published>2016-11-28T12:36:03.000Z</published>
    <updated>2016-11-28T13:06:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> ubuntu服务器私人定制：</strong> <Excerpt in index | 首页摘要><br>把ubuntu服务器打造成自己的个性服务器，装逼必备！！！<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<p>###　说明<br><strong>此教程针对Ubuntu14,其他版本仅作参考</strong></p>
<p>###　用户密码管理<br><code>sudo passwd root</code></p>
<ol>
<li>添加一个用户组并指定id为1002<br><code>sudo groupadd －g 1002 www</code></li>
<li><p>添加一个用户到www组并指定id为1003<br><code>sudo useradd wyx -g 1002 -u 1003 -m</code></p>
</li>
<li><p>修改用户的密码<br><code>sudo passwd wyx</code></p>
</li>
<li><p>删除一个用户<br><code>sudo userdel wyx</code></p>
</li>
<li><p>为该用户添加sudo权限</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo usermod <span class="_">-a</span> -G adm wyx</div><div class="line">sudo usermod <span class="_">-a</span> -G sudo wyx</div></pre></td></tr></table></figure>
<ol>
<li>查看所有用户和用户组：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cat /etc/passwd</div><div class="line">cat /etc/group</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><ol>
<li>安装nvm<code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</code></li>
<li>安装node<code>nvm install v4.4.4</code>,安装<code>nvm install v6.9.1</code></li>
<li>设置默认的node版本<code>nvm alias default v4.4.4</code></li>
<li>安装npm3  <code>npm install -g npm@3</code></li>
<li>设置淘宝的cnpm源  <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li>
<li>验证安装<code>node -v,npm -v,cnpm -v</code><h3 id="安装node常用包"><a href="#安装node常用包" class="headerlink" title="安装node常用包"></a>安装node常用包</h3></li>
<li>安装pm2<code>cnpm install -g pm2</code></li>
<li>安装hexo博客<code>cnpm install -g hexo-cli</code></li>
<li>安装同步插件rsync<code>cnpm install -g rsync</code></li>
</ol>
<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><ol>
<li>apt安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install -y docker.io</div><div class="line">sudo ln -sf /usr/bin/docker.io /usr/<span class="built_in">local</span>/bin/docker</div><div class="line">sudo sed -i <span class="string">'$acomplete -F _docker docker'</span> /etc/bash_completion.d/docker.io</div></pre></td></tr></table></figure>
<ol>
<li>源码安装最新版本</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install apt-transport-https</div><div class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9</div><div class="line">sudo bash -c <span class="string">"echo deb https://get.docker.io/ubuntu docker main &gt; /etc/apt/sources.list.d/docker.list"</span></div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install lxc-docker</div></pre></td></tr></table></figure>
<ol>
<li>验证安装版本<br><code>docker -v</code></li>
</ol>
<h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p><code>sudo apt-get install nginx</code><br>启动和配置nginx</p>
<h3 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h3><p><code>sudo apt-get install redis-server</code><br>启动和配置文件:</p>
<h3 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h3><ol>
<li>安装3.0</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10</div><div class="line"><span class="built_in">echo</span> <span class="string">"deb http://repo.mongodb.org/apt/debian wheezy/mongodb-org/3.0 main"</span> | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list</div><div class="line">apt-get update  </div><div class="line">apt-get install mongodb-org</div></pre></td></tr></table></figure>
<ol>
<li>安装3.2最新版</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927</div><div class="line"><span class="built_in">echo</span> <span class="string">"deb http://repo.mongodb.org/apt/ubuntu "</span>$(lsb_release -sc)<span class="string">"/mongodb-org/3.2 multiverse"</span> | sudo tee /etc/apt/sources.list.d/mongodb.list</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install mongodb-org</div></pre></td></tr></table></figure>
<ol>
<li><p>制定版本<br><code>apt-get install mongodb-org=3.2.0 mongodb-org-server=3.2.0 mongodb-org-shell=3.2.0 mongodb-org-mongos=3.2.0 mongodb-org-tools=3.2.0</code></p>
</li>
<li><p>启动服务</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo service mongod start</div><div class="line">sudo service mongod stop</div></pre></td></tr></table></figure>
<ol>
<li>验证安装<br><code>mongod --version</code></li>
</ol>
<p>配置</p>
<h3 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h3><p>安装jdk1.7<code>sudo apt-get install openjdk-7-jdk</code><br>源码安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /usr/lib/jvm</div><div class="line">sudo tar zxvf jdk-7u21-linux-i586.tar.gz -C /usr/lib/jvm</div><div class="line"><span class="built_in">cd</span> /usr/lib/jvm</div><div class="line">sudo mv jdk1.7.0_21 java</div><div class="line"></div><div class="line">sudo vim ~/.bashrc</div><div class="line"></div><div class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java</div><div class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre  </div><div class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib  </div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></div></pre></td></tr></table></figure>
<h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p>实用ubuntu自带的工具下载<br><code>sudo apt-get install mysql-server</code></p>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>常见的方法有两种。</p>
<ol>
<li><p>在用户主目录下有一个 .bashrc 文件，可以在此文件中加入 PATH 的设置如下：<br><code>export PATH=”$PATH:/your path1/:/your path2/…..”</code></p>
</li>
<li><p>在 /etc/profile中增加</p>
<pre><code class="bash">PATH=<span class="string">"<span class="variable">$PATH</span>:/home/zhengb66/bin"</span> 
<span class="built_in">export</span> PATH
</code></pre>
</li>
</ol>
<h3 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h3><ol>
<li><p>方法一，编辑rc.loacl脚本<br>Ubuntu开机之后会执行/etc/rc.local文件中的脚本，<br>所以我们可以直接在/etc/rc.local中添加启动脚本。<br>当然要添加到语句：exit 0 前面才行。代码如下:<br><code>sudo vi /etc/rc.local</code><br>然后在 exit 0 前面添加好脚本代码。</p>
</li>
<li><p>方法二，添加一个Ubuntu的开机启动服务。<br>如果要添加为开机启动执行的脚本文件，<br>可先将脚本复制或者软连接到/etc/init.d/目录下，<br>然后用：update-rc.d xxx defaults NN命令(NN为启动顺序)，<br>将脚本添加到初始化执行的队列中去。<br>注意如果脚本需要用到网络，则NN需设置一个比较大的数字，如99。<br>1) 将你的启动脚本复制到 /etc/init.d目录下<br>以下假设你的脚本文件名为 test。<br>2) 设置脚本文件的权限</p>
</li>
</ol>
<p>代码如下:<br><code>sudo chmod 755 /etc/init.d/test</code><br>3) 执行如下命令将脚本放到启动脚本中去：<br>代码如下:<br><code>cd /etc/init.d</code>  <code>sudo update-rc.d test defaults 95</code><br> 注：其中数字95是脚本启动的顺序号，按照自己的需要相应修改即可。在你有多个启动脚本，而它们之间又有先后启动的依赖关系时你就知道这个数字的具体作用了。该命令的输出信息参考如下：<br>卸载启动脚本的方法：<br>代码如下:<br><code>cd /etc/init.d</code><br><code>sudo update-rc.d -f test remove</code></p>
<h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>在Ubuntu下，cron是被默认安装并启动的。通过查看/etc/crontab<br>推荐使用crontab -e命令添加自定义的任务（编辑的是/var/spool/cron下对应用户的cron文件，在/var/spool/cron下的crontab文件 不可以直接创建或者直接修改，crontab文件是通过crontab命令得到的）。<br><code>crontab -e</code></p>
<ol>
<li><p>直接执行命令行<br>每2分钟打印一个字符串“Hello World”，保存至文件/home/laigw/cron/HelloWorld.txt中，cron 格式如下：<br><code>*/2 * * * * echo “Hello World.” &gt;&gt; /home/HelloWorld.txt</code></p>
</li>
<li><p>shell 文件<br>每3分钟调用一次 /home/laigw/cron/test.sh 文件，cron 格式如下：<br><code>*/3 * * * * /home/laigw/cron/test.sh</code></p>
<h3 id="ftp和rsync配置"><a href="#ftp和rsync配置" class="headerlink" title="ftp和rsync配置"></a>ftp和rsync配置</h3></li>
</ol>
<h3 id="持续集成环境"><a href="#持续集成环境" class="headerlink" title="持续集成环境"></a>持续集成环境</h3><ol>
<li>jenkens配置</li>
<li>gitlab配置</li>
<li>git服务器</li>
</ol>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; ubuntu服务器私人定制：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;把ubuntu服务器打造成自己的个性服务器，装逼必备！！！&lt;br&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://geeksblog.cc/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="linux" scheme="http://geeksblog.cc/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Mac开发环境配置</title>
    <link href="http://geeksblog.cc/mac-dev.html"/>
    <id>http://geeksblog.cc/mac-dev.html</id>
    <published>2016-11-27T07:52:38.000Z</published>
    <updated>2016-11-27T08:32:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> mac开发环境配置：</strong> <Excerpt in index | 首页摘要><br>工欲善其事，必先利其器，做好开发者，先搞好开发环境啊。针对mac开发者的开发配置，把mac打造成最具生产力工具！<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h3 id="软件下载说明"><a href="#软件下载说明" class="headerlink" title="软件下载说明"></a>软件下载说明</h3><p>下面所提到的软件，有很多需要付费或者破解版，为了方便大家使用，会在网盘分享给大家，只需在评论的地方留下自己的<strong>百度云账号</strong>！！！</p>
<h3 id="软件分类说明"><a href="#软件分类说明" class="headerlink" title="软件分类说明"></a>软件分类说明</h3><ol>
<li>通用（开发者必备的软件）</li>
<li>java类（java开发者必不可少）</li>
<li>前端类（偏前端和nodejs）</li>
<li>python类</li>
<li>数据库类</li>
<li>其他（php，ruby等等）</li>
</ol>
<h3 id="通用软件"><a href="#通用软件" class="headerlink" title="通用软件"></a>通用软件</h3><ol>
<li>Alfred</li>
<li>dash</li>
<li>homebrew</li>
<li>zsh（oh my zsh）</li>
<li>sublime text3,</li>
<li>vscode</li>
<li>paste(剪切板工具)</li>
<li>BetterSnapTool(分屏软件)</li>
<li>cornerstone(svn)</li>
<li>tower(git)</li>
<li>alternote()</li>
<li>paw</li>
<li>chrome</li>
<li>firefox</li>
<li>pdf expert</li>
<li>CheatSheet</li>
<li>snippetslab</li>
</ol>
<h3 id="java软件"><a href="#java软件" class="headerlink" title="java软件"></a>java软件</h3><ol>
<li>jdk</li>
<li>idea</li>
<li>eclipse</li>
<li>maven</li>
<li>zookeeper,dubbo</li>
<li>tomcat</li>
<li>apache</li>
</ol>
<h3 id="前端必备"><a href="#前端必备" class="headerlink" title="前端必备"></a>前端必备</h3><ol>
<li>nvm(nodejs,npm,cnpm)</li>
<li>webpack</li>
<li>yo</li>
<li>webstorm</li>
</ol>
<h3 id="python必备"><a href="#python必备" class="headerlink" title="python必备"></a>python必备</h3><ol>
<li>pycharm</li>
<li>sublime text（插件）</li>
</ol>
<h3 id="数据库类"><a href="#数据库类" class="headerlink" title="数据库类"></a>数据库类</h3><ol>
<li>mysql</li>
<li>mongodb</li>
<li>sqllite</li>
<li>navicate</li>
<li>robomongo</li>
<li>redis</li>
</ol>
<h3 id="其他软件"><a href="#其他软件" class="headerlink" title="其他软件"></a>其他软件</h3><ol>
<li>office</li>
<li>keynote,pages,number</li>
<li>photoshop</li>
</ol>
<p>文章长期更新，请收藏</p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; mac开发环境配置：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;工欲善其事，必先利其器，做好开发者，先搞好开发环境啊。针对mac开发者的开发配置，把mac打造成最具生产力工具！&lt;br&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://geeksblog.cc/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="mac" scheme="http://geeksblog.cc/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Npm使用详解</title>
    <link href="http://geeksblog.cc/npm-detail.html"/>
    <id>http://geeksblog.cc/npm-detail.html</id>
    <published>2016-11-17T12:05:56.000Z</published>
    <updated>2016-11-27T07:18:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Npm使用详解：</strong> <Excerpt in index | 首页摘要><br>    npm所有的常用知识都在这里，没错，所有的！！<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="node版本控制"><a href="#node版本控制" class="headerlink" title="node版本控制"></a>node版本控制</h2><ol>
<li><p>使用nvm进行版本控制</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- unix --&gt;</span></div><div class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</div><div class="line"><span class="comment">&lt;!-- windows --&gt;</span></div><div class="line">https://github.com/coreybutler/nvm-windows需要自己下载</div><div class="line"><span class="comment">&lt;!-- 安装node --&gt;</span></div><div class="line">nvm install v4.4</div><div class="line"><span class="comment">&lt;!-- 选择默认版本 --&gt;</span></div><div class="line">nvm alias default v4.4</div></pre></td></tr></table></figure>
</li>
<li><p>镜像管理,使用cnpm进行加速</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 使用cnpm命令 --&gt;</span></div><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class="line"><span class="comment">&lt;!-- 使用npm别名 --&gt;</span></div><div class="line">alias cnpm="npm --registry=https://registry.npm.taobao.org \</div><div class="line">--cache=$HOME/.npm/.cache/cnpm \</div><div class="line">--disturl=https://npm.taobao.org/dist \</div><div class="line">--userconfig=$HOME/.cnpmrc"</div></pre></td></tr></table></figure>
</li>
<li><p>修改nvm镜像地址进行下载加速</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export <span class="attr">NVM_NODEJS_ORG_MIRROR=</span>https://nodejs.org/dist</div><div class="line">nvm install <span class="keyword">node</span></div><div class="line"></div><div class="line"><span class="title">NVM_NODEJS_ORG_MIRROR</span>=https://nodejs.org/dist nvm install <span class="number">4.2</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol>
<li><p>安装命令,</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span>;</div><div class="line">npm <span class="keyword">install</span> <span class="comment">--save-dev;</span></div><div class="line">npm <span class="keyword">install</span> -g;</div><div class="line">npm <span class="keyword">uninstall</span> <span class="keyword">name</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>npm命令<br>npm可以运行package.json的script命令</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 集成命令 --&gt;</span></div><div class="line">npm start</div><div class="line">npm restart</div><div class="line">npm test</div><div class="line">npm stop</div><div class="line">npm init（初始化项目时使用）</div><div class="line">npm publish(发布模块需要使用)</div><div class="line">npm update</div><div class="line">npm search</div><div class="line">npm list</div><div class="line">npm view moduleName(查看模块依赖)</div><div class="line"><span class="comment">&lt;!-- script命令 ,在script中定义好--&gt;</span></div><div class="line">npm run build</div><div class="line">npm run dev</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Npm使用详解：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;    npm所有的常用知识都在这里，没错，所有的！！&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://geeksblog.cc/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="node" scheme="http://geeksblog.cc/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出Nodejs笔记</title>
    <link href="http://geeksblog.cc/node-notes.html"/>
    <id>http://geeksblog.cc/node-notes.html</id>
    <published>2016-11-11T11:52:23.000Z</published>
    <updated>2016-11-27T07:19:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 深入浅出Nodejs笔记：</strong> <Excerpt in index | 首页摘要><br>    node学习重点，深入浅出nodejs学习笔记<br><a id="more"></a></p>
<p><The rest of contents | 余下全文></p>
<h3 id="node简介："><a href="#node简介：" class="headerlink" title="node简介："></a>node简介：</h3><pre><code>1. 异步IO，适合io密集型的
2. 单线程，通过childnode实现多线程
3. 跨平台，通过electron编写跨平台客户端
4. 上手简单,功能强大
</code></pre><h3 id="node模块"><a href="#node模块" class="headerlink" title="node模块"></a>node模块</h3><pre><code>1. node模块分为两类，一是node的内建模块（核心模块），二是用户编写的文件模块
2. 核心模块在node编译时加载到内存，文件模块在运行时动态加载
3. node的每一个文件模块都是一个对象
4. 文件模块需要经过路径分析，文件定位，编译执行3个过程
5. node对引入过的模块都进行缓存，require会优先使用缓存
</code></pre><h3 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h3><pre><code>1. node中都是异步的，实现同步的话要通过回调函数或者同步框架
2. 异步的方案：事件发布/事件监听，Promise/Deferred模式,流程控制库
3. 事件监听模式：Node自身的events模块提供了简单的实现，具有addListener/on(). once(). remove        Listener(). removeAllListeners()和emit()方法。
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">emitter.on(<span class="string">"event1"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(message);</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 发布</span></div><div class="line">emitter.emit(<span class="string">'event1'</span>, <span class="string">"I am message!"</span>);</div></pre></td></tr></table></figure>
</code></pre><h3 id="内存控制"><a href="#内存控制" class="headerlink" title="内存控制"></a>内存控制</h3><pre><code>1. 在node中内存限制为64位1.4G（32位0.7G）
2. 限制内存的原因：V8做垃圾回收如果以1.5G为例，做一次小的垃圾回收需要50ms,做一次非增量式内存回收耗时1s以上
3. node在启动时可以更改内存大小，--max-old-space-size=或者--max-new-space-size=
4. v8的内存回收机制：内存分代为新生代（生命周期短）和老生代（生命周期长），
5. 堆外内存不受内存限制，如buffer对象的使用
</code></pre><h3 id="理解buffer"><a href="#理解buffer" class="headerlink" title="理解buffer"></a>理解buffer</h3><h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3><pre><code>1. tcp服务
    服务端：
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</div><div class="line"><span class="keyword">var</span> server = net.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line">socket.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">	socket.write(<span class="string">"你好"</span>);</div><div class="line">&#125;);</div><div class="line">socket.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'断开连接'</span>);</div><div class="line">&#125;);</div><div class="line">socket.write(<span class="string">"欢迎光临：\n"</span>);</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">8124</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'server bound'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<pre><code>客户端：
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</div><div class="line"><span class="keyword">var</span> client = net.connect(&#123;port: <span class="number">8124</span>&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//'connect' listener</span></div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'client connected'</span>);</div><div class="line">	client.write(<span class="string">'world!\r\n'</span>);</div><div class="line">&#125;);</div><div class="line">client.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(data.toString());</div><div class="line">	client.end();</div><div class="line">&#125;);</div><div class="line">client.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'client disconnected'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<pre><code>2. udp服务
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 服务端：</span></div><div class="line"><span class="keyword">var</span> dgram = <span class="built_in">require</span>(<span class="string">"dgram"</span>);</div><div class="line"><span class="keyword">var</span> server = dgram.createSocket(<span class="string">"udp4"</span>);</div><div class="line">server.on(<span class="string">"message"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg, rinfo</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"server got: "</span> + msg + <span class="string">" from "</span> +</div><div class="line">	rinfo.address + <span class="string">":"</span> + rinfo.port);</div><div class="line">&#125;);</div><div class="line">server.on(<span class="string">"listening"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> address = server.address();</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"server listening "</span> +</div><div class="line">	address.address + <span class="string">":"</span> + address.port);</div><div class="line">&#125;);</div><div class="line">server.bind(<span class="number">41234</span>);</div><div class="line"><span class="comment">// 客户端：</span></div><div class="line"><span class="keyword">var</span> dgram = <span class="built_in">require</span>(<span class="string">'dgram'</span>);</div><div class="line"><span class="keyword">var</span> message = <span class="keyword">new</span> Buffer(”nodejs“);</div><div class="line"><span class="keyword">var</span> client = dgram.createSocket(<span class="string">"udp4"</span>);</div><div class="line">client.send(message, <span class="number">0</span>, message.length, <span class="number">41234</span>, <span class="string">"localhost"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, bytes</span>) </span>&#123;</div><div class="line">	client.close();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<pre><code>3. http服务
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 服务端：</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</div><div class="line">	res.end(<span class="string">'Hello World\n'</span>);</div><div class="line">&#125;).listen(<span class="number">1337</span>, <span class="string">'127.0.0.1'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:1337/'</span>);</div><div class="line"><span class="comment">// 客户端：</span></div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">	hostname: <span class="string">'127.0.0.1'</span>,</div><div class="line">	port: <span class="number">1334</span>,</div><div class="line">	path: <span class="string">'/'</span>,</div><div class="line">	method: <span class="string">'GET'</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> req = http.request(options, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'STATUS: '</span> + res.statusCode);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'HEADERS: '</span> + <span class="built_in">JSON</span>.stringify(res.headers));</div><div class="line">	res.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">	res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(chunk);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div><div class="line">req.end();</div></pre></td></tr></table></figure>
<pre><code>4. websocket服务
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 客户端：</span></div><div class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://127.0.0.1:12010/updates'</span>);</div><div class="line">socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (socket.bufferedAmount == <span class="number">0</span>)</div><div class="line">		socket.send(getUpdateData());</div><div class="line">	&#125;, <span class="number">50</span>);</div><div class="line">&#125;;</div><div class="line">socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">	<span class="comment">// TODO：event.data</span></div><div class="line">&#125;;</div><div class="line"><span class="comment">// &lt;!-- 模拟浏览器： --&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> WebSocket = <span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</div><div class="line"><span class="comment">// 代码?解析ws://127.0.0.1:12010/updates</span></div><div class="line">	<span class="keyword">this</span>.options = parseUrl(url);</div><div class="line">	<span class="keyword">this</span>.connect();</div><div class="line">&#125;;</div><div class="line">WebSocket.prototype.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">// TODO</span></div><div class="line">&#125;;</div><div class="line">WebSocket.prototype.setSocket = <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line"><span class="keyword">this</span>.socket = socket;</div><div class="line">&#125;;</div><div class="line">WebSocket.prototype.connect = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> <span class="keyword">this</span> = that;</div><div class="line">	<span class="keyword">var</span> key = <span class="keyword">new</span> Buffer(<span class="keyword">this</span>.options.protocolVersion + <span class="string">'-'</span> + <span class="built_in">Date</span>.now()).toString(<span class="string">'base64'</span>);</div><div class="line">	<span class="keyword">var</span> shasum = crypto.createHash(<span class="string">'sha1'</span>);</div><div class="line">	<span class="keyword">var</span> expected = shasum.update(key + <span class="string">'258EAFA5-E914-47DA-95CA-C5AB0DC85B11'</span>).digest(<span class="string">'base64'</span>);</div><div class="line">	<span class="keyword">var</span> options = &#123;</div><div class="line">		port: <span class="keyword">this</span>.options.port, <span class="comment">//12010</span></div><div class="line">		host: <span class="keyword">this</span>.options.hostname, <span class="comment">// 127.0.0.1</span></div><div class="line">	headers: &#123;</div><div class="line">		<span class="string">'Connection'</span>: <span class="string">'Upgrade'</span>,</div><div class="line">		<span class="string">'Upgrade'</span>: <span class="string">'websocket'</span>,</div><div class="line">		<span class="string">'Sec-WebSocket-Version'</span>: <span class="keyword">this</span>.options.protocolVersion,</div><div class="line">		<span class="string">'Sec-WebSocket-Key'</span>: key</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> req = http.request(options);</div><div class="line">	req.end();</div><div class="line">	req.on(<span class="string">'upgrade'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">res, socket, upgradeHead</span>) </span>&#123;</div><div class="line">	<span class="comment">// 连接成功</span></div><div class="line">	that.setSocket(socket);</div><div class="line">	<span class="comment">// 触发open事件</span></div><div class="line">	that.onopen();</div><div class="line">&#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 服务端响应：</span></div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">	res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</div><div class="line">	res.end(<span class="string">'Hello World\n'</span>);</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">12010</span>);</div><div class="line"><span class="comment">// 在收到upgrade请求之后，告知客户端允许切换协议</span></div><div class="line">server.on(<span class="string">'upgrade'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, socket, upgradeHead</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> head = <span class="keyword">new</span> Buffer(upgradeHead.length);</div><div class="line">	upgradeHead.copy(head);</div><div class="line">	<span class="keyword">var</span> key = req.headers[<span class="string">'sec-websocket-key'</span>];</div><div class="line">	<span class="keyword">var</span> shasum = crypto.createHash(<span class="string">'sha1'</span>);</div><div class="line">	key = shasum.update(key + <span class="string">"258EAFA5-E914-47DA-95CA-C5AB0DC85B11"</span>).digest(<span class="string">'base64'</span>);</div><div class="line">	<span class="keyword">var</span> headers = [</div><div class="line">		<span class="string">'HTTP/1.1 101 Switching Protocols'</span>,</div><div class="line">		<span class="string">'Upgrade: websocket'</span>,</div><div class="line">		<span class="string">'Connection: Upgrade'</span>,</div><div class="line">		<span class="string">'Sec-WebSocket-Accept: '</span> + key,</div><div class="line">		<span class="string">'Sec-WebSocket-Protocol: '</span> + protocol</div><div class="line">	];</div><div class="line">	<span class="comment">// 让数据立即发送</span></div><div class="line">	socket.setNoDelay(<span class="literal">true</span>);</div><div class="line">	socket.write(headers.concat(<span class="string">''</span>, <span class="string">''</span>).join(<span class="string">'\r\n'</span>));</div><div class="line">	<span class="comment">// 建立服务器端WebSocket连接</span></div><div class="line">	<span class="keyword">var</span> websocket = <span class="keyword">new</span> WebSocket();</div><div class="line">	websocket.setSocket(socket);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<pre><code>5. TLS服务（安全方面）
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 服务端：</span></div><div class="line"><span class="keyword">var</span> tls = <span class="built_in">require</span>(<span class="string">'tls'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">	key: fs.readFileSync(<span class="string">'./keys/server.key'</span>),</div><div class="line">	cert: fs.readFileSync(<span class="string">'./keys/server.crt'</span>),</div><div class="line">	requestCert: <span class="literal">true</span>,</div><div class="line">	ca: [ fs.readFileSync(<span class="string">'./keys/ca.crt'</span>) ]</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> server = tls.createServer(options, <span class="function"><span class="keyword">function</span> (<span class="params">stream</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'server connected'</span>, stream.authorized ? <span class="string">'authorized'</span> : <span class="string">'unauthorized'</span>);</div><div class="line">	stream.write(<span class="string">"welcome!\n"</span>);</div><div class="line">	stream.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">	stream.pipe(stream);</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">8000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'server bound'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<pre><code>// 测试证书是否正常
`$ openssl s_client -connect 127.0.0.1:8000`

客户端：
// 创建私钥
`$ openssl genrsa -out client.key 1024`
// 生成CSR
`$ openssl req -new -key client.key -out client.csr`
// 生成签名证书
`$ openssl x509 -req -CA ca.crt -CAkey ca.key -CAcreateserial -in client.csr -out client.crt`
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tls = <span class="built_in">require</span>(<span class="string">'tls'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">	key: fs.readFileSync(<span class="string">'./keys/client.key'</span>),</div><div class="line">	cert: fs.readFileSync(<span class="string">'./keys/client.crt'</span>),</div><div class="line">	ca: [ fs.readFileSync(<span class="string">'./keys/ca.crt'</span>) ]</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> stream = tls.connect(<span class="number">8000</span>, options, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'client connected'</span>, stream.authorized ? <span class="string">'authorized'</span> : <span class="string">'unauthorized'</span>);</div><div class="line">	process.stdin.pipe(stream);</div><div class="line">&#125;);</div><div class="line">stream.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">stream.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(data);</div><div class="line">&#125;);</div><div class="line">stream.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	server.close();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<pre><code>6. HTTPS服务
    服务端：
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">	key: fs.readFileSync(<span class="string">'./keys/server.key'</span>),</div><div class="line">	cert: fs.readFileSync(<span class="string">'./keys/server.crt'</span>)</div><div class="line">&#125;;</div><div class="line">https.createServer(options, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">res.writeHead(<span class="number">200</span>);</div><div class="line">	res.end(<span class="string">"hello world\n"</span>);</div><div class="line">&#125;).listen(<span class="number">8000</span>);</div></pre></td></tr></table></figure>
<pre><code>客户端：
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">	hostname: <span class="string">'localhost'</span>,</div><div class="line">	port: <span class="number">8000</span>,</div><div class="line">	path: <span class="string">'/'</span>,</div><div class="line">	method: <span class="string">'GET'</span>,</div><div class="line">	key: fs.readFileSync(<span class="string">'./keys/client.key'</span>),</div><div class="line">	cert: fs.readFileSync(<span class="string">'./keys/client.crt'</span>),</div><div class="line">	ca: [fs.readFileSync(<span class="string">'./keys/ca.crt'</span>)]</div><div class="line">&#125;;</div><div class="line">options.agent = <span class="keyword">new</span> https.Agent(options);</div><div class="line"><span class="keyword">var</span> req = https.request(options, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">	res.setEncoding(<span class="string">'utf-8'</span>);</div><div class="line">	res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(d);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div><div class="line">req.end();</div><div class="line">req.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(e);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="玩转进程"><a href="#玩转进程" class="headerlink" title="玩转进程"></a>玩转进程</h3><pre><code>node提供了child_process.fork()实现进程的复制
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">	res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</div><div class="line">	res.end(<span class="string">'Hello World\n'</span>);</div><div class="line">&#125;).listen(<span class="built_in">Math</span>.round((<span class="number">1</span> + <span class="built_in">Math</span>.random()) * <span class="number">1000</span>), <span class="string">'127.0.0.1'</span>);</div></pre></td></tr></table></figure>
<pre><code>运行node worker.js，监听?1000到2000之间的端口。

以下是master.js
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fork = <span class="built_in">require</span>(<span class="string">'child_process'</span>).fork;</div><div class="line"><span class="keyword">var</span> cpus = <span class="built_in">require</span>(<span class="string">'os'</span>).cpus();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cpus.length; i++) &#123;</div><div class="line">	fork(<span class="string">'./worker.js'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>这是著名的master-worker模式，主从模式

//创建子进程
child_process模块提供了四个方法创建子进程
spawn()        执行命令
exec()            执行命令        可设置时间
execFile()        执行文件        可设置时间
fork()            执行javascript
后面3中方法都是spawn()的延伸
//实例work.js
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cp = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</div><div class="line">cp.spawn(<span class="string">'node'</span>, [<span class="string">'worker.js'</span>]);</div><div class="line">cp.exec(<span class="string">'node worker.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, stdout, stderr</span>) </span>&#123;</div><div class="line"><span class="comment">// some code</span></div><div class="line">&#125;);</div><div class="line">cp.execFile(<span class="string">'worker.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, stdout, stderr</span>) </span>&#123;</div><div class="line"><span class="comment">// some code</span></div><div class="line">&#125;);</div><div class="line">cp.fork(<span class="string">'./worker.js'</span>)</div></pre></td></tr></table></figure>
<pre><code>//进程间通信
在浏览器中，javascript主线程和UI渲染是一个线程，渲染UI和执行js是互相阻塞的
html5提出来webworker API，创建工作线程在后台运行
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'worker.js'</span>);</div><div class="line">worker.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">	<span class="built_in">document</span>.getElementById(<span class="string">'result'</span>).textContent = event.data;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<pre><code>work.js代码如下
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> n = <span class="number">1</span>;</div><div class="line">search: <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">	n += <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">Math</span>.sqrt(n); i += <span class="number">1</span>)</div><div class="line">		<span class="keyword">if</span> (n  i == <span class="number">0</span>) %</div><div class="line">			<span class="keyword">continue</span> search;</div><div class="line">	<span class="comment">// found a prime</span></div><div class="line">	postMessage(n);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>主线程和工作线程通过onmessage()和postMessage()进行通信，子进程对象由send方法
// parent.js
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cp = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</div><div class="line"><span class="keyword">var</span> n = cp.fork(__dirname + <span class="string">'/sub.js'</span>);</div><div class="line">n.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'PARENT got message:'</span>, m);</div><div class="line">&#125;);</div><div class="line">n.send(&#123;hello: <span class="string">'world'</span>&#125;);</div><div class="line"><span class="comment">// sub.js</span></div><div class="line">process.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'CHILD got message:'</span>, m);</div><div class="line">&#125;);</div><div class="line">process.send(&#123;foo: <span class="string">'bar'</span>&#125;);</div></pre></td></tr></table></figure>
<pre><code>//进程间通信原理
实现进程间的技术有：管道，tcp，socket，共享内存，等。
//句柄传递
一个端口只能由一个工作进程监听，解决方案是有主进程监听一个80端口，然后
分发到其他子线程去
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// parent.js</span></div><div class="line"><span class="keyword">var</span> child = <span class="built_in">require</span>(<span class="string">'child_process'</span>).fork(<span class="string">'child.js'</span>);</div><div class="line"><span class="comment">// Open up the server object and send the handle</span></div><div class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'net'</span>).createServer();</div><div class="line">server.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line">	socket.end(<span class="string">'handled by parent\n'</span>);</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">1337</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	child.send(<span class="string">'server'</span>, server);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//child.js</span></div><div class="line">process.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">m, server</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (m === <span class="string">'server'</span>) &#123;</div><div class="line">		server.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line">			socket.end(<span class="string">'handled by child\n'</span>);</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//将服务发送到多个子进程实例</span></div><div class="line"><span class="comment">//parent.js</span></div><div class="line"><span class="keyword">var</span> cp = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</div><div class="line"><span class="keyword">var</span> child1 = cp.fork(<span class="string">'child.js'</span>);</div><div class="line"><span class="keyword">var</span> child2 = cp.fork(<span class="string">'child.js'</span>);</div><div class="line"><span class="comment">// Open up the server object and send the handle</span></div><div class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'net'</span>).createServer();</div><div class="line">server.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line">	socket.end(<span class="string">'handled by parent\n'</span>);</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">1337</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	child1.send(<span class="string">'server'</span>, server);</div><div class="line">	child2.send(<span class="string">'server'</span>, server);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//child.js</span></div><div class="line">process.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">m, server</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span> (m === <span class="string">'server'</span>) &#123;</div><div class="line">	server.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line">		socket.end(<span class="string">'handled by child, pid is '</span> + process.pid + <span class="string">'\n'</span>);</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">//最终版，请求全部由子进程处理，</span></div><div class="line"><span class="comment">//parent,js</span></div><div class="line"><span class="keyword">var</span> cp = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</div><div class="line"><span class="keyword">var</span> child1 = cp.fork(<span class="string">'child.js'</span>);</div><div class="line"><span class="keyword">var</span> child2 = cp.fork(<span class="string">'child.js'</span>);</div><div class="line"><span class="comment">// Open up the server object and send the handle</span></div><div class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'net'</span>).createServer();</div><div class="line">server.listen(<span class="number">1337</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	child1.send(<span class="string">'server'</span>, server);</div><div class="line">	child2.send(<span class="string">'server'</span>, server);</div><div class="line">	server.close(); <span class="comment">//关闭主线程的服务</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">//child.js</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">	res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</div><div class="line">	res.end(<span class="string">'handled by child, pid is '</span> + process.pid + <span class="string">'\n'</span>);</div><div class="line">&#125;);</div><div class="line">process.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">m, tcp</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (m === <span class="string">'server'</span>) &#123;</div><div class="line">		tcp.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line">			server.emit(<span class="string">'connection'</span>, socket);</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<pre><code>&lt;p&gt;
send发送的句柄类型：
    net.Socket。TCP
    net.Server。TCP服务

    net.Native。C++
    dgram.Socket。UDP
    dgram.Native。C++
//进程事件
error：
exit：
close：
disconnect：
&lt;/p&gt;
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//自动重启线程</span></div><div class="line"><span class="comment">//master.js</span></div><div class="line"><span class="keyword">var</span> fork = <span class="built_in">require</span>(<span class="string">'child_process'</span>).fork;</div><div class="line"><span class="keyword">var</span> cpus = <span class="built_in">require</span>(<span class="string">'os'</span>).cpus();</div><div class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'net'</span>).createServer();</div><div class="line">server.listen(<span class="number">1337</span>);</div><div class="line"><span class="keyword">var</span> workers = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> createWorker = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> worker = fork(__dirname + <span class="string">'/worker.js'</span>);</div><div class="line"><span class="comment">//退出时重新启动新的线程</span></div><div class="line">worker.on(<span class="string">'exit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'Worker '</span> + worker.pid + <span class="string">' exited.'</span>);</div><div class="line">	<span class="keyword">delete</span> workers[worker.pid];</div><div class="line">	createWorker();</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 句柄转发</span></div><div class="line">worker.send(<span class="string">'server'</span>, server);</div><div class="line">workers[worker.pid] = worker;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Create worker. pid: '</span> + worker.pid);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cpus.length; i++) &#123;</div><div class="line">createWorker();</div><div class="line">&#125;</div><div class="line"><span class="comment">// 进程自己退出让所有工作进程退出</span></div><div class="line">process.on(<span class="string">'exit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> pid <span class="keyword">in</span> workers) &#123;</div><div class="line">		workers[pid].kill();</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//work.js  考虑处理异常</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">	res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</div><div class="line">	res.end(<span class="string">'handled by child, pid is '</span> + process.pid + <span class="string">'\n'</span>);</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> worker;</div><div class="line">process.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">m, tcp</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (m === <span class="string">'server'</span>) &#123;</div><div class="line">		worker = tcp;</div><div class="line">		worker.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line">			server.emit(<span class="string">'connection'</span>, socket);</div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;);</div><div class="line">process.on(<span class="string">'uncaughtException'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	process.send(&#123;act: <span class="string">'suicide'</span>&#125;);</div><div class="line"><span class="comment">// 停止接收新的连接</span></div><div class="line">	worker.close(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">// 连接断开后退出进程</span></div><div class="line">		process.exit(<span class="number">1</span>);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 深入浅出Nodejs笔记：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;    node学习重点，深入浅出nodejs学习笔记&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://geeksblog.cc/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="node" scheme="http://geeksblog.cc/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Atom中最好的js代码补全</title>
    <link href="http://geeksblog.cc/best-js-snippet.html"/>
    <id>http://geeksblog.cc/best-js-snippet.html</id>
    <published>2016-07-21T22:11:30.000Z</published>
    <updated>2016-11-13T05:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> Atom中最好的js代码补全：</strong> <Excerpt in index | 首页摘要><br>    这或许是atom中最好的js代码补全,包含了express,nodejs,es6,目前仍在继续更新<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="best-js-snippets"><a href="#best-js-snippets" class="headerlink" title="best-js-snippets"></a>best-js-snippets</h2><p>这个package的名字就叫 <strong>best-js-snippets</strong> ,用atom的可以下载使用一下,提出建议,我会尽快修改<br><img src="http://o7kalf5h3.bkt.clouddn.com/snippets.png" alt="best-js-snippets"></p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol>
<li>express补全</li>
<li>es6补全</li>
<li>js补全(string,dom操作)</li>
<li>nodejs补全(fs,event,util,module,class,assert)</li>
</ol>
<h2 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h2><ol>
<li>atom编辑器中找到设置,搜索package,安装即可.</li>
<li>重启atom,享受吧!</li>
</ol>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; Atom中最好的js代码补全：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;    这或许是atom中最好的js代码补全,包含了express,nodejs,es6,目前仍在继续更新&lt;br&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://geeksblog.cc/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="others" scheme="http://geeksblog.cc/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>程序员编程资源汇总</title>
    <link href="http://geeksblog.cc/code-resource.html"/>
    <id>http://geeksblog.cc/code-resource.html</id>
    <published>2016-07-19T11:06:29.000Z</published>
    <updated>2016-11-13T05:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 程序员编程资源汇总：</strong> <Excerpt in index | 首页摘要><br>    自己收集的编程相关的资源，分享给大家，希望能帮助更多的人在编程的道路上越走越远！<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h3 id="为什么写这边博客？"><a href="#为什么写这边博客？" class="headerlink" title="为什么写这边博客？"></a>为什么写这边博客？</h3><p>每个程序员都会面临一个问题，如何搜索自己需要的资料，我自己也有很多的时间花费在找寻资料上，<br>希望能把最实用的书籍和资源收集起来给大家一个</p>
<h3 id="免费的编程书籍网站"><a href="#免费的编程书籍网站" class="headerlink" title="免费的编程书籍网站"></a>免费的编程书籍网站</h3><ol>
<li>原版英文书籍<ul>
<li><a href="http://www.salttiger.com/">英文原版</a></li>
</ul>
</li>
<li>中文开源书籍<ul>
<li><a href="https://github.com/vhf/free-programming-books/blob/master/free-programming-books-zh.md">免费开源</a></li>
<li><a href="https://www.gitbook.com">gitbook</a></li>
</ul>
</li>
<li>免费下载的网站<ul>
<li><a href="http://www.jb51.net/jiaoben/">脚本之家</a></li>
<li><a href="http://vdisk.weibo.com/">新浪微盘</a></li>
</ul>
</li>
</ol>
<h3 id="代码资源"><a href="#代码资源" class="headerlink" title="代码资源"></a>代码资源</h3><ol>
<li>最好的代码仓库 <a href="https://github.com/">github</a></li>
<li><a href="https://code.csdn.net/">csdn代码仓库</a></li>
<li><a href="https://gist.github.com/">gist</a></li>
<li><a href="http://www.phpxs.com/code/">代码片段之家</a></li>
</ol>
<h3 id="博客资源"><a href="#博客资源" class="headerlink" title="博客资源"></a>博客资源</h3><ol>
<li>csdn</li>
<li>博客园</li>
<li>伯乐在线</li>
<li>简书</li>
</ol>
<h2 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h2><ol>
<li>stackoverflow</li>
<li>segmentfault</li>
<li>知乎</li>
<li>谷歌</li>
</ol>
<p><strong>此文章会继续更新,把最好的资源奉献给大家!!</strong></p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 程序员编程资源汇总：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;    自己收集的编程相关的资源，分享给大家，希望能帮助更多的人在编程的道路上越走越远！&lt;br&gt;
    
    </summary>
    
      <category term="others" scheme="http://geeksblog.cc/categories/others/"/>
    
    
      <category term="开发工具" scheme="http://geeksblog.cc/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Ajax和jsonp区别</title>
    <link href="http://geeksblog.cc/ajax-jsonp.html"/>
    <id>http://geeksblog.cc/ajax-jsonp.html</id>
    <published>2016-07-06T12:54:16.000Z</published>
    <updated>2016-11-27T16:16:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> ajax和jsonp区别 ：</strong> <Excerpt in index | 首页摘要><br>    jquery的封装影响了很多人的误解，所以有必要对ajax和jsonp的本质区别讲解，<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h3 id="jsonp是什么？"><a href="#jsonp是什么？" class="headerlink" title="jsonp是什么？"></a>jsonp是什么？</h3><p>利用在页面中创建<code>&lt;script&gt;</code>节点的方法向不同域提交HTTP请求的方法称为JSONP，这项技术可以解决跨域提交Ajax请求的问题。JSONP的工作原理如下所述：假设在 <a href="http://example1.com/index.php">http://example1.com/index.php</a> 这个页面中向 <a href="http://example2.com/getinfo.php">http://example2.com/getinfo.php</a> 提交GET请求，我们可以将下面的JavaScript代码放在 <a href="http://example1.com/index.php">http://example1.com/index.php</a> 这个页面中来实现：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> eleScript= <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">eleScript.type = <span class="string">"text/javascript"</span>;</div><div class="line">eleScript.src = <span class="string">"http://example2.com/getinfo.php"</span>;</div><div class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"HEAD"</span>)[<span class="number">0</span>].appendChild(eleScript);</div></pre></td></tr></table></figure>
<p>当GET请求从 <a href="http://example2.com/getinfo.php">http://example2.com/getinfo.php</a> 返回时，可以返回一段JavaScript代码，这段代码会自动执行，可以用来负责调用 <a href="http://example1.com/index.php">http://example1.com/index.php</a> 页面中的一个callback函数。</p>
<p>JSONP的优点是：它不像XMLHttpRequest对象实现的Ajax请求那样受到同源策略的限制；它的兼容性更好，在更加古老的浏览器中都可以运行，不需要XMLHttpRequest或ActiveX的支持；并且在请求完毕后可以通过调用callback的方式回传结果。</p>
<p>JSONP的缺点则是：它只支持GET请求而不支持POST等其它类型的HTTP请求；它只支持跨域HTTP请求这种情况，不能解决不同域的两个页面之间如何进行JavaScript调用的问题。</p>
<h3 id="ajax是什么？"><a href="#ajax是什么？" class="headerlink" title="ajax是什么？"></a>ajax是什么？</h3><p>Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。<br>　XMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。</p>
<h3 id="误区是怎么产生的？"><a href="#误区是怎么产生的？" class="headerlink" title="误区是怎么产生的？"></a>误区是怎么产生的？</h3><p>这个很大程度上要归功于jquery的封装，由于jquery在api上，对json和jsonp都属于ajax模块，导致很多人误以为jsonp是ajax一种。</p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; ajax和jsonp区别 ：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;    jquery的封装影响了很多人的误解，所以有必要对ajax和jsonp的本质区别讲解，&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://geeksblog.cc/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="http" scheme="http://geeksblog.cc/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Ajax简单教程</title>
    <link href="http://geeksblog.cc/ajax-study.html"/>
    <id>http://geeksblog.cc/ajax-study.html</id>
    <published>2016-07-06T12:53:11.000Z</published>
    <updated>2016-11-27T16:16:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> ajax简单教程：</strong> <Excerpt in index | 首页摘要><br>    ajax常用的方法，一些容易出错的地方<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h3 id="ajax原理"><a href="#ajax原理" class="headerlink" title="ajax原理"></a>ajax原理</h3><p>Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。<br>XMLHttpRequest是ajax的核心机制，它是在IE5中首先引入的，是一种支持异步请求的技术。简单的说，也就是javascript可以及时向服务器提出请求和处理响应，而不阻塞用户。达到无刷新的效果。<br>所以我们先从XMLHttpRequest讲起，来看看它的工作原理。首先，我们先来看看XMLHttpRequest这个对象的属性。<br>它的属性有：</p>
<table>
<thead>
<tr>
<th style="text-align:left">onreadystatechange</th>
<th style="text-align:left">responseText</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">每次状态改变所触发事件的事件处理程序</td>
<td style="text-align:left">从服务器进程返回数据的字符串形式</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">responseXML</th>
<th style="text-align:left">status</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">从服务器进程返回的DOM兼容的文档数据对象</td>
<td style="text-align:left">从服务器返回的数字代码，比如常见的404</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">status Text</th>
<th style="text-align:left">readyState</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">伴随状态码的字符串信息</td>
<td style="text-align:left">对象状态值</td>
</tr>
</tbody>
</table>
<p>readyState 对象状态值</p>
<ul>
<li>0 (未初始化) 对象已建立，但是尚未初始化（尚未调用open方法）</li>
<li>1 (初始化) 对象已建立，尚未调用send方法</li>
<li>2 (发送数据) send方法已调用，但是当前的状态及http头未知</li>
<li>3 (数据传送中) 已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误，</li>
<li>4 (完成) 数据接收完毕,此时可以通过通过responseXml和responseText获取完整的回应数据</li>
</ul>
<h3 id="ajax的使用"><a href="#ajax的使用" class="headerlink" title="ajax的使用"></a>ajax的使用</h3><ol>
<li>原生的ajax</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateXmlHttp</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//非IE浏览器创建XmlHttpRequest对象</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XmlHttpRequest) &#123;</div><div class="line">        xmlhttp = <span class="keyword">new</span> XmlHttpRequest();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//IE浏览器创建XmlHttpRequest对象</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (e) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"msxml2.XMLHTTP"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span> (ex) &#123; &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ustbwuyi</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> data = <span class="built_in">document</span>.getElementById(<span class="string">"username"</span>).value;</div><div class="line">    CreateXmlHttp();</div><div class="line">    <span class="keyword">if</span> (!xmlhttp) &#123;</div><div class="line">        alert(<span class="string">"创建xmlhttp对象异常！"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    xmlhttp.open(<span class="string">"POST"</span>, url, <span class="literal">false</span>);</div><div class="line">    xmlhttp.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (xmlhttp.readyState == <span class="number">4</span>) &#123;</div><div class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"user1"</span>).innerHTML = <span class="string">"数据正在加载..."</span>;</div><div class="line">            <span class="keyword">if</span> (xmlhttp.status == <span class="number">200</span>) &#123;</div><div class="line">                <span class="built_in">document</span>.write(xmlhttp.responseText);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    xmlhttp.send();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>jquery调用ajax</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    type: <span class="string">"get"</span>,</div><div class="line">    url: <span class="string">"http://www.cnblogs.com/rss"</span>,</div><div class="line">    beforeSend: <span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest</span>)</span>&#123;</div><div class="line">    <span class="comment">//ShowLoading();</span></div><div class="line">    &#125;,</div><div class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data, textStatus</span>)</span>&#123;</div><div class="line">        $(<span class="string">".ajax.ajaxResult"</span>).html(<span class="string">""</span>);</div><div class="line">        $(<span class="string">"item"</span>,data).each(<span class="function"><span class="keyword">function</span>(<span class="params">i, domEle</span>)</span>&#123;</div><div class="line">        $(<span class="string">".ajax.ajaxResult"</span>).append(<span class="string">"&lt;li&gt;"</span>+$(domEle).children(<span class="string">"title"</span>).text()+<span class="string">"&lt;/li&gt;"</span>);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;,</div><div class="line">    complete: <span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest, textStatus</span>)</span>&#123;</div><div class="line">    <span class="comment">//HideLoading();</span></div><div class="line">    &#125;,</div><div class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//请求出错处理</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; ajax简单教程：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;    ajax常用的方法，一些容易出错的地方&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://geeksblog.cc/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="http" scheme="http://geeksblog.cc/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Mysql优化</title>
    <link href="http://geeksblog.cc/mysql-optimize.html"/>
    <id>http://geeksblog.cc/mysql-optimize.html</id>
    <published>2016-06-10T23:25:13.000Z</published>
    <updated>2016-11-13T05:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> mysql优化：</strong> <Excerpt in index | 首页摘要><br>    mysql的优化措施，从sql优化做起<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h3 id="优化sql的一般步骤"><a href="#优化sql的一般步骤" class="headerlink" title="优化sql的一般步骤"></a>优化sql的一般步骤</h3><ol>
<li>通过show status了解各种sql的执行频率</li>
<li>定位执行效率低的sql语句</li>
<li>通过explain分析效率低的sql</li>
<li>通过show profile分析sql</li>
<li>通过trace分析优化器如何选择执行计划</li>
<li>确定问题，采取措施优化</li>
</ol>
<h3 id="索引优化措施"><a href="#索引优化措施" class="headerlink" title="索引优化措施"></a>索引优化措施</h3><ol>
<li><p>mysql中使用索引的典型场景</p>
<ol>
<li>匹配全值，条件所有列都在索引中而且是等值匹配</li>
<li>匹配值的范围查找，字段必须在索引中</li>
<li>匹配最左前缀，复合索引只会根据最左列进行查找</li>
<li>仅仅对索引进行查询，即查询的所有字段都在索引上</li>
<li>匹配列前缀，比如like ‘ABC%’,如果是like ‘%aaa’就不可以</li>
<li>如果列名是索引，使用column is null会使用索引</li>
</ol>
</li>
<li><p>存在索引但不会使用索引的典型场景</p>
<ol>
<li>以%开头的like查询不能使用b树索引</li>
<li>数据类型出现隐式转换不能使用索引</li>
<li>复合索引，查询条件不符合最左列原则</li>
<li>用or分割的条件，如果前面的条件有索引，而后面的条件没有索引</li>
</ol>
</li>
<li><p>查看索引使用的情况</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">show</span> <span class="keyword">status</span> <span class="keyword">like</span> <span class="string">'Handler_read%'</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>如果Handler_read_rnd_next的值比较高，说明索引不正确或者查询没有使用到索引</p>
<h3 id="简单实用的优化方法"><a href="#简单实用的优化方法" class="headerlink" title="简单实用的优化方法"></a>简单实用的优化方法</h3><ol>
<li>定期检查表和分析表<br>分析表语法：<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">analyze <span class="keyword">table</span> 表名；</div></pre></td></tr></table></figure>
</li>
</ol>
<p>检查表语法：<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">check <span class="keyword">table</span> 表名；</div></pre></td></tr></table></figure></p>
<ol>
<li>定期优化表<ul>
<li>对于字节大小不固定的字段，数据更新和删除会造成磁盘空间不释放，这时候就行优化表，可以整理磁盘碎片，提高性能<br>语法如下：<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">optimize</span> <span class="keyword">table</span> <span class="keyword">user</span>(表名)；</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; mysql优化：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;    mysql的优化措施，从sql优化做起&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://geeksblog.cc/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://geeksblog.cc/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mac下mysql5.6字符集设置</title>
    <link href="http://geeksblog.cc/mac-mysql-unicode.html"/>
    <id>http://geeksblog.cc/mac-mysql-unicode.html</id>
    <published>2016-05-28T15:10:37.000Z</published>
    <updated>2016-11-13T05:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> mac下mysql5.6字符集设置：</strong> <Excerpt in index | 首页摘要><br>    在mac下设置mysql5.6字符集时踩过的坑，百分百保证有效<br><a id="more"></a></p>
<p><The rest of contents | 余下全文></p>
<h3 id="为什么要设置字符集"><a href="#为什么要设置字符集" class="headerlink" title="为什么要设置字符集"></a>为什么要设置字符集</h3><ol>
<li>设置字符集主要是解决乱码问题，由于中文和英文编码不同导致，中文出现乱码，所以一般都设置为utf8格式</li>
<li>不同的字符集和编码占用的字节不同，选择适合的编码会提高数据库性能</li>
</ol>
<h3 id="mac下设置"><a href="#mac下设置" class="headerlink" title="mac下设置"></a>mac下设置</h3><ul>
<li>在/etc/my.cnf文件进行设置，如果没有此文件可以从/usr/local/mysql/support-files/拷贝，命令如下<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cd</span> /usr/local/mysql/support-<span class="keyword">files</span></div><div class="line">sudo <span class="keyword">cp</span> my.<span class="keyword">cnf</span> /etc/my.<span class="keyword">cnf</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>查看文件的读写权限，如果为644（rw- r– r–）则改为(664) (rw- rw- r–)<br>如果改为(666)(rw- rw- rw-)则修改以后配置文件不会生效<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod <span class="number">664</span> /etc/<span class="keyword">my</span>.cnf</div></pre></td></tr></table></figure></p>
<ul>
<li>my.cnf设置如下：<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="section">[client]</span></div><div class="line"><span class="attr">default-character-set</span>=utf8</div><div class="line"><span class="section">[mysqld]</span></div><div class="line"><span class="attr">collation-server</span> = utf8_unicode_ci</div><div class="line"><span class="attr">init-connect</span>=<span class="string">'SET NAMES utf8'</span></div><div class="line"><span class="attr">character-set-server</span> = utf8</div><div class="line"><span class="section">[mysql]</span></div><div class="line"><span class="attr">default-character-set</span>=utf8</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="查看设置是否成功"><a href="#查看设置是否成功" class="headerlink" title="查看设置是否成功"></a>查看设置是否成功</h3><p>在命令行输入mysql，如果提示没有命令的话，在bash或者zsh的文件里修改，我用的是zsh，设置~/.zshrc,<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> MYSQL=<span class="string">"/usr/local/mysql/bin/"</span></div><div class="line"><span class="built_in">export</span> PATH=<span class="string">"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:<span class="variable">$MYSQL</span>"</span></div></pre></td></tr></table></figure></p>
<p>在命令行输入mysql,进入mysql命令行后，输入<code>status;</code>或者<code>show variables like &#39;%char%&#39;;</code><br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">|<span class="string"> character_set_client     </span>|<span class="string"> utf8                                                    </span>|</div><div class="line">|<span class="string"> character_set_connection </span>|<span class="string"> utf8                                                    </span>|</div><div class="line">|<span class="string"> character_set_database   </span>|<span class="string"> utf8                                                    </span>|</div><div class="line">|<span class="string"> character_set_filesystem </span>|<span class="string"> binary                                                  </span>|</div><div class="line">|<span class="string"> character_set_results    </span>|<span class="string"> utf8                                                    </span>|</div><div class="line">|<span class="string"> character_set_server     </span>|<span class="string"> utf8                                                    </span>|</div><div class="line">|<span class="string"> character_set_system     </span>|<span class="string"> utf8                                                    </span>|</div><div class="line">|<span class="string"> character_sets_dir       </span>|<span class="string"> /usr/local/mysql-5.6.30-osx10.11-x86_64/share/charsets/</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>如果文章对你有帮助,请去我的博客留个言吧! <a href="http://geeksblog.cc">我的博客</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; mac下mysql5.6字符集设置：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;    在mac下设置mysql5.6字符集时踩过的坑，百分百保证有效&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://geeksblog.cc/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://geeksblog.cc/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql学习笔记</title>
    <link href="http://geeksblog.cc/mysql-study.html"/>
    <id>http://geeksblog.cc/mysql-study.html</id>
    <published>2016-05-28T14:24:56.000Z</published>
    <updated>2016-11-13T05:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> mysql学习笔记：</strong> <Excerpt in index | 首页摘要><br>    mysql学习，基础的增删改查，数据库优化，索引，分片，集群搭建等等。<br><a id="more"></a></p>
<The rest of contents | 余下全文\>

<h3 id="mysql的特点"><a href="#mysql的特点" class="headerlink" title="mysql的特点"></a>mysql的特点</h3><ol>
<li>关系型数据库，免费使用，</li>
<li>插入式存储引擎，</li>
<li>性能高，</li>
</ol>
<h3 id="基础的增删改查"><a href="#基础的增删改查" class="headerlink" title="基础的增删改查"></a>基础的增删改查</h3><ol>
<li><p>ddl语句，数据定义语句</p>
 <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">database</span> test1;</div><div class="line"><span class="keyword">drop</span> <span class="keyword">database</span> test1;</div><div class="line"><span class="keyword">use</span> test1;</div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(ename <span class="built_in">varchar</span>(<span class="number">10</span>),hiredate <span class="built_in">date</span>,sal <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>),deptno <span class="built_in">int</span>(<span class="number">2</span>));</div><div class="line"><span class="keyword">drop</span> <span class="keyword">table</span> emp;</div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">modify</span> ename <span class="built_in">varchar</span>(<span class="number">20</span>);</div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">column</span> age <span class="built_in">int</span>(<span class="number">3</span>);</div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> <span class="keyword">column</span> age;</div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">change</span> age age1 <span class="built_in">int</span>(<span class="number">4</span>);</div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> birth <span class="built_in">date</span> <span class="keyword">after</span> ename;</div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">modify</span> age <span class="built_in">int</span>(<span class="number">3</span>) <span class="keyword">first</span>;</div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">rename</span> emp1;</div></pre></td></tr></table></figure>
</li>
<li><p>dml语句，数据操纵语句</p>
 <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(ename,hiredate,sal,deptno) <span class="keyword">values</span>(<span class="string">'zzx1'</span>,<span class="string">'2000-10-11'</span>,<span class="number">2000</span>,<span class="number">1</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span>(<span class="string">'lisa'</span>,<span class="string">'2004-05-09'</span>,<span class="number">3000</span>,<span class="number">2</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">'dept5'</span>),(<span class="number">6</span>,<span class="string">'dept6'</span>);</div><div class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> sal=<span class="number">4000</span> <span class="keyword">where</span> ename=<span class="string">'lisa'</span>;</div><div class="line"><span class="keyword">update</span> emp a,dept b <span class="keyword">set</span> a.sal=a.sal*b.deptno,b.deptname=a.ename <span class="keyword">where</span> a.deptno=b.deptno;</div><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> ename=<span class="string">'dony'</span>;</div><div class="line"><span class="keyword">delete</span> a,b <span class="keyword">from</span> emp a,dept b <span class="keyword">where</span> a.deptno=b.deptno <span class="keyword">and</span> a.deptno=<span class="number">3</span>;</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> ename=<span class="string">'lisa'</span>;</div><div class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> deptno <span class="keyword">from</span> emp;</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal(<span class="keyword">desc</span>);</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">limit</span> <span class="number">5</span>;</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">5</span>;ss</div></pre></td></tr></table></figure>
</li>
<li><p>dcl语句，数据控制语句</p>
</li>
</ol>
<h3 id="sql优化"><a href="#sql优化" class="headerlink" title="sql优化"></a>sql优化</h3><ol>
<li>尽量使用 prepareStatement(java)，利用预处理功能。</li>
<li>在进行多条记录的增加、修改、删除时，建议使用批处理功能，批处理的次数以整<br>个 SQL 语句不超过相应数据库的 SQL 语句大小的限制为准。</li>
<li>建议每条 SQL 语句中 in 中的元素个数在 200 以下，如果个数超过时，应拆分为多<br>条 SQL 语句。禁止使用 xx in(‘’,’’….) or xx in(‘’,’’,’’)。 ★</li>
<li>禁止使用 or 超过 200，如 xx =’123’ or xx=’456’。 ★</li>
<li>尽量不使用外连接。</li>
<li>禁止使用 not in 语句，建议用 not exist。 ★</li>
<li>禁止使用 Union, 如果有业务需要，请拆分为两个查询。 ★</li>
<li>禁止在一条 SQL 语句中使用 3 层以上的嵌套查询，如果有，请考虑使用临时表或<br>中间结果集。</li>
<li>尽量避免在一条 SQL 语句中从&gt;= 4 个表中同时取数， 对于仅是作为过滤条件关联，<br>但不涉及取数的表，不参与表个数计算</li>
<li>查询条件里任何对列的操作都将导致表扫描，所以应尽量将数据库函数、计算表达<br>式写在逻辑操作符右边。</li>
<li>在对 char 类型比较时,建议不要使用 rtrim()函数,应该在程序中将不足的长度补<br>齐。</li>
<li>用多表连接代替 EXISTS 子句。</li>
<li>如果有多表连接时， 应该有主从之分， 并尽量从一个表取数， 如 select a.col1, a.col2<br>from a join b on a.col3=b.col4 where b.col5 = ‘a’。</li>
<li>在使用 Like 时，建议 Like 的一边是字符串，表列在一边出现。</li>
<li>不允许将 where 子句的条件放到 having 中。</li>
<li>将更新操作放到事务的最后执行。如</li>
<li>一个事务需更新多个对象时，需保证更新的顺序一致以避免死锁的发生。如总是先<br>更新子表再更新主表，根据存货档案批量更新现存量时，对传入的存货档案 PK 进<br>行排序，再做更新处理等。</li>
<li>禁止随意使用临时表，在临时数据不超过 200 行的情况下禁止使用临时表。</li>
<li>禁止随意使用 distinct，避免造成不必要的排序。</li>
</ol>
<h3 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h3><ol>
<li><p>创建索引，删除索引</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">index</span> cityname <span class="keyword">on</span> city(city(<span class="number">10</span>));</div><div class="line"><span class="keyword">drop</span> <span class="keyword">index</span> cityname <span class="keyword">on</span> city;</div></pre></td></tr></table></figure>
</li>
<li><p>搜索的索引列最好在where的字句或者连接子句</p>
</li>
<li>使用唯一索引</li>
<li>使用短索引，对于较长的字段，使用其前缀做索引</li>
<li>不要过度使用索引，索引引起额外的性能开销和维护</li>
</ol>
<h3 id="高级优化措施"><a href="#高级优化措施" class="headerlink" title="高级优化措施"></a>高级优化措施</h3><h3 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; mysql学习笔记：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;    mysql学习，基础的增删改查，数据库优化，索引，分片，集群搭建等等。&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://geeksblog.cc/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://geeksblog.cc/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs开发规范</title>
    <link href="http://geeksblog.cc/node-develop.html"/>
    <id>http://geeksblog.cc/node-develop.html</id>
    <published>2016-05-23T06:18:02.000Z</published>
    <updated>2016-11-13T05:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> nodejs开发规范：</strong> <Excerpt in index | 首页摘要><br>    nodejs开发中应当遵循的规范，以及最佳实践<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h3 id="node开发需要编程规范吗？"><a href="#node开发需要编程规范吗？" class="headerlink" title="node开发需要编程规范吗？"></a>node开发需要编程规范吗？</h3><ol>
<li>js的灵活性非常大，如果开发人员每个人都按自己的习惯随意编写，js的代码会非常混乱不堪。js程序员需要更强的自律性和规范，才能写出易读性，易维护的代码。</li>
<li>随着前端mvc的崛起，前端的js代码会更加庞大难以管理，如果没有统一的规范，后期维护会比登天还难。</li>
</ol>
<h3 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h3><ol>
<li><p>缩进<br>采用两个空格缩进，在编辑器中设置tab为两个空格</p>
</li>
<li><p>变量声明</p>
</li>
</ol>
<ul>
<li>用var声明变量<br>var assert = require(‘assert’);<br>var fork = require(‘child_process’).fork;<br>var net = require(‘net’);</li>
</ul>
<p>错误实例：<br>var assert = require(‘assert’)<br>, fork = require(‘child_process’).fork<br>, net = require(‘net’)；</p>
<ul>
<li>用字面量声明方式<br>var num = 123;<br>var aaa = {};<br>var arr = [];<br>var isAdmin = true;</li>
<li><p>避免使用：<br>var obj =new Object();<br>var arr = new Array();<br>var test  =new String(“”);<br>var size = new Number();</p>
</li>
<li><p>不要在for循环等循环里声明var变量<br>首先var是函数作用域，在循环声明以后只有等函数声明周期结束这些资源才会释放</p>
</li>
</ul>
<ol>
<li><p>空格<br>在操作符前后需要加上空格,= 、% 、* 、- 、+ 前后都应该加一个空格<br>比如：var foo = ‘bar’ + baz;<br>错误实例：var foo=’bar’+baz;</p>
</li>
<li><p>单双引号的使用<br>在node中尽量使用单引号，<br>var html = ‘<a href="http://cnodejs.org">CNode</a>‘;<br>在json中使用双引号</p>
</li>
<li><p>分号<br>给表达式结尾加分号，尽管js会自动在行尾加上分号，但是会产生一些误解</p>
</li>
</ol>
<h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><p>在编码中，命名是重头戏。好的命名可以使代码赏心悦目，具有良好的维护性。</p>
<ol>
<li>变量命名<br>变量名采用小驼峰命名，单词之间没有任何符号如：<br>var adminUser = {};<br>var callNum = 2134323;</li>
<li><p>方法命名<br>也是采用小驼峰命名，与变量不同的是采用动词或判断行词汇，如：<br>var getUser = function(){};<br>var isAdmin = function(){};<br>var findUser = function(){};</p>
</li>
<li><p>类命名<br>类名采用大驼峰，所有单词首字母大写，如：<br>function User{}</p>
</li>
<li><p>常量命名<br>作为常量，单词所有字母大写，用下划线分割，如：<br>var PINK_COLOR = “PINK”;</p>
</li>
<li><p>文件命名<br>命名文件时，尽量使用下划线分割单词，比如child_process.js和string_decode.js</p>
</li>
<li><p>包名<br>在包名中尽量不要包含js和node的字样，应当适当短并且有意义</p>
</li>
</ol>
<h3 id="其它要点"><a href="#其它要点" class="headerlink" title="其它要点"></a>其它要点</h3><ol>
<li><p>作用域<br>慎用with和eval（），容易引起作用域混乱</p>
</li>
<li><p>比较操作<br>尽量使用===代替==,否则会遇到下面的情况，’0’==0;//true;<br>‘’==0;//true;<br>‘0’===’’//false;</p>
</li>
<li><p>严格模式<br>在node后台中尽量全使用严格模式<br>‘use strict’;</p>
</li>
<li><p>对象和数组遍历<br>数组遍历使用普通for循环，避免使用for in对数组遍历，<br>对象的遍历使用for in</p>
</li>
</ol>
<h3 id="项目中实践"><a href="#项目中实践" class="headerlink" title="项目中实践"></a>项目中实践</h3><ol>
<li><p>sublime和webstorm都有JSLint,JSHint这样的代码质量工具，在配置文件中制定好模板规范即可</p>
</li>
<li><p>在版本控制工具中设置hook，在precommit的脚本中设置，如果代码不符合标准，就无法提交</p>
</li>
</ol>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol>
<li>深入浅出nodejs</li>
<li>js秘密花园</li>
<li>js高级编程</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; nodejs开发规范：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;    nodejs开发中应当遵循的规范，以及最佳实践&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://geeksblog.cc/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="node" scheme="http://geeksblog.cc/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习笔记</title>
    <link href="http://geeksblog.cc/redis-study.html"/>
    <id>http://geeksblog.cc/redis-study.html</id>
    <published>2016-05-23T00:25:57.000Z</published>
    <updated>2016-11-13T05:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> redis学习笔记：</strong> <Excerpt in index | 首页摘要><br>    redis数据库的基本操作，增删改查<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h3 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h3><p>redis本质上是一个key-value数据库</p>
<ol>
<li>设置：set key value</li>
<li>获取：get key</li>
<li>判断存在：exists key</li>
<li>删除：del key        del  test:fan:age</li>
<li>重命名：rename  oldkey newkey        </li>
<li>数量：dbsize  返回数据</li>
<li>获取所有key（通配符）：<code>Keys test:*:age</code><br><code>Keys test:?:age</code></li>
<li>清空：flushdb    flushall</li>
<li>设置有效时间：expire test:fan:age 30</li>
<li>查询有效时间：ttl test:fan:age</li>
</ol>
<h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><ol>
<li>设置：<br> set key value<br> setnx ky value(nx是not exist)<br> mset key1 value1 keyN valueN<br> msetnx key1 value1 keyN valueN</li>
<li>获取：<br> get            不存在返回nil<br> getset        设置key的值，并返回key的旧值，不存在返回nil<br> mget        </li>
<li>自增减：<br> incr key   对key的值进行++操作，返回新的值<br> decr key<br> incrby key integer        对key加上一个数值<br> decrby key integer</li>
<li>截取：<br> substr key indexStart indexEnd             下标从0开始</li>
<li>追加：<br> append key value</li>
</ol>
<h3 id="list类型"><a href="#list类型" class="headerlink" title="list类型"></a>list类型</h3><p>redis的list其实就是一个每个元素都是string 的双向链表，所以push和pop的时间复杂度都是O（1）</p>
<ol>
<li>添加<br> lpush key string         在头部添加<br> rpush key string        在尾部添加</li>
<li>修改<br> lset key index value  修改指定下标的key的值</li>
<li>删除<br> lpop key     从头部返回删除<br> rpop key  从尾部<br> lrem key count value  删除count个相同的value，count为0删除全部<br> blpop key …keyN timeout<br> brpop 从尾部删除</li>
<li>获取<br> lrange key indexStart indexEnd</li>
<li>数量<br> llen key        返回key对应的list长度</li>
<li>截取<br> ltrim key start end</li>
<li>转移<br> rpoplpush key1 key2    从key1尾部移到key2头部</li>
</ol>
<h3 id="set集合"><a href="#set集合" class="headerlink" title="set集合"></a>set集合</h3><p>redis的set就是String的无序集合，通过hashtable实现</p>
<ol>
<li>添加<br> sadd key member</li>
<li>删除<br> srem key member        移除指定的元素<br> spop key                     删除并返回一个随机的</li>
<li>获取<br> smembers key            返回所有<br> srandmember            随机取一个不删除</li>
<li>判断存在<br> sismember key member</li>
<li>数量<br> scard key                     返回元素个数</li>
<li>转移<br> smove srckey dstkey member</li>
<li>取交集<br> sinter key1 key2 keyN<br> sinterstore dstkey key1 keyN        将交集存在dstkey</li>
<li>取并集<br> sunion key1 key2 keyN<br> sunionstore dstkey key1 keyN    将并集存在dstkey</li>
<li>取差集<br> sdiff key1 key2 keyN<br> sdiffstore dstkey key1 keyN        将差集存在dstkey</li>
</ol>
<h3 id="有序set类型"><a href="#有序set类型" class="headerlink" title="有序set类型"></a>有序set类型</h3><p>和set一样，不同的是每个元素关联一个double类型的score，根据score排序，sorted set的实现由skip list和hashtable</p>
<ol>
<li>添加<br> zadd key score member</li>
<li>删除<br> zrem key member<br> zremrangebyrank key min max<br> zremrangebyscore key min max     删除集合score在给定区间的元素</li>
<li>获取<br> zrange key start end<br> zrevrange    key start end            按score的逆序<br> zrangebyscore key min max        </li>
<li>判断存在<br> zrank key member        返回下标<br> zrerank key member        返回逆序的下标</li>
<li>数量<br> zcard key                        总数<br> zcount key min max         区间的数量</li>
<li>修改<br> zincrby key incr member    增加member的score值并排序</li>
</ol>
<h3 id="hash类型"><a href="#hash类型" class="headerlink" title="hash类型"></a>hash类型</h3><p>redis的hash是一个string类型的field和value的映射表，hash特别适合存储对象，</p>
<ol>
<li>设置：<br> hset key field value<br> hmset key field1 value1 field2 value2</li>
<li>获取：<br> hget key field<br> hmget key field1 field2</li>
<li>判断存在<br> hexists key field</li>
<li>删除<br> hdel key field</li>
<li>查找<br> hkeys key            返回所有 field<br> hvals key            返回所有的value<br> hgetall key        返回所有field和value</li>
<li>数量<br> hlen key</li>
<li>值加减<br> hincrby key field integer    将指定的hash field加上定值</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; redis学习笔记：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;    redis数据库的基本操作，增删改查&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://geeksblog.cc/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="redis" scheme="http://geeksblog.cc/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Git比svn的优势</title>
    <link href="http://geeksblog.cc/git-svn.html"/>
    <id>http://geeksblog.cc/git-svn.html</id>
    <published>2016-05-22T03:13:00.000Z</published>
    <updated>2016-11-13T05:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> git比svn的优势：</strong> <Excerpt in index | 首页摘要><br>    主要介绍svn和git在使用的时候一些区别<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h3 id="合并操作时对提交过程的保留"><a href="#合并操作时对提交过程的保留" class="headerlink" title="合并操作时对提交过程的保留"></a>合并操作时对提交过程的保留</h3><ul>
<li>git:合并操作保留原有的提交过程</li>
<li>svn:多个提交合并为一个提交</li>
<li>不用因为合并操作而导致追踪的困难</li>
</ul>
<h3 id="修正提交"><a href="#修正提交" class="headerlink" title="修正提交"></a>修正提交</h3><ul>
<li>git：可以修正提交。<br>使用功能分支工作流，在自己的分支可以方便修正提交而不会影响大家。</li>
<li>svn：一旦提交就到服务器上，实际使用中就是不能修改<br>（svn可以在服务器上修改，因为过程复杂需要权限实际上从不会这样做）</li>
</ul>
<h3 id="本地分支"><a href="#本地分支" class="headerlink" title="本地分支"></a>本地分支</h3><ul>
<li>git可以方便的创建本地分支,创建时间极短,分支可以是本地的,不会存在svn中目录权限的问题</li>
</ul>
<h3 id="强大的合并能力"><a href="#强大的合并能力" class="headerlink" title="强大的合并能力"></a>强大的合并能力</h3><ul>
<li><p>git：重命名（无论文件还有目录）提交 可以合并上 文件重命名前的这些文件的提交</p>
</li>
<li><p>svn：重命名（无论文件还有目录）提交后，你本地/或是分支上 有文件重命名前的这些文件的修改或提交，在做合并操作时,你会碰上传说中难搞的<strong><em>树冲突</em></strong>！</p>
</li>
<li><p>这就导致在调整目录名称和类名调整的时候比较繁琐,需要告诉大家,我修改完以后你再修改</p>
</li>
</ul>
<h3 id="tag的支持"><a href="#tag的支持" class="headerlink" title="tag的支持"></a>tag的支持</h3><ul>
<li>svn在模型上是没有分支和tag的。tag是通过目录权限限制（对开发只读）来保证不变。</li>
<li>git模型上一等公民支持tag，保证只读。</li>
</ul>
<h3 id="速度优势"><a href="#速度优势" class="headerlink" title="速度优势"></a>速度优势</h3><ul>
<li>git的提交是个本地提交,相对svn来说如闪电一般</li>
<li>git提供了暂存区,可以方便制定提交内容,而不是全部内容</li>
</ul>
<h3 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h3><ul>
<li>git：本地包含了完整的日志，闪电的速度（并且无需网络)</li>
<li>svn：需要从服务拉取。</li>
<li>一旦用了git后，等待svn日志过程简直让我发狂</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; git比svn的优势：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;    主要介绍svn和git在使用的时候一些区别&lt;br&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://geeksblog.cc/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="others" scheme="http://geeksblog.cc/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>Java和javascript日期详解</title>
    <link href="http://geeksblog.cc/java-date.html"/>
    <id>http://geeksblog.cc/java-date.html</id>
    <published>2016-05-13T13:48:00.000Z</published>
    <updated>2016-11-13T06:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> java，js日期转换：</strong> <Excerpt in index | 首页摘要><br>    java的各种日期转换<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h3 id="日期表示类型"><a href="#日期表示类型" class="headerlink" title="日期表示类型"></a>日期表示类型</h3><ol>
<li><p>获取long类型的日期格式</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">long <span class="built_in">time</span> = <span class="keyword">System</span>.currentTimeMillis();</div><div class="line"><span class="keyword">System</span>.out.printf(<span class="built_in">time</span>+<span class="string">""</span>);</div><div class="line"><span class="built_in">Date</span> <span class="built_in">date</span> =<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="keyword">System</span>.out.println(<span class="built_in">date</span>.getTime());</div></pre></td></tr></table></figure>
</li>
<li><p>获取制定格式的日期</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</div><div class="line"><span class="built_in">Date</span> <span class="built_in">date</span> =<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="keyword">System</span>.out.println(sdf.<span class="keyword">format</span>(<span class="built_in">date</span>) );</div></pre></td></tr></table></figure>
</li>
<li><p>把制定格式的日期转为date或者毫秒值</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</div><div class="line"><span class="built_in">Date</span> <span class="built_in">date</span> = sdf.<span class="built_in">parse</span>(<span class="string">"2016-05-22 10:15:21"</span>);</div><div class="line">long mills = <span class="built_in">date</span>.getTime();</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>说明:System.currentTimeMillis()并不能精确到1ms的级别,它取决于运行的系统,你再windows,mac,linux精确的范围都有差异,对于有高精度时间的要求,不能使用这个</li>
</ul>
<h3 id="日期计算"><a href="#日期计算" class="headerlink" title="日期计算"></a>日期计算</h3><ol>
<li>最方便的方式是将时间转为毫秒值进行计算<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Date</span> from =<span class="literal">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="keyword">Thread</span>.sleep(<span class="number">200</span>);<span class="comment">//线程休眠2ms</span></div><div class="line"><span class="built_in">Date</span> <span class="keyword">to</span> =<span class="literal">new</span> <span class="built_in">Date</span>();</div><div class="line">System.out.println(<span class="keyword">to</span>.getTime()<span class="attr">-from</span>.getTime());</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="高精度时间"><a href="#高精度时间" class="headerlink" title="高精度时间"></a>高精度时间</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> time1 =System.nanoTime();</div><div class="line">System.out.<span class="built_in">printf</span>(time1+<span class="string">""</span>);</div></pre></td></tr></table></figure>
<ul>
<li>说明:System.nanoTime()提高了ns级别的精度,1ms=1000000ns,</li>
</ul>
<h3 id="javascript日期"><a href="#javascript日期" class="headerlink" title="javascript日期"></a>javascript日期</h3><ol>
<li><p>获取时间的毫秒值</p>
</li>
<li><p>格式化时间</p>
</li>
<li><p>获取月份，时间</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; java，js日期转换：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;    java的各种日期转换&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://geeksblog.cc/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="java" scheme="http://geeksblog.cc/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>制定学习目标和计划</title>
    <link href="http://geeksblog.cc/study-goals.html"/>
    <id>http://geeksblog.cc/study-goals.html</id>
    <published>2016-05-06T02:20:45.000Z</published>
    <updated>2016-11-13T06:00:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 制定学习目标和计划：</strong> <Excerpt in index | 首页摘要><br>    近期的学习目标和学习重点,提高自己的能力<br> <a id="more"></a></p>
<The rest of contents | 余下全文>

<h3 id="找到自己的兴趣"><a href="#找到自己的兴趣" class="headerlink" title="找到自己的兴趣"></a>找到自己的兴趣</h3><ul>
<li>自己主动学习一定要基于自己的兴趣,不要看什么框架流行,什么语言火,就去学,学的不温不火,然后放弃.</li>
<li>一定看自己的兴趣,比如你对色彩,对布局,对特效比较痴迷,那你去css3,html5做出特酷的效果,肯定能让你肯定自己,<br>收获知识和自信.</li>
<li>没有兴趣的时候,可以适当的多接触一些东西,在最短的时间多接触一些领域,让自己的心去做选择,</li>
</ul>
<h3 id="制定目标"><a href="#制定目标" class="headerlink" title="制定目标"></a>制定目标</h3><ol>
<li>为什么要制定目标?</li>
</ol>
<ul>
<li>制定目标是对自己学习能力的检验,同时也是提高学习效率的关键,而不是自己没有目的的瞎看,</li>
</ul>
<ol>
<li>如何制定目标?</li>
</ol>
<ul>
<li>结合自身的能力,定制比自己能力稍高的目标,这样自己通过一定程度的努力可以实现目标.这样自己的能力能一次一次提高.</li>
</ul>
<h3 id="及时反馈"><a href="#及时反馈" class="headerlink" title="及时反馈"></a>及时反馈</h3><ul>
<li>古人说的好,吾日三省吾身,对待学习目标也是一样,要时不时的看自己的目标完成的如何,进度如何,是不是需要调整,不能闷着头蛮干,方向错了,再多的努力也是白搭了.</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>我在刚开始学编程的时候,每天都给自己定制了目标,一天完成多少课时,完成多少练习,都是按量完成,在最初的几个月收到了立竿见影的效果,让我也在短短三个月的时间学会了java,所以,目标的制定对于结果的影响是非常大.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 制定学习目标和计划：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;    近期的学习目标和学习重点,提高自己的能力&lt;br&gt;
    
    </summary>
    
      <category term="个人随笔" scheme="http://geeksblog.cc/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="others" scheme="http://geeksblog.cc/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>使用Ghost搭建个人博客</title>
    <link href="http://geeksblog.cc/ghost-blog.html"/>
    <id>http://geeksblog.cc/ghost-blog.html</id>
    <published>2016-05-03T23:59:22.000Z</published>
    <updated>2016-11-13T05:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 使用ghost搭建个人博客：</strong> <Excerpt in index | 首页摘要><br>    使用ghost搭建个人博客<br><a id="more"></a></p>
<The rest of contents | 余下全文>

<h3 id="ghost简介"><a href="#ghost简介" class="headerlink" title="ghost简介"></a>ghost简介</h3><ul>
<li>ghost是轻量级的博客建站工具,使用起来简单,功能强大,适合个人搭建小型网站,个人博客,或者个人展示的网站</li>
<li>ghost基于nodejs,对于熟悉js的前端小伙伴来说,入手起来也是简单不少.</li>
</ul>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol>
<li>安装nodejs</li>
<li>安转git</li>
<li>配置ssh</li>
<li>下载ghost</li>
<li>购买域名</li>
</ol>
<h3 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h3><h3 id="定制个人博客"><a href="#定制个人博客" class="headerlink" title="定制个人博客"></a>定制个人博客</h3><h3 id="享受吧"><a href="#享受吧" class="headerlink" title="享受吧"></a>享受吧</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 使用ghost搭建个人博客：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;    使用ghost搭建个人博客&lt;br&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://geeksblog.cc/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="others" scheme="http://geeksblog.cc/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>排序算法学习</title>
    <link href="http://geeksblog.cc/sort-study.html"/>
    <id>http://geeksblog.cc/sort-study.html</id>
    <published>2016-05-03T14:39:24.000Z</published>
    <updated>2016-11-13T06:00:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 排序算法学习：</strong> <Excerpt in index | 首页摘要><br>    各种排序算法，算法的实现和分析<br> <a id="more"></a></p>
<The rest of contents | 余下全文>

<h2 id="排序算法的分类"><a href="#排序算法的分类" class="headerlink" title="排序算法的分类"></a>排序算法的分类</h2><ol>
<li>排序分内排序和外排序。</li>
<li>内排序:指在排序期间数据对象全部存放在内存的排序。</li>
<li>外排序:指在排序期间全部对象个数太多,不能同时存放在内存,必须根据排序过程的要求,不断在内、外存之间移动的排序。</li>
<li>内排序的方法有许多种,按所用策略不同,可归纳为五类:插入排序、选择排序、交换排序、归并排序、分配排序和计数排序。</li>
<li>插入排序主要包括直接插入排序，折半插入排序和希尔排序两种;</li>
<li>选择排序主要包括直接选择排序和堆排序;</li>
<li>交换排序主要包括冒泡排序和快速排序;</li>
<li>归并排序主要包括二路归并(常用的归并排序)和自然归并。</li>
<li>分配排序主要包括箱排序和基数排序</li>
</ol>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><ul>
<li>冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，是不用交换的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// js代码</div><div class="line">function <span class="built_in">sort</span>(arr) &#123;</div><div class="line"><span class="keyword">if</span> (arr.<span class="built_in">length</span> == <span class="number">0</span>) &#123;</div><div class="line">    <span class="built_in">return</span> [];</div><div class="line">&#125;</div><div class="line"><span class="built_in">var</span> <span class="built_in">length</span> = arr.<span class="built_in">length</span>;</div><div class="line"><span class="keyword">for</span> (<span class="built_in">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">length</span>; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">var</span> j = <span class="number">0</span>; j &lt; <span class="built_in">length</span> - i - <span class="number">1</span>; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</div><div class="line">                <span class="built_in">var</span> temp = arr[j];</div><div class="line">                arr[j] = arr[j + <span class="number">1</span>];</div><div class="line">                arr[j + <span class="number">1</span>] = temp;</div><div class="line">                console.<span class="built_in">log</span>(arr);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><ul>
<li>快速排序是对冒泡排序的一种改进。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列.</li>
<li>时间复杂度：O（n<em>lgn）最坏：O（n^2）空间复杂度：O（n</em>lgn）</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// js递归实现</span></div><div class="line">function <span class="built_in">quickSort</span>(arr) &#123;</div><div class="line">    <span class="keyword">if</span> (arr.length == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> [];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> <span class="keyword">left</span> = [];</div><div class="line">    <span class="keyword">var</span> <span class="keyword">right</span> = [];</div><div class="line">    <span class="keyword">var</span> pivot = arr[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</div><div class="line">            <span class="keyword">left</span>.push(arr[i]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">right</span>.push(arr[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">quickSort</span>(<span class="keyword">left</span>).concat(pivot, <span class="built_in">quickSort</span>(<span class="keyword">right</span>));</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</div><div class="line">    a[i] = <span class="type">Math</span>.floor((<span class="type">Math</span>.random() * <span class="number">100</span>) + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">console.log(a);</div><div class="line">console.log(<span class="built_in">quickSort</span>(a));</div></pre></td></tr></table></figure>
<h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><ul>
<li>直接插入排序(straight insertion sort)的作法是：每次从无序表中取出第一个元素，把它插入到有序表的合适位置，使有序表仍然有序.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> temp, inner;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> outer = <span class="number">1</span>; outer &lt;= arr.length - <span class="number">1</span>; ++outer) &#123;</div><div class="line">        temp = arr[outer];</div><div class="line">        inner = outer;</div><div class="line">        <span class="keyword">while</span> (inner &gt; <span class="number">0</span> &amp;&amp; (arr[inner - <span class="number">1</span>] &gt;= temp)) &#123;</div><div class="line">            arr[inner] = arr[inner - <span class="number">1</span>];</div><div class="line">            --inner;</div><div class="line">        &#125;</div><div class="line">        arr[inner] = temp;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</div><div class="line">    a[i] = <span class="built_in">Math</span>.floor((<span class="built_in">Math</span>.random() * <span class="number">100</span>) + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line"><span class="built_in">console</span>.log(insertionSort(a));</div></pre></td></tr></table></figure>
<h2 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h2><ul>
<li>折半插入排序算法的具体操作为：在将一个新元素插入已排好序的数组的过程中，寻找插入点时，将待插入区域的首元素设置为a[low],末元素设置为 a[high]，则轮比较时将待插入元素与a[m],其中m=(low+high)/2相比较,如果比参考元素小，则选择a[low]到a[m-1]为新 的插入区域(即high=m-1)，否则选择a[m+1]到a[high]为新的插入区域（即low=m+1），如此直至low&lt;=high不成 立，即将此位置之后所有元素后移一位，并将新元素插入a[high+1]</li>
</ul>
<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><ul>
<li>先取一个小于n的整数d1作为第一个增量，把文件的全部记录分成d1个组。所有距离为dl的倍数的记录放在同一个组中。先在各组内进行直接插入 排序；然后，取第二个增量d2&lt;d1重复上述的分组和排序，直至所取的增量dt=1(dt&lt;dt-l&lt;…&lt;d2&lt;d1)， 即所有记录放在同一组中进行直接插入排序为止。</li>
<li>该方法实质上是一种分组插入方法。插入排序（Insertion Sort）的一个重要的特点是，如果原始数据的大部分元素已经排序，那么插入排序的速度很快（因为需要移动的元素很少）。从这个事实我们可以想到，如果原 始数据只有很少元素，那么排序的速度也很快。－－希尔排序就是基于这两点对插入排序作出了改进。</li>
</ul>
<h2 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h2><ul>
<li>直接选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第n个 元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么 交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。时间复杂度是O(n^2)</li>
</ul>
<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><ul>
<li>我们知道堆的结构是节点i的孩子为2<em>i和2</em>i+1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n/2开始和其子节点共3个值选择最大(大顶堆)或者最小(小顶堆),这3个元素之间的选择当然不会破坏稳定性。但当为n /2-1, n/2-2, …1这些个父节点选择元素时，就会破坏稳定性。有可能第n/2个父节点交换把后面一个元素交换过去了，而第n/2-1个父节点把后面一个相同的元素没 有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。</li>
</ul>
<h2 id="二路归并排序"><a href="#二路归并排序" class="headerlink" title="二路归并排序"></a>二路归并排序</h2><ul>
<li>归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素(认为直接有序)或者2个序列(1次比较和交换),然后把各个有序的段序列合并成一个有 序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定 性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结 果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 排序算法学习：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;    各种排序算法，算法的实现和分析&lt;br&gt;
    
    </summary>
    
      <category term="算法" scheme="http://geeksblog.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="others" scheme="http://geeksblog.cc/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>Git学习笔记</title>
    <link href="http://geeksblog.cc/git-config-study.html"/>
    <id>http://geeksblog.cc/git-config-study.html</id>
    <published>2016-05-01T00:24:45.000Z</published>
    <updated>2016-11-13T05:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> git学习笔记：</strong> <Excerpt in index | 首页摘要><br>    git的常用操作，高级技巧都要哦<br><a id="more"></a></p>
<The rest of contents | 余下全文\>

<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><ol>
<li>下载安装包 ￼下载地址￼</li>
<li>安装git</li>
<li>进入命令行,输入git看看是否成功</li>
</ol>
<h3 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h3><ol>
<li>配置全局用户名和密码<br> `git config –global user.name “John Doe”<br> git config –global user.email johndoe@example.com<br> `</li>
<li>配置ssh公钥<br> <code>cd ~/.ssh</code> 然后<code>ls</code><br> 如果没有,直接生成,一路点击enter<br> ```<br> ssh-keygen<br> cat ~/.ssh/id_rsa.pub<br> ```<br> 把公钥配置到github的个人设置</li>
</ol>
<h3 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h3><ol>
<li><p>repository操作</p>
<ul>
<li>检出（clone）仓库代码：<code>git clone repository-url</code> / <code>git clone repository-url local-directoryname</code><ul>
<li>例如，clone jquery 仓库到本地： <code>git clone git://github.com/jquery/jquery.git</code></li>
<li>clone jquery 仓库到本地，并且重命名为 my-jquery ：<code>git clone git://github.com/jquery/jquery.git my-jquery</code></li>
</ul>
</li>
<li>查看远程仓库：<code>git remote -v</code></li>
<li>添加远程仓库：<code>git remote add [name] [repository-url]</code></li>
<li>删除远程仓库：<code>git remote rm [name]</code></li>
<li>修改远程仓库地址：<code>git remote set-url origin new-repository-url</code></li>
<li>拉取远程仓库： <code>git pull [remoteName] [localBranchName]</code></li>
<li>推送远程仓库： <code>git push [remoteName] [localBranchName]</code></li>
</ul>
</li>
<li><p>提交/拉取/合并/删除</p>
<ul>
<li>添加文件到暂存区（staged）：<code>git add filename</code> / <code>git stage filename</code></li>
<li>将所有修改文件添加到暂存区（staged）： <code>git add --all</code> / <code>git add -A</code></li>
<li>提交修改到暂存区（staged）：<code>git commit -m &#39;commit message&#39;</code> / <code>git commit -a -m &#39;commit message&#39;</code> 注意理解 -a 参数的意义</li>
<li>从Git仓库中删除文件：<code>git rm filename</code></li>
<li>从Git仓库中删除文件，但本地文件保留：<code>git rm --cached filename</code></li>
<li><p>重命名某个文件：<code>git mv filename newfilename</code> 或者直接修改完毕文件名 ，进行<code>git add -A &amp;&amp; git commit -m &#39;commit message&#39;</code> Git会自动识别是重命名了文件</p>
</li>
<li><p>获取远程最新代码到本地：<code>git pull (origin branchname)</code> 可以指定分支名，也可以忽略。pull 命令自动 fetch 远程代码并且 merge，如果有冲突，会显示在状态栏，需要手动处理。更推荐使用：<code>git fetch</code> 之后 <code>git merge --no-ff origin branchname</code> 拉取最新的代码到本地仓库，并手动 merge 。</p>
</li>
</ul>
</li>
<li><p>日志查看</p>
<ul>
<li>查看日志：<code>git log</code></li>
<li>查看日志，并查看每次的修改内容：<code>git log -p</code></li>
<li>查看日志，并查看每次文件的简单修改状态：<code>git log --stat</code></li>
<li>一行显示日志：<code>git log --pretty=oneline</code> / <code>git log --pretty=&#39;format:&quot;%h - %an, %ar : %s&#39;</code></li>
<li>查看日志范围：<ul>
<li>查看最近10条日志：<code>git log -10</code></li>
<li>查看2周前：<code>git log --until=2week</code> 或者指定2周的明确日期，比如：<code>git log --until=2015-08-12</code></li>
<li>查看最近2周内：<code>git log --since=2week</code> 或者指定2周明确日志，比如：<code>git log --since=2015-08-12</code></li>
<li>只查看某个用户的提交：<code>git log --committer=user.name</code> / <code>git log --author=user.name</code></li>
</ul>
</li>
</ul>
</li>
<li><p>取消操作</p>
<ul>
<li>上次提交msg错误/有未提交的文件应该同上一次一起提交，需要重新提交备注：<code>git commit --amend -m &#39;new msg&#39;</code></li>
<li>一次<code>git add -A</code>后，需要将某个文件撤回到工作区，即：某个文件不应该在本次commit中：<code>git reset HEAD filename</code></li>
<li>撤销某些文件的修改内容：<code>git checkout -- filename</code> 注意：一旦执行，所有的改动都没有了，谨慎！谨慎！谨慎！</li>
<li>将工作区内容回退到远端的某个版本：<code>git reset --hard &lt;sha1-of-commit&gt;</code><ul>
<li><code>--hard</code>：reset stage and working directory ,<commitid> 以来所有的变更全部丢弃，并将 HEAD 指向<commitid></li>
<li><code>--soft</code>：nothing changed to stage and working directory ,仅仅将HEAD指向<commitid> ，所有变更显示在”changed to be committed”中</li>
<li><code>--mixed</code>：default,reset stage ,nothing to working directory ，这也就是第二个例子的原因</li>
</ul>
</li>
</ul>
</li>
<li><p>比较差异</p>
<ul>
<li>查看工作区（working directory）和暂存区（staged）之间差异：<code>git diff</code></li>
<li>查看工作区（working directory）与当前仓库版本（repository）HEAD版本差异：<code>git diff HEAD</code></li>
<li>查看暂存区（staged）与当前仓库版本（repository）差异：<code>git diff --cached</code> / <code>git diff --staged</code></li>
</ul>
</li>
<li><p>合并操作</p>
<ul>
<li>解决冲突后/获取远程最新代码后合并代码：<code>git merge branchname</code></li>
<li>保留该存在版本合并log：<code>git merge --no-ff branchname</code> 参数<code>--no-ff</code>防止 fast-forward 的提交</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; git学习笔记：&lt;/strong&gt; &lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;    git的常用操作，高级技巧都要哦&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://geeksblog.cc/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="others" scheme="http://geeksblog.cc/tags/others/"/>
    
  </entry>
  
</feed>
